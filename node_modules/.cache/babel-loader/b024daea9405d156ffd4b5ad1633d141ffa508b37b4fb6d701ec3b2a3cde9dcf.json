{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) return;\n    console.log('🎰 Starting winner animation');\n    setWinnerAnimationActive(true);\n\n    // Stop current autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // Phase 1: Fast spin for 2 seconds\n    console.log('⚡ Phase 1: Fast spinning...');\n    let spinSpeed = 20;\n    const fastSpinInterval = setInterval(() => {\n      if (swiperRef.current) {\n        swiperRef.current.slideNext(spinSpeed);\n      }\n    }, spinSpeed);\n\n    // Phase 2: Start slowing down after 2 seconds\n    setTimeout(() => {\n      clearInterval(fastSpinInterval);\n      console.log('🎯 Phase 2: Slowing down...');\n      let currentSpeed = 100;\n      const slowInterval = setInterval(() => {\n        if (swiperRef.current) {\n          swiperRef.current.slideNext(currentSpeed);\n          currentSpeed += 50; // Get progressively slower\n\n          // Stop when very slow\n          if (currentSpeed > 800) {\n            clearInterval(slowInterval);\n\n            // Phase 3: Find and lock on winner\n            setTimeout(() => {\n              lockOnWinner();\n            }, 300);\n          }\n        }\n      }, currentSpeed);\n    }, 2000);\n  }, [winner, winnerAnimationActive]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    console.log('🔒 Locking on winner...');\n\n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Looking for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon = playerNameEl.textContent) === null || _playerNameEl$textCon === void 0 ? void 0 : _playerNameEl$textCon.trim();\n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n\n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n\n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        }\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n      }\n\n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n\n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n\n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n\n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n\n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n\n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    if (swiperRef.current) {\n      // Re-enable swiper\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n\n      // Reset wrapper\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n\n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    if (winner && !winnerAnimationActive && !winnerLocked) {\n      console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n      animateToWinner();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${winnerAnimationActive && !winnerLocked ? 'winner-approaching' : winnerLocked ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: Math.max(players.length, 6),\n      autoplay: {\n        delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: 300,\n      className: `player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(2)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 19\n            }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"pJmUs8uqplnBmR5Okvg54r82Mrc=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","winnerAnimationActive","setWinnerAnimationActive","winnerLocked","setWinnerLocked","winnerTimeoutRef","handleSwiperInit","swiper","current","animateToWinner","console","log","autoplay","stop","spinSpeed","fastSpinInterval","setInterval","slideNext","setTimeout","clearInterval","currentSpeed","slowInterval","lockOnWinner","slides","winnerSlideIndex","winnerUsername","username","displayName","winnerAddress","address","fullAddress","closestToCenter","Infinity","containerCenter","el","clientWidth","i","length","_playerNameEl$textCon","slide","playerNameEl","querySelector","playerName","textContent","trim","isWinner","includes","slice","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","Math","abs","slideTo","allowSlideNext","allowSlidePrev","wrapper","wrapperEl","style","transition","transform","getComputedStyle","resetToIdle","warn","fallbackIndex","start","clearTimeout","params","delay","disableOnInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","max","pauseOnMouseEnter","speed","allowTouchMove","onSwiper","Array","map","_","setIndex","player","index","toUpperCase","amount","toFixed","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) return;\n    \n    console.log('🎰 Starting winner animation');\n    setWinnerAnimationActive(true);\n    \n    // Stop current autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // Phase 1: Fast spin for 2 seconds\n    console.log('⚡ Phase 1: Fast spinning...');\n    let spinSpeed = 20;\n    const fastSpinInterval = setInterval(() => {\n      if (swiperRef.current) {\n        swiperRef.current.slideNext(spinSpeed);\n      }\n    }, spinSpeed);\n    \n    // Phase 2: Start slowing down after 2 seconds\n    setTimeout(() => {\n      clearInterval(fastSpinInterval);\n      console.log('🎯 Phase 2: Slowing down...');\n      \n      let currentSpeed = 100;\n      const slowInterval = setInterval(() => {\n        if (swiperRef.current) {\n          swiperRef.current.slideNext(currentSpeed);\n          currentSpeed += 50; // Get progressively slower\n          \n          // Stop when very slow\n          if (currentSpeed > 800) {\n            clearInterval(slowInterval);\n            \n            // Phase 3: Find and lock on winner\n            setTimeout(() => {\n              lockOnWinner();\n            }, 300);\n          }\n        }\n      }, currentSpeed);\n    }, 2000);\n    \n  }, [winner, winnerAnimationActive]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    \n    console.log('🔒 Locking on winner...');\n    \n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('🔍 Looking for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n      \n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n        \n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner?.displayName);\n        }\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || \n                   winnerAddress.includes(playerName);\n      }\n      \n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      \n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      \n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        \n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        \n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n      \n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n      \n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n        \n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n          \n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        \n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        \n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n      \n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      \n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        \n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand?.();\n          \n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    \n    if (swiperRef.current) {\n      // Re-enable swiper\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      \n      // Reset wrapper\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n      \n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    \n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    \n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    if (winner && !winnerAnimationActive && !winnerLocked) {\n      console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n      animateToWinner();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    \n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        winnerAnimationActive && !winnerLocked ? 'winner-approaching' : \n        winnerLocked ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={Math.max(players.length, 6)}\n        autoplay={{\n          delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={300}\n        className={`player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Only 2 sets to reduce complexity */}\n        {[...Array(2)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACvE,SAASC,MAAM,EAAEC,WAAW,QAAQ,cAAc;AAClD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,OAAO,YAAY;AACnB,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAC;EACtBC,OAAO;EACPC,MAAM;EACNC,UAAU;EACVC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACgB,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACzE,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMkB,gBAAgB,GAAGpB,MAAM,CAAC,IAAI,CAAC;;EAErC;EACA,MAAMqB,gBAAgB,GAAIC,MAAM,IAAK;IACnCP,SAAS,CAACQ,OAAO,GAAGD,MAAM;EAC5B,CAAC;;EAED;EACA,MAAME,eAAe,GAAGrB,WAAW,CAAC,MAAM;IACxC,IAAI,CAACY,SAAS,CAACQ,OAAO,IAAI,CAACZ,MAAM,IAAIK,qBAAqB,EAAE;IAE5DS,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CT,wBAAwB,CAAC,IAAI,CAAC;;IAE9B;IACA,IAAIF,SAAS,CAACQ,OAAO,CAACI,QAAQ,EAAE;MAC9BZ,SAAS,CAACQ,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC;IACnC;;IAEA;IACAH,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,IAAIG,SAAS,GAAG,EAAE;IAClB,MAAMC,gBAAgB,GAAGC,WAAW,CAAC,MAAM;MACzC,IAAIhB,SAAS,CAACQ,OAAO,EAAE;QACrBR,SAAS,CAACQ,OAAO,CAACS,SAAS,CAACH,SAAS,CAAC;MACxC;IACF,CAAC,EAAEA,SAAS,CAAC;;IAEb;IACAI,UAAU,CAAC,MAAM;MACfC,aAAa,CAACJ,gBAAgB,CAAC;MAC/BL,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAE1C,IAAIS,YAAY,GAAG,GAAG;MACtB,MAAMC,YAAY,GAAGL,WAAW,CAAC,MAAM;QACrC,IAAIhB,SAAS,CAACQ,OAAO,EAAE;UACrBR,SAAS,CAACQ,OAAO,CAACS,SAAS,CAACG,YAAY,CAAC;UACzCA,YAAY,IAAI,EAAE,CAAC,CAAC;;UAEpB;UACA,IAAIA,YAAY,GAAG,GAAG,EAAE;YACtBD,aAAa,CAACE,YAAY,CAAC;;YAE3B;YACAH,UAAU,CAAC,MAAM;cACfI,YAAY,CAAC,CAAC;YAChB,CAAC,EAAE,GAAG,CAAC;UACT;QACF;MACF,CAAC,EAAEF,YAAY,CAAC;IAClB,CAAC,EAAE,IAAI,CAAC;EAEV,CAAC,EAAE,CAACxB,MAAM,EAAEK,qBAAqB,CAAC,CAAC;;EAEnC;EACA,MAAMqB,YAAY,GAAGlC,WAAW,CAAC,MAAM;IACrC,IAAI,CAACY,SAAS,CAACQ,OAAO,IAAI,CAACZ,MAAM,EAAE;IAEnCc,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;IAEtC;IACA,MAAMY,MAAM,GAAGvB,SAAS,CAACQ,OAAO,CAACe,MAAM;IACvC,IAAIC,gBAAgB,GAAG,CAAC,CAAC;;IAEzB;IACA,MAAMC,cAAc,GAAG,CAAA7B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE8B,QAAQ,MAAI9B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE+B,WAAW;IAC9D,MAAMC,aAAa,GAAG,CAAAhC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEiC,OAAO,MAAIjC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEA,MAAM,MAAIA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEkC,WAAW;IAE9EpB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;MAAEc,cAAc;MAAEG;IAAc,CAAC,CAAC;;IAExE;IACA,IAAIG,eAAe,GAAGC,QAAQ;IAC9B,MAAMC,eAAe,GAAGjC,SAAS,CAACQ,OAAO,CAAC0B,EAAE,CAACC,WAAW,GAAG,CAAC;IAE5D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,MAAM,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;MAAA,IAAAE,qBAAA;MACtC,MAAMC,KAAK,GAAGhB,MAAM,CAACa,CAAC,CAAC;MACvB,MAAMI,YAAY,GAAGD,KAAK,CAACE,aAAa,CAAC,cAAc,CAAC;MACxD,MAAMC,UAAU,GAAGF,YAAY,aAAZA,YAAY,wBAAAF,qBAAA,GAAZE,YAAY,CAAEG,WAAW,cAAAL,qBAAA,uBAAzBA,qBAAA,CAA2BM,IAAI,CAAC,CAAC;MAEpDlC,OAAO,CAACC,GAAG,CAAC,qBAAqByB,CAAC,MAAMM,UAAU,GAAG,CAAC;;MAEtD;MACA,IAAIG,QAAQ,GAAG,KAAK;MAEpB,IAAIpB,cAAc,IAAIiB,UAAU,EAAE;QAChC;QACAG,QAAQ,GAAGH,UAAU,KAAKjB,cAAc;;QAExC;QACA,IAAI,CAACoB,QAAQ,EAAE;UACbA,QAAQ,GAAGH,UAAU,MAAM9C,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE+B,WAAW,CAAC;QACjD;MACF;MAEA,IAAI,CAACkB,QAAQ,IAAIjB,aAAa,IAAIc,UAAU,EAAE;QAC5C;QACAG,QAAQ,GAAGH,UAAU,CAACI,QAAQ,CAAClB,aAAa,CAACmB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAC9CnB,aAAa,CAACkB,QAAQ,CAACJ,UAAU,CAAC;MAC/C;;MAEA;MACA,IAAI,CAACG,QAAQ,KAAKpB,cAAc,KAAK,QAAQ,IAAI,CAAA7B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE+B,WAAW,MAAK,QAAQ,CAAC,EAAE;QAClFkB,QAAQ,GAAGH,UAAU,KAAK,QAAQ;MACpC;MAEAhC,OAAO,CAACC,GAAG,CAAC,YAAYyB,CAAC,KAAKM,UAAU,eAAeG,QAAQ,EAAE,CAAC;MAElE,IAAIA,QAAQ,EAAE;QACZ;QACA,MAAMG,SAAS,GAAGT,KAAK,CAACU,qBAAqB,CAAC,CAAC;QAC/C,MAAMC,aAAa,GAAGlD,SAAS,CAACQ,OAAO,CAAC0B,EAAE,CAACe,qBAAqB,CAAC,CAAC;QAClE,MAAME,WAAW,GAAGH,SAAS,CAACI,IAAI,GAAGF,aAAa,CAACE,IAAI,GAAGJ,SAAS,CAACK,KAAK,GAAG,CAAC;QAC7E,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAACL,WAAW,GAAGlB,eAAe,CAAC;QAElEvB,OAAO,CAACC,GAAG,CAAC,qCAAqCyB,CAAC,2BAA2BkB,kBAAkB,EAAE,CAAC;QAElG,IAAIA,kBAAkB,GAAGvB,eAAe,EAAE;UACxCA,eAAe,GAAGuB,kBAAkB;UACpC9B,gBAAgB,GAAGY,CAAC;QACtB;MACF;IACF;IAEA,IAAIZ,gBAAgB,KAAK,CAAC,CAAC,EAAE;MAC3Bd,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEa,gBAAgB,CAAC;;MAE/D;MACAxB,SAAS,CAACQ,OAAO,CAACiD,OAAO,CAACjC,gBAAgB,EAAE,IAAI,EAAE,KAAK,CAAC;;MAExD;MACAN,UAAU,CAAC,MAAM;QACfR,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;;QAE5C;QACA,IAAIX,SAAS,CAACQ,OAAO,EAAE;UACrBR,SAAS,CAACQ,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC;UACjCb,SAAS,CAACQ,OAAO,CAACkD,cAAc,GAAG,KAAK;UACxC1D,SAAS,CAACQ,OAAO,CAACmD,cAAc,GAAG,KAAK;;UAExC;UACA,MAAMC,OAAO,GAAG5D,SAAS,CAACQ,OAAO,CAACqD,SAAS;UAC3C,IAAID,OAAO,EAAE;YACX1C,UAAU,CAAC,MAAM;cACf0C,OAAO,CAACE,KAAK,CAACC,UAAU,GAAG,MAAM;cACjC,MAAMC,SAAS,GAAGC,gBAAgB,CAACL,OAAO,CAAC,CAACI,SAAS;cACrDJ,OAAO,CAACE,KAAK,CAACE,SAAS,GAAGA,SAAS;YACrC,CAAC,EAAE,GAAG,CAAC;UACT;QACF;QAEA5D,eAAe,CAAC,IAAI,CAAC;QACrBN,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAG,CAAC;;QAEhB;QACAO,gBAAgB,CAACG,OAAO,GAAGU,UAAU,CAAC,MAAM;UAC1CgD,WAAW,CAAC,CAAC;QACf,CAAC,EAAE,IAAI,CAAC;MAEV,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM;MACLxD,OAAO,CAACyD,IAAI,CAAC,+BAA+B,CAAC;MAC7CzD,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEY,MAAM,CAACc,MAAM,CAAC;MAClD3B,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEf,MAAM,CAAC;;MAEtC;MACA,IAAIwE,aAAa,GAAG,CAAC,CAAC;MACtB,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,MAAM,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;QACtC,MAAMG,KAAK,GAAGhB,MAAM,CAACa,CAAC,CAAC;QACvB,IAAIG,KAAK,CAACE,aAAa,CAAC,qBAAqB,CAAC,EAAE;UAC9C2B,aAAa,GAAGhC,CAAC;UACjB1B,OAAO,CAACC,GAAG,CAAC,2CAA2CyB,CAAC,EAAE,CAAC;UAC3D;QACF;MACF;MAEA,IAAIgC,aAAa,KAAK,CAAC,CAAC,EAAE;QACxB1D,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEyD,aAAa,CAAC;QACtEpE,SAAS,CAACQ,OAAO,CAACiD,OAAO,CAACW,aAAa,EAAE,IAAI,EAAE,KAAK,CAAC;QAErDlD,UAAU,CAAC,MAAM;UACfd,eAAe,CAAC,IAAI,CAAC;UACrBN,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAG,CAAC;UAEhBO,gBAAgB,CAACG,OAAO,GAAGU,UAAU,CAAC,MAAM;YAC1CgD,WAAW,CAAC,CAAC;UACf,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,MAAM;QACL;QACAxD,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;QAC5DP,eAAe,CAAC,IAAI,CAAC;QACrBN,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAG,CAAC;QAEhBO,gBAAgB,CAACG,OAAO,GAAGU,UAAU,CAAC,MAAM;UAC1CgD,WAAW,CAAC,CAAC;QACf,CAAC,EAAE,IAAI,CAAC;MACV;IACF;EACF,CAAC,EAAE,CAACtE,MAAM,EAAEE,YAAY,CAAC,CAAC;;EAE1B;EACA,MAAMoE,WAAW,GAAG9E,WAAW,CAAC,MAAM;IACpCsB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAEzC,IAAIX,SAAS,CAACQ,OAAO,EAAE;MACrB;MACAR,SAAS,CAACQ,OAAO,CAACkD,cAAc,GAAG,IAAI;MACvC1D,SAAS,CAACQ,OAAO,CAACmD,cAAc,GAAG,IAAI;;MAEvC;MACA,MAAMC,OAAO,GAAG5D,SAAS,CAACQ,OAAO,CAACqD,SAAS;MAC3C,IAAID,OAAO,EAAE;QACXA,OAAO,CAACE,KAAK,CAACC,UAAU,GAAG,EAAE;QAC7BH,OAAO,CAACE,KAAK,CAACE,SAAS,GAAG,EAAE;MAC9B;;MAEA;MACA,IAAI,CAACnE,UAAU,IAAI,CAACD,MAAM,EAAE;QAC1BsB,UAAU,CAAC,MAAM;UACf,IAAIlB,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACI,QAAQ,EAAE;YACnDZ,SAAS,CAACQ,OAAO,CAACI,QAAQ,CAACyD,KAAK,CAAC,CAAC;UACpC;QACF,CAAC,EAAE,GAAG,CAAC;MACT;IACF;IAEAnE,wBAAwB,CAAC,KAAK,CAAC;IAC/BE,eAAe,CAAC,KAAK,CAAC;IAEtB,IAAIC,gBAAgB,CAACG,OAAO,EAAE;MAC5B8D,YAAY,CAACjE,gBAAgB,CAACG,OAAO,CAAC;MACtCH,gBAAgB,CAACG,OAAO,GAAG,IAAI;IACjC;EACF,CAAC,EAAE,CAACX,UAAU,EAAED,MAAM,CAAC,CAAC;;EAExB;EACAV,SAAS,CAAC,MAAM;IACd,IAAIU,MAAM,IAAI,CAACK,qBAAqB,IAAI,CAACE,YAAY,EAAE;MACrDO,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEf,MAAM,CAAC8B,QAAQ,IAAI9B,MAAM,CAAC+B,WAAW,IAAI,QAAQ,CAAC;MACtFlB,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACb,MAAM,EAAEK,qBAAqB,EAAEE,YAAY,EAAEM,eAAe,CAAC,CAAC;;EAElE;EACAvB,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,SAAS,CAACQ,OAAO,EAAE;IAExB,IAAIX,UAAU,IAAI,CAACD,MAAM,IAAI,CAACK,qBAAqB,EAAE;MACnD;MACAD,SAAS,CAACQ,OAAO,CAAC+D,MAAM,CAAC3D,QAAQ,GAAG;QAClC4D,KAAK,EAAE,EAAE;QACTC,oBAAoB,EAAE;MACxB,CAAC;MACDzE,SAAS,CAACQ,OAAO,CAACI,QAAQ,CAACyD,KAAK,CAAC,CAAC;IACpC,CAAC,MAAM,IAAI,CAACxE,UAAU,IAAI,CAACD,MAAM,IAAI,CAACK,qBAAqB,IAAI,CAACE,YAAY,EAAE;MAC5E;MACAH,SAAS,CAACQ,OAAO,CAAC+D,MAAM,CAAC3D,QAAQ,GAAG;QAClC4D,KAAK,EAAE,GAAG;QACVC,oBAAoB,EAAE;MACxB,CAAC;MACDzE,SAAS,CAACQ,OAAO,CAACI,QAAQ,CAACyD,KAAK,CAAC,CAAC;IACpC;EACF,CAAC,EAAE,CAACxE,UAAU,EAAED,MAAM,EAAEK,qBAAqB,EAAEE,YAAY,CAAC,CAAC;;EAE7D;EACAjB,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,MAAM,KAAKK,qBAAqB,IAAIE,YAAY,CAAC,EAAE;MACtDO,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5CuD,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAACtE,MAAM,EAAEK,qBAAqB,EAAEE,YAAY,EAAE+D,WAAW,CAAC,CAAC;;EAE9D;EACAhF,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAImB,gBAAgB,CAACG,OAAO,EAAE;QAC5B8D,YAAY,CAACjE,gBAAgB,CAACG,OAAO,CAAC;MACxC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEf,OAAA;IAAKiF,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBAExClF,OAAA;MAAKiF,SAAS,EAAE,kBACdzE,qBAAqB,IAAI,CAACE,YAAY,GAAG,oBAAoB,GAC7DA,YAAY,GAAG,eAAe,GAAG,EAAE,EAClC;MAAAwE,QAAA,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEZtF,OAAA,CAACJ,MAAM;MACL2F,GAAG,EAAEhF,SAAU;MACfiF,OAAO,EAAE,CAAC1F,QAAQ,CAAE;MACpB2F,YAAY,EAAE,EAAG;MACjBC,aAAa,EAAC,MAAM;MACpBC,cAAc,EAAE,IAAK;MACrBC,IAAI,EAAE,IAAK;MACXC,YAAY,EAAE/B,IAAI,CAACgC,GAAG,CAAC5F,OAAO,CAAC0C,MAAM,EAAE,CAAC,CAAE;MAC1CzB,QAAQ,EAAE;QACR4D,KAAK,EAAE3E,UAAU,IAAI,CAACI,qBAAqB,GAAG,EAAE,GAAG,GAAG;QACtDwE,oBAAoB,EAAE,KAAK;QAC3Be,iBAAiB,EAAE;MACrB,CAAE;MACFC,KAAK,EAAE,GAAI;MACXf,SAAS,EAAE,iBAAiB7E,UAAU,IAAII,qBAAqB,GAAG,UAAU,GAAG,EAAE,EAAG;MACpFyF,cAAc,EAAE,KAAM;MACtBC,QAAQ,EAAErF,gBAAiB;MAAAqE,QAAA,EAG1B,CAAC,GAAGiB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,QAAQ,KAC7BpG,OAAO,CAACkG,GAAG,CAAC,CAACG,MAAM,EAAEC,KAAK,kBACxBxG,OAAA,CAACH,WAAW;QAA8DoF,SAAS,EAAC,cAAc;QAAAC,QAAA,eAChGlF,OAAA;UAAKiF,SAAS,EAAE,eACd9E,MAAM,IAAIoG,MAAM,KACdA,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACiC,OAAO,IACjCmE,MAAM,CAACtE,QAAQ,KAAK9B,MAAM,CAAC8B,QAAQ,IACnCsE,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACA,MAAM,IAChCoG,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACkC,WAAW,IACrCkE,MAAM,CAACtE,QAAQ,KAAK9B,MAAM,CAAC+B,WAAW,CACvC,GAAG,QAAQ,GAAGqE,MAAM,GAAG,QAAQ,GAAG,SAAS,EAC3C;UAAArB,QAAA,gBACDlF,OAAA;YAAKiF,SAAS,EAAC,eAAe;YAAAC,QAAA,EAC3BqB,MAAM,gBACLvG,OAAA;cAAKiF,SAAS,EAAC,uBAAuB;cAAAC,QAAA,EACnCqB,MAAM,CAACtE,QAAQ,GAAGsE,MAAM,CAACtE,QAAQ,CAAC,CAAC,CAAC,CAACwE,WAAW,CAAC,CAAC,GAAG;YAAG;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtD,CAAC,gBAENtF,OAAA;cAAKiF,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAC;YAAC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK;UACrC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACNtF,OAAA;YAAKiF,SAAS,EAAC,aAAa;YAAAC,QAAA,gBAC1BlF,OAAA;cAAKiF,SAAS,EAAC,aAAa;cAAAC,QAAA,EACzBqB,MAAM,GAAIA,MAAM,CAACtE,QAAQ,IAAIsE,MAAM,CAACrE,WAAW,IAAI,QAAQ,GAAI;YAAS;cAAAiD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtE,CAAC,eACNtF,OAAA;cAAKiF,SAAS,EAAC,YAAY;cAAAC,QAAA,EACxBqB,MAAM,GAAG,GAAG,CAACA,MAAM,CAACG,MAAM,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,MAAM,GAAG;YAAU;cAAAxB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5D,CAAC,EACLnF,MAAM,IAAIoG,MAAM,KACfA,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACiC,OAAO,IACjCmE,MAAM,CAACtE,QAAQ,KAAK9B,MAAM,CAAC8B,QAAQ,IACnCsE,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACA,MAAM,IAChCoG,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACkC,WAAW,IACrCkE,MAAM,CAACtE,QAAQ,KAAK9B,MAAM,CAAC+B,WAAW,CACvC,iBACClC,OAAA;cAAKiF,SAAS,EAAC,cAAc;cAAAC,QAAA,GAAC,MACxB,EAAC0B,UAAU,CAACzG,MAAM,CAAC0G,KAAK,IAAI,CAAC,CAAC,CAACF,OAAO,CAAC,CAAC,CAAC,EAAC,MAChD;YAAA;cAAAxB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,EACLnF,MAAM,IAAIoG,MAAM,KACfA,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACiC,OAAO,IACjCmE,MAAM,CAACtE,QAAQ,KAAK9B,MAAM,CAAC8B,QAAQ,IACnCsE,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACA,MAAM,IAChCoG,MAAM,CAACnE,OAAO,KAAKjC,MAAM,CAACkC,WAAW,IACrCkE,MAAM,CAACtE,QAAQ,KAAK9B,MAAM,CAAC+B,WAAW,CACvC,iBACClC,OAAA;YAAKiF,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CACtC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC,GA/CU,GAAGgB,QAAQ,IAAI,CAAAC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEnE,OAAO,KAAI,WAAWoE,KAAK,EAAE,EAAE;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgD3D,CACd,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAChF,EAAA,CArXIL,cAAc;AAAA6G,EAAA,GAAd7G,cAAc;AAuXpB,eAAeA,cAAc;AAAC,IAAA6G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}