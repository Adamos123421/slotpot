{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromNano = exports.toNano = void 0;\nfunction toNano(src) {\n  if (typeof src === 'bigint') {\n    return src * 1000000000n;\n  } else {\n    if (typeof src === 'number') {\n      if (!Number.isFinite(src)) {\n        throw Error('Invalid number');\n      }\n      if (Math.log10(src) <= 6) {\n        src = src.toLocaleString('en', {\n          minimumFractionDigits: 9,\n          useGrouping: false\n        });\n      } else if (src - Math.trunc(src) === 0) {\n        src = src.toLocaleString('en', {\n          maximumFractionDigits: 0,\n          useGrouping: false\n        });\n      } else {\n        throw Error('Not enough precision for a number value. Use string value instead');\n      }\n    }\n    // Check sign\n    let neg = false;\n    while (src.startsWith('-')) {\n      neg = !neg;\n      src = src.slice(1);\n    }\n    // Split string\n    if (src === '.') {\n      throw Error('Invalid number');\n    }\n    let parts = src.split('.');\n    if (parts.length > 2) {\n      throw Error('Invalid number');\n    }\n    // Prepare parts\n    let whole = parts[0];\n    let frac = parts[1];\n    if (!whole) {\n      whole = '0';\n    }\n    if (!frac) {\n      frac = '0';\n    }\n    if (frac.length > 9) {\n      throw Error('Invalid number');\n    }\n    while (frac.length < 9) {\n      frac += '0';\n    }\n    // Convert\n    let r = BigInt(whole) * 1000000000n + BigInt(frac);\n    if (neg) {\n      r = -r;\n    }\n    return r;\n  }\n}\nexports.toNano = toNano;\nfunction fromNano(src) {\n  let v = BigInt(src);\n  let neg = false;\n  if (v < 0) {\n    neg = true;\n    v = -v;\n  }\n  // Convert fraction\n  let frac = v % 1000000000n;\n  let facStr = frac.toString();\n  while (facStr.length < 9) {\n    facStr = '0' + facStr;\n  }\n  facStr = facStr.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  // Convert whole\n  let whole = v / 1000000000n;\n  let wholeStr = whole.toString();\n  // Value\n  let value = `${wholeStr}${facStr === '0' ? '' : `.${facStr}`}`;\n  if (neg) {\n    value = '-' + value;\n  }\n  return value;\n}\nexports.fromNano = fromNano;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromNano","toNano","src","Number","isFinite","Error","Math","log10","toLocaleString","minimumFractionDigits","useGrouping","trunc","maximumFractionDigits","neg","startsWith","slice","parts","split","length","whole","frac","r","BigInt","v","facStr","toString","match","wholeStr"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@ton/core/dist/utils/convert.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromNano = exports.toNano = void 0;\nfunction toNano(src) {\n    if (typeof src === 'bigint') {\n        return src * 1000000000n;\n    }\n    else {\n        if (typeof src === 'number') {\n            if (!Number.isFinite(src)) {\n                throw Error('Invalid number');\n            }\n            if (Math.log10(src) <= 6) {\n                src = src.toLocaleString('en', { minimumFractionDigits: 9, useGrouping: false });\n            }\n            else if (src - Math.trunc(src) === 0) {\n                src = src.toLocaleString('en', { maximumFractionDigits: 0, useGrouping: false });\n            }\n            else {\n                throw Error('Not enough precision for a number value. Use string value instead');\n            }\n        }\n        // Check sign\n        let neg = false;\n        while (src.startsWith('-')) {\n            neg = !neg;\n            src = src.slice(1);\n        }\n        // Split string\n        if (src === '.') {\n            throw Error('Invalid number');\n        }\n        let parts = src.split('.');\n        if (parts.length > 2) {\n            throw Error('Invalid number');\n        }\n        // Prepare parts\n        let whole = parts[0];\n        let frac = parts[1];\n        if (!whole) {\n            whole = '0';\n        }\n        if (!frac) {\n            frac = '0';\n        }\n        if (frac.length > 9) {\n            throw Error('Invalid number');\n        }\n        while (frac.length < 9) {\n            frac += '0';\n        }\n        // Convert\n        let r = BigInt(whole) * 1000000000n + BigInt(frac);\n        if (neg) {\n            r = -r;\n        }\n        return r;\n    }\n}\nexports.toNano = toNano;\nfunction fromNano(src) {\n    let v = BigInt(src);\n    let neg = false;\n    if (v < 0) {\n        neg = true;\n        v = -v;\n    }\n    // Convert fraction\n    let frac = v % 1000000000n;\n    let facStr = frac.toString();\n    while (facStr.length < 9) {\n        facStr = '0' + facStr;\n    }\n    facStr = facStr.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    // Convert whole\n    let whole = v / 1000000000n;\n    let wholeStr = whole.toString();\n    // Value\n    let value = `${wholeStr}${facStr === '0' ? '' : `.${facStr}`}`;\n    if (neg) {\n        value = '-' + value;\n    }\n    return value;\n}\nexports.fromNano = fromNano;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAGF,OAAO,CAACG,MAAM,GAAG,KAAK,CAAC;AAC1C,SAASA,MAAMA,CAACC,GAAG,EAAE;EACjB,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzB,OAAOA,GAAG,GAAG,WAAW;EAC5B,CAAC,MACI;IACD,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MACzB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACF,GAAG,CAAC,EAAE;QACvB,MAAMG,KAAK,CAAC,gBAAgB,CAAC;MACjC;MACA,IAAIC,IAAI,CAACC,KAAK,CAACL,GAAG,CAAC,IAAI,CAAC,EAAE;QACtBA,GAAG,GAAGA,GAAG,CAACM,cAAc,CAAC,IAAI,EAAE;UAAEC,qBAAqB,EAAE,CAAC;UAAEC,WAAW,EAAE;QAAM,CAAC,CAAC;MACpF,CAAC,MACI,IAAIR,GAAG,GAAGI,IAAI,CAACK,KAAK,CAACT,GAAG,CAAC,KAAK,CAAC,EAAE;QAClCA,GAAG,GAAGA,GAAG,CAACM,cAAc,CAAC,IAAI,EAAE;UAAEI,qBAAqB,EAAE,CAAC;UAAEF,WAAW,EAAE;QAAM,CAAC,CAAC;MACpF,CAAC,MACI;QACD,MAAML,KAAK,CAAC,mEAAmE,CAAC;MACpF;IACJ;IACA;IACA,IAAIQ,GAAG,GAAG,KAAK;IACf,OAAOX,GAAG,CAACY,UAAU,CAAC,GAAG,CAAC,EAAE;MACxBD,GAAG,GAAG,CAACA,GAAG;MACVX,GAAG,GAAGA,GAAG,CAACa,KAAK,CAAC,CAAC,CAAC;IACtB;IACA;IACA,IAAIb,GAAG,KAAK,GAAG,EAAE;MACb,MAAMG,KAAK,CAAC,gBAAgB,CAAC;IACjC;IACA,IAAIW,KAAK,GAAGd,GAAG,CAACe,KAAK,CAAC,GAAG,CAAC;IAC1B,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MAClB,MAAMb,KAAK,CAAC,gBAAgB,CAAC;IACjC;IACA;IACA,IAAIc,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC;IACpB,IAAII,IAAI,GAAGJ,KAAK,CAAC,CAAC,CAAC;IACnB,IAAI,CAACG,KAAK,EAAE;MACRA,KAAK,GAAG,GAAG;IACf;IACA,IAAI,CAACC,IAAI,EAAE;MACPA,IAAI,GAAG,GAAG;IACd;IACA,IAAIA,IAAI,CAACF,MAAM,GAAG,CAAC,EAAE;MACjB,MAAMb,KAAK,CAAC,gBAAgB,CAAC;IACjC;IACA,OAAOe,IAAI,CAACF,MAAM,GAAG,CAAC,EAAE;MACpBE,IAAI,IAAI,GAAG;IACf;IACA;IACA,IAAIC,CAAC,GAAGC,MAAM,CAACH,KAAK,CAAC,GAAG,WAAW,GAAGG,MAAM,CAACF,IAAI,CAAC;IAClD,IAAIP,GAAG,EAAE;MACLQ,CAAC,GAAG,CAACA,CAAC;IACV;IACA,OAAOA,CAAC;EACZ;AACJ;AACAvB,OAAO,CAACG,MAAM,GAAGA,MAAM;AACvB,SAASD,QAAQA,CAACE,GAAG,EAAE;EACnB,IAAIqB,CAAC,GAAGD,MAAM,CAACpB,GAAG,CAAC;EACnB,IAAIW,GAAG,GAAG,KAAK;EACf,IAAIU,CAAC,GAAG,CAAC,EAAE;IACPV,GAAG,GAAG,IAAI;IACVU,CAAC,GAAG,CAACA,CAAC;EACV;EACA;EACA,IAAIH,IAAI,GAAGG,CAAC,GAAG,WAAW;EAC1B,IAAIC,MAAM,GAAGJ,IAAI,CAACK,QAAQ,CAAC,CAAC;EAC5B,OAAOD,MAAM,CAACN,MAAM,GAAG,CAAC,EAAE;IACtBM,MAAM,GAAG,GAAG,GAAGA,MAAM;EACzB;EACAA,MAAM,GAAGA,MAAM,CAACE,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;EAChD;EACA,IAAIP,KAAK,GAAGI,CAAC,GAAG,WAAW;EAC3B,IAAII,QAAQ,GAAGR,KAAK,CAACM,QAAQ,CAAC,CAAC;EAC/B;EACA,IAAI1B,KAAK,GAAG,GAAG4B,QAAQ,GAAGH,MAAM,KAAK,GAAG,GAAG,EAAE,GAAG,IAAIA,MAAM,EAAE,EAAE;EAC9D,IAAIX,GAAG,EAAE;IACLd,KAAK,GAAG,GAAG,GAAGA,KAAK;EACvB;EACA,OAAOA,KAAK;AAChB;AACAD,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}