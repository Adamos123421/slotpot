{"ast":null,"code":"import _objectSpread from\"C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{io}from'socket.io-client';class SocketService{constructor(){this.socket=null;this.eventHandlers=new Map();this.isConnected=false;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.gameState={isWaitingForWinner:false,currentRound:null,timeRemaining:null,lastWinner:null,jackpotValue:0,bettors:[]};}connect(){var _this$socket,_this$socket2;// Prevent multiple connections - return if already connected or connecting\nif((_this$socket=this.socket)!==null&&_this$socket!==void 0&&_this$socket.connected||(_this$socket2=this.socket)!==null&&_this$socket2!==void 0&&_this$socket2.connecting){console.log('🔌 Socket already connected/connecting, skipping duplicate connection');return;}const socketUrl=process.env.REACT_APP_SOCKET_URL||'http://localhost:5002';console.log('🔌 Creating new socket connection to:',socketUrl);this.socket=io(socketUrl,{reconnection:true,reconnectionDelay:1000,reconnectionDelayMax:5000,reconnectionAttempts:this.maxReconnectAttempts,transports:['websocket'],withCredentials:true});this.setupEventHandlers();}setupEventHandlers(){if(!this.socket)return;this.socket.on('connect',()=>{console.log('🔌 Connected to socket server');this.isConnected=true;this.reconnectAttempts=0;// Request current game state on connect (with null check)\nif(this.socket&&this.socket.connected){this.socket.emit('getGameState');}});this.socket.on('disconnect',()=>{console.log('🔌 Disconnected from socket server');this.isConnected=false;});this.socket.on('connect_error',error=>{console.log('🚫 Connection error:',error);this.reconnectAttempts++;if(this.reconnectAttempts>=this.maxReconnectAttempts){console.log('❌ Max reconnection attempts reached');this.socket.disconnect();}});// Game specific events\nthis.socket.on('gameState',data=>{console.log('🎮 Received game state:',data);this.gameState=_objectSpread(_objectSpread({},this.gameState),data);// If joining when timer is 0 and no winner yet, show waiting state\nif(data.timeRemaining===0&&!data.lastWinner){console.log('⏰ User joined during winner selection - showing waiting state');this.gameState.isWaitingForWinner=true;this.emit('waitingForWinner',true);}this.emit('gameState',this.gameState);});this.socket.on('winner',data=>{console.log('🏆 Winner announced:',data);this.gameState.lastWinner=data;this.gameState.isWaitingForWinner=false;this.emit('winner',data);});// Handle direct winner announcements (reliable delivery)\nthis.socket.on('winnerAnnouncement',data=>{console.log('🎯 Direct winner announcement received:',data);this.gameState.lastWinner=data;this.gameState.isWaitingForWinner=false;this.gameState.winnerAnnouncement=data;this.emit('winnerAnnouncement',data);});this.socket.on('newBet',data=>{console.log('💰 New bet received:',data);// Update local game state with new bet\nif(!this.gameState.bettors.find(b=>b.address===data.address)){this.gameState.bettors.push(data);}this.gameState.jackpotValue+=parseFloat(data.amount)-0.5;// Account for fee\nthis.emit('newBet',data);});this.socket.on('timer',data=>{console.log('⏰ Timer update:',data);this.gameState.timeRemaining=data.timeRemaining;this.gameState.currentRound=data.roundNumber;// If timer hits 0 and we weren't already waiting, set waiting state\nif(data.timeRemaining===0&&!this.gameState.isWaitingForWinner){console.log('⏰ Timer ended - setting waiting for winner state');this.gameState.isWaitingForWinner=true;this.emit('waitingForWinner',true);}this.emit('timer',data);});// Handle round reset\nthis.socket.on('roundReset',()=>{console.log('🔄 Round reset');this.gameState=_objectSpread(_objectSpread({},this.gameState),{},{isWaitingForWinner:false,bettors:[],jackpotValue:0,lastWinner:null});this.emit('roundReset');});// Handle new round start\nthis.socket.on('newRound',data=>{console.log('🎰 New round started:',data);this.gameState=_objectSpread(_objectSpread({},this.gameState),{},{isWaitingForWinner:false,isPostWinnerLoading:false,bettors:[],jackpotValue:0,lastWinner:null,currentRound:data.roundNumber,timeRemaining:data.timeRemaining});this.emit('newRound',data);this.emit('gameState',this.gameState);});// Handle comprehensive game data updates\nthis.socket.on('fullGameUpdate',data=>{console.log('🎮 Full game data update:',data);this.gameState=_objectSpread(_objectSpread({},this.gameState),data);this.emit('fullGameUpdate',data);this.emit('gameState',this.gameState);});// Handle legacy bettors update for backwards compatibility\nthis.socket.on('bettorsUpdate',data=>{console.log('💰 Bettors update:',data);this.gameState.bettors=data.bettors||[];this.gameState.jackpotValue=data.totalPot||0;this.gameState.betCount=data.betCount||0;this.emit('bettorsUpdate',data);this.emit('gameState',this.gameState);});}on(event,callback){if(!this.eventHandlers.has(event)){this.eventHandlers.set(event,new Set());}const handlers=this.eventHandlers.get(event);// Prevent duplicate handlers\nif(handlers.has(callback)){console.warn(\"\\uD83D\\uDD0C Duplicate listener for '\".concat(event,\"' event prevented\"));return;}handlers.add(callback);console.log(\"\\uD83D\\uDD0C Added listener for '\".concat(event,\"' event (\").concat(handlers.size,\" total)\"));}off(event,callback){const handlers=this.eventHandlers.get(event);if(handlers){const wasDeleted=handlers.delete(callback);if(wasDeleted){console.log(\"\\uD83D\\uDD0C Removed listener for '\".concat(event,\"' event (\").concat(handlers.size,\" remaining)\"));}}}emit(event,data){const handlers=this.eventHandlers.get(event);if(handlers){handlers.forEach(handler=>handler(data));}}placeBet(betData){var _this$socket3;if(!((_this$socket3=this.socket)!==null&&_this$socket3!==void 0&&_this$socket3.connected)){console.error('Cannot place bet: Socket not connected');return;}this.socket.emit('placeBet',betData);}disconnect(){if(this.socket){this.socket.disconnect();this.socket=null;this.isConnected=false;}}reconnect(){this.disconnect();this.connect();}getGameState(){return this.gameState;}isWaitingForWinner(){return this.gameState.isWaitingForWinner;}isPostWinnerLoading(){return this.gameState.isPostWinnerLoading||false;}getCurrentRound(){return this.gameState.currentRound;}}// Create singleton instance\nconst socketService=new SocketService();export default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","eventHandlers","Map","isConnected","reconnectAttempts","maxReconnectAttempts","gameState","isWaitingForWinner","currentRound","timeRemaining","lastWinner","jackpotValue","bettors","connect","_this$socket","_this$socket2","connected","connecting","console","log","socketUrl","process","env","REACT_APP_SOCKET_URL","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","transports","withCredentials","setupEventHandlers","on","emit","error","disconnect","data","_objectSpread","winnerAnnouncement","find","b","address","push","parseFloat","amount","roundNumber","isPostWinnerLoading","totalPot","betCount","event","callback","has","set","Set","handlers","get","warn","concat","add","size","off","wasDeleted","delete","forEach","handler","placeBet","betData","_this$socket3","reconnect","getGameState","getCurrentRound","socketService"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.eventHandlers = new Map();\r\n    this.isConnected = false;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.gameState = {\r\n      isWaitingForWinner: false,\r\n      currentRound: null,\r\n      timeRemaining: null,\r\n      lastWinner: null,\r\n      jackpotValue: 0,\r\n      bettors: []\r\n    };\r\n  }\r\n\r\n  connect() {\r\n    // Prevent multiple connections - return if already connected or connecting\r\n    if (this.socket?.connected || this.socket?.connecting) {\r\n      console.log('🔌 Socket already connected/connecting, skipping duplicate connection');\r\n      return;\r\n    }\r\n\r\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5002';\r\n    \r\n    console.log('🔌 Creating new socket connection to:', socketUrl);\r\n    this.socket = io(socketUrl, {\r\n      reconnection: true,\r\n      reconnectionDelay: 1000,\r\n      reconnectionDelayMax: 5000,\r\n      reconnectionAttempts: this.maxReconnectAttempts,\r\n      transports: ['websocket'],\r\n      withCredentials: true\r\n    });\r\n\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  setupEventHandlers() {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('🔌 Connected to socket server');\r\n      this.isConnected = true;\r\n      this.reconnectAttempts = 0;\r\n      \r\n      // Request current game state on connect (with null check)\r\n      if (this.socket && this.socket.connected) {\r\n        this.socket.emit('getGameState');\r\n      }\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('🔌 Disconnected from socket server');\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.log('🚫 Connection error:', error);\r\n      this.reconnectAttempts++;\r\n      \r\n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n        console.log('❌ Max reconnection attempts reached');\r\n        this.socket.disconnect();\r\n      }\r\n    });\r\n\r\n    // Game specific events\r\n    this.socket.on('gameState', (data) => {\r\n      console.log('🎮 Received game state:', data);\r\n      \r\n      this.gameState = {\r\n        ...this.gameState,\r\n        ...data\r\n      };\r\n      \r\n      // If joining when timer is 0 and no winner yet, show waiting state\r\n      if (data.timeRemaining === 0 && !data.lastWinner) {\r\n        console.log('⏰ User joined during winner selection - showing waiting state');\r\n        this.gameState.isWaitingForWinner = true;\r\n        this.emit('waitingForWinner', true);\r\n      }\r\n      \r\n      this.emit('gameState', this.gameState);\r\n    });\r\n\r\n    this.socket.on('winner', (data) => {\r\n      console.log('🏆 Winner announced:', data);\r\n      this.gameState.lastWinner = data;\r\n      this.gameState.isWaitingForWinner = false;\r\n      this.emit('winner', data);\r\n    });\r\n\r\n    // Handle direct winner announcements (reliable delivery)\r\n    this.socket.on('winnerAnnouncement', (data) => {\r\n      console.log('🎯 Direct winner announcement received:', data);\r\n      this.gameState.lastWinner = data;\r\n      this.gameState.isWaitingForWinner = false;\r\n      this.gameState.winnerAnnouncement = data;\r\n      this.emit('winnerAnnouncement', data);\r\n    });\r\n\r\n    this.socket.on('newBet', (data) => {\r\n      console.log('💰 New bet received:', data);\r\n      // Update local game state with new bet\r\n      if (!this.gameState.bettors.find(b => b.address === data.address)) {\r\n        this.gameState.bettors.push(data);\r\n      }\r\n      this.gameState.jackpotValue += (parseFloat(data.amount) - 0.5); // Account for fee\r\n      this.emit('newBet', data);\r\n    });\r\n\r\n    this.socket.on('timer', (data) => {\r\n      console.log('⏰ Timer update:', data);\r\n      this.gameState.timeRemaining = data.timeRemaining;\r\n      this.gameState.currentRound = data.roundNumber;\r\n      \r\n      // If timer hits 0 and we weren't already waiting, set waiting state\r\n      if (data.timeRemaining === 0 && !this.gameState.isWaitingForWinner) {\r\n        console.log('⏰ Timer ended - setting waiting for winner state');\r\n        this.gameState.isWaitingForWinner = true;\r\n        this.emit('waitingForWinner', true);\r\n      }\r\n      \r\n      this.emit('timer', data);\r\n    });\r\n\r\n    // Handle round reset\r\n    this.socket.on('roundReset', () => {\r\n      console.log('🔄 Round reset');\r\n      this.gameState = {\r\n        ...this.gameState,\r\n        isWaitingForWinner: false,\r\n        bettors: [],\r\n        jackpotValue: 0,\r\n        lastWinner: null\r\n      };\r\n      this.emit('roundReset');\r\n    });\r\n\r\n    // Handle new round start\r\n    this.socket.on('newRound', (data) => {\r\n      console.log('🎰 New round started:', data);\r\n      this.gameState = {\r\n        ...this.gameState,\r\n        isWaitingForWinner: false,\r\n        isPostWinnerLoading: false,\r\n        bettors: [],\r\n        jackpotValue: 0,\r\n        lastWinner: null,\r\n        currentRound: data.roundNumber,\r\n        timeRemaining: data.timeRemaining\r\n      };\r\n      this.emit('newRound', data);\r\n      this.emit('gameState', this.gameState);\r\n    });\r\n\r\n    // Handle comprehensive game data updates\r\n    this.socket.on('fullGameUpdate', (data) => {\r\n      console.log('🎮 Full game data update:', data);\r\n      this.gameState = {\r\n        ...this.gameState,\r\n        ...data\r\n      };\r\n      this.emit('fullGameUpdate', data);\r\n      this.emit('gameState', this.gameState);\r\n    });\r\n\r\n    // Handle legacy bettors update for backwards compatibility\r\n    this.socket.on('bettorsUpdate', (data) => {\r\n      console.log('💰 Bettors update:', data);\r\n      this.gameState.bettors = data.bettors || [];\r\n      this.gameState.jackpotValue = data.totalPot || 0;\r\n      this.gameState.betCount = data.betCount || 0;\r\n      this.emit('bettorsUpdate', data);\r\n      this.emit('gameState', this.gameState);\r\n    });\r\n  }\r\n\r\n  on(event, callback) {\r\n    if (!this.eventHandlers.has(event)) {\r\n      this.eventHandlers.set(event, new Set());\r\n    }\r\n    \r\n    const handlers = this.eventHandlers.get(event);\r\n    \r\n    // Prevent duplicate handlers\r\n    if (handlers.has(callback)) {\r\n      console.warn(`🔌 Duplicate listener for '${event}' event prevented`);\r\n      return;\r\n    }\r\n    \r\n    handlers.add(callback);\r\n    console.log(`🔌 Added listener for '${event}' event (${handlers.size} total)`);\r\n  }\r\n\r\n  off(event, callback) {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      const wasDeleted = handlers.delete(callback);\r\n      if (wasDeleted) {\r\n        console.log(`🔌 Removed listener for '${event}' event (${handlers.size} remaining)`);\r\n      }\r\n    }\r\n  }\r\n\r\n  emit(event, data) {\r\n    const handlers = this.eventHandlers.get(event);\r\n    if (handlers) {\r\n      handlers.forEach(handler => handler(data));\r\n    }\r\n  }\r\n\r\n  placeBet(betData) {\r\n    if (!this.socket?.connected) {\r\n      console.error('Cannot place bet: Socket not connected');\r\n      return;\r\n    }\r\n    this.socket.emit('placeBet', betData);\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  reconnect() {\r\n    this.disconnect();\r\n    this.connect();\r\n  }\r\n\r\n  getGameState() {\r\n    return this.gameState;\r\n  }\r\n\r\n  isWaitingForWinner() {\r\n    return this.gameState.isWaitingForWinner;\r\n  }\r\n\r\n  isPostWinnerLoading() {\r\n    return this.gameState.isPostWinnerLoading || false;\r\n  }\r\n\r\n  getCurrentRound() {\r\n    return this.gameState.currentRound;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst socketService = new SocketService();\r\nexport default socketService; "],"mappings":"iIAAA,OAASA,EAAE,KAAQ,kBAAkB,CAErC,KAAM,CAAAC,aAAc,CAClBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,MAAM,CAAG,IAAI,CAClB,IAAI,CAACC,aAAa,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAC9B,IAAI,CAACC,WAAW,CAAG,KAAK,CACxB,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAC1B,IAAI,CAACC,oBAAoB,CAAG,CAAC,CAC7B,IAAI,CAACC,SAAS,CAAG,CACfC,kBAAkB,CAAE,KAAK,CACzBC,YAAY,CAAE,IAAI,CAClBC,aAAa,CAAE,IAAI,CACnBC,UAAU,CAAE,IAAI,CAChBC,YAAY,CAAE,CAAC,CACfC,OAAO,CAAE,EACX,CAAC,CACH,CAEAC,OAAOA,CAAA,CAAG,KAAAC,YAAA,CAAAC,aAAA,CACR;AACA,GAAI,CAAAD,YAAA,KAAI,CAACd,MAAM,UAAAc,YAAA,WAAXA,YAAA,CAAaE,SAAS,GAAAD,aAAA,CAAI,IAAI,CAACf,MAAM,UAAAe,aAAA,WAAXA,aAAA,CAAaE,UAAU,CAAE,CACrDC,OAAO,CAACC,GAAG,CAAC,uEAAuE,CAAC,CACpF,OACF,CAEA,KAAM,CAAAC,SAAS,CAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,EAAI,uBAAuB,CAE7EL,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAEC,SAAS,CAAC,CAC/D,IAAI,CAACpB,MAAM,CAAGH,EAAE,CAACuB,SAAS,CAAE,CAC1BI,YAAY,CAAE,IAAI,CAClBC,iBAAiB,CAAE,IAAI,CACvBC,oBAAoB,CAAE,IAAI,CAC1BC,oBAAoB,CAAE,IAAI,CAACtB,oBAAoB,CAC/CuB,UAAU,CAAE,CAAC,WAAW,CAAC,CACzBC,eAAe,CAAE,IACnB,CAAC,CAAC,CAEF,IAAI,CAACC,kBAAkB,CAAC,CAAC,CAC3B,CAEAA,kBAAkBA,CAAA,CAAG,CACnB,GAAI,CAAC,IAAI,CAAC9B,MAAM,CAAE,OAElB,IAAI,CAACA,MAAM,CAAC+B,EAAE,CAAC,SAAS,CAAE,IAAM,CAC9Bb,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5C,IAAI,CAAChB,WAAW,CAAG,IAAI,CACvB,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAE1B;AACA,GAAI,IAAI,CAACJ,MAAM,EAAI,IAAI,CAACA,MAAM,CAACgB,SAAS,CAAE,CACxC,IAAI,CAAChB,MAAM,CAACgC,IAAI,CAAC,cAAc,CAAC,CAClC,CACF,CAAC,CAAC,CAEF,IAAI,CAAChC,MAAM,CAAC+B,EAAE,CAAC,YAAY,CAAE,IAAM,CACjCb,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACjD,IAAI,CAAChB,WAAW,CAAG,KAAK,CAC1B,CAAC,CAAC,CAEF,IAAI,CAACH,MAAM,CAAC+B,EAAE,CAAC,eAAe,CAAGE,KAAK,EAAK,CACzCf,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEc,KAAK,CAAC,CAC1C,IAAI,CAAC7B,iBAAiB,EAAE,CAExB,GAAI,IAAI,CAACA,iBAAiB,EAAI,IAAI,CAACC,oBAAoB,CAAE,CACvDa,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAClD,IAAI,CAACnB,MAAM,CAACkC,UAAU,CAAC,CAAC,CAC1B,CACF,CAAC,CAAC,CAEF;AACA,IAAI,CAAClC,MAAM,CAAC+B,EAAE,CAAC,WAAW,CAAGI,IAAI,EAAK,CACpCjB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEgB,IAAI,CAAC,CAE5C,IAAI,CAAC7B,SAAS,CAAA8B,aAAA,CAAAA,aAAA,IACT,IAAI,CAAC9B,SAAS,EACd6B,IAAI,CACR,CAED;AACA,GAAIA,IAAI,CAAC1B,aAAa,GAAK,CAAC,EAAI,CAAC0B,IAAI,CAACzB,UAAU,CAAE,CAChDQ,OAAO,CAACC,GAAG,CAAC,+DAA+D,CAAC,CAC5E,IAAI,CAACb,SAAS,CAACC,kBAAkB,CAAG,IAAI,CACxC,IAAI,CAACyB,IAAI,CAAC,kBAAkB,CAAE,IAAI,CAAC,CACrC,CAEA,IAAI,CAACA,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC1B,SAAS,CAAC,CACxC,CAAC,CAAC,CAEF,IAAI,CAACN,MAAM,CAAC+B,EAAE,CAAC,QAAQ,CAAGI,IAAI,EAAK,CACjCjB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEgB,IAAI,CAAC,CACzC,IAAI,CAAC7B,SAAS,CAACI,UAAU,CAAGyB,IAAI,CAChC,IAAI,CAAC7B,SAAS,CAACC,kBAAkB,CAAG,KAAK,CACzC,IAAI,CAACyB,IAAI,CAAC,QAAQ,CAAEG,IAAI,CAAC,CAC3B,CAAC,CAAC,CAEF;AACA,IAAI,CAACnC,MAAM,CAAC+B,EAAE,CAAC,oBAAoB,CAAGI,IAAI,EAAK,CAC7CjB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAEgB,IAAI,CAAC,CAC5D,IAAI,CAAC7B,SAAS,CAACI,UAAU,CAAGyB,IAAI,CAChC,IAAI,CAAC7B,SAAS,CAACC,kBAAkB,CAAG,KAAK,CACzC,IAAI,CAACD,SAAS,CAAC+B,kBAAkB,CAAGF,IAAI,CACxC,IAAI,CAACH,IAAI,CAAC,oBAAoB,CAAEG,IAAI,CAAC,CACvC,CAAC,CAAC,CAEF,IAAI,CAACnC,MAAM,CAAC+B,EAAE,CAAC,QAAQ,CAAGI,IAAI,EAAK,CACjCjB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEgB,IAAI,CAAC,CACzC;AACA,GAAI,CAAC,IAAI,CAAC7B,SAAS,CAACM,OAAO,CAAC0B,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACC,OAAO,GAAKL,IAAI,CAACK,OAAO,CAAC,CAAE,CACjE,IAAI,CAAClC,SAAS,CAACM,OAAO,CAAC6B,IAAI,CAACN,IAAI,CAAC,CACnC,CACA,IAAI,CAAC7B,SAAS,CAACK,YAAY,EAAK+B,UAAU,CAACP,IAAI,CAACQ,MAAM,CAAC,CAAG,GAAI,CAAE;AAChE,IAAI,CAACX,IAAI,CAAC,QAAQ,CAAEG,IAAI,CAAC,CAC3B,CAAC,CAAC,CAEF,IAAI,CAACnC,MAAM,CAAC+B,EAAE,CAAC,OAAO,CAAGI,IAAI,EAAK,CAChCjB,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEgB,IAAI,CAAC,CACpC,IAAI,CAAC7B,SAAS,CAACG,aAAa,CAAG0B,IAAI,CAAC1B,aAAa,CACjD,IAAI,CAACH,SAAS,CAACE,YAAY,CAAG2B,IAAI,CAACS,WAAW,CAE9C;AACA,GAAIT,IAAI,CAAC1B,aAAa,GAAK,CAAC,EAAI,CAAC,IAAI,CAACH,SAAS,CAACC,kBAAkB,CAAE,CAClEW,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CAC/D,IAAI,CAACb,SAAS,CAACC,kBAAkB,CAAG,IAAI,CACxC,IAAI,CAACyB,IAAI,CAAC,kBAAkB,CAAE,IAAI,CAAC,CACrC,CAEA,IAAI,CAACA,IAAI,CAAC,OAAO,CAAEG,IAAI,CAAC,CAC1B,CAAC,CAAC,CAEF;AACA,IAAI,CAACnC,MAAM,CAAC+B,EAAE,CAAC,YAAY,CAAE,IAAM,CACjCb,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAC7B,IAAI,CAACb,SAAS,CAAA8B,aAAA,CAAAA,aAAA,IACT,IAAI,CAAC9B,SAAS,MACjBC,kBAAkB,CAAE,KAAK,CACzBK,OAAO,CAAE,EAAE,CACXD,YAAY,CAAE,CAAC,CACfD,UAAU,CAAE,IAAI,EACjB,CACD,IAAI,CAACsB,IAAI,CAAC,YAAY,CAAC,CACzB,CAAC,CAAC,CAEF;AACA,IAAI,CAAChC,MAAM,CAAC+B,EAAE,CAAC,UAAU,CAAGI,IAAI,EAAK,CACnCjB,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEgB,IAAI,CAAC,CAC1C,IAAI,CAAC7B,SAAS,CAAA8B,aAAA,CAAAA,aAAA,IACT,IAAI,CAAC9B,SAAS,MACjBC,kBAAkB,CAAE,KAAK,CACzBsC,mBAAmB,CAAE,KAAK,CAC1BjC,OAAO,CAAE,EAAE,CACXD,YAAY,CAAE,CAAC,CACfD,UAAU,CAAE,IAAI,CAChBF,YAAY,CAAE2B,IAAI,CAACS,WAAW,CAC9BnC,aAAa,CAAE0B,IAAI,CAAC1B,aAAa,EAClC,CACD,IAAI,CAACuB,IAAI,CAAC,UAAU,CAAEG,IAAI,CAAC,CAC3B,IAAI,CAACH,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC1B,SAAS,CAAC,CACxC,CAAC,CAAC,CAEF;AACA,IAAI,CAACN,MAAM,CAAC+B,EAAE,CAAC,gBAAgB,CAAGI,IAAI,EAAK,CACzCjB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEgB,IAAI,CAAC,CAC9C,IAAI,CAAC7B,SAAS,CAAA8B,aAAA,CAAAA,aAAA,IACT,IAAI,CAAC9B,SAAS,EACd6B,IAAI,CACR,CACD,IAAI,CAACH,IAAI,CAAC,gBAAgB,CAAEG,IAAI,CAAC,CACjC,IAAI,CAACH,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC1B,SAAS,CAAC,CACxC,CAAC,CAAC,CAEF;AACA,IAAI,CAACN,MAAM,CAAC+B,EAAE,CAAC,eAAe,CAAGI,IAAI,EAAK,CACxCjB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEgB,IAAI,CAAC,CACvC,IAAI,CAAC7B,SAAS,CAACM,OAAO,CAAGuB,IAAI,CAACvB,OAAO,EAAI,EAAE,CAC3C,IAAI,CAACN,SAAS,CAACK,YAAY,CAAGwB,IAAI,CAACW,QAAQ,EAAI,CAAC,CAChD,IAAI,CAACxC,SAAS,CAACyC,QAAQ,CAAGZ,IAAI,CAACY,QAAQ,EAAI,CAAC,CAC5C,IAAI,CAACf,IAAI,CAAC,eAAe,CAAEG,IAAI,CAAC,CAChC,IAAI,CAACH,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC1B,SAAS,CAAC,CACxC,CAAC,CAAC,CACJ,CAEAyB,EAAEA,CAACiB,KAAK,CAAEC,QAAQ,CAAE,CAClB,GAAI,CAAC,IAAI,CAAChD,aAAa,CAACiD,GAAG,CAACF,KAAK,CAAC,CAAE,CAClC,IAAI,CAAC/C,aAAa,CAACkD,GAAG,CAACH,KAAK,CAAE,GAAI,CAAAI,GAAG,CAAC,CAAC,CAAC,CAC1C,CAEA,KAAM,CAAAC,QAAQ,CAAG,IAAI,CAACpD,aAAa,CAACqD,GAAG,CAACN,KAAK,CAAC,CAE9C;AACA,GAAIK,QAAQ,CAACH,GAAG,CAACD,QAAQ,CAAC,CAAE,CAC1B/B,OAAO,CAACqC,IAAI,yCAAAC,MAAA,CAA+BR,KAAK,qBAAmB,CAAC,CACpE,OACF,CAEAK,QAAQ,CAACI,GAAG,CAACR,QAAQ,CAAC,CACtB/B,OAAO,CAACC,GAAG,qCAAAqC,MAAA,CAA2BR,KAAK,cAAAQ,MAAA,CAAYH,QAAQ,CAACK,IAAI,WAAS,CAAC,CAChF,CAEAC,GAAGA,CAACX,KAAK,CAAEC,QAAQ,CAAE,CACnB,KAAM,CAAAI,QAAQ,CAAG,IAAI,CAACpD,aAAa,CAACqD,GAAG,CAACN,KAAK,CAAC,CAC9C,GAAIK,QAAQ,CAAE,CACZ,KAAM,CAAAO,UAAU,CAAGP,QAAQ,CAACQ,MAAM,CAACZ,QAAQ,CAAC,CAC5C,GAAIW,UAAU,CAAE,CACd1C,OAAO,CAACC,GAAG,uCAAAqC,MAAA,CAA6BR,KAAK,cAAAQ,MAAA,CAAYH,QAAQ,CAACK,IAAI,eAAa,CAAC,CACtF,CACF,CACF,CAEA1B,IAAIA,CAACgB,KAAK,CAAEb,IAAI,CAAE,CAChB,KAAM,CAAAkB,QAAQ,CAAG,IAAI,CAACpD,aAAa,CAACqD,GAAG,CAACN,KAAK,CAAC,CAC9C,GAAIK,QAAQ,CAAE,CACZA,QAAQ,CAACS,OAAO,CAACC,OAAO,EAAIA,OAAO,CAAC5B,IAAI,CAAC,CAAC,CAC5C,CACF,CAEA6B,QAAQA,CAACC,OAAO,CAAE,KAAAC,aAAA,CAChB,GAAI,GAAAA,aAAA,CAAC,IAAI,CAAClE,MAAM,UAAAkE,aAAA,WAAXA,aAAA,CAAalD,SAAS,EAAE,CAC3BE,OAAO,CAACe,KAAK,CAAC,wCAAwC,CAAC,CACvD,OACF,CACA,IAAI,CAACjC,MAAM,CAACgC,IAAI,CAAC,UAAU,CAAEiC,OAAO,CAAC,CACvC,CAEA/B,UAAUA,CAAA,CAAG,CACX,GAAI,IAAI,CAAClC,MAAM,CAAE,CACf,IAAI,CAACA,MAAM,CAACkC,UAAU,CAAC,CAAC,CACxB,IAAI,CAAClC,MAAM,CAAG,IAAI,CAClB,IAAI,CAACG,WAAW,CAAG,KAAK,CAC1B,CACF,CAEAgE,SAASA,CAAA,CAAG,CACV,IAAI,CAACjC,UAAU,CAAC,CAAC,CACjB,IAAI,CAACrB,OAAO,CAAC,CAAC,CAChB,CAEAuD,YAAYA,CAAA,CAAG,CACb,MAAO,KAAI,CAAC9D,SAAS,CACvB,CAEAC,kBAAkBA,CAAA,CAAG,CACnB,MAAO,KAAI,CAACD,SAAS,CAACC,kBAAkB,CAC1C,CAEAsC,mBAAmBA,CAAA,CAAG,CACpB,MAAO,KAAI,CAACvC,SAAS,CAACuC,mBAAmB,EAAI,KAAK,CACpD,CAEAwB,eAAeA,CAAA,CAAG,CAChB,MAAO,KAAI,CAAC/D,SAAS,CAACE,YAAY,CACpC,CACF,CAEA;AACA,KAAM,CAAA8D,aAAa,CAAG,GAAI,CAAAxE,aAAa,CAAC,CAAC,CACzC,cAAe,CAAAwE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}