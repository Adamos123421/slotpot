{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { jackpotContract } from '../services/jackpotContract';\nimport { backendApi } from '../services/backendApi';\nimport useTonConnect from './useTonConnect';\n\n// API polling removed - all data now comes via socket broadcasts\n\nconst useJackpotContract = () => {\n  _s();\n  var _contractState$timer2;\n  console.log('🔧 useJackpotContract hook initializing...');\n\n  // Contract state\n  const [contractState, setContractState] = useState({\n    totalJackpot: 0,\n    isActive: false,\n    betCount: 0,\n    lastWinner: null,\n    lastWinnerAddress: null,\n    lastPrizeAmount: 0,\n    contractBalance: 0,\n    timestamp: 0,\n    error: null,\n    // Winner detection\n    roundJustEnded: false,\n    hasWinner: false,\n    winnerAnnouncement: null,\n    // Timer information (now integrated)\n    timer: {\n      isActive: false,\n      timeRemaining: 0,\n      timeElapsed: 0,\n      roundNumber: 0\n    },\n    roundDuration: 300,\n    bettors: []\n  });\n\n  // Current round bettors\n  const [currentBettors, setCurrentBettors] = useState([]);\n\n  // Admin info now comes via socket in contract state\n\n  // User-specific state\n  const [userStats, setUserStats] = useState({\n    betAmount: 0,\n    winningProbability: 0,\n    winChancePercentage: '0.00',\n    loading: false,\n    error: null\n  });\n\n  // Loading states\n  const [isPlacingBet, setIsPlacingBet] = useState(false);\n  const [hasInitialLoad, setHasInitialLoad] = useState(false);\n\n  // Essential refs for hook functionality\n  const prevIsActiveRef = useRef(contractState.isActive);\n\n  // Get wallet connection status\n  const {\n    isConnected,\n    address,\n    sendTransaction,\n    isLoading: walletLoading,\n    isRestoringConnection\n  } = useTonConnect();\n\n  // REMOVED: All bettor and contract data now comes via socket broadcasts\n\n  // REMOVED: All contract state now comes via socket broadcasts\n\n  // REMOVED: All address tracking and API calls - now handled via socket broadcasts\n\n  // User stats refresh - handled in consolidated polling system\n  // Removed separate useEffect to prevent duplicate API calls\n  // This fixes the issue where APIs were being called 4 times simultaneously\n\n  // Track round changes with ref to prevent re-renders\n  useEffect(() => {\n    var _contractState$timer;\n    const prevIsActive = prevIsActiveRef.current;\n    const currentIsActive = contractState.isActive;\n\n    // Detect new round start (inactive -> active)\n    // But only clear bettors if timer > 0 (actual new round, not waiting for winner)\n    if (!prevIsActive && currentIsActive && ((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) > 0) {\n      console.log('🔄 New round detected, clearing bettors list');\n      setCurrentBettors([]); // Clear bettors list for new round\n    }\n\n    // Update ref for next comparison\n    prevIsActiveRef.current = currentIsActive;\n  }, [contractState.isActive, (_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining]);\n\n  // REMOVED: All API polling - now handled entirely via socket broadcasts\n\n  // REMOVED: All socket handling moved to App.js to prevent duplicate listeners and re-renders\n\n  // Place a bet (sends real transaction and notifies backend)\n  const placeBet = async betAmount => {\n    console.log(`🎰 placeBet() called with amount: ${betAmount} TON`);\n    if (!isConnected || !address) {\n      throw new Error('Wallet not connected');\n    }\n    if (!contractState.isActive) {\n      throw new Error('Jackpot is not active');\n    }\n    if (betAmount < 0.1) {\n      throw new Error('Minimum bet is 0.1 TON');\n    }\n    if (betAmount > 10) {\n      throw new Error('Maximum bet is 10 TON');\n    }\n    try {\n      setIsPlacingBet(true);\n      console.log(`🎰 Placing bet: ${betAmount} TON from ${address}`);\n      console.log(`📋 Contract state: active=${contractState.isActive}, jackpot=${contractState.totalJackpot}`);\n\n      // Build transaction for the smart contract using the contract service\n      console.log(`🔧 Building transaction with opcode 0x03...`);\n      const transaction = jackpotContract.buildBetTransaction(betAmount, \"EQDhuMbM_cT3dXuJulXmlkA12YF8k5VdpPc1UxkuEqLpCo9K\");\n      console.log(`📤 Sending transaction to contract:`, {\n        contractAddress: transaction.messages[0].address,\n        amount: transaction.messages[0].amount,\n        payloadLength: transaction.messages[0].payload.length\n      });\n\n      // Send transaction via TON Connect\n      const result = await sendTransaction(transaction);\n      console.log('✅ Bet transaction sent to contract:', result);\n\n      // Show transaction notification\n      if (typeof window !== 'undefined' && window.showTransactionNotification) {\n        window.showTransactionNotification(`💰 Transaction sent! Your ${betAmount} TON bet will take effect shortly.`, 'success');\n      }\n\n      // Backend will automatically detect the bet through contract polling\n      console.log('✅ Bet sent to contract - backend will automatically detect via polling');\n\n      // Simple success response - no bet verification polling\n      console.log('✅ Bet placed successfully - relying on normal polling for updates');\n      return {\n        success: true,\n        txHash: result.boc || 'unknown',\n        amount: betAmount,\n        address: address\n      };\n    } catch (error) {\n      console.error('❌ Bet placement failed:', error);\n\n      // Show error notification\n      if (typeof window !== 'undefined' && window.showTransactionNotification) {\n        window.showTransactionNotification(`❌ Bet failed: ${error.message}`, 'error');\n      }\n      throw error;\n    } finally {\n      setIsPlacingBet(false);\n    }\n  };\n\n  // Helper function to format address\n  const formatAddress = addr => {\n    if (!addr) return null;\n    return `${addr.slice(0, 6)}...${addr.slice(-6)}`;\n  };\n\n  // Helper function to format TON amounts\n  const formatTonAmount = amount => {\n    if (!amount) return '0.000';\n    return parseFloat(amount).toFixed(3);\n  };\n  return {\n    // Contract state\n    contractState: {\n      ...contractState,\n      formattedJackpot: formatTonAmount(contractState.totalJackpot),\n      formattedLastPrize: formatTonAmount(contractState.lastPrizeAmount)\n    },\n    // Admin info (now included in contract state)\n\n    // User state\n    userStats: {\n      ...userStats,\n      formattedBetAmount: formatTonAmount(userStats.betAmount)\n    },\n    // Loading states\n    isPlacingBet,\n    isRestoringConnection,\n    walletLoading,\n    // Actions\n    placeBet,\n    // Utility\n    isConnected,\n    address: address ? formatAddress(address) : null,\n    fullAddress: address,\n    // Backend admin controls (for emergency use only)\n    emergencyControls: {\n      forceStartRound: adminKey => backendApi.forceStartRound(adminKey),\n      forceEndRound: adminKey => backendApi.forceEndRound(adminKey),\n      updateSettings: settings => backendApi.updateAdminSettings(settings)\n    },\n    // Current bettors\n    currentBettors\n  };\n};\n_s(useJackpotContract, \"fXYySkcz0en8p/IFWIN40pQsjDI=\", false, function () {\n  return [useTonConnect];\n});\nexport default useJackpotContract;","map":{"version":3,"names":["useState","useEffect","useRef","jackpotContract","backendApi","useTonConnect","useJackpotContract","_s","_contractState$timer2","console","log","contractState","setContractState","totalJackpot","isActive","betCount","lastWinner","lastWinnerAddress","lastPrizeAmount","contractBalance","timestamp","error","roundJustEnded","hasWinner","winnerAnnouncement","timer","timeRemaining","timeElapsed","roundNumber","roundDuration","bettors","currentBettors","setCurrentBettors","userStats","setUserStats","betAmount","winningProbability","winChancePercentage","loading","isPlacingBet","setIsPlacingBet","hasInitialLoad","setHasInitialLoad","prevIsActiveRef","isConnected","address","sendTransaction","isLoading","walletLoading","isRestoringConnection","_contractState$timer","prevIsActive","current","currentIsActive","placeBet","Error","transaction","buildBetTransaction","contractAddress","messages","amount","payloadLength","payload","length","result","window","showTransactionNotification","success","txHash","boc","message","formatAddress","addr","slice","formatTonAmount","parseFloat","toFixed","formattedJackpot","formattedLastPrize","formattedBetAmount","fullAddress","emergencyControls","forceStartRound","adminKey","forceEndRound","updateSettings","settings","updateAdminSettings"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/src/hooks/useJackpotContract.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { jackpotContract } from '../services/jackpotContract';\nimport { backendApi } from '../services/backendApi';\nimport useTonConnect from './useTonConnect';\n\n// API polling removed - all data now comes via socket broadcasts\n\nconst useJackpotContract = () => {\n  console.log('🔧 useJackpotContract hook initializing...');\n  \n  // Contract state\n  const [contractState, setContractState] = useState({\n    totalJackpot: 0,\n    isActive: false,\n    betCount: 0,\n    lastWinner: null,\n    lastWinnerAddress: null,\n    lastPrizeAmount: 0,\n    contractBalance: 0,\n    timestamp: 0,\n    error: null,\n    // Winner detection\n    roundJustEnded: false,\n    hasWinner: false,\n    winnerAnnouncement: null,\n    // Timer information (now integrated)\n    timer: {\n      isActive: false,\n      timeRemaining: 0,\n      timeElapsed: 0,\n      roundNumber: 0\n    },\n    roundDuration: 300,\n    bettors: []\n  });\n\n  // Current round bettors\n  const [currentBettors, setCurrentBettors] = useState([]);\n\n  // Admin info now comes via socket in contract state\n\n  // User-specific state\n  const [userStats, setUserStats] = useState({\n    betAmount: 0,\n    winningProbability: 0,\n    winChancePercentage: '0.00',\n    loading: false,\n    error: null\n  });\n\n  // Loading states\n  const [isPlacingBet, setIsPlacingBet] = useState(false);\n  const [hasInitialLoad, setHasInitialLoad] = useState(false);\n\n  // Essential refs for hook functionality\n  const prevIsActiveRef = useRef(contractState.isActive);\n\n  // Get wallet connection status\n  const { \n    isConnected, \n    address, \n    sendTransaction, \n    isLoading: walletLoading,\n    isRestoringConnection \n  } = useTonConnect();\n\n  // REMOVED: All bettor and contract data now comes via socket broadcasts\n\n  // REMOVED: All contract state now comes via socket broadcasts\n\n  // REMOVED: All address tracking and API calls - now handled via socket broadcasts\n\n  // User stats refresh - handled in consolidated polling system\n  // Removed separate useEffect to prevent duplicate API calls\n  // This fixes the issue where APIs were being called 4 times simultaneously\n\n  // Track round changes with ref to prevent re-renders\n  useEffect(() => {\n    const prevIsActive = prevIsActiveRef.current;\n    const currentIsActive = contractState.isActive;\n    \n    // Detect new round start (inactive -> active)\n    // But only clear bettors if timer > 0 (actual new round, not waiting for winner)\n    if (!prevIsActive && currentIsActive && contractState.timer?.timeRemaining > 0) {\n      console.log('🔄 New round detected, clearing bettors list');\n      setCurrentBettors([]); // Clear bettors list for new round\n    }\n    \n    // Update ref for next comparison\n    prevIsActiveRef.current = currentIsActive;\n  }, [contractState.isActive, contractState.timer?.timeRemaining]);\n\n  // REMOVED: All API polling - now handled entirely via socket broadcasts\n\n  // REMOVED: All socket handling moved to App.js to prevent duplicate listeners and re-renders\n\n  // Place a bet (sends real transaction and notifies backend)\n  const placeBet = async (betAmount) => {\n    console.log(`🎰 placeBet() called with amount: ${betAmount} TON`);\n    \n    if (!isConnected || !address) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (!contractState.isActive) {\n      throw new Error('Jackpot is not active');\n    }\n\n    if (betAmount < 0.1) {\n      throw new Error('Minimum bet is 0.1 TON');\n    }\n\n    if (betAmount > 10) {\n      throw new Error('Maximum bet is 10 TON');\n    }\n\n    try {\n      setIsPlacingBet(true);\n      console.log(`🎰 Placing bet: ${betAmount} TON from ${address}`);\n      console.log(`📋 Contract state: active=${contractState.isActive}, jackpot=${contractState.totalJackpot}`);\n\n      // Build transaction for the smart contract using the contract service\n      console.log(`🔧 Building transaction with opcode 0x03...`);\n      const transaction = jackpotContract.buildBetTransaction(betAmount, \"EQDhuMbM_cT3dXuJulXmlkA12YF8k5VdpPc1UxkuEqLpCo9K\");\n      \n      console.log(`📤 Sending transaction to contract:`, {\n        contractAddress: transaction.messages[0].address,\n        amount: transaction.messages[0].amount,\n        payloadLength: transaction.messages[0].payload.length\n      });\n      \n      // Send transaction via TON Connect\n      const result = await sendTransaction(transaction);\n      \n      console.log('✅ Bet transaction sent to contract:', result);\n\n      // Show transaction notification\n      if (typeof window !== 'undefined' && window.showTransactionNotification) {\n        window.showTransactionNotification(`💰 Transaction sent! Your ${betAmount} TON bet will take effect shortly.`, 'success');\n      }\n\n      // Backend will automatically detect the bet through contract polling\n      console.log('✅ Bet sent to contract - backend will automatically detect via polling');\n\n      // Simple success response - no bet verification polling\n      console.log('✅ Bet placed successfully - relying on normal polling for updates');\n\n      return {\n        success: true,\n        txHash: result.boc || 'unknown',\n        amount: betAmount,\n        address: address\n      };\n    } catch (error) {\n      console.error('❌ Bet placement failed:', error);\n      \n      // Show error notification\n      if (typeof window !== 'undefined' && window.showTransactionNotification) {\n        window.showTransactionNotification(`❌ Bet failed: ${error.message}`, 'error');\n      }\n      \n      throw error;\n    } finally {\n      setIsPlacingBet(false);\n    }\n  };\n\n  // Helper function to format address\n  const formatAddress = (addr) => {\n    if (!addr) return null;\n    return `${addr.slice(0, 6)}...${addr.slice(-6)}`;\n  };\n\n  // Helper function to format TON amounts\n  const formatTonAmount = (amount) => {\n    if (!amount) return '0.000';\n    return parseFloat(amount).toFixed(3);\n  };\n\n  return {\n    // Contract state\n    contractState: {\n      ...contractState,\n      formattedJackpot: formatTonAmount(contractState.totalJackpot),\n      formattedLastPrize: formatTonAmount(contractState.lastPrizeAmount)\n    },\n    \n    // Admin info (now included in contract state)\n    \n    // User state\n    userStats: {\n      ...userStats,\n      formattedBetAmount: formatTonAmount(userStats.betAmount)\n    },\n    \n    // Loading states\n    isPlacingBet,\n    isRestoringConnection,\n    walletLoading,\n    \n    // Actions\n    placeBet,\n    \n    // Utility\n    isConnected,\n    address: address ? formatAddress(address) : null,\n    fullAddress: address,\n    \n    // Backend admin controls (for emergency use only)\n    emergencyControls: {\n      forceStartRound: (adminKey) => backendApi.forceStartRound(adminKey),\n      forceEndRound: (adminKey) => backendApi.forceEndRound(adminKey),\n      updateSettings: (settings) => backendApi.updateAdminSettings(settings)\n    },\n    \n    // Current bettors\n    currentBettors\n  };\n};\n\nexport default useJackpotContract;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}