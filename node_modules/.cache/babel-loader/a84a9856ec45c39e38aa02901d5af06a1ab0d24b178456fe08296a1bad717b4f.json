{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\GameArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport PlayerSlot from './PlayerSlot';\nimport './GameArea.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArea({\n  jackpotValue,\n  currentRound,\n  timeRemaining,\n  isLive,\n  betAmount,\n  onBetChange,\n  onPlaceBet,\n  isConnected,\n  isLoading,\n  userWinChance,\n  userBetTotal,\n  contractState,\n  adminInfo,\n  currentBettors,\n  // Winner state props (passed from App.js)\n  waitingForWinner,\n  contractWinner,\n  postWinnerLoading,\n  showWinnerAnnouncement\n}) {\n  _s();\n  var _contractState$timer3, _contractState$timer4, _contractState$timer6, _contractState$curren2, _contractState$timer9, _contractState$timer0, _contractState$timer1, _contractState$timer10;\n  // Local animation state only (winner states are now props from App.js)\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [reelOffset, setReelOffset] = useState(0);\n  const [winner, setWinner] = useState(null);\n  const [predeterminedWinner, setPredeterminedWinner] = useState(null);\n\n  // Winner states removed - now passed as props from App.js:\n  // waitingForWinner, contractWinner, showWinnerAnnouncement, postWinnerLoading\n  const [transactionNotification, setTransactionNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success' // 'success', 'pending', 'error'\n  });\n\n  // Use refs to prevent unnecessary re-renders\n  const animationFrameRef = useRef();\n  const [localTimer, setLocalTimer] = useState(0);\n  const lastSyncRef = useRef(null);\n\n  // Use refs for animation conditions to avoid dependency issues\n  const isSpinningRef = useRef(isSpinning);\n  const winnerRef = useRef(winner);\n\n  // Keep refs in sync\n  useEffect(() => {\n    isSpinningRef.current = isSpinning;\n  }, [isSpinning]);\n  useEffect(() => {\n    winnerRef.current = winner;\n  }, [winner]);\n\n  // Memoized calculated values to prevent recalculation on every render\n  const memoizedValues = useMemo(() => {\n    var _contractState$timer, _contractState$timer2;\n    // Check if contract is active - if not, show everything as 0\n    const isContractActive = (contractState === null || contractState === void 0 ? void 0 : contractState.isActive) !== false;\n\n    // Use local countdown timer if active, otherwise fall back to contract/prop data\n    // SAFETY: Ensure we never accidentally render the timer object by extracting only numbers\n    const backendTimer = typeof (contractState === null || contractState === void 0 ? void 0 : (_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) === 'number' ? contractState.timer.timeRemaining : typeof timeRemaining === 'number' ? timeRemaining : 0;\n    const displayTimer = isContractActive ? localTimer > 0 ? localTimer : backendTimer : 0;\n\n    // Debug logging for timer sync\n    if (backendTimer > 0 && Math.abs(backendTimer - localTimer) > 5) {\n      console.log('⏰ Timer sync check:', {\n        backend: backendTimer,\n        local: localTimer,\n        using: displayTimer\n      });\n    }\n\n    // SAFETY: Ensure roundNumber is always a number, never an object\n    const displayRound = typeof (contractState === null || contractState === void 0 ? void 0 : (_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.roundNumber) === 'number' ? contractState.timer.roundNumber : typeof currentRound === 'number' ? currentRound : 0;\n    const totalPlayers = isContractActive ? (contractState === null || contractState === void 0 ? void 0 : contractState.betCount) || (currentBettors === null || currentBettors === void 0 ? void 0 : currentBettors.length) || 0 : 0;\n\n    // Use contract's total jackpot value directly (this includes all bet amounts before fees)\n    const totalJackpotValue = isContractActive ? (contractState === null || contractState === void 0 ? void 0 : contractState.totalJackpot) || jackpotValue || 0 : 0;\n\n    // Calculate winner prize (95% of total jackpot, 5% is fee)\n    const winnerPrizeValue = totalJackpotValue * 0.95;\n    return {\n      displayTimer: Math.max(0, displayTimer),\n      // Ensure always positive number\n      displayRound: Math.max(0, displayRound),\n      // Ensure always positive number\n      totalPlayers,\n      totalJackpotValue: parseFloat(totalJackpotValue.toFixed(3)),\n      // Contract's total jackpot\n      winnerPrizeValue: parseFloat(winnerPrizeValue.toFixed(3)),\n      // Amount winner gets (95% of total)\n      isContractActive\n    };\n  }, [contractState === null || contractState === void 0 ? void 0 : contractState.isActive, contractState === null || contractState === void 0 ? void 0 : (_contractState$timer3 = contractState.timer) === null || _contractState$timer3 === void 0 ? void 0 : _contractState$timer3.roundNumber, contractState === null || contractState === void 0 ? void 0 : contractState.betCount, contractState === null || contractState === void 0 ? void 0 : contractState.totalJackpot, contractState === null || contractState === void 0 ? void 0 : (_contractState$timer4 = contractState.timer) === null || _contractState$timer4 === void 0 ? void 0 : _contractState$timer4.timeRemaining, currentBettors, currentRound, jackpotValue, timeRemaining, localTimer]);\n\n  // Memoize player stats to prevent unnecessary updates\n  const playerStats = useMemo(() => {\n    // If contract is not active, show everything as 0\n    if (!memoizedValues.isContractActive) {\n      return {\n        yourWager: 0,\n        yourChance: 0\n      };\n    }\n\n    // Find user's bet in current bettors\n    const userBettor = currentBettors === null || currentBettors === void 0 ? void 0 : currentBettors.find(bettor => bettor.address === (contractState === null || contractState === void 0 ? void 0 : contractState.userAddress) || bettor.fullAddress === (contractState === null || contractState === void 0 ? void 0 : contractState.userAddress));\n    const yourWager = userBettor ? userBettor.amount : userBetTotal || 0; // Show actual bet amount including fee\n\n    // Use contract's probability calculation if available, otherwise fallback to manual calculation\n    const yourChance = userWinChance > 0 ? userWinChance : userBettor !== null && userBettor !== void 0 && userBettor.amount && memoizedValues.totalJackpotValue > 0 ? userBettor.amount * 100 / memoizedValues.totalJackpotValue : 0;\n    return {\n      yourWager: parseFloat(yourWager.toFixed(3)),\n      // Prevent floating point jitter\n      yourChance: parseFloat(yourChance.toFixed(2)) // Prevent floating point jitter\n    };\n  }, [currentBettors, contractState === null || contractState === void 0 ? void 0 : contractState.userAddress, userBetTotal, userWinChance, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]);\n\n  // Memoize game status to prevent text flicker\n  const gameStatus = useMemo(() => {\n    if (!memoizedValues.isContractActive) return \"Jackpot is paused\";\n    if (waitingForWinner) return \"Selecting winner...\";\n    if (!isLive) return adminInfo !== null && adminInfo !== void 0 && adminInfo.isAutoManaged ? \"Auto-starting next round...\" : \"Waiting for next round...\";\n    if (winner) return `${winner.name} wins ${memoizedValues.winnerPrizeValue.toFixed(3)} TON!`;\n    if (isSpinning) return \"Spinning...\";\n    if (memoizedValues.displayTimer <= 5 && memoizedValues.totalPlayers > 0) return \"Get ready to spin!\";\n    if (memoizedValues.totalPlayers === 0) return \"Place your bets to start!\";\n    return `${memoizedValues.totalPlayers} player${memoizedValues.totalPlayers !== 1 ? 's' : ''} betting...`;\n  }, [waitingForWinner, isLive, winner, isSpinning, adminInfo === null || adminInfo === void 0 ? void 0 : adminInfo.isAutoManaged, memoizedValues]);\n  const {\n    displayTimer,\n    displayRound,\n    totalPlayers,\n    totalJackpotValue,\n    winnerPrizeValue\n  } = memoizedValues;\n\n  // Memoized player creation to prevent recreation on every render\n  const players = useMemo(() => {\n    // Create fixed array of 20 cards\n    const FIXED_CARDS = 20;\n    const playersArray = [];\n\n    // If contract is not active, show only waiting placeholders\n    if (memoizedValues.isContractActive && currentBettors && currentBettors.length > 0) {\n      currentBettors.forEach((bettor, index) => {\n        if (index < FIXED_CARDS) {\n          // Only fill up to 20 slots\n          // Apply 0.05 TON fee deduction for internal calculations (net amount for jackpot)\n          const netBetAmount = Math.max(0, bettor.amount - 0.05);\n\n          // Use contract's probability calculation: (bettorAmount * 100) / totalJackpot\n          const winChance = memoizedValues.totalJackpotValue > 0 ? bettor.amount * 100 / memoizedValues.totalJackpotValue : 0;\n          playersArray.push({\n            id: index + 1,\n            name: bettor.username || bettor.displayName || `Player ${index + 1}`,\n            username: bettor.username || bettor.displayName || `Player ${index + 1}`,\n            displayName: bettor.displayName || bettor.username || `Player ${index + 1}`,\n            avatar: bettor.avatar || `https://robohash.org/${bettor.address}.png?size=100x100`,\n            bet: bettor.amount,\n            // Show actual bet amount including fee\n            amount: bettor.amount,\n            // Also include as amount for SimpleCarousel\n            netBet: netBetAmount,\n            // Store net bet for calculations\n            chance: winChance,\n            address: bettor.address,\n            isRealPlayer: true\n          });\n        }\n      });\n    }\n\n    // Fill remaining slots with waiting placeholders\n    while (playersArray.length < FIXED_CARDS) {\n      playersArray.push({\n        id: playersArray.length + 1,\n        name: 'Waiting',\n        avatar: '❓',\n        bet: 0,\n        netBet: 0,\n        chance: 0,\n        isRealPlayer: false\n      });\n    }\n    return playersArray;\n  }, [currentBettors, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]); // Recalculate when bettors change or jackpot changes\n\n  // Memoized extended players for slot machine\n  const extendedPlayers = useMemo(() => {\n    const extended = [];\n    for (let i = 0; i < 20; i++) {\n      extended.push(...players);\n    }\n    return extended;\n  }, [players]);\n\n  // Function to spin to a specific winner (moved up and wrapped in useCallback)\n  const startSpinToWinner = useCallback(targetWinner => {\n    if (isSpinning) return;\n    console.log('🎰 Starting spin animation to winner:', targetWinner.name);\n    setPredeterminedWinner(targetWinner);\n    setIsSpinning(true);\n    setWinner(null);\n\n    // Calculate precise stopping position for the target winner\n    const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n    const gap = window.innerWidth <= 480 ? 15 : 20;\n    const cardPlusGap = currentCardWidth + gap;\n    const centerOffset = window.innerWidth / 2 - cardPlusGap / 2 - 25;\n    const winnerIndex = players.findIndex(p => p.address === targetWinner.address || p.name === targetWinner.name);\n    if (winnerIndex === -1) {\n      console.error('Winner not found in players array');\n      return;\n    }\n    const baseSpins = 2;\n    const targetCardPosition = winnerIndex * cardPlusGap;\n    const targetPosition = baseSpins * 20 * cardPlusGap + targetCardPosition + centerOffset; // Use fixed 20 cards\n\n    setReelOffset(targetPosition);\n    console.log('🎯 Animation targeting winner:', targetWinner.name, 'at position:', winnerIndex);\n\n    // Stop spinning after 3 seconds and show winner\n    setTimeout(() => {\n      setIsSpinning(false);\n      setWinner(targetWinner);\n      setPredeterminedWinner(null);\n\n      // Winner notification is now handled by App.js via socket events\n\n      // Clear local winner after 8 seconds (allow full display)\n      setTimeout(() => {\n        setWinner(null);\n      }, 8000);\n    }, 3000);\n  }, [isSpinning, players]);\n\n  // Reset local state when new round starts (only track round number changes)\n  const [lastRoundNumber, setLastRoundNumber] = useState(null);\n  useEffect(() => {\n    var _contractState$timer5;\n    const currentRoundNumber = contractState === null || contractState === void 0 ? void 0 : (_contractState$timer5 = contractState.timer) === null || _contractState$timer5 === void 0 ? void 0 : _contractState$timer5.roundNumber;\n\n    // Only reset when round number actually changes (indicating a new round)\n    if (currentRoundNumber && currentRoundNumber !== lastRoundNumber) {\n      console.log(`🔄 New round detected: ${lastRoundNumber} → ${currentRoundNumber}`);\n\n      // Reset all local game state for new round (winner states managed by App.js)\n      setIsSpinning(false);\n      setReelOffset(0);\n      setWinner(null);\n      setPredeterminedWinner(null);\n      setLastRoundNumber(currentRoundNumber);\n    }\n  }, [contractState === null || contractState === void 0 ? void 0 : (_contractState$timer6 = contractState.timer) === null || _contractState$timer6 === void 0 ? void 0 : _contractState$timer6.roundNumber, lastRoundNumber]); // Removed unnecessary dependencies\n\n  // DISABLED: Legacy winner animation system - now handled by App.js carousel animation\n  // useEffect(() => {\n  //   // If we have a winner from the backend and we're not already spinning\n  //   if (contractWinner && !isSpinning && !winner) {\n  //     console.log('🎯 Starting spin animation for contract winner:', contractWinner);\n  //     \n  //     // Find winner in current players\n  //     const targetWinner = players.find(p => \n  //       p.address === contractWinner.address || \n  //       p.name === contractWinner.name ||\n  //       p.name === contractWinner.username\n  //     );\n  //     \n  //     if (targetWinner) {\n  //       startSpinToWinner(targetWinner);\n  //     } else {\n  //       console.warn('Winner not found in players:', contractWinner);\n  //     }\n  //   }\n  // }, [contractWinner, isSpinning, winner, players, startSpinToWinner]); // Fixed dependencies\n\n  // Persistent animation that doesn't restart on user changes\n  useEffect(() => {\n    let lastTimestamp = 0;\n    const animate = timestamp => {\n      // Only animate if conditions are met (using refs to avoid dependencies)\n      if (!isSpinningRef.current && !winnerRef.current) {\n        // Calculate delta time for smooth 60fps animation\n        const deltaTime = timestamp - lastTimestamp;\n        lastTimestamp = timestamp;\n        setReelOffset(prev => {\n          const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n          const gap = window.innerWidth <= 480 ? 15 : 20;\n          const cardPlusGap = currentCardWidth + gap;\n\n          // Smooth movement at 1.2 pixels per frame (60fps = 72px/sec)\n          const speed = Math.max(0.5, deltaTime / 16.67 * 1.2); // Normalize to 60fps\n          const newOffset = prev + speed;\n          const fullCycleWidth = 20 * cardPlusGap;\n\n          // Reset to 0 when full cycle is complete for seamless loop\n          if (newOffset >= fullCycleWidth) {\n            return newOffset - fullCycleWidth;\n          }\n          return newOffset;\n        });\n      }\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    animationFrameRef.current = requestAnimationFrame(animate);\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []); // Empty dependency array - only run once on mount\n\n  // selectWeightedWinner function removed - unused\n\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Monitor bet confirmation polling status\n  useEffect(() => {\n    // Set up a global handler for bet confirmation updates\n    window.updateBetConfirmationStatus = status => {\n      // Function removed since betConfirmationStatus was removed\n    };\n\n    // Set up a global handler for transaction notifications\n    window.showTransactionNotification = (message, type = 'success') => {\n      setTransactionNotification({\n        show: true,\n        message: message,\n        type: type\n      });\n\n      // Auto-hide after 4 seconds\n      setTimeout(() => {\n        setTransactionNotification({\n          show: false,\n          message: '',\n          type: 'success'\n        });\n      }, 4000);\n    };\n    return () => {\n      delete window.updateBetConfirmationStatus;\n      delete window.showTransactionNotification;\n    };\n  }, []);\n\n  // Sync timer once and start local countdown\n  useEffect(() => {\n    var _contractState$curren, _contractState$timer7, _contractState$timer$, _contractState$timer8;\n    const currentRoundId = (contractState === null || contractState === void 0 ? void 0 : (_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || (contractState === null || contractState === void 0 ? void 0 : (_contractState$timer7 = contractState.timer) === null || _contractState$timer7 === void 0 ? void 0 : _contractState$timer7.roundNumber);\n    const backendTimer = (_contractState$timer$ = contractState === null || contractState === void 0 ? void 0 : (_contractState$timer8 = contractState.timer) === null || _contractState$timer8 === void 0 ? void 0 : _contractState$timer8.timeRemaining) !== null && _contractState$timer$ !== void 0 ? _contractState$timer$ : timeRemaining;\n\n    // Only sync if we have new round data or timer data changed significantly\n    const needsSync = !lastSyncRef.current || lastSyncRef.current.roundId !== currentRoundId || backendTimer > 0 && Math.abs(backendTimer - localTimer) > 10;\n    if (needsSync && backendTimer > 0) {\n      console.log('⏰ Syncing timer:', backendTimer, 'seconds');\n      setLocalTimer(backendTimer);\n      lastSyncRef.current = {\n        roundId: currentRoundId,\n        timer: backendTimer,\n        timestamp: Date.now()\n      };\n    }\n  }, [contractState === null || contractState === void 0 ? void 0 : (_contractState$curren2 = contractState.currentRound) === null || _contractState$curren2 === void 0 ? void 0 : _contractState$curren2.roundNumber, contractState === null || contractState === void 0 ? void 0 : (_contractState$timer9 = contractState.timer) === null || _contractState$timer9 === void 0 ? void 0 : _contractState$timer9.roundNumber, contractState === null || contractState === void 0 ? void 0 : (_contractState$timer0 = contractState.timer) === null || _contractState$timer0 === void 0 ? void 0 : _contractState$timer0.timeRemaining, timeRemaining, localTimer]);\n\n  // Local countdown timer (runs every second)\n  useEffect(() => {\n    if (localTimer <= 0) return;\n    const interval = setInterval(() => {\n      setLocalTimer(prev => {\n        const newTime = Math.max(0, prev - 1);\n        if (newTime === 0) {\n          console.log('⏰ Timer reached zero');\n        }\n        return newTime;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [localTimer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jackpot-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"jackpot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u26A1 JACKPOT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"player-count\",\n          children: totalPlayers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), (adminInfo === null || adminInfo === void 0 ? void 0 : adminInfo.isAutoManaged) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"automation-badge\",\n          children: \"\\uD83E\\uDD16 AUTO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"jackpot-subtitle\",\n        children: gameStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bet-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-amount-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bet-amount-value\",\n            children: (betAmount === null || betAmount === void 0 ? void 0 : betAmount.toFixed(1)) || '0.0'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"currency-label\",\n            children: \"TON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-preset\",\n            onClick: () => onBetChange({\n              target: {\n                value: '0.11'\n              }\n            }),\n            children: \"0.11\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-preset\",\n            onClick: () => onBetChange({\n              target: {\n                value: '0.5'\n              }\n            }),\n            children: \"0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-preset\",\n            onClick: () => onBetChange({\n              target: {\n                value: '1.0'\n              }\n            }),\n            children: \"1.0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-preset\",\n            onClick: () => onBetChange({\n              target: {\n                value: '2.0'\n              }\n            }),\n            children: \"2.0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bet-button\",\n          onClick: onPlaceBet,\n          disabled: !isConnected || !memoizedValues.isContractActive || !isLive || isLoading || isSpinning || waitingForWinner || postWinnerLoading,\n          children: !memoizedValues.isContractActive ? 'Paused' : isSpinning ? 'Spinning...' : waitingForWinner ? 'Selecting...' : postWinnerLoading ? '🔄 New Round...' : isConnected ? 'Bet' : 'Connect Wallet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card jackpot-value\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-icon\",\n          children: \"POT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: totalJackpotValue.toFixed(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Total Jackpot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card net-payout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-icon\",\n          children: \"\\uD83D\\uDCB0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: winnerPrizeValue.toFixed(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Winner Gets (95%)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card your-wager\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-icon\",\n          children: \"BET\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: playerStats.yourWager.toFixed(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Your Wager\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card your-chance\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: [playerStats.yourChance.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Your Chance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card time-remaining\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: formatTime(displayTimer)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: contractState !== null && contractState !== void 0 && (_contractState$timer1 = contractState.timer) !== null && _contractState$timer1 !== void 0 && _contractState$timer1.isActive ? 'Auto Timer' : 'Time Remaining'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-arrow-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-arrow\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrow\",\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slot-machine\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slot-frame\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slot-reel-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `slot-reel ${isSpinning ? 'slot-spinning' : 'idle'}`,\n            style: {\n              transform: `translateX(${-reelOffset}px)`,\n              willChange: 'transform'\n            },\n            children: extendedPlayers.map((player, index) => {\n              // Check if this player is the winner from App.js (contractWinner)\n              const isCurrentWinner = contractWinner && (player.address && (player.address === contractWinner.winner || player.address === contractWinner.fullAddress) || player.fullAddress && (player.fullAddress === contractWinner.winner || player.fullAddress === contractWinner.fullAddress) || player.username && player.username === contractWinner.username);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"slot-card\",\n                children: /*#__PURE__*/_jsxDEV(PlayerSlot, {\n                  player: player,\n                  isWinner: isCurrentWinner,\n                  isPredetermined: predeterminedWinner && predeterminedWinner.id === player.id,\n                  winnerPrize: isCurrentWinner ? contractWinner.prize : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 510,\n                  columnNumber: 21\n                }, this)\n              }, `${player.id}-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), isSpinning && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slot-blur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payout-info\",\n        children: [\"\\u26A1 Payouts are settled in TON\", (contractState === null || contractState === void 0 ? void 0 : (_contractState$timer10 = contractState.timer) === null || _contractState$timer10 === void 0 ? void 0 : _contractState$timer10.isActive) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"automation-info\",\n          children: \" \\u2022 \\uD83E\\uDD16 Automated rounds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"players-count\",\n          children: [\"\\uD83D\\uDC65 \", totalPlayers, \" Players\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"round-number\",\n          children: [\"Round #\", displayRound]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this), isConnected && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connection-status\",\n          children: \"\\uD83D\\uDFE2 Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this), showWinnerAnnouncement && contractWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-announcement-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-announcement-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"winner-icon\",\n          children: \"\\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"ROUND WINNER!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"winner-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-address\",\n            children: contractWinner.username || contractWinner.winner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-prize\",\n            children: [\"Won \", contractWinner.prize, \" TON\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"winner-confetti\",\n          children: \"\\uD83C\\uDF8A \\uD83C\\uDF89 \\uD83C\\uDF8A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 9\n    }, this), waitingForWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-selection-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-selection-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner-big\",\n          children: \"\\uD83C\\uDFAF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Selecting Winner...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Analyzing bets and picking the winner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-dots\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }, this), postWinnerLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-selection-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-selection-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner-big\",\n          children: \"\\uD83D\\uDD04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Preparing New Round...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Setting up the next jackpot round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-dots\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 9\n    }, this), transactionNotification.show && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `transaction-notification ${transactionNotification.type}`,\n      children: transactionNotification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n}\n_s(GameArea, \"e9IvFD5x/rAvkjvo9JjghhZyOkQ=\");\n_c = GameArea;\nexport default GameArea;\nvar _c;\n$RefreshReg$(_c, \"GameArea\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useRef","useCallback","PlayerSlot","jsxDEV","_jsxDEV","GameArea","jackpotValue","currentRound","timeRemaining","isLive","betAmount","onBetChange","onPlaceBet","isConnected","isLoading","userWinChance","userBetTotal","contractState","adminInfo","currentBettors","waitingForWinner","contractWinner","postWinnerLoading","showWinnerAnnouncement","_s","_contractState$timer3","_contractState$timer4","_contractState$timer6","_contractState$curren2","_contractState$timer9","_contractState$timer0","_contractState$timer1","_contractState$timer10","isSpinning","setIsSpinning","reelOffset","setReelOffset","winner","setWinner","predeterminedWinner","setPredeterminedWinner","transactionNotification","setTransactionNotification","show","message","type","animationFrameRef","localTimer","setLocalTimer","lastSyncRef","isSpinningRef","winnerRef","current","memoizedValues","_contractState$timer","_contractState$timer2","isContractActive","isActive","backendTimer","timer","displayTimer","Math","abs","console","log","backend","local","using","displayRound","roundNumber","totalPlayers","betCount","length","totalJackpotValue","totalJackpot","winnerPrizeValue","max","parseFloat","toFixed","playerStats","yourWager","yourChance","userBettor","find","bettor","address","userAddress","fullAddress","amount","gameStatus","isAutoManaged","name","players","FIXED_CARDS","playersArray","forEach","index","netBetAmount","winChance","push","id","username","displayName","avatar","bet","netBet","chance","isRealPlayer","extendedPlayers","extended","i","startSpinToWinner","targetWinner","currentCardWidth","window","innerWidth","gap","cardPlusGap","centerOffset","winnerIndex","findIndex","p","error","baseSpins","targetCardPosition","targetPosition","setTimeout","lastRoundNumber","setLastRoundNumber","_contractState$timer5","currentRoundNumber","lastTimestamp","animate","timestamp","deltaTime","prev","speed","newOffset","fullCycleWidth","requestAnimationFrame","cancelAnimationFrame","formatTime","seconds","mins","floor","secs","toString","padStart","updateBetConfirmationStatus","status","showTransactionNotification","_contractState$curren","_contractState$timer7","_contractState$timer$","_contractState$timer8","currentRoundId","needsSync","roundId","Date","now","interval","setInterval","newTime","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","target","value","disabled","style","transform","willChange","map","player","isCurrentWinner","isWinner","isPredetermined","winnerPrize","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/GameArea.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport PlayerSlot from './PlayerSlot';\nimport './GameArea.css';\n\nfunction GameArea({ \n  jackpotValue,\n  currentRound,\n  timeRemaining,\n  isLive,\n  betAmount,\n  onBetChange,\n  onPlaceBet,\n  isConnected,\n  isLoading,\n  userWinChance,\n  userBetTotal,\n  contractState,\n  adminInfo,\n  currentBettors,\n  // Winner state props (passed from App.js)\n  waitingForWinner,\n  contractWinner,\n  postWinnerLoading,\n  showWinnerAnnouncement\n}) {\n  // Local animation state only (winner states are now props from App.js)\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [reelOffset, setReelOffset] = useState(0);\n  const [winner, setWinner] = useState(null);\n  const [predeterminedWinner, setPredeterminedWinner] = useState(null);\n  \n  // Winner states removed - now passed as props from App.js:\n  // waitingForWinner, contractWinner, showWinnerAnnouncement, postWinnerLoading\n  const [transactionNotification, setTransactionNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success' // 'success', 'pending', 'error'\n  });\n\n  // Use refs to prevent unnecessary re-renders\n  const animationFrameRef = useRef();\n  const [localTimer, setLocalTimer] = useState(0);\n  const lastSyncRef = useRef(null);\n\n  // Use refs for animation conditions to avoid dependency issues\n  const isSpinningRef = useRef(isSpinning);\n  const winnerRef = useRef(winner);\n  \n  // Keep refs in sync\n  useEffect(() => { isSpinningRef.current = isSpinning; }, [isSpinning]);\n  useEffect(() => { winnerRef.current = winner; }, [winner]);\n\n  // Memoized calculated values to prevent recalculation on every render\n  const memoizedValues = useMemo(() => {\n    // Check if contract is active - if not, show everything as 0\n    const isContractActive = contractState?.isActive !== false;\n    \n         // Use local countdown timer if active, otherwise fall back to contract/prop data\n    // SAFETY: Ensure we never accidentally render the timer object by extracting only numbers\n    const backendTimer = typeof contractState?.timer?.timeRemaining === 'number' \n      ? contractState.timer.timeRemaining \n      : (typeof timeRemaining === 'number' ? timeRemaining : 0);\n     const displayTimer = isContractActive ? (localTimer > 0 ? localTimer : backendTimer) : 0;\n    \n         // Debug logging for timer sync\n     if (backendTimer > 0 && Math.abs(backendTimer - localTimer) > 5) {\n       console.log('⏰ Timer sync check:', {\n         backend: backendTimer,\n         local: localTimer,\n         using: displayTimer\n       });\n     }\n    \n    // SAFETY: Ensure roundNumber is always a number, never an object\n    const displayRound = typeof contractState?.timer?.roundNumber === 'number' \n      ? contractState.timer.roundNumber \n      : (typeof currentRound === 'number' ? currentRound : 0);\n    const totalPlayers = isContractActive ? (contractState?.betCount || currentBettors?.length || 0) : 0;\n\n    // Use contract's total jackpot value directly (this includes all bet amounts before fees)\n    const totalJackpotValue = isContractActive ? (contractState?.totalJackpot || jackpotValue || 0) : 0;\n\n    // Calculate winner prize (95% of total jackpot, 5% is fee)\n    const winnerPrizeValue = totalJackpotValue * 0.95;\n\n    return {\n      displayTimer: Math.max(0, displayTimer), // Ensure always positive number\n      displayRound: Math.max(0, displayRound), // Ensure always positive number\n      totalPlayers,\n      totalJackpotValue: parseFloat(totalJackpotValue.toFixed(3)), // Contract's total jackpot\n      winnerPrizeValue: parseFloat(winnerPrizeValue.toFixed(3)), // Amount winner gets (95% of total)\n      isContractActive\n    };\n  }, [contractState?.isActive, contractState?.timer?.roundNumber, contractState?.betCount, contractState?.totalJackpot, contractState?.timer?.timeRemaining,\n      currentBettors, currentRound, jackpotValue, timeRemaining, localTimer]);\n\n  // Memoize player stats to prevent unnecessary updates\n  const playerStats = useMemo(() => {\n    // If contract is not active, show everything as 0\n    if (!memoizedValues.isContractActive) {\n      return {\n        yourWager: 0,\n        yourChance: 0\n      };\n    }\n    \n    // Find user's bet in current bettors\n    const userBettor = currentBettors?.find(bettor => \n      bettor.address === contractState?.userAddress ||\n      bettor.fullAddress === contractState?.userAddress\n    );\n    \n    const yourWager = userBettor ? userBettor.amount : userBetTotal || 0; // Show actual bet amount including fee\n    \n    // Use contract's probability calculation if available, otherwise fallback to manual calculation\n    const yourChance = userWinChance > 0 ? userWinChance : \n      (userBettor?.amount && memoizedValues.totalJackpotValue > 0 ? \n        (userBettor.amount * 100) / memoizedValues.totalJackpotValue : 0);\n\n    return {\n      yourWager: parseFloat(yourWager.toFixed(3)), // Prevent floating point jitter\n      yourChance: parseFloat(yourChance.toFixed(2)) // Prevent floating point jitter\n    };\n  }, [currentBettors, contractState?.userAddress, userBetTotal, userWinChance, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]);\n\n  // Memoize game status to prevent text flicker\n  const gameStatus = useMemo(() => {\n    if (!memoizedValues.isContractActive) return \"Jackpot is paused\";\n    if (waitingForWinner) return \"Selecting winner...\";\n    if (!isLive) return adminInfo?.isAutoManaged ? \"Auto-starting next round...\" : \"Waiting for next round...\";\n    if (winner) return `${winner.name} wins ${memoizedValues.winnerPrizeValue.toFixed(3)} TON!`;\n    if (isSpinning) return \"Spinning...\";\n    if (memoizedValues.displayTimer <= 5 && memoizedValues.totalPlayers > 0) return \"Get ready to spin!\";\n    if (memoizedValues.totalPlayers === 0) return \"Place your bets to start!\";\n    return `${memoizedValues.totalPlayers} player${memoizedValues.totalPlayers !== 1 ? 's' : ''} betting...`;\n  }, [waitingForWinner, isLive, winner, isSpinning, adminInfo?.isAutoManaged, memoizedValues]);\n\n  const { displayTimer, displayRound, totalPlayers, totalJackpotValue, winnerPrizeValue } = memoizedValues;\n\n  // Memoized player creation to prevent recreation on every render\n  const players = useMemo(() => {\n    // Create fixed array of 20 cards\n    const FIXED_CARDS = 20;\n    const playersArray = [];\n    \n    // If contract is not active, show only waiting placeholders\n    if (memoizedValues.isContractActive && currentBettors && currentBettors.length > 0) {\n      currentBettors.forEach((bettor, index) => {\n        if (index < FIXED_CARDS) { // Only fill up to 20 slots\n          // Apply 0.05 TON fee deduction for internal calculations (net amount for jackpot)\n          const netBetAmount = Math.max(0, bettor.amount - 0.05);\n          \n          // Use contract's probability calculation: (bettorAmount * 100) / totalJackpot\n          const winChance = memoizedValues.totalJackpotValue > 0 ? \n            (bettor.amount * 100) / memoizedValues.totalJackpotValue : 0;\n          \n          playersArray.push({\n            id: index + 1,\n            name: bettor.username || bettor.displayName || `Player ${index + 1}`,\n            username: bettor.username || bettor.displayName || `Player ${index + 1}`,\n            displayName: bettor.displayName || bettor.username || `Player ${index + 1}`,\n            avatar: bettor.avatar || `https://robohash.org/${bettor.address}.png?size=100x100`,\n            bet: bettor.amount, // Show actual bet amount including fee\n            amount: bettor.amount, // Also include as amount for SimpleCarousel\n            netBet: netBetAmount, // Store net bet for calculations\n            chance: winChance,\n            address: bettor.address,\n            isRealPlayer: true\n          });\n        }\n      });\n    }\n    \n    // Fill remaining slots with waiting placeholders\n    while (playersArray.length < FIXED_CARDS) {\n      playersArray.push({\n        id: playersArray.length + 1,\n        name: 'Waiting',\n        avatar: '❓',\n        bet: 0,\n        netBet: 0,\n        chance: 0,\n        isRealPlayer: false\n      });\n    }\n    \n    return playersArray;\n  }, [currentBettors, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]); // Recalculate when bettors change or jackpot changes\n\n  // Memoized extended players for slot machine\n  const extendedPlayers = useMemo(() => {\n    const extended = [];\n    for (let i = 0; i < 20; i++) {\n      extended.push(...players);\n    }\n    return extended;\n  }, [players]);\n\n  // Function to spin to a specific winner (moved up and wrapped in useCallback)\n  const startSpinToWinner = useCallback((targetWinner) => {\n    if (isSpinning) return;\n    \n    console.log('🎰 Starting spin animation to winner:', targetWinner.name);\n    \n    setPredeterminedWinner(targetWinner);\n    setIsSpinning(true);\n    setWinner(null);\n    \n    // Calculate precise stopping position for the target winner\n    const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n    const gap = window.innerWidth <= 480 ? 15 : 20;\n    const cardPlusGap = currentCardWidth + gap;\n    const centerOffset = (window.innerWidth / 2) - (cardPlusGap / 2) - 25;\n    const winnerIndex = players.findIndex(p => \n      p.address === targetWinner.address || p.name === targetWinner.name\n    );\n    \n    if (winnerIndex === -1) {\n      console.error('Winner not found in players array');\n      return;\n    }\n    \n    const baseSpins = 2;\n    const targetCardPosition = winnerIndex * cardPlusGap;\n    const targetPosition = (baseSpins * 20 * cardPlusGap) + targetCardPosition + centerOffset; // Use fixed 20 cards\n    \n    setReelOffset(targetPosition);\n    \n    console.log('🎯 Animation targeting winner:', targetWinner.name, 'at position:', winnerIndex);\n    \n    // Stop spinning after 3 seconds and show winner\n    setTimeout(() => {\n      setIsSpinning(false);\n      setWinner(targetWinner);\n      setPredeterminedWinner(null);\n      \n      // Winner notification is now handled by App.js via socket events\n      \n      // Clear local winner after 8 seconds (allow full display)\n      setTimeout(() => {\n        setWinner(null);\n      }, 8000);\n    }, 3000);\n  }, [isSpinning, players]);\n\n  // Reset local state when new round starts (only track round number changes)\n  const [lastRoundNumber, setLastRoundNumber] = useState(null);\n  \n  useEffect(() => {\n    const currentRoundNumber = contractState?.timer?.roundNumber;\n    \n    // Only reset when round number actually changes (indicating a new round)\n    if (currentRoundNumber && currentRoundNumber !== lastRoundNumber) {\n      console.log(`🔄 New round detected: ${lastRoundNumber} → ${currentRoundNumber}`);\n      \n      // Reset all local game state for new round (winner states managed by App.js)\n      setIsSpinning(false);\n      setReelOffset(0);\n      setWinner(null);\n      setPredeterminedWinner(null);\n      \n      setLastRoundNumber(currentRoundNumber);\n    }\n  }, [contractState?.timer?.roundNumber, lastRoundNumber]); // Removed unnecessary dependencies\n\n  // DISABLED: Legacy winner animation system - now handled by App.js carousel animation\n  // useEffect(() => {\n  //   // If we have a winner from the backend and we're not already spinning\n  //   if (contractWinner && !isSpinning && !winner) {\n  //     console.log('🎯 Starting spin animation for contract winner:', contractWinner);\n  //     \n  //     // Find winner in current players\n  //     const targetWinner = players.find(p => \n  //       p.address === contractWinner.address || \n  //       p.name === contractWinner.name ||\n  //       p.name === contractWinner.username\n  //     );\n  //     \n  //     if (targetWinner) {\n  //       startSpinToWinner(targetWinner);\n  //     } else {\n  //       console.warn('Winner not found in players:', contractWinner);\n  //     }\n  //   }\n  // }, [contractWinner, isSpinning, winner, players, startSpinToWinner]); // Fixed dependencies\n\n  // Persistent animation that doesn't restart on user changes\n  useEffect(() => {\n    let lastTimestamp = 0;\n    \n    const animate = (timestamp) => {\n      // Only animate if conditions are met (using refs to avoid dependencies)\n      if (!isSpinningRef.current && !winnerRef.current) {\n        // Calculate delta time for smooth 60fps animation\n        const deltaTime = timestamp - lastTimestamp;\n        lastTimestamp = timestamp;\n        \n        setReelOffset(prev => {\n          const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n          const gap = window.innerWidth <= 480 ? 15 : 20;\n          const cardPlusGap = currentCardWidth + gap;\n          \n          // Smooth movement at 1.2 pixels per frame (60fps = 72px/sec)\n          const speed = Math.max(0.5, deltaTime / 16.67 * 1.2); // Normalize to 60fps\n          const newOffset = prev + speed;\n          const fullCycleWidth = 20 * cardPlusGap;\n          \n          // Reset to 0 when full cycle is complete for seamless loop\n          if (newOffset >= fullCycleWidth) {\n            return newOffset - fullCycleWidth;\n          }\n          return newOffset;\n        });\n      }\n      \n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []); // Empty dependency array - only run once on mount\n\n  // selectWeightedWinner function removed - unused\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Monitor bet confirmation polling status\n  useEffect(() => {\n    // Set up a global handler for bet confirmation updates\n    window.updateBetConfirmationStatus = (status) => {\n      // Function removed since betConfirmationStatus was removed\n    };\n\n    // Set up a global handler for transaction notifications\n    window.showTransactionNotification = (message, type = 'success') => {\n      setTransactionNotification({\n        show: true,\n        message: message,\n        type: type\n      });\n      \n      // Auto-hide after 4 seconds\n      setTimeout(() => {\n        setTransactionNotification({\n          show: false,\n          message: '',\n          type: 'success'\n        });\n      }, 4000);\n    };\n\n    return () => {\n      delete window.updateBetConfirmationStatus;\n      delete window.showTransactionNotification;\n    };\n  }, []);\n\n  // Sync timer once and start local countdown\n  useEffect(() => {\n    const currentRoundId = contractState?.currentRound?.roundNumber || contractState?.timer?.roundNumber;\n    const backendTimer = contractState?.timer?.timeRemaining ?? timeRemaining;\n    \n    // Only sync if we have new round data or timer data changed significantly\n    const needsSync = !lastSyncRef.current || \n                     lastSyncRef.current.roundId !== currentRoundId ||\n                     (backendTimer > 0 && Math.abs(backendTimer - localTimer) > 10);\n    \n    if (needsSync && backendTimer > 0) {\n      console.log('⏰ Syncing timer:', backendTimer, 'seconds');\n      setLocalTimer(backendTimer);\n      lastSyncRef.current = {\n        roundId: currentRoundId,\n        timer: backendTimer,\n        timestamp: Date.now()\n      };\n    }\n  }, [contractState?.currentRound?.roundNumber, contractState?.timer?.roundNumber, contractState?.timer?.timeRemaining, timeRemaining, localTimer]);\n\n  // Local countdown timer (runs every second)\n  useEffect(() => {\n    if (localTimer <= 0) return;\n\n    const interval = setInterval(() => {\n      setLocalTimer(prev => {\n        const newTime = Math.max(0, prev - 1);\n        if (newTime === 0) {\n          console.log('⏰ Timer reached zero');\n        }\n        return newTime;\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [localTimer]);\n\n  return (\n    <div className=\"game-area\">\n      {/* Jackpot Section */}\n      <div className=\"jackpot-section\">\n        <div className=\"jackpot-header\">\n          <h2>⚡ JACKPOT</h2>\n          <span className=\"player-count\">{totalPlayers}</span>\n          {adminInfo?.isAutoManaged && (\n            <span className=\"automation-badge\">🤖 AUTO</span>\n          )}\n        </div>\n        <p className=\"jackpot-subtitle\">\n          {gameStatus}\n        </p>\n        \n        <div className=\"bet-controls\">\n          <div className=\"bet-amount-display\">\n            <span className=\"bet-amount-value\">{betAmount?.toFixed(1) || '0.0'}</span>\n            <span className=\"currency-label\">TON</span>\n          </div>\n          <div className=\"bet-buttons\">\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '0.11' } })}>0.11</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '0.5' } })}>0.5</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '1.0' } })}>1.0</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '2.0' } })}>2.0</button>\n          </div>\n          <button \n            className=\"bet-button\" \n            onClick={onPlaceBet}\n            disabled={!isConnected || !memoizedValues.isContractActive || !isLive || isLoading || isSpinning || waitingForWinner || postWinnerLoading}\n          >\n            {!memoizedValues.isContractActive ? 'Paused' :\n             isSpinning ? 'Spinning...' :\n             waitingForWinner ? 'Selecting...' :\n             postWinnerLoading ? '🔄 New Round...' :\n             isConnected ? 'Bet' : 'Connect Wallet'}\n          </button>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"stats-grid\">\n        <div className=\"stat-card jackpot-value\">\n          <div className=\"stat-icon\">POT</div>\n          <div className=\"stat-amount\">{totalJackpotValue.toFixed(3)}</div>\n          <div className=\"stat-label\">Total Jackpot</div>\n        </div>\n        \n        <div className=\"stat-card net-payout\">\n          <div className=\"stat-icon\">💰</div>\n          <div className=\"stat-amount\">{winnerPrizeValue.toFixed(3)}</div>\n          <div className=\"stat-label\">Winner Gets (95%)</div>\n        </div>\n        \n        <div className=\"stat-card your-wager\">\n          <div className=\"stat-icon\">BET</div>\n          <div className=\"stat-amount\">\n            {playerStats.yourWager.toFixed(3)}\n          </div>\n          <div className=\"stat-label\">Your Wager</div>\n        </div>\n        \n        <div className=\"stat-card your-chance\">\n          <div className=\"stat-amount\">\n            {playerStats.yourChance.toFixed(2)}%\n          </div>\n          <div className=\"stat-label\">Your Chance</div>\n        </div>\n        \n        <div className=\"stat-card time-remaining\">\n          <div className=\"stat-amount\">{formatTime(displayTimer)}</div>\n          <div className=\"stat-label\">\n            {contractState?.timer?.isActive ? 'Auto Timer' : 'Time Remaining'}\n          </div>\n        </div>\n      </div>\n\n      {/* Winner Arrow */}\n      <div className=\"winner-arrow-container\">\n        <div className=\"winner-arrow\">\n          <div className=\"arrow\">▼</div>\n        </div>\n      </div>\n\n      {/* Slot Machine */}\n      <div className=\"slot-machine\">\n        <div className=\"slot-frame\">\n          <div className=\"slot-reel-container\">\n            <div \n              className={`slot-reel ${isSpinning ? 'slot-spinning' : 'idle'}`}\n              style={{ \n                transform: `translateX(${-reelOffset}px)`,\n                willChange: 'transform'\n              }}\n            >\n              {extendedPlayers.map((player, index) => {\n                // Check if this player is the winner from App.js (contractWinner)\n                const isCurrentWinner = contractWinner && (\n                  (player.address && (player.address === contractWinner.winner || player.address === contractWinner.fullAddress)) ||\n                  (player.fullAddress && (player.fullAddress === contractWinner.winner || player.fullAddress === contractWinner.fullAddress)) ||\n                  (player.username && player.username === contractWinner.username)\n                );\n                \n                return (\n                  <div key={`${player.id}-${index}`} className=\"slot-card\">\n                    <PlayerSlot \n                      player={player} \n                      isWinner={isCurrentWinner}\n                      isPredetermined={predeterminedWinner && predeterminedWinner.id === player.id}\n                      winnerPrize={isCurrentWinner ? contractWinner.prize : null}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          \n          {/* Slot Machine Effects */}\n          {isSpinning && <div className=\"slot-blur\"></div>}\n        </div>\n      </div>\n\n      {/* Footer Info */}\n      <div className=\"footer-info\">\n        <div className=\"payout-info\">\n          ⚡ Payouts are settled in TON\n          {contractState?.timer?.isActive && (\n            <span className=\"automation-info\"> • 🤖 Automated rounds</span>\n          )}\n        </div>\n        <div className=\"game-stats\">\n          <span className=\"players-count\">👥 {totalPlayers} Players</span>\n          <span className=\"round-number\">Round #{displayRound}</span>\n          {isConnected && (\n            <span className=\"connection-status\">🟢 Connected</span>\n          )}\n        </div>\n      </div>\n\n      {/* Contract Winner Announcement Overlay */}\n      {showWinnerAnnouncement && contractWinner && (\n        <div className=\"winner-announcement-overlay\">\n          <div className=\"winner-announcement-card\">\n            <div className=\"winner-icon\">🎉</div>\n            <h3>ROUND WINNER!</h3>\n            <div className=\"winner-details\">\n              <div className=\"winner-address\">{contractWinner.username || contractWinner.winner}</div>\n              <div className=\"winner-prize\">Won {contractWinner.prize} TON</div>\n            </div>\n            <div className=\"winner-confetti\">🎊 🎉 🎊</div>\n          </div>\n        </div>\n      )}\n\n      {/* Big Loading Overlay for Winner Selection */}\n      {waitingForWinner && (\n        <div className=\"winner-selection-loading\">\n          <div className=\"winner-selection-content\">\n            <div className=\"loading-spinner-big\">🎯</div>\n            <h2>Selecting Winner...</h2>\n            <p>Analyzing bets and picking the winner</p>\n            <div className=\"loading-dots\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Post-Winner Loading Overlay */}\n      {postWinnerLoading && (\n        <div className=\"winner-selection-loading\">\n          <div className=\"winner-selection-content\">\n            <div className=\"loading-spinner-big\">🔄</div>\n            <h2>Preparing New Round...</h2>\n            <p>Setting up the next jackpot round</p>\n            <div className=\"loading-dots\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Transaction Notification */}\n      {transactionNotification.show && (\n        <div className={`transaction-notification ${transactionNotification.type}`}>\n          {transactionNotification.message}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}