{"ast":null,"code":"import _objectSpread from\"C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5002';class ApiService{constructor(){this.baseUrl=API_BASE_URL;}// Generic fetch wrapper with error handling\nasync fetchApi(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const url=\"\".concat(this.baseUrl).concat(endpoint);const config=_objectSpread({headers:_objectSpread({'Content-Type':'application/json'},options.headers)},options);const response=await fetch(url,config);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error(\"API call failed for \".concat(endpoint,\":\"),error);throw error;}}// Health check\nasync getHealth(){return this.fetchApi('/api/health');}// Get chat messages and user count\nasync getChatData(){return this.fetchApi('/api/chat/messages');}// Get server statistics (chat-focused, no game state needed)\nasync getServerStats(){try{var _chatData$messages;const[chatData,health]=await Promise.all([this.getChatData(),this.getHealth()]);return{connectedUsers:chatData.totalUsers||0,totalMessages:((_chatData$messages=chatData.messages)===null||_chatData$messages===void 0?void 0:_chatData$messages.length)||0,recentMessages:chatData.messages||[],serverStatus:health.status,lastUpdated:new Date()};}catch(error){console.error('Failed to get server stats:',error);return{connectedUsers:0,totalMessages:0,recentMessages:[],serverStatus:'Error',lastUpdated:new Date(),error:error.message};}}// Check if server is reachable\nasync isServerReachable(){try{await this.getHealth();return true;}catch(error){return false;}}}// Create and export singleton instance\nconst apiService=new ApiService();export default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseUrl","fetchApi","endpoint","options","arguments","length","undefined","url","concat","config","_objectSpread","headers","response","fetch","ok","Error","status","json","error","console","getHealth","getChatData","getServerStats","_chatData$messages","chatData","health","Promise","all","connectedUsers","totalUsers","totalMessages","messages","recentMessages","serverStatus","lastUpdated","Date","message","isServerReachable","apiService"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/apiService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseUrl = API_BASE_URL;\r\n  }\r\n\r\n  // Generic fetch wrapper with error handling\r\n  async fetchApi(endpoint, options = {}) {\r\n    try {\r\n      const url = `${this.baseUrl}${endpoint}`;\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...options.headers,\r\n        },\r\n        ...options,\r\n      };\r\n\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`API call failed for ${endpoint}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Health check\r\n  async getHealth() {\r\n    return this.fetchApi('/api/health');\r\n  }\r\n\r\n  // Get chat messages and user count\r\n  async getChatData() {\r\n    return this.fetchApi('/api/chat/messages');\r\n  }\r\n\r\n  // Get server statistics (chat-focused, no game state needed)\r\n  async getServerStats() {\r\n    try {\r\n      const [chatData, health] = await Promise.all([\r\n        this.getChatData(),\r\n        this.getHealth()\r\n      ]);\r\n\r\n      return {\r\n        connectedUsers: chatData.totalUsers || 0,\r\n        totalMessages: chatData.messages?.length || 0,\r\n        recentMessages: chatData.messages || [],\r\n        serverStatus: health.status,\r\n        lastUpdated: new Date()\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to get server stats:', error);\r\n      return {\r\n        connectedUsers: 0,\r\n        totalMessages: 0,\r\n        recentMessages: [],\r\n        serverStatus: 'Error',\r\n        lastUpdated: new Date(),\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  // Check if server is reachable\r\n  async isServerReachable() {\r\n    try {\r\n      await this.getHealth();\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst apiService = new ApiService();\r\nexport default apiService; "],"mappings":"iIAAA,KAAM,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,uBAAuB,CAE7E,KAAM,CAAAC,UAAW,CACfC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,OAAO,CAAGN,YAAY,CAC7B,CAEA;AACA,KAAM,CAAAO,QAAQA,CAACC,QAAQ,CAAgB,IAAd,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACnC,GAAI,CACF,KAAM,CAAAG,GAAG,IAAAC,MAAA,CAAM,IAAI,CAACR,OAAO,EAAAQ,MAAA,CAAGN,QAAQ,CAAE,CACxC,KAAM,CAAAO,MAAM,CAAAC,aAAA,EACVC,OAAO,CAAAD,aAAA,EACL,cAAc,CAAE,kBAAkB,EAC/BP,OAAO,CAACQ,OAAO,CACnB,EACER,OAAO,CACX,CAED,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACN,GAAG,CAAEE,MAAM,CAAC,CAEzC,GAAI,CAACG,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAP,MAAA,CAAwBI,QAAQ,CAACI,MAAM,CAAE,CAAC,CAC3D,CAEA,MAAO,MAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,wBAAAV,MAAA,CAAwBN,QAAQ,MAAKgB,KAAK,CAAC,CACxD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAE,SAASA,CAAA,CAAG,CAChB,MAAO,KAAI,CAACnB,QAAQ,CAAC,aAAa,CAAC,CACrC,CAEA;AACA,KAAM,CAAAoB,WAAWA,CAAA,CAAG,CAClB,MAAO,KAAI,CAACpB,QAAQ,CAAC,oBAAoB,CAAC,CAC5C,CAEA;AACA,KAAM,CAAAqB,cAAcA,CAAA,CAAG,CACrB,GAAI,KAAAC,kBAAA,CACF,KAAM,CAACC,QAAQ,CAAEC,MAAM,CAAC,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CAC3C,IAAI,CAACN,WAAW,CAAC,CAAC,CAClB,IAAI,CAACD,SAAS,CAAC,CAAC,CACjB,CAAC,CAEF,MAAO,CACLQ,cAAc,CAAEJ,QAAQ,CAACK,UAAU,EAAI,CAAC,CACxCC,aAAa,CAAE,EAAAP,kBAAA,CAAAC,QAAQ,CAACO,QAAQ,UAAAR,kBAAA,iBAAjBA,kBAAA,CAAmBlB,MAAM,GAAI,CAAC,CAC7C2B,cAAc,CAAER,QAAQ,CAACO,QAAQ,EAAI,EAAE,CACvCE,YAAY,CAAER,MAAM,CAACT,MAAM,CAC3BkB,WAAW,CAAE,GAAI,CAAAC,IAAI,CAAC,CACxB,CAAC,CACH,CAAE,MAAOjB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,CACLU,cAAc,CAAE,CAAC,CACjBE,aAAa,CAAE,CAAC,CAChBE,cAAc,CAAE,EAAE,CAClBC,YAAY,CAAE,OAAO,CACrBC,WAAW,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CACvBjB,KAAK,CAAEA,KAAK,CAACkB,OACf,CAAC,CACH,CACF,CAEA;AACA,KAAM,CAAAC,iBAAiBA,CAAA,CAAG,CACxB,GAAI,CACF,KAAM,KAAI,CAACjB,SAAS,CAAC,CAAC,CACtB,MAAO,KAAI,CACb,CAAE,MAAOF,KAAK,CAAE,CACd,MAAO,MAAK,CACd,CACF,CACF,CAEA;AACA,KAAM,CAAAoB,UAAU,CAAG,GAAI,CAAAxC,UAAU,CAAC,CAAC,CACnC,cAAe,CAAAwC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}