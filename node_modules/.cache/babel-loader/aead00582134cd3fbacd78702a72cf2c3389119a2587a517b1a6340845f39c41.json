{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _TonClient4_endpoint, _TonClient4_timeout, _TonClient4_adapter, _TonClient4_axios;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TonClient4 = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst core_1 = require(\"@ton/core\");\nconst toUrlSafe_1 = require(\"../utils/toUrlSafe\");\nconst zod_1 = require(\"zod\");\nclass TonClient4 {\n  constructor(args) {\n    _TonClient4_endpoint.set(this, void 0);\n    _TonClient4_timeout.set(this, void 0);\n    _TonClient4_adapter.set(this, void 0);\n    _TonClient4_axios.set(this, void 0);\n    __classPrivateFieldSet(this, _TonClient4_axios, axios_1.default.create(), \"f\");\n    __classPrivateFieldSet(this, _TonClient4_endpoint, args.endpoint, \"f\");\n    __classPrivateFieldSet(this, _TonClient4_timeout, args.timeout || 5000, \"f\");\n    __classPrivateFieldSet(this, _TonClient4_adapter, args.httpAdapter, \"f\");\n    if (args.requestInterceptor) {\n      __classPrivateFieldGet(this, _TonClient4_axios, \"f\").interceptors.request.use(args.requestInterceptor);\n    }\n  }\n  /**\n   * Get Last Block\n   * @returns last block info\n   */\n  async getLastBlock() {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/latest', {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let lastBlock = lastBlockCodec.safeParse(res.data);\n    if (!lastBlock.success) {\n      throw Error('Mailformed response: ' + lastBlock.error.format()._errors.join(', '));\n    }\n    return lastBlock.data;\n  }\n  /**\n   * Get block info\n   * @param seqno block sequence number\n   * @returns block info\n   */\n  async getBlock(seqno) {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno, {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let block = blockCodec.safeParse(res.data);\n    if (!block.success) {\n      throw Error('Mailformed response');\n    }\n    if (!block.data.exist) {\n      throw Error('Block is out of scope');\n    }\n    return block.data.block;\n  }\n  /**\n   * Get block info by unix timestamp\n   * @param ts unix timestamp\n   * @returns block info\n   */\n  async getBlockByUtime(ts) {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/utime/' + ts, {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let block = blockCodec.safeParse(res.data);\n    if (!block.success) {\n      throw Error('Mailformed response');\n    }\n    if (!block.data.exist) {\n      throw Error('Block is out of scope');\n    }\n    return block.data.block;\n  }\n  /**\n   * Get block info by unix timestamp\n   * @param seqno block sequence number\n   * @param address account address\n   * @returns account info\n   */\n  async getAccount(seqno, address) {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/' + address.toString({\n      urlSafe: true\n    }), {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let account = accountCodec.safeParse(res.data);\n    if (!account.success) {\n      throw Error('Mailformed response');\n    }\n    return account.data;\n  }\n  /**\n   * Get account lite info (without code and data)\n   * @param seqno block sequence number\n   * @param address account address\n   * @returns account lite info\n   */\n  async getAccountLite(seqno, address) {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/' + address.toString({\n      urlSafe: true\n    }) + '/lite', {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let account = accountLiteCodec.safeParse(res.data);\n    if (!account.success) {\n      throw Error('Mailformed response');\n    }\n    return account.data;\n  }\n  /**\n   * Check if contract is deployed\n   * @param address addres to check\n   * @returns true if contract is in active state\n   */\n  async isContractDeployed(seqno, address) {\n    let account = await this.getAccountLite(seqno, address);\n    return account.account.state.type === 'active';\n  }\n  /**\n   * Check if account was updated since\n   * @param seqno block sequence number\n   * @param address account address\n   * @param lt account last transaction lt\n   * @returns account change info\n   */\n  async isAccountChanged(seqno, address, lt) {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/' + address.toString({\n      urlSafe: true\n    }) + '/changed/' + lt.toString(10), {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let changed = changedCodec.safeParse(res.data);\n    if (!changed.success) {\n      throw Error('Mailformed response');\n    }\n    return changed.data;\n  }\n  /**\n   * Load unparsed account transactions\n   * @param address address\n   * @param lt last transaction lt\n   * @param hash last transaction hash\n   * @returns unparsed transactions\n   */\n  async getAccountTransactions(address, lt, hash) {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/account/' + address.toString({\n      urlSafe: true\n    }) + '/tx/' + lt.toString(10) + '/' + (0, toUrlSafe_1.toUrlSafe)(hash.toString('base64')), {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let transactions = transactionsCodec.safeParse(res.data);\n    if (!transactions.success) {\n      throw Error('Mailformed response');\n    }\n    let data = transactions.data;\n    let tx = [];\n    let cells = core_1.Cell.fromBoc(Buffer.from(data.boc, 'base64'));\n    for (let i = 0; i < data.blocks.length; i++) {\n      tx.push({\n        block: data.blocks[i],\n        tx: (0, core_1.loadTransaction)(cells[i].beginParse())\n      });\n    }\n    return tx;\n  }\n  /**\n   * Load parsed account transactions\n   * @param address address\n   * @param lt last transaction lt\n   * @param hash last transaction hash\n   * @param count number of transactions to load\n   * @returns parsed transactions\n   */\n  async getAccountTransactionsParsed(address, lt, hash, count = 20) {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/account/' + address.toString({\n      urlSafe: true\n    }) + '/tx/parsed/' + lt.toString(10) + '/' + (0, toUrlSafe_1.toUrlSafe)(hash.toString('base64')), {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\"),\n      params: {\n        count\n      }\n    });\n    let parsedTransactionsRes = parsedTransactionsCodec.safeParse(res.data);\n    if (!parsedTransactionsRes.success) {\n      throw Error('Mailformed response');\n    }\n    return parsedTransactionsRes.data;\n  }\n  /**\n   * Get network config\n   * @param seqno block sequence number\n   * @param ids optional config ids\n   * @returns network config\n   */\n  async getConfig(seqno, ids) {\n    let tail = '';\n    if (ids && ids.length > 0) {\n      tail = '/' + [...ids].sort().join(',');\n    }\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/config' + tail, {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let config = configCodec.safeParse(res.data);\n    if (!config.success) {\n      throw Error('Mailformed response');\n    }\n    return config.data;\n  }\n  /**\n   * Execute run method\n   * @param seqno block sequence number\n   * @param address account address\n   * @param name method name\n   * @param args method arguments\n   * @returns method result\n   */\n  async runMethod(seqno, address, name, args) {\n    let tail = args && args.length > 0 ? '/' + (0, toUrlSafe_1.toUrlSafe)((0, core_1.serializeTuple)(args).toBoc({\n      idx: false,\n      crc32: false\n    }).toString('base64')) : '';\n    let url = __classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/' + address.toString({\n      urlSafe: true\n    }) + '/run/' + encodeURIComponent(name) + tail;\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(url, {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let runMethod = runMethodCodec.safeParse(res.data);\n    if (!runMethod.success) {\n      throw Error('Mailformed response');\n    }\n    let resultTuple = runMethod.data.resultRaw ? (0, core_1.parseTuple)(core_1.Cell.fromBoc(Buffer.from(runMethod.data.resultRaw, 'base64'))[0]) : [];\n    return {\n      exitCode: runMethod.data.exitCode,\n      result: resultTuple,\n      resultRaw: runMethod.data.resultRaw,\n      block: runMethod.data.block,\n      shardBlock: runMethod.data.shardBlock,\n      reader: new core_1.TupleReader(resultTuple)\n    };\n  }\n  /**\n   * Send external message\n   * @param message message boc\n   * @returns message status\n   */\n  async sendMessage(message) {\n    let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").post(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/send', {\n      boc: message.toString('base64')\n    }, {\n      adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n      timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\")\n    });\n    let send = sendCodec.safeParse(res.data);\n    if (!send.success) {\n      throw Error('Mailformed response');\n    }\n    return {\n      status: res.data.status\n    };\n  }\n  /**\n   * Open smart contract\n   * @param contract contract\n   * @returns opened contract\n   */\n  open(contract) {\n    return (0, core_1.openContract)(contract, args => createProvider(this, null, args.address, args.init));\n  }\n  /**\n   * Open smart contract\n   * @param block block number\n   * @param contract contract\n   * @returns opened contract\n   */\n  openAt(block, contract) {\n    return (0, core_1.openContract)(contract, args => createProvider(this, block, args.address, args.init));\n  }\n  /**\n   * Create provider\n   * @param address address\n   * @param init optional init data\n   * @returns provider\n   */\n  provider(address, init) {\n    return createProvider(this, null, address, init ?? null);\n  }\n  /**\n   * Create provider at specified block number\n   * @param block block number\n   * @param address address\n   * @param init optional init data\n   * @returns provider\n   */\n  providerAt(block, address, init) {\n    return createProvider(this, block, address, init ?? null);\n  }\n}\nexports.TonClient4 = TonClient4;\n_TonClient4_endpoint = new WeakMap(), _TonClient4_timeout = new WeakMap(), _TonClient4_adapter = new WeakMap(), _TonClient4_axios = new WeakMap();\nfunction createProvider(client, block, address, init) {\n  return {\n    async getState() {\n      // Resolve block\n      let sq = block;\n      if (sq === null) {\n        let res = await client.getLastBlock();\n        sq = res.last.seqno;\n      }\n      // Load state\n      let state = await client.getAccount(sq, address);\n      // Convert state\n      let last = state.account.last ? {\n        lt: BigInt(state.account.last.lt),\n        hash: Buffer.from(state.account.last.hash, 'base64')\n      } : null;\n      let storage;\n      if (state.account.state.type === 'active') {\n        storage = {\n          type: 'active',\n          code: state.account.state.code ? Buffer.from(state.account.state.code, 'base64') : null,\n          data: state.account.state.data ? Buffer.from(state.account.state.data, 'base64') : null\n        };\n      } else if (state.account.state.type === 'uninit') {\n        storage = {\n          type: 'uninit'\n        };\n      } else if (state.account.state.type === 'frozen') {\n        storage = {\n          type: 'frozen',\n          stateHash: Buffer.from(state.account.state.stateHash, 'base64')\n        };\n      } else {\n        throw Error('Unsupported state');\n      }\n      return {\n        balance: BigInt(state.account.balance.coins),\n        last: last,\n        state: storage\n      };\n    },\n    async get(name, args) {\n      let sq = block;\n      if (sq === null) {\n        let res = await client.getLastBlock();\n        sq = res.last.seqno;\n      }\n      let method = await client.runMethod(sq, address, name, args);\n      if (method.exitCode !== 0 && method.exitCode !== 1) {\n        throw Error('Exit code: ' + method.exitCode);\n      }\n      return {\n        stack: new core_1.TupleReader(method.result)\n      };\n    },\n    async external(message) {\n      // Resolve last\n      let last = await client.getLastBlock();\n      // Resolve init\n      let neededInit = null;\n      if (init && (await client.getAccountLite(last.last.seqno, address)).account.state.type !== 'active') {\n        neededInit = init;\n      }\n      // Send with state init\n      const ext = (0, core_1.external)({\n        to: address,\n        init: neededInit,\n        body: message\n      });\n      let pkg = (0, core_1.beginCell)().store((0, core_1.storeMessage)(ext)).endCell().toBoc();\n      await client.sendMessage(pkg);\n    },\n    async internal(via, message) {\n      // Resolve last\n      let last = await client.getLastBlock();\n      // Resolve init\n      let neededInit = null;\n      if (init && (await client.getAccountLite(last.last.seqno, address)).account.state.type !== 'active') {\n        neededInit = init;\n      }\n      // Resolve bounce\n      let bounce = true;\n      if (message.bounce !== null && message.bounce !== undefined) {\n        bounce = message.bounce;\n      }\n      // Resolve value\n      let value;\n      if (typeof message.value === 'string') {\n        value = (0, core_1.toNano)(message.value);\n      } else {\n        value = message.value;\n      }\n      // Resolve body\n      let body = null;\n      if (typeof message.body === 'string') {\n        body = (0, core_1.comment)(message.body);\n      } else if (message.body) {\n        body = message.body;\n      }\n      // Send internal message\n      await via.send({\n        to: address,\n        value,\n        bounce,\n        sendMode: message.sendMode,\n        init: neededInit,\n        body\n      });\n    },\n    open(contract) {\n      return (0, core_1.openContract)(contract, args => createProvider(client, block, args.address, args.init ?? null));\n    },\n    async getTransactions(address, lt, hash, limit) {\n      // Resolve last\n      const useLimit = typeof limit === 'number';\n      if (useLimit && limit <= 0) {\n        return [];\n      }\n      // Load transactions\n      let transactions = [];\n      do {\n        const txs = await client.getAccountTransactions(address, lt, hash);\n        const firstTx = txs[0].tx;\n        const [firstLt, firstHash] = [firstTx.lt, firstTx.hash()];\n        const needSkipFirst = transactions.length > 0 && firstLt === lt && firstHash.equals(hash);\n        if (needSkipFirst) {\n          txs.shift();\n        }\n        if (txs.length === 0) {\n          break;\n        }\n        const lastTx = txs[txs.length - 1].tx;\n        const [lastLt, lastHash] = [lastTx.lt, lastTx.hash()];\n        if (lastLt === lt && lastHash.equals(hash)) {\n          break;\n        }\n        transactions.push(...txs.map(tx => tx.tx));\n        lt = lastLt;\n        hash = lastHash;\n      } while (useLimit && transactions.length < limit);\n      // Apply limit\n      if (useLimit) {\n        transactions = transactions.slice(0, limit);\n      }\n      // Return transactions\n      return transactions;\n    }\n  };\n}\n//\n// Codecs\n//\nconst lastBlockCodec = zod_1.z.object({\n  last: zod_1.z.object({\n    seqno: zod_1.z.number(),\n    shard: zod_1.z.string(),\n    workchain: zod_1.z.number(),\n    fileHash: zod_1.z.string(),\n    rootHash: zod_1.z.string()\n  }),\n  init: zod_1.z.object({\n    fileHash: zod_1.z.string(),\n    rootHash: zod_1.z.string()\n  }),\n  stateRootHash: zod_1.z.string(),\n  now: zod_1.z.number()\n});\nconst blockCodec = zod_1.z.union([zod_1.z.object({\n  exist: zod_1.z.literal(false)\n}), zod_1.z.object({\n  exist: zod_1.z.literal(true),\n  block: zod_1.z.object({\n    shards: zod_1.z.array(zod_1.z.object({\n      workchain: zod_1.z.number(),\n      seqno: zod_1.z.number(),\n      shard: zod_1.z.string(),\n      rootHash: zod_1.z.string(),\n      fileHash: zod_1.z.string(),\n      transactions: zod_1.z.array(zod_1.z.object({\n        account: zod_1.z.string(),\n        hash: zod_1.z.string(),\n        lt: zod_1.z.string()\n      }))\n    }))\n  })\n})]);\n// {\"lastPaid\":1653099243,\"duePayment\":null,\"used\":{\"bits\":119,\"cells\":1,\"publicCells\":0}}\nconst storageStatCodec = zod_1.z.object({\n  lastPaid: zod_1.z.number(),\n  duePayment: zod_1.z.union([zod_1.z.null(), zod_1.z.string()]),\n  used: zod_1.z.object({\n    bits: zod_1.z.number(),\n    cells: zod_1.z.number(),\n    publicCells: zod_1.z.number()\n  })\n});\nconst accountCodec = zod_1.z.object({\n  account: zod_1.z.object({\n    state: zod_1.z.union([zod_1.z.object({\n      type: zod_1.z.literal('uninit')\n    }), zod_1.z.object({\n      type: zod_1.z.literal('active'),\n      code: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n      data: zod_1.z.union([zod_1.z.string(), zod_1.z.null()])\n    }), zod_1.z.object({\n      type: zod_1.z.literal('frozen'),\n      stateHash: zod_1.z.string()\n    })]),\n    balance: zod_1.z.object({\n      coins: zod_1.z.string()\n    }),\n    last: zod_1.z.union([zod_1.z.null(), zod_1.z.object({\n      lt: zod_1.z.string(),\n      hash: zod_1.z.string()\n    })]),\n    storageStat: zod_1.z.union([zod_1.z.null(), storageStatCodec])\n  }),\n  block: zod_1.z.object({\n    workchain: zod_1.z.number(),\n    seqno: zod_1.z.number(),\n    shard: zod_1.z.string(),\n    rootHash: zod_1.z.string(),\n    fileHash: zod_1.z.string()\n  })\n});\nconst accountLiteCodec = zod_1.z.object({\n  account: zod_1.z.object({\n    state: zod_1.z.union([zod_1.z.object({\n      type: zod_1.z.literal('uninit')\n    }), zod_1.z.object({\n      type: zod_1.z.literal('active'),\n      codeHash: zod_1.z.string(),\n      dataHash: zod_1.z.string()\n    }), zod_1.z.object({\n      type: zod_1.z.literal('frozen'),\n      stateHash: zod_1.z.string()\n    })]),\n    balance: zod_1.z.object({\n      coins: zod_1.z.string()\n    }),\n    last: zod_1.z.union([zod_1.z.null(), zod_1.z.object({\n      lt: zod_1.z.string(),\n      hash: zod_1.z.string()\n    })]),\n    storageStat: zod_1.z.union([zod_1.z.null(), storageStatCodec])\n  })\n});\nconst changedCodec = zod_1.z.object({\n  changed: zod_1.z.boolean(),\n  block: zod_1.z.object({\n    workchain: zod_1.z.number(),\n    seqno: zod_1.z.number(),\n    shard: zod_1.z.string(),\n    rootHash: zod_1.z.string(),\n    fileHash: zod_1.z.string()\n  })\n});\nconst runMethodCodec = zod_1.z.object({\n  exitCode: zod_1.z.number(),\n  resultRaw: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n  block: zod_1.z.object({\n    workchain: zod_1.z.number(),\n    seqno: zod_1.z.number(),\n    shard: zod_1.z.string(),\n    rootHash: zod_1.z.string(),\n    fileHash: zod_1.z.string()\n  }),\n  shardBlock: zod_1.z.object({\n    workchain: zod_1.z.number(),\n    seqno: zod_1.z.number(),\n    shard: zod_1.z.string(),\n    rootHash: zod_1.z.string(),\n    fileHash: zod_1.z.string()\n  })\n});\nconst configCodec = zod_1.z.object({\n  config: zod_1.z.object({\n    cell: zod_1.z.string(),\n    address: zod_1.z.string(),\n    globalBalance: zod_1.z.object({\n      coins: zod_1.z.string()\n    })\n  })\n});\nconst sendCodec = zod_1.z.object({\n  status: zod_1.z.number()\n});\nconst blocksCodec = zod_1.z.array(zod_1.z.object({\n  workchain: zod_1.z.number(),\n  seqno: zod_1.z.number(),\n  shard: zod_1.z.string(),\n  rootHash: zod_1.z.string(),\n  fileHash: zod_1.z.string()\n}));\nconst transactionsCodec = zod_1.z.object({\n  blocks: blocksCodec,\n  boc: zod_1.z.string()\n});\nconst parsedAddressExternalCodec = zod_1.z.object({\n  bits: zod_1.z.number(),\n  data: zod_1.z.string()\n});\nconst parsedMessageInfoCodec = zod_1.z.union([zod_1.z.object({\n  type: zod_1.z.literal('internal'),\n  value: zod_1.z.string(),\n  dest: zod_1.z.string(),\n  src: zod_1.z.string(),\n  bounced: zod_1.z.boolean(),\n  bounce: zod_1.z.boolean(),\n  ihrDisabled: zod_1.z.boolean(),\n  createdAt: zod_1.z.number(),\n  createdLt: zod_1.z.string(),\n  fwdFee: zod_1.z.string(),\n  ihrFee: zod_1.z.string()\n}), zod_1.z.object({\n  type: zod_1.z.literal('external-in'),\n  dest: zod_1.z.string(),\n  src: zod_1.z.union([parsedAddressExternalCodec, zod_1.z.null()]),\n  importFee: zod_1.z.string()\n}), zod_1.z.object({\n  type: zod_1.z.literal('external-out'),\n  dest: zod_1.z.union([parsedAddressExternalCodec, zod_1.z.null()])\n})]);\nconst parsedStateInitCodec = zod_1.z.object({\n  splitDepth: zod_1.z.union([zod_1.z.number(), zod_1.z.null()]),\n  code: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n  data: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n  special: zod_1.z.union([zod_1.z.object({\n    tick: zod_1.z.boolean(),\n    tock: zod_1.z.boolean()\n  }), zod_1.z.null()])\n});\nconst parsedMessageCodec = zod_1.z.object({\n  body: zod_1.z.string(),\n  info: parsedMessageInfoCodec,\n  init: zod_1.z.union([parsedStateInitCodec, zod_1.z.null()])\n});\nconst accountStatusCodec = zod_1.z.union([zod_1.z.literal('uninitialized'), zod_1.z.literal('frozen'), zod_1.z.literal('active'), zod_1.z.literal('non-existing')]);\nconst txBodyCodec = zod_1.z.union([zod_1.z.object({\n  type: zod_1.z.literal('comment'),\n  comment: zod_1.z.string()\n}), zod_1.z.object({\n  type: zod_1.z.literal('payload'),\n  cell: zod_1.z.string()\n})]);\nconst parsedOperationItemCodec = zod_1.z.union([zod_1.z.object({\n  kind: zod_1.z.literal('ton'),\n  amount: zod_1.z.string()\n}), zod_1.z.object({\n  kind: zod_1.z.literal('token'),\n  amount: zod_1.z.string()\n})]);\nconst supportedMessageTypeCodec = zod_1.z.union([zod_1.z.literal('jetton::excesses'), zod_1.z.literal('jetton::transfer'), zod_1.z.literal('jetton::transfer_notification'), zod_1.z.literal('deposit'), zod_1.z.literal('deposit::ok'), zod_1.z.literal('withdraw'), zod_1.z.literal('withdraw::all'), zod_1.z.literal('withdraw::delayed'), zod_1.z.literal('withdraw::ok'), zod_1.z.literal('airdrop')]);\nconst opCodec = zod_1.z.object({\n  type: supportedMessageTypeCodec,\n  options: zod_1.z.optional(zod_1.z.record(zod_1.z.string()))\n});\nconst parsedOperationCodec = zod_1.z.object({\n  address: zod_1.z.string(),\n  comment: zod_1.z.optional(zod_1.z.string()),\n  items: zod_1.z.array(parsedOperationItemCodec),\n  op: zod_1.z.optional(opCodec)\n});\nconst parsedTransactionCodec = zod_1.z.object({\n  address: zod_1.z.string(),\n  lt: zod_1.z.string(),\n  hash: zod_1.z.string(),\n  prevTransaction: zod_1.z.object({\n    lt: zod_1.z.string(),\n    hash: zod_1.z.string()\n  }),\n  time: zod_1.z.number(),\n  outMessagesCount: zod_1.z.number(),\n  oldStatus: accountStatusCodec,\n  newStatus: accountStatusCodec,\n  fees: zod_1.z.string(),\n  update: zod_1.z.object({\n    oldHash: zod_1.z.string(),\n    newHash: zod_1.z.string()\n  }),\n  inMessage: zod_1.z.union([parsedMessageCodec, zod_1.z.null()]),\n  outMessages: zod_1.z.array(parsedMessageCodec),\n  parsed: zod_1.z.object({\n    seqno: zod_1.z.union([zod_1.z.number(), zod_1.z.null()]),\n    body: zod_1.z.union([txBodyCodec, zod_1.z.null()]),\n    status: zod_1.z.union([zod_1.z.literal('success'), zod_1.z.literal('failed'), zod_1.z.literal('pending')]),\n    dest: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n    kind: zod_1.z.union([zod_1.z.literal('out'), zod_1.z.literal('in')]),\n    amount: zod_1.z.string(),\n    resolvedAddress: zod_1.z.string(),\n    bounced: zod_1.z.boolean(),\n    mentioned: zod_1.z.array(zod_1.z.string())\n  }),\n  operation: parsedOperationCodec\n});\nconst parsedTransactionsCodec = zod_1.z.object({\n  blocks: blocksCodec,\n  transactions: zod_1.z.array(parsedTransactionCodec)\n});","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","__importDefault","mod","__esModule","_TonClient4_endpoint","_TonClient4_timeout","_TonClient4_adapter","_TonClient4_axios","Object","defineProperty","exports","TonClient4","axios_1","require","core_1","toUrlSafe_1","zod_1","constructor","args","default","create","endpoint","timeout","httpAdapter","requestInterceptor","interceptors","request","use","getLastBlock","res","adapter","lastBlock","lastBlockCodec","safeParse","data","success","Error","error","format","_errors","join","getBlock","seqno","block","blockCodec","exist","getBlockByUtime","ts","getAccount","address","toString","urlSafe","account","accountCodec","getAccountLite","accountLiteCodec","isContractDeployed","type","isAccountChanged","lt","changed","changedCodec","getAccountTransactions","hash","toUrlSafe","transactions","transactionsCodec","tx","cells","Cell","fromBoc","Buffer","from","boc","i","blocks","length","push","loadTransaction","beginParse","getAccountTransactionsParsed","count","params","parsedTransactionsRes","parsedTransactionsCodec","getConfig","ids","tail","sort","config","configCodec","runMethod","name","serializeTuple","toBoc","idx","crc32","url","encodeURIComponent","runMethodCodec","resultTuple","resultRaw","parseTuple","exitCode","result","shardBlock","reader","TupleReader","sendMessage","message","post","send","sendCodec","status","open","contract","openContract","createProvider","init","openAt","provider","providerAt","WeakMap","client","getState","sq","last","BigInt","storage","code","stateHash","balance","coins","method","stack","external","neededInit","ext","to","body","pkg","beginCell","store","storeMessage","endCell","internal","via","bounce","undefined","toNano","comment","sendMode","getTransactions","limit","useLimit","txs","firstTx","firstLt","firstHash","needSkipFirst","equals","shift","lastTx","lastLt","lastHash","map","slice","z","object","number","shard","string","workchain","fileHash","rootHash","stateRootHash","now","union","literal","shards","array","storageStatCodec","lastPaid","duePayment","null","used","bits","publicCells","storageStat","codeHash","dataHash","boolean","cell","globalBalance","blocksCodec","parsedAddressExternalCodec","parsedMessageInfoCodec","dest","src","bounced","ihrDisabled","createdAt","createdLt","fwdFee","ihrFee","importFee","parsedStateInitCodec","splitDepth","special","tick","tock","parsedMessageCodec","info","accountStatusCodec","txBodyCodec","parsedOperationItemCodec","amount","supportedMessageTypeCodec","opCodec","options","optional","record","parsedOperationCodec","items","op","parsedTransactionCodec","prevTransaction","time","outMessagesCount","oldStatus","newStatus","fees","update","oldHash","newHash","inMessage","outMessages","parsed","resolvedAddress","mentioned","operation"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/ton/dist/client/TonClient4.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _TonClient4_endpoint, _TonClient4_timeout, _TonClient4_adapter, _TonClient4_axios;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonClient4 = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nconst core_1 = require(\"@ton/core\");\nconst toUrlSafe_1 = require(\"../utils/toUrlSafe\");\nconst zod_1 = require(\"zod\");\nclass TonClient4 {\n    constructor(args) {\n        _TonClient4_endpoint.set(this, void 0);\n        _TonClient4_timeout.set(this, void 0);\n        _TonClient4_adapter.set(this, void 0);\n        _TonClient4_axios.set(this, void 0);\n        __classPrivateFieldSet(this, _TonClient4_axios, axios_1.default.create(), \"f\");\n        __classPrivateFieldSet(this, _TonClient4_endpoint, args.endpoint, \"f\");\n        __classPrivateFieldSet(this, _TonClient4_timeout, args.timeout || 5000, \"f\");\n        __classPrivateFieldSet(this, _TonClient4_adapter, args.httpAdapter, \"f\");\n        if (args.requestInterceptor) {\n            __classPrivateFieldGet(this, _TonClient4_axios, \"f\").interceptors.request.use(args.requestInterceptor);\n        }\n    }\n    /**\n     * Get Last Block\n     * @returns last block info\n     */\n    async getLastBlock() {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/latest', { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let lastBlock = lastBlockCodec.safeParse(res.data);\n        if (!lastBlock.success) {\n            throw Error('Mailformed response: ' + lastBlock.error.format()._errors.join(', '));\n        }\n        return lastBlock.data;\n    }\n    /**\n     * Get block info\n     * @param seqno block sequence number\n     * @returns block info\n     */\n    async getBlock(seqno) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let block = blockCodec.safeParse(res.data);\n        if (!block.success) {\n            throw Error('Mailformed response');\n        }\n        if (!block.data.exist) {\n            throw Error('Block is out of scope');\n        }\n        return block.data.block;\n    }\n    /**\n     * Get block info by unix timestamp\n     * @param ts unix timestamp\n     * @returns block info\n     */\n    async getBlockByUtime(ts) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/utime/' + ts, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let block = blockCodec.safeParse(res.data);\n        if (!block.success) {\n            throw Error('Mailformed response');\n        }\n        if (!block.data.exist) {\n            throw Error('Block is out of scope');\n        }\n        return block.data.block;\n    }\n    /**\n     * Get block info by unix timestamp\n     * @param seqno block sequence number\n     * @param address account address\n     * @returns account info\n     */\n    async getAccount(seqno, address) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/' + address.toString({ urlSafe: true }), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let account = accountCodec.safeParse(res.data);\n        if (!account.success) {\n            throw Error('Mailformed response');\n        }\n        return account.data;\n    }\n    /**\n     * Get account lite info (without code and data)\n     * @param seqno block sequence number\n     * @param address account address\n     * @returns account lite info\n     */\n    async getAccountLite(seqno, address) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/' + address.toString({ urlSafe: true }) + '/lite', { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let account = accountLiteCodec.safeParse(res.data);\n        if (!account.success) {\n            throw Error('Mailformed response');\n        }\n        return account.data;\n    }\n    /**\n     * Check if contract is deployed\n     * @param address addres to check\n     * @returns true if contract is in active state\n     */\n    async isContractDeployed(seqno, address) {\n        let account = await this.getAccountLite(seqno, address);\n        return account.account.state.type === 'active';\n    }\n    /**\n     * Check if account was updated since\n     * @param seqno block sequence number\n     * @param address account address\n     * @param lt account last transaction lt\n     * @returns account change info\n     */\n    async isAccountChanged(seqno, address, lt) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/' + address.toString({ urlSafe: true }) + '/changed/' + lt.toString(10), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let changed = changedCodec.safeParse(res.data);\n        if (!changed.success) {\n            throw Error('Mailformed response');\n        }\n        return changed.data;\n    }\n    /**\n     * Load unparsed account transactions\n     * @param address address\n     * @param lt last transaction lt\n     * @param hash last transaction hash\n     * @returns unparsed transactions\n     */\n    async getAccountTransactions(address, lt, hash) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/account/' + address.toString({ urlSafe: true }) + '/tx/' + lt.toString(10) + '/' + (0, toUrlSafe_1.toUrlSafe)(hash.toString('base64')), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let transactions = transactionsCodec.safeParse(res.data);\n        if (!transactions.success) {\n            throw Error('Mailformed response');\n        }\n        let data = transactions.data;\n        let tx = [];\n        let cells = core_1.Cell.fromBoc(Buffer.from(data.boc, 'base64'));\n        for (let i = 0; i < data.blocks.length; i++) {\n            tx.push({\n                block: data.blocks[i],\n                tx: (0, core_1.loadTransaction)(cells[i].beginParse())\n            });\n        }\n        return tx;\n    }\n    /**\n     * Load parsed account transactions\n     * @param address address\n     * @param lt last transaction lt\n     * @param hash last transaction hash\n     * @param count number of transactions to load\n     * @returns parsed transactions\n     */\n    async getAccountTransactionsParsed(address, lt, hash, count = 20) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/account/' + address.toString({ urlSafe: true }) + '/tx/parsed/' + lt.toString(10) + '/' + (0, toUrlSafe_1.toUrlSafe)(hash.toString('base64')), {\n            adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"),\n            timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\"),\n            params: {\n                count\n            }\n        });\n        let parsedTransactionsRes = parsedTransactionsCodec.safeParse(res.data);\n        if (!parsedTransactionsRes.success) {\n            throw Error('Mailformed response');\n        }\n        return parsedTransactionsRes.data;\n    }\n    /**\n     * Get network config\n     * @param seqno block sequence number\n     * @param ids optional config ids\n     * @returns network config\n     */\n    async getConfig(seqno, ids) {\n        let tail = '';\n        if (ids && ids.length > 0) {\n            tail = '/' + [...ids].sort().join(',');\n        }\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/config' + tail, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let config = configCodec.safeParse(res.data);\n        if (!config.success) {\n            throw Error('Mailformed response');\n        }\n        return config.data;\n    }\n    /**\n     * Execute run method\n     * @param seqno block sequence number\n     * @param address account address\n     * @param name method name\n     * @param args method arguments\n     * @returns method result\n     */\n    async runMethod(seqno, address, name, args) {\n        let tail = args && args.length > 0 ? '/' + (0, toUrlSafe_1.toUrlSafe)((0, core_1.serializeTuple)(args).toBoc({ idx: false, crc32: false }).toString('base64')) : '';\n        let url = __classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/block/' + seqno + '/' + address.toString({ urlSafe: true }) + '/run/' + encodeURIComponent(name) + tail;\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").get(url, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let runMethod = runMethodCodec.safeParse(res.data);\n        if (!runMethod.success) {\n            throw Error('Mailformed response');\n        }\n        let resultTuple = runMethod.data.resultRaw ? (0, core_1.parseTuple)(core_1.Cell.fromBoc(Buffer.from(runMethod.data.resultRaw, 'base64'))[0]) : [];\n        return {\n            exitCode: runMethod.data.exitCode,\n            result: resultTuple,\n            resultRaw: runMethod.data.resultRaw,\n            block: runMethod.data.block,\n            shardBlock: runMethod.data.shardBlock,\n            reader: new core_1.TupleReader(resultTuple),\n        };\n    }\n    /**\n     * Send external message\n     * @param message message boc\n     * @returns message status\n     */\n    async sendMessage(message) {\n        let res = await __classPrivateFieldGet(this, _TonClient4_axios, \"f\").post(__classPrivateFieldGet(this, _TonClient4_endpoint, \"f\") + '/send', { boc: message.toString('base64') }, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, \"f\"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, \"f\") });\n        let send = sendCodec.safeParse(res.data);\n        if (!send.success) {\n            throw Error('Mailformed response');\n        }\n        return { status: res.data.status };\n    }\n    /**\n     * Open smart contract\n     * @param contract contract\n     * @returns opened contract\n     */\n    open(contract) {\n        return (0, core_1.openContract)(contract, (args) => createProvider(this, null, args.address, args.init));\n    }\n    /**\n     * Open smart contract\n     * @param block block number\n     * @param contract contract\n     * @returns opened contract\n     */\n    openAt(block, contract) {\n        return (0, core_1.openContract)(contract, (args) => createProvider(this, block, args.address, args.init));\n    }\n    /**\n     * Create provider\n     * @param address address\n     * @param init optional init data\n     * @returns provider\n     */\n    provider(address, init) {\n        return createProvider(this, null, address, init ?? null);\n    }\n    /**\n     * Create provider at specified block number\n     * @param block block number\n     * @param address address\n     * @param init optional init data\n     * @returns provider\n     */\n    providerAt(block, address, init) {\n        return createProvider(this, block, address, init ?? null);\n    }\n}\nexports.TonClient4 = TonClient4;\n_TonClient4_endpoint = new WeakMap(), _TonClient4_timeout = new WeakMap(), _TonClient4_adapter = new WeakMap(), _TonClient4_axios = new WeakMap();\nfunction createProvider(client, block, address, init) {\n    return {\n        async getState() {\n            // Resolve block\n            let sq = block;\n            if (sq === null) {\n                let res = await client.getLastBlock();\n                sq = res.last.seqno;\n            }\n            // Load state\n            let state = await client.getAccount(sq, address);\n            // Convert state\n            let last = state.account.last ? { lt: BigInt(state.account.last.lt), hash: Buffer.from(state.account.last.hash, 'base64') } : null;\n            let storage;\n            if (state.account.state.type === 'active') {\n                storage = {\n                    type: 'active',\n                    code: state.account.state.code ? Buffer.from(state.account.state.code, 'base64') : null,\n                    data: state.account.state.data ? Buffer.from(state.account.state.data, 'base64') : null,\n                };\n            }\n            else if (state.account.state.type === 'uninit') {\n                storage = {\n                    type: 'uninit',\n                };\n            }\n            else if (state.account.state.type === 'frozen') {\n                storage = {\n                    type: 'frozen',\n                    stateHash: Buffer.from(state.account.state.stateHash, 'base64'),\n                };\n            }\n            else {\n                throw Error('Unsupported state');\n            }\n            return {\n                balance: BigInt(state.account.balance.coins),\n                last: last,\n                state: storage\n            };\n        },\n        async get(name, args) {\n            let sq = block;\n            if (sq === null) {\n                let res = await client.getLastBlock();\n                sq = res.last.seqno;\n            }\n            let method = await client.runMethod(sq, address, name, args);\n            if (method.exitCode !== 0 && method.exitCode !== 1) {\n                throw Error('Exit code: ' + method.exitCode);\n            }\n            return {\n                stack: new core_1.TupleReader(method.result),\n            };\n        },\n        async external(message) {\n            // Resolve last\n            let last = await client.getLastBlock();\n            // Resolve init\n            let neededInit = null;\n            if (init && (await client.getAccountLite(last.last.seqno, address)).account.state.type !== 'active') {\n                neededInit = init;\n            }\n            // Send with state init\n            const ext = (0, core_1.external)({\n                to: address,\n                init: neededInit,\n                body: message\n            });\n            let pkg = (0, core_1.beginCell)()\n                .store((0, core_1.storeMessage)(ext))\n                .endCell()\n                .toBoc();\n            await client.sendMessage(pkg);\n        },\n        async internal(via, message) {\n            // Resolve last\n            let last = await client.getLastBlock();\n            // Resolve init\n            let neededInit = null;\n            if (init && (await client.getAccountLite(last.last.seqno, address)).account.state.type !== 'active') {\n                neededInit = init;\n            }\n            // Resolve bounce\n            let bounce = true;\n            if (message.bounce !== null && message.bounce !== undefined) {\n                bounce = message.bounce;\n            }\n            // Resolve value\n            let value;\n            if (typeof message.value === 'string') {\n                value = (0, core_1.toNano)(message.value);\n            }\n            else {\n                value = message.value;\n            }\n            // Resolve body\n            let body = null;\n            if (typeof message.body === 'string') {\n                body = (0, core_1.comment)(message.body);\n            }\n            else if (message.body) {\n                body = message.body;\n            }\n            // Send internal message\n            await via.send({\n                to: address,\n                value,\n                bounce,\n                sendMode: message.sendMode,\n                init: neededInit,\n                body\n            });\n        },\n        open(contract) {\n            return (0, core_1.openContract)(contract, (args) => createProvider(client, block, args.address, args.init ?? null));\n        },\n        async getTransactions(address, lt, hash, limit) {\n            // Resolve last\n            const useLimit = typeof limit === 'number';\n            if (useLimit && limit <= 0) {\n                return [];\n            }\n            // Load transactions\n            let transactions = [];\n            do {\n                const txs = await client.getAccountTransactions(address, lt, hash);\n                const firstTx = txs[0].tx;\n                const [firstLt, firstHash] = [firstTx.lt, firstTx.hash()];\n                const needSkipFirst = transactions.length > 0 && firstLt === lt && firstHash.equals(hash);\n                if (needSkipFirst) {\n                    txs.shift();\n                }\n                if (txs.length === 0) {\n                    break;\n                }\n                const lastTx = txs[txs.length - 1].tx;\n                const [lastLt, lastHash] = [lastTx.lt, lastTx.hash()];\n                if (lastLt === lt && lastHash.equals(hash)) {\n                    break;\n                }\n                transactions.push(...txs.map(tx => tx.tx));\n                lt = lastLt;\n                hash = lastHash;\n            } while (useLimit && transactions.length < limit);\n            // Apply limit\n            if (useLimit) {\n                transactions = transactions.slice(0, limit);\n            }\n            // Return transactions\n            return transactions;\n        }\n    };\n}\n//\n// Codecs\n//\nconst lastBlockCodec = zod_1.z.object({\n    last: zod_1.z.object({\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        workchain: zod_1.z.number(),\n        fileHash: zod_1.z.string(),\n        rootHash: zod_1.z.string()\n    }),\n    init: zod_1.z.object({\n        fileHash: zod_1.z.string(),\n        rootHash: zod_1.z.string()\n    }),\n    stateRootHash: zod_1.z.string(),\n    now: zod_1.z.number()\n});\nconst blockCodec = zod_1.z.union([zod_1.z.object({\n        exist: zod_1.z.literal(false)\n    }), zod_1.z.object({\n        exist: zod_1.z.literal(true),\n        block: zod_1.z.object({\n            shards: zod_1.z.array(zod_1.z.object({\n                workchain: zod_1.z.number(),\n                seqno: zod_1.z.number(),\n                shard: zod_1.z.string(),\n                rootHash: zod_1.z.string(),\n                fileHash: zod_1.z.string(),\n                transactions: zod_1.z.array(zod_1.z.object({\n                    account: zod_1.z.string(),\n                    hash: zod_1.z.string(),\n                    lt: zod_1.z.string()\n                }))\n            }))\n        })\n    })]);\n// {\"lastPaid\":1653099243,\"duePayment\":null,\"used\":{\"bits\":119,\"cells\":1,\"publicCells\":0}}\nconst storageStatCodec = zod_1.z.object({\n    lastPaid: zod_1.z.number(),\n    duePayment: zod_1.z.union([zod_1.z.null(), zod_1.z.string()]),\n    used: zod_1.z.object({\n        bits: zod_1.z.number(),\n        cells: zod_1.z.number(),\n        publicCells: zod_1.z.number()\n    })\n});\nconst accountCodec = zod_1.z.object({\n    account: zod_1.z.object({\n        state: zod_1.z.union([\n            zod_1.z.object({ type: zod_1.z.literal('uninit') }),\n            zod_1.z.object({ type: zod_1.z.literal('active'), code: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]), data: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]) }),\n            zod_1.z.object({ type: zod_1.z.literal('frozen'), stateHash: zod_1.z.string() })\n        ]),\n        balance: zod_1.z.object({\n            coins: zod_1.z.string()\n        }),\n        last: zod_1.z.union([\n            zod_1.z.null(),\n            zod_1.z.object({\n                lt: zod_1.z.string(),\n                hash: zod_1.z.string()\n            })\n        ]),\n        storageStat: zod_1.z.union([zod_1.z.null(), storageStatCodec])\n    }),\n    block: zod_1.z.object({\n        workchain: zod_1.z.number(),\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        rootHash: zod_1.z.string(),\n        fileHash: zod_1.z.string()\n    })\n});\nconst accountLiteCodec = zod_1.z.object({\n    account: zod_1.z.object({\n        state: zod_1.z.union([\n            zod_1.z.object({ type: zod_1.z.literal('uninit') }),\n            zod_1.z.object({ type: zod_1.z.literal('active'), codeHash: zod_1.z.string(), dataHash: zod_1.z.string() }),\n            zod_1.z.object({ type: zod_1.z.literal('frozen'), stateHash: zod_1.z.string() })\n        ]),\n        balance: zod_1.z.object({\n            coins: zod_1.z.string()\n        }),\n        last: zod_1.z.union([\n            zod_1.z.null(),\n            zod_1.z.object({\n                lt: zod_1.z.string(),\n                hash: zod_1.z.string()\n            })\n        ]),\n        storageStat: zod_1.z.union([zod_1.z.null(), storageStatCodec])\n    })\n});\nconst changedCodec = zod_1.z.object({\n    changed: zod_1.z.boolean(),\n    block: zod_1.z.object({\n        workchain: zod_1.z.number(),\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        rootHash: zod_1.z.string(),\n        fileHash: zod_1.z.string()\n    })\n});\nconst runMethodCodec = zod_1.z.object({\n    exitCode: zod_1.z.number(),\n    resultRaw: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n    block: zod_1.z.object({\n        workchain: zod_1.z.number(),\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        rootHash: zod_1.z.string(),\n        fileHash: zod_1.z.string()\n    }),\n    shardBlock: zod_1.z.object({\n        workchain: zod_1.z.number(),\n        seqno: zod_1.z.number(),\n        shard: zod_1.z.string(),\n        rootHash: zod_1.z.string(),\n        fileHash: zod_1.z.string()\n    })\n});\nconst configCodec = zod_1.z.object({\n    config: zod_1.z.object({\n        cell: zod_1.z.string(),\n        address: zod_1.z.string(),\n        globalBalance: zod_1.z.object({\n            coins: zod_1.z.string()\n        })\n    })\n});\nconst sendCodec = zod_1.z.object({\n    status: zod_1.z.number()\n});\nconst blocksCodec = zod_1.z.array(zod_1.z.object({\n    workchain: zod_1.z.number(),\n    seqno: zod_1.z.number(),\n    shard: zod_1.z.string(),\n    rootHash: zod_1.z.string(),\n    fileHash: zod_1.z.string()\n}));\nconst transactionsCodec = zod_1.z.object({\n    blocks: blocksCodec,\n    boc: zod_1.z.string()\n});\nconst parsedAddressExternalCodec = zod_1.z.object({\n    bits: zod_1.z.number(),\n    data: zod_1.z.string()\n});\nconst parsedMessageInfoCodec = zod_1.z.union([\n    zod_1.z.object({\n        type: zod_1.z.literal('internal'),\n        value: zod_1.z.string(),\n        dest: zod_1.z.string(),\n        src: zod_1.z.string(),\n        bounced: zod_1.z.boolean(),\n        bounce: zod_1.z.boolean(),\n        ihrDisabled: zod_1.z.boolean(),\n        createdAt: zod_1.z.number(),\n        createdLt: zod_1.z.string(),\n        fwdFee: zod_1.z.string(),\n        ihrFee: zod_1.z.string()\n    }),\n    zod_1.z.object({\n        type: zod_1.z.literal('external-in'),\n        dest: zod_1.z.string(),\n        src: zod_1.z.union([parsedAddressExternalCodec, zod_1.z.null()]),\n        importFee: zod_1.z.string()\n    }),\n    zod_1.z.object({\n        type: zod_1.z.literal('external-out'),\n        dest: zod_1.z.union([parsedAddressExternalCodec, zod_1.z.null()])\n    })\n]);\nconst parsedStateInitCodec = zod_1.z.object({\n    splitDepth: zod_1.z.union([zod_1.z.number(), zod_1.z.null()]),\n    code: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n    data: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n    special: zod_1.z.union([zod_1.z.object({ tick: zod_1.z.boolean(), tock: zod_1.z.boolean() }), zod_1.z.null()])\n});\nconst parsedMessageCodec = zod_1.z.object({\n    body: zod_1.z.string(),\n    info: parsedMessageInfoCodec,\n    init: zod_1.z.union([parsedStateInitCodec, zod_1.z.null()])\n});\nconst accountStatusCodec = zod_1.z.union([zod_1.z.literal('uninitialized'), zod_1.z.literal('frozen'), zod_1.z.literal('active'), zod_1.z.literal('non-existing')]);\nconst txBodyCodec = zod_1.z.union([\n    zod_1.z.object({ type: zod_1.z.literal('comment'), comment: zod_1.z.string() }),\n    zod_1.z.object({ type: zod_1.z.literal('payload'), cell: zod_1.z.string() }),\n]);\nconst parsedOperationItemCodec = zod_1.z.union([\n    zod_1.z.object({ kind: zod_1.z.literal('ton'), amount: zod_1.z.string() }),\n    zod_1.z.object({ kind: zod_1.z.literal('token'), amount: zod_1.z.string() })\n]);\nconst supportedMessageTypeCodec = zod_1.z.union([\n    zod_1.z.literal('jetton::excesses'),\n    zod_1.z.literal('jetton::transfer'),\n    zod_1.z.literal('jetton::transfer_notification'),\n    zod_1.z.literal('deposit'),\n    zod_1.z.literal('deposit::ok'),\n    zod_1.z.literal('withdraw'),\n    zod_1.z.literal('withdraw::all'),\n    zod_1.z.literal('withdraw::delayed'),\n    zod_1.z.literal('withdraw::ok'),\n    zod_1.z.literal('airdrop')\n]);\nconst opCodec = zod_1.z.object({\n    type: supportedMessageTypeCodec,\n    options: zod_1.z.optional(zod_1.z.record(zod_1.z.string()))\n});\nconst parsedOperationCodec = zod_1.z.object({\n    address: zod_1.z.string(),\n    comment: zod_1.z.optional(zod_1.z.string()),\n    items: zod_1.z.array(parsedOperationItemCodec),\n    op: zod_1.z.optional(opCodec)\n});\nconst parsedTransactionCodec = zod_1.z.object({\n    address: zod_1.z.string(),\n    lt: zod_1.z.string(),\n    hash: zod_1.z.string(),\n    prevTransaction: zod_1.z.object({\n        lt: zod_1.z.string(),\n        hash: zod_1.z.string()\n    }),\n    time: zod_1.z.number(),\n    outMessagesCount: zod_1.z.number(),\n    oldStatus: accountStatusCodec,\n    newStatus: accountStatusCodec,\n    fees: zod_1.z.string(),\n    update: zod_1.z.object({\n        oldHash: zod_1.z.string(),\n        newHash: zod_1.z.string()\n    }),\n    inMessage: zod_1.z.union([parsedMessageCodec, zod_1.z.null()]),\n    outMessages: zod_1.z.array(parsedMessageCodec),\n    parsed: zod_1.z.object({\n        seqno: zod_1.z.union([zod_1.z.number(), zod_1.z.null()]),\n        body: zod_1.z.union([txBodyCodec, zod_1.z.null()]),\n        status: zod_1.z.union([zod_1.z.literal('success'), zod_1.z.literal('failed'), zod_1.z.literal('pending')]),\n        dest: zod_1.z.union([zod_1.z.string(), zod_1.z.null()]),\n        kind: zod_1.z.union([zod_1.z.literal('out'), zod_1.z.literal('in')]),\n        amount: zod_1.z.string(),\n        resolvedAddress: zod_1.z.string(),\n        bounced: zod_1.z.boolean(),\n        mentioned: zod_1.z.array(zod_1.z.string())\n    }),\n    operation: parsedOperationCodec\n});\nconst parsedTransactionsCodec = zod_1.z.object({\n    blocks: blocksCodec,\n    transactions: zod_1.z.array(parsedTransactionCodec)\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}