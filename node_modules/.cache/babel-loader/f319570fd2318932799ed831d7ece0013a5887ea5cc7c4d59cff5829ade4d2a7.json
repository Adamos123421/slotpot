{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exoticMerkleUpdate = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nfunction exoticMerkleUpdate(bits, refs) {\n  const reader = new BitReader_1.BitReader(bits);\n  // type + hash + hash + depth + depth\n  const size = 8 + 2 * (256 + 16);\n  if (bits.length !== size) {\n    throw new Error(`Merkle Update cell must have exactly (8 + (2 * (256 + 16))) bits, got \"${bits.length}\"`);\n  }\n  if (refs.length !== 2) {\n    throw new Error(`Merkle Update cell must have exactly 2 refs, got \"${refs.length}\"`);\n  }\n  let type = reader.loadUint(8);\n  if (type !== 4) {\n    throw new Error(`Merkle Update cell type must be exactly 4, got \"${type}\"`);\n  }\n  const proofHash1 = reader.loadBuffer(32);\n  const proofHash2 = reader.loadBuffer(32);\n  const proofDepth1 = reader.loadUint(16);\n  const proofDepth2 = reader.loadUint(16);\n  if (proofDepth1 !== refs[0].depth(0)) {\n    throw new Error(`Merkle Update cell ref depth must be exactly \"${proofDepth1}\", got \"${refs[0].depth(0)}\"`);\n  }\n  if (!proofHash1.equals(refs[0].hash(0))) {\n    throw new Error(`Merkle Update cell ref hash must be exactly \"${proofHash1.toString('hex')}\", got \"${refs[0].hash(0).toString('hex')}\"`);\n  }\n  if (proofDepth2 !== refs[1].depth(0)) {\n    throw new Error(`Merkle Update cell ref depth must be exactly \"${proofDepth2}\", got \"${refs[1].depth(0)}\"`);\n  }\n  if (!proofHash2.equals(refs[1].hash(0))) {\n    throw new Error(`Merkle Update cell ref hash must be exactly \"${proofHash2.toString('hex')}\", got \"${refs[1].hash(0).toString('hex')}\"`);\n  }\n  return {\n    proofDepth1,\n    proofDepth2,\n    proofHash1,\n    proofHash2\n  };\n}\nexports.exoticMerkleUpdate = exoticMerkleUpdate;","map":{"version":3,"names":["Object","defineProperty","exports","value","exoticMerkleUpdate","BitReader_1","require","bits","refs","reader","BitReader","size","length","Error","type","loadUint","proofHash1","loadBuffer","proofHash2","proofDepth1","proofDepth2","depth","equals","hash","toString"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/core/dist/boc/cell/exoticMerkleUpdate.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exoticMerkleUpdate = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nfunction exoticMerkleUpdate(bits, refs) {\n    const reader = new BitReader_1.BitReader(bits);\n    // type + hash + hash + depth + depth\n    const size = 8 + (2 * (256 + 16));\n    if (bits.length !== size) {\n        throw new Error(`Merkle Update cell must have exactly (8 + (2 * (256 + 16))) bits, got \"${bits.length}\"`);\n    }\n    if (refs.length !== 2) {\n        throw new Error(`Merkle Update cell must have exactly 2 refs, got \"${refs.length}\"`);\n    }\n    let type = reader.loadUint(8);\n    if (type !== 4) {\n        throw new Error(`Merkle Update cell type must be exactly 4, got \"${type}\"`);\n    }\n    const proofHash1 = reader.loadBuffer(32);\n    const proofHash2 = reader.loadBuffer(32);\n    const proofDepth1 = reader.loadUint(16);\n    const proofDepth2 = reader.loadUint(16);\n    if (proofDepth1 !== refs[0].depth(0)) {\n        throw new Error(`Merkle Update cell ref depth must be exactly \"${proofDepth1}\", got \"${refs[0].depth(0)}\"`);\n    }\n    if (!proofHash1.equals(refs[0].hash(0))) {\n        throw new Error(`Merkle Update cell ref hash must be exactly \"${proofHash1.toString('hex')}\", got \"${refs[0].hash(0).toString('hex')}\"`);\n    }\n    if (proofDepth2 !== refs[1].depth(0)) {\n        throw new Error(`Merkle Update cell ref depth must be exactly \"${proofDepth2}\", got \"${refs[1].depth(0)}\"`);\n    }\n    if (!proofHash2.equals(refs[1].hash(0))) {\n        throw new Error(`Merkle Update cell ref hash must be exactly \"${proofHash2.toString('hex')}\", got \"${refs[1].hash(0).toString('hex')}\"`);\n    }\n    return {\n        proofDepth1,\n        proofDepth2,\n        proofHash1,\n        proofHash2\n    };\n}\nexports.exoticMerkleUpdate = exoticMerkleUpdate;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,SAASF,kBAAkBA,CAACG,IAAI,EAAEC,IAAI,EAAE;EACpC,MAAMC,MAAM,GAAG,IAAIJ,WAAW,CAACK,SAAS,CAACH,IAAI,CAAC;EAC9C;EACA,MAAMI,IAAI,GAAG,CAAC,GAAI,CAAC,IAAI,GAAG,GAAG,EAAE,CAAE;EACjC,IAAIJ,IAAI,CAACK,MAAM,KAAKD,IAAI,EAAE;IACtB,MAAM,IAAIE,KAAK,CAAC,0EAA0EN,IAAI,CAACK,MAAM,GAAG,CAAC;EAC7G;EACA,IAAIJ,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;IACnB,MAAM,IAAIC,KAAK,CAAC,qDAAqDL,IAAI,CAACI,MAAM,GAAG,CAAC;EACxF;EACA,IAAIE,IAAI,GAAGL,MAAM,CAACM,QAAQ,CAAC,CAAC,CAAC;EAC7B,IAAID,IAAI,KAAK,CAAC,EAAE;IACZ,MAAM,IAAID,KAAK,CAAC,mDAAmDC,IAAI,GAAG,CAAC;EAC/E;EACA,MAAME,UAAU,GAAGP,MAAM,CAACQ,UAAU,CAAC,EAAE,CAAC;EACxC,MAAMC,UAAU,GAAGT,MAAM,CAACQ,UAAU,CAAC,EAAE,CAAC;EACxC,MAAME,WAAW,GAAGV,MAAM,CAACM,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAMK,WAAW,GAAGX,MAAM,CAACM,QAAQ,CAAC,EAAE,CAAC;EACvC,IAAII,WAAW,KAAKX,IAAI,CAAC,CAAC,CAAC,CAACa,KAAK,CAAC,CAAC,CAAC,EAAE;IAClC,MAAM,IAAIR,KAAK,CAAC,iDAAiDM,WAAW,WAAWX,IAAI,CAAC,CAAC,CAAC,CAACa,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/G;EACA,IAAI,CAACL,UAAU,CAACM,MAAM,CAACd,IAAI,CAAC,CAAC,CAAC,CAACe,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACrC,MAAM,IAAIV,KAAK,CAAC,gDAAgDG,UAAU,CAACQ,QAAQ,CAAC,KAAK,CAAC,WAAWhB,IAAI,CAAC,CAAC,CAAC,CAACe,IAAI,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;EAC5I;EACA,IAAIJ,WAAW,KAAKZ,IAAI,CAAC,CAAC,CAAC,CAACa,KAAK,CAAC,CAAC,CAAC,EAAE;IAClC,MAAM,IAAIR,KAAK,CAAC,iDAAiDO,WAAW,WAAWZ,IAAI,CAAC,CAAC,CAAC,CAACa,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/G;EACA,IAAI,CAACH,UAAU,CAACI,MAAM,CAACd,IAAI,CAAC,CAAC,CAAC,CAACe,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACrC,MAAM,IAAIV,KAAK,CAAC,gDAAgDK,UAAU,CAACM,QAAQ,CAAC,KAAK,CAAC,WAAWhB,IAAI,CAAC,CAAC,CAAC,CAACe,IAAI,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;EAC5I;EACA,OAAO;IACHL,WAAW;IACXC,WAAW;IACXJ,UAAU;IACVE;EACJ,CAAC;AACL;AACAhB,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}