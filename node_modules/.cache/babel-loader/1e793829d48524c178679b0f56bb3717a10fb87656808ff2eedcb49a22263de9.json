{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport socketService from '../services/socketService';\nimport useTelegramWebApp from './useTelegramWebApp';\nimport useJackpotContract from './useJackpotContract';\nimport winnerCoordinator from '../services/winnerCoordinator';\nconst useAppState = () => {\n  _s();\n  var _safeContractState$ti2;\n  // Core state\n  const [isReady, setIsReady] = useState(false);\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.1);\n\n  // Winner state management\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false);\n  const [isInWinnerState, setIsInWinnerState] = useState(false);\n\n  // Username management\n  const [showUsernameInput, setShowUsernameInput] = useState(false);\n  const [currentUsername, setCurrentUsername] = useState('');\n\n  // Bet loading state\n  const [betLoadingState, setBetLoadingState] = useState({\n    isWaitingForWagerChange: false,\n    lastWagerAmount: 0,\n    lastBalance: 0\n  });\n\n  // Bettors state\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]);\n  const [slotSpinning, setSlotSpinning] = useState(false);\n\n  // Online count\n  const [onlineCount, setOnlineCount] = useState(0);\n\n  // Refs to avoid stale closures\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n\n  // External hooks\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // Memoized values\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n  const safeContractState = useMemo(() => {\n    if (!contractState || typeof contractState !== 'object') {\n      return {\n        isActive: false,\n        totalJackpot: 0,\n        userBalance: 0,\n        betCount: 0,\n        timer: {\n          timeRemaining: 30,\n          isActive: false\n        }\n      };\n    }\n    return {\n      isActive: Boolean(contractState.isActive),\n      totalJackpot: Number(contractState.totalJackpot) || 0,\n      userBalance: Number(contractState.userBalance) || 0,\n      betCount: Number(contractState.betCount) || 0,\n      timer: contractState.timer || {\n        timeRemaining: 30,\n        isActive: false\n      }\n    };\n  }, [contractState]);\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors.length, address, isConnected]);\n  const userWinChance = useMemo(() => {\n    if (!userBetTotal || !safeContractState.totalJackpot) return 0;\n    return userBetTotal / safeContractState.totalJackpot * 100;\n  }, [userBetTotal, safeContractState.totalJackpot]);\n  const isLive = useMemo(() => {\n    return safeContractState.isActive && safeContractState.timer.isActive;\n  }, [safeContractState.isActive, safeContractState.timer.isActive]);\n\n  // Keep refs in sync with state - optimized\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n    contractWinnerRef.current = contractWinner;\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n    waitingForWinnerRef.current = waitingForWinner;\n    previousRoundBettorsRef.current = previousRoundBettors;\n    timeRemainingRef.current = timeRemaining;\n    showWinnerVisuallyRef.current = showWinnerVisually;\n    isInWinnerStateRef.current = isInWinnerState;\n  }, [gameBettors, contractWinner, showWinnerAnnouncement, waitingForWinner, previousRoundBettors, timeRemaining, showWinnerVisually, isInWinnerState]);\n\n  // Check for stored username on app load\n  useEffect(() => {\n    const storedUsername = localStorage.getItem('slotpot_username');\n    if (storedUsername && storedUsername.trim().length >= 2) {\n      setCurrentUsername(storedUsername.trim());\n    }\n  }, []);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    if (isInWinnerStateRef.current) {\n      return false;\n    }\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      return false;\n    }\n    setIsInWinnerState(true);\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    setTimeout(() => {\n      setShowWinnerVisually(true);\n    }, 3000);\n    return true;\n  }, []);\n\n  // Bet loading state management\n  useEffect(() => {\n    if (betLoadingState.isWaitingForWagerChange) {\n      const wagerChanged = Math.abs((userBetTotal || 0) - betLoadingState.lastWagerAmount) > 0.001;\n      const balanceChanged = Math.abs((safeContractState.userBalance || 0) - betLoadingState.lastBalance) > 0.001;\n      if (wagerChanged || balanceChanged) {\n        setBetLoadingState({\n          isWaitingForWagerChange: false,\n          lastWagerAmount: 0,\n          lastBalance: 0\n        });\n      }\n    }\n  }, [userBetTotal, safeContractState.userBalance, betLoadingState.isWaitingForWagerChange, betLoadingState.lastWagerAmount, betLoadingState.lastBalance]);\n\n  // Timer management\n  useEffect(() => {\n    var _safeContractState$ti;\n    if (((_safeContractState$ti = safeContractState.timer) === null || _safeContractState$ti === void 0 ? void 0 : _safeContractState$ti.timeRemaining) !== undefined) {\n      const backendTime = safeContractState.timer.timeRemaining;\n      if (waitingForWinner || isInWinnerState) {\n        return;\n      }\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - backendTime);\n        if (timeDiff >= 5 || backendTime > prev + 2) {\n          return backendTime;\n        }\n        return prev;\n      });\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_safeContractState$ti2 = safeContractState.timer) === null || _safeContractState$ti2 === void 0 ? void 0 : _safeContractState$ti2.timeRemaining, waitingForWinner, isInWinnerState]);\n\n  // Local countdown timer\n  useEffect(() => {\n    if (!isLive) return;\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev > 0) {\n          const newTime = prev - 1;\n          if (newTime === 0) {\n            setWaitingForWinner(true);\n          }\n          return newTime;\n        }\n        return 0;\n      });\n    }, 1000);\n    return () => {\n      clearInterval(countdown);\n    };\n  }, [isLive]);\n\n  // Socket integration\n  useEffect(() => {\n    socketService.connect();\n    const handleTimer = timerData => {\n      if (!timerData || typeof timerData !== 'object') return;\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n        if (isNewRound && contractWinner && newTimeRemaining > 200) {\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setPreviousRoundBettors([]);\n        }\n        if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n          return prev;\n        }\n        if (isNewRound || timeDiff >= 5 || newTimeRemaining > prev + 2) {\n          return newTimeRemaining;\n        }\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n    };\n    const handleNewRound = roundData => {\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsInWinnerState(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null;\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n    };\n    const handleGameState = gameState => {\n      if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n        const enhancedBettors = gameState.bettors.map(bettor => {\n          var _bettor$address, _bettor$address2;\n          return {\n            ...bettor,\n            username: bettor.username || bettor.displayName || `Player_${(_bettor$address = bettor.address) === null || _bettor$address === void 0 ? void 0 : _bettor$address.slice(-4)}`,\n            displayName: bettor.displayName || bettor.username || `Player_${(_bettor$address2 = bettor.address) === null || _bettor$address2 === void 0 ? void 0 : _bettor$address2.slice(-4)}`\n          };\n        });\n        setPreviousRoundBettors(enhancedBettors);\n      }\n      setWaitingForWinner(gameState.isWaitingForWinner);\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        setGameBettors(gameState.bettors);\n      }\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    };\n    const handleBettorsUpdate = () => {\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n    };\n    const handleWaitingForWinner = data => {\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      setWaitingForWinner(isWaiting);\n    };\n    const handleWinner = winnerData => {\n      showWinnerAnnouncements(winnerData, 'socket');\n    };\n    const handleWinnerAnnouncement = winnerData => {\n      showWinnerAnnouncements(winnerData, 'announcement');\n    };\n    const handleRoundReset = () => {\n      setTimeRemaining(30);\n      setCurrentRound(prev => prev + 1);\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setGameBettors([]);\n      setTimeout(() => {\n        setPreviousRoundBettors([]);\n      }, 1000);\n    };\n\n    // Online count handlers\n    const handleUserJoined = data => {\n      setOnlineCount(data.totalUsers || 0);\n    };\n    const handleUserLeft = data => {\n      setOnlineCount(data.totalUsers || 0);\n    };\n    const handleConnect = () => {\n      if (socketService.socket) {\n        socketService.socket.emit('getOnlineCount');\n      }\n    };\n    const handleOnlineCount = data => {\n      setOnlineCount(data.count || 0);\n    };\n\n    // Set up event listeners\n    socketService.on('timer', handleTimer);\n    socketService.on('newRound', handleNewRound);\n    socketService.on('roundReset', handleRoundReset);\n    socketService.on('gameState', handleGameState);\n    socketService.on('bettorsUpdate', handleBettorsUpdate);\n    socketService.on('waitingForWinner', handleWaitingForWinner);\n    socketService.on('winner', handleWinner);\n    socketService.on('winnerAnnouncement', handleWinnerAnnouncement);\n    socketService.on('user:joined', handleUserJoined);\n    socketService.on('user:left', handleUserLeft);\n    socketService.on('connect', handleConnect);\n    socketService.on('onlineCount', handleOnlineCount);\n\n    // Request initial count if already connected\n    if (socketService.isConnected && socketService.socket) {\n      socketService.socket.emit('getOnlineCount');\n    }\n\n    // Mark app as ready after socket setup\n    setIsReady(true);\n    return () => {\n      socketService.off('timer', handleTimer);\n      socketService.off('newRound', handleNewRound);\n      socketService.off('roundReset', handleRoundReset);\n      socketService.off('gameState', handleGameState);\n      socketService.off('bettorsUpdate', handleBettorsUpdate);\n      socketService.off('waitingForWinner', handleWaitingForWinner);\n      socketService.off('winner', handleWinner);\n      socketService.off('winnerAnnouncement', handleWinnerAnnouncement);\n      socketService.off('user:joined', handleUserJoined);\n      socketService.off('user:left', handleUserLeft);\n      socketService.off('connect', handleConnect);\n      socketService.off('onlineCount', handleOnlineCount);\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]);\n\n  // Bet placement handler\n  const handlePlaceBet = useCallback(async () => {\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n    const normalizedBetAmount = betAmount.toString().replace(',', '.');\n    const numericBetAmount = parseFloat(normalizedBetAmount);\n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n    try {\n      hapticFeedback('medium');\n      await placeBet(numericBetAmount);\n      setBetLoadingState({\n        isWaitingForWagerChange: true,\n        lastWagerAmount: userBetTotal || 0,\n        lastBalance: safeContractState.userBalance || 0\n      });\n      setBetAmount(0.1);\n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  }, [contractWinner, showWinnerAnnouncement, isConnected, betAmount, placeBet, userBetTotal, safeContractState.userBalance, hapticFeedback, showAlert]);\n\n  // Bet change handler\n  const handleBetChange = useCallback(e => {\n    const inputValue = e.target.value;\n    if (inputValue === '' || inputValue === '.' || inputValue === ',' || /^\\d*[.,]?\\d*$/.test(inputValue)) {\n      const normalizedValue = inputValue.replace(',', '.');\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(inputValue);\n        return;\n      }\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(normalizedValue);\n      }\n    }\n  }, []);\n\n  // Tab change handler\n  const handleTabChange = useCallback(tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  }, [hapticFeedback]);\n\n  // Username handlers\n  const handleShowUsernameInput = useCallback(() => {\n    setShowUsernameInput(true);\n  }, []);\n  const handleUsernameSet = useCallback(username => {\n    setCurrentUsername(username);\n    setShowUsernameInput(false);\n    localStorage.setItem('slotpot_username', username);\n  }, []);\n  return {\n    // Ready state\n    isReady,\n    // Core state\n    currentRound,\n    timeRemaining,\n    activeTab,\n    betAmount,\n    // Winner state\n    waitingForWinner,\n    contractWinner,\n    postWinnerLoading,\n    showWinnerAnnouncement,\n    showWinnerVisually,\n    isInWinnerState,\n    // Username state\n    showUsernameInput,\n    currentUsername,\n    // Bet loading state\n    betLoadingState,\n    // Bettors state\n    gameBettors,\n    previousRoundBettors,\n    slotSpinning,\n    // Online count\n    onlineCount,\n    // Contract state\n    contractState: safeContractState,\n    userStats,\n    adminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    isConnected,\n    address,\n    // Computed values\n    userBetTotal,\n    userWinChance,\n    isLive,\n    // Telegram\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData,\n    // Handlers\n    handlePlaceBet,\n    handleBetChange,\n    handleTabChange,\n    handleShowUsernameInput,\n    handleUsernameSet,\n    // Setters\n    setActiveTab,\n    setBetAmount,\n    setShowUsernameInput\n  };\n};\n_s(useAppState, \"S1m+5QVXlP3IC+f4q0vQffPwIFs=\", false, function () {\n  return [useTelegramWebApp, useJackpotContract];\n});\nexport default useAppState;","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useMemo","socketService","useTelegramWebApp","useJackpotContract","winnerCoordinator","useAppState","_s","_safeContractState$ti2","isReady","setIsReady","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","showWinnerAnnouncement","setShowWinnerAnnouncement","showWinnerVisually","setShowWinnerVisually","isInWinnerState","setIsInWinnerState","showUsernameInput","setShowUsernameInput","currentUsername","setCurrentUsername","betLoadingState","setBetLoadingState","isWaitingForWagerChange","lastWagerAmount","lastBalance","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","onlineCount","setOnlineCount","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","waitingForWinnerRef","previousRoundBettorsRef","timeRemainingRef","showWinnerVisuallyRef","isInWinnerStateRef","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","address","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","isActive","totalJackpot","userBalance","betCount","timer","userBetTotal","length","filter","bettor","reduce","total","amount","userWinChance","isLive","current","storedUsername","localStorage","getItem","trim","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","shouldBlock","setActive","setTimeout","wagerChanged","Math","abs","balanceChanged","_safeContractState$ti","undefined","backendTime","prev","timeDiff","countdown","setInterval","newTime","clearInterval","connect","handleTimer","timerData","newTimeRemaining","newRoundNumber","isNewRound","handleNewRound","roundData","reset","handleGameState","gameState","isWaitingForWinner","bettors","enhancedBettors","map","_bettor$address","_bettor$address2","username","displayName","slice","Array","isArray","winnerAnnouncement","handleBettorsUpdate","handleWaitingForWinner","data","isWaiting","handleWinner","handleWinnerAnnouncement","handleRoundReset","handleUserJoined","totalUsers","handleUserLeft","handleConnect","socket","emit","handleOnlineCount","count","on","off","disconnect","handlePlaceBet","normalizedBetAmount","toString","replace","numericBetAmount","parseFloat","isNaN","toFixed","error","message","handleBetChange","e","inputValue","target","value","test","normalizedValue","numericValue","handleTabChange","tab","handleShowUsernameInput","handleUsernameSet","setItem"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useAppState.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport socketService from '../services/socketService';\r\nimport useTelegramWebApp from './useTelegramWebApp';\r\nimport useJackpotContract from './useJackpotContract';\r\nimport winnerCoordinator from '../services/winnerCoordinator';\r\n\r\nconst useAppState = () => {\r\n  // Core state\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [currentRound, setCurrentRound] = useState(53408);\r\n  const [timeRemaining, setTimeRemaining] = useState(30);\r\n  const [activeTab, setActiveTab] = useState('jackpot');\r\n  const [betAmount, setBetAmount] = useState(0.1);\r\n  \r\n  // Winner state management\r\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\r\n  const [contractWinner, setContractWinner] = useState(null);\r\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\r\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\r\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false);\r\n  const [isInWinnerState, setIsInWinnerState] = useState(false);\r\n  \r\n  // Username management\r\n  const [showUsernameInput, setShowUsernameInput] = useState(false);\r\n  const [currentUsername, setCurrentUsername] = useState('');\r\n  \r\n  // Bet loading state\r\n  const [betLoadingState, setBetLoadingState] = useState({\r\n    isWaitingForWagerChange: false,\r\n    lastWagerAmount: 0,\r\n    lastBalance: 0\r\n  });\r\n  \r\n  // Bettors state\r\n  const [gameBettors, setGameBettors] = useState([]);\r\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]);\r\n  const [slotSpinning, setSlotSpinning] = useState(false);\r\n  \r\n  // Online count\r\n  const [onlineCount, setOnlineCount] = useState(0);\r\n  \r\n  // Refs to avoid stale closures\r\n  const gameBettorsRef = useRef([]);\r\n  const contractWinnerRef = useRef(null);\r\n  const showWinnerAnnouncementRef = useRef(false);\r\n  const lastWinnerTimestampRef = useRef(null);\r\n  const waitingForWinnerRef = useRef(false);\r\n  const previousRoundBettorsRef = useRef([]);\r\n  const timeRemainingRef = useRef(30);\r\n  const showWinnerVisuallyRef = useRef(false);\r\n  const isInWinnerStateRef = useRef(false);\r\n  \r\n  // External hooks\r\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\r\n  const {\r\n    contractState,\r\n    userStats,\r\n    adminInfo: rawAdminInfo,\r\n    isLoadingContract,\r\n    isPlacingBet,\r\n    placeBet,\r\n    isConnected,\r\n    address,\r\n  } = useJackpotContract();\r\n\r\n  // Memoized values\r\n  const adminInfo = useMemo(() => {\r\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\r\n      return {\r\n        isAutoManaged: false,\r\n        roundDuration: 300,\r\n        minBetsToEnd: 1,\r\n        timerActive: false,\r\n        timeRemaining: 0\r\n      };\r\n    }\r\n    \r\n    return {\r\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\r\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\r\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\r\n      timerActive: Boolean(rawAdminInfo.timerActive),\r\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\r\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \r\n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\r\n        : (Number(rawAdminInfo.currentRound) || 0)\r\n    };\r\n  }, [rawAdminInfo]);\r\n\r\n  const safeContractState = useMemo(() => {\r\n    if (!contractState || typeof contractState !== 'object') {\r\n      return {\r\n        isActive: false,\r\n        totalJackpot: 0,\r\n        userBalance: 0,\r\n        betCount: 0,\r\n        timer: { timeRemaining: 30, isActive: false }\r\n      };\r\n    }\r\n    \r\n    return {\r\n      isActive: Boolean(contractState.isActive),\r\n      totalJackpot: Number(contractState.totalJackpot) || 0,\r\n      userBalance: Number(contractState.userBalance) || 0,\r\n      betCount: Number(contractState.betCount) || 0,\r\n      timer: contractState.timer || { timeRemaining: 30, isActive: false }\r\n    };\r\n  }, [contractState]);\r\n\r\n  const userBetTotal = useMemo(() => {\r\n    if (!isConnected || !address || !gameBettors.length) return 0;\r\n    \r\n    return gameBettors\r\n      .filter(bettor => bettor.address === address)\r\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\r\n  }, [gameBettors.length, address, isConnected]);\r\n\r\n  const userWinChance = useMemo(() => {\r\n    if (!userBetTotal || !safeContractState.totalJackpot) return 0;\r\n    return (userBetTotal / safeContractState.totalJackpot) * 100;\r\n  }, [userBetTotal, safeContractState.totalJackpot]);\r\n\r\n  const isLive = useMemo(() => {\r\n    return safeContractState.isActive && safeContractState.timer.isActive;\r\n  }, [safeContractState.isActive, safeContractState.timer.isActive]);\r\n\r\n  // Keep refs in sync with state - optimized\r\n  useEffect(() => {\r\n    gameBettorsRef.current = gameBettors;\r\n    contractWinnerRef.current = contractWinner;\r\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\r\n    waitingForWinnerRef.current = waitingForWinner;\r\n    previousRoundBettorsRef.current = previousRoundBettors;\r\n    timeRemainingRef.current = timeRemaining;\r\n    showWinnerVisuallyRef.current = showWinnerVisually;\r\n    isInWinnerStateRef.current = isInWinnerState;\r\n  }, [gameBettors, contractWinner, showWinnerAnnouncement, waitingForWinner, previousRoundBettors, timeRemaining, showWinnerVisually, isInWinnerState]);\r\n\r\n  // Check for stored username on app load\r\n  useEffect(() => {\r\n    const storedUsername = localStorage.getItem('slotpot_username');\r\n    if (storedUsername && storedUsername.trim().length >= 2) {\r\n      setCurrentUsername(storedUsername.trim());\r\n    }\r\n  }, []);\r\n\r\n  // Centralized winner announcement manager\r\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\r\n    const winnerTimestamp = winnerData.timestamp;\r\n    \r\n    if (isInWinnerStateRef.current) {\r\n      return false;\r\n    }\r\n    \r\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\r\n      return false;\r\n    }\r\n    \r\n    setIsInWinnerState(true);\r\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\r\n    setContractWinner(winnerData);\r\n    setShowWinnerAnnouncement(true);\r\n    setWaitingForWinner(false);\r\n    \r\n    setTimeout(() => {\r\n      setShowWinnerVisually(true);\r\n    }, 3000);\r\n    \r\n    return true;\r\n  }, []);\r\n\r\n  // Bet loading state management\r\n  useEffect(() => {\r\n    if (betLoadingState.isWaitingForWagerChange) {\r\n      const wagerChanged = Math.abs((userBetTotal || 0) - betLoadingState.lastWagerAmount) > 0.001;\r\n      const balanceChanged = Math.abs((safeContractState.userBalance || 0) - betLoadingState.lastBalance) > 0.001;\r\n      \r\n      if (wagerChanged || balanceChanged) {\r\n        setBetLoadingState({\r\n          isWaitingForWagerChange: false,\r\n          lastWagerAmount: 0,\r\n          lastBalance: 0\r\n        });\r\n      }\r\n    }\r\n  }, [userBetTotal, safeContractState.userBalance, betLoadingState.isWaitingForWagerChange, betLoadingState.lastWagerAmount, betLoadingState.lastBalance]);\r\n\r\n  // Timer management\r\n  useEffect(() => {\r\n    if (safeContractState.timer?.timeRemaining !== undefined) {\r\n      const backendTime = safeContractState.timer.timeRemaining;\r\n      \r\n      if (waitingForWinner || isInWinnerState) {\r\n        return;\r\n      }\r\n      \r\n      setTimeRemaining(prev => {\r\n        const timeDiff = Math.abs(prev - backendTime);\r\n        \r\n        if (timeDiff >= 5 || backendTime > prev + 2) {\r\n          return backendTime;\r\n        }\r\n        \r\n        return prev;\r\n      });\r\n    } else {\r\n      setTimeRemaining(30);\r\n    }\r\n  }, [safeContractState.timer?.timeRemaining, waitingForWinner, isInWinnerState]);\r\n\r\n  // Local countdown timer\r\n  useEffect(() => {\r\n    if (!isLive) return;\r\n\r\n    const countdown = setInterval(() => {\r\n      setTimeRemaining(prev => {\r\n        if (prev > 0) {\r\n          const newTime = prev - 1;\r\n          \r\n          if (newTime === 0) {\r\n            setWaitingForWinner(true);\r\n          }\r\n          \r\n          return newTime;\r\n        }\r\n        \r\n        return 0;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(countdown);\r\n    };\r\n  }, [isLive]);\r\n\r\n  // Socket integration\r\n  useEffect(() => {\r\n    socketService.connect();\r\n\r\n    const handleTimer = (timerData) => {\r\n      if (!timerData || typeof timerData !== 'object') return;\r\n      \r\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\r\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\r\n      \r\n      setTimeRemaining(prev => {\r\n        const timeDiff = Math.abs(prev - newTimeRemaining);\r\n        const isNewRound = newRoundNumber !== currentRound;\r\n        \r\n        if (isNewRound && contractWinner && newTimeRemaining > 200) {\r\n          setIsInWinnerState(false);\r\n          setContractWinner(null);\r\n          setShowWinnerAnnouncement(false);\r\n          setShowWinnerVisually(false);\r\n          setPostWinnerLoading(false);\r\n          setPreviousRoundBettors([]);\r\n        }\r\n        \r\n        if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\r\n          return prev;\r\n        }\r\n        \r\n        if (isNewRound || timeDiff >= 5 || newTimeRemaining > prev + 2) {\r\n          return newTimeRemaining;\r\n        }\r\n        \r\n        return prev;\r\n      });\r\n      \r\n      if (newRoundNumber && newRoundNumber !== currentRound) {\r\n        setCurrentRound(newRoundNumber);\r\n      }\r\n    };\r\n\r\n    const handleNewRound = (roundData) => {\r\n      setTimeRemaining(roundData.timeRemaining);\r\n      setCurrentRound(roundData.roundNumber);\r\n      setIsInWinnerState(false);\r\n      winnerCoordinator.reset();\r\n      lastWinnerTimestampRef.current = null;\r\n      \r\n      setContractWinner(null);\r\n      setShowWinnerAnnouncement(false);\r\n      setShowWinnerVisually(false);\r\n      setPreviousRoundBettors([]);\r\n      setWaitingForWinner(false);\r\n      setPostWinnerLoading(false);\r\n    };\r\n\r\n    const handleGameState = (gameState) => {\r\n      if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\r\n        const enhancedBettors = gameState.bettors.map(bettor => ({\r\n          ...bettor,\r\n          username: bettor.username || bettor.displayName || `Player_${bettor.address?.slice(-4)}`,\r\n          displayName: bettor.displayName || bettor.username || `Player_${bettor.address?.slice(-4)}`\r\n        }));\r\n        \r\n        setPreviousRoundBettors(enhancedBettors);\r\n      }\r\n      \r\n      setWaitingForWinner(gameState.isWaitingForWinner);\r\n      \r\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\r\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\r\n          setSlotSpinning(true);\r\n          setTimeout(() => setSlotSpinning(false), 3000);\r\n        }\r\n        \r\n        setGameBettors(gameState.bettors);\r\n      }\r\n      \r\n      if (gameState.winnerAnnouncement) {\r\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\r\n      }\r\n    };\r\n\r\n    const handleBettorsUpdate = () => {\r\n      setSlotSpinning(true);\r\n      setTimeout(() => setSlotSpinning(false), 3000);\r\n    };\r\n\r\n    const handleWaitingForWinner = (data) => {\r\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\r\n      setWaitingForWinner(isWaiting);\r\n    };\r\n\r\n    const handleWinner = (winnerData) => {\r\n      showWinnerAnnouncements(winnerData, 'socket');\r\n    };\r\n\r\n    const handleWinnerAnnouncement = (winnerData) => {\r\n      showWinnerAnnouncements(winnerData, 'announcement');\r\n    };\r\n\r\n    const handleRoundReset = () => {\r\n      setTimeRemaining(30);\r\n      setCurrentRound(prev => prev + 1);\r\n      setWaitingForWinner(false);\r\n      setContractWinner(null);\r\n      setShowWinnerAnnouncement(false);\r\n      setShowWinnerVisually(false);\r\n      setPostWinnerLoading(false);\r\n      setGameBettors([]);\r\n      \r\n      setTimeout(() => {\r\n        setPreviousRoundBettors([]);\r\n      }, 1000);\r\n    };\r\n\r\n    // Online count handlers\r\n    const handleUserJoined = (data) => {\r\n      setOnlineCount(data.totalUsers || 0);\r\n    };\r\n\r\n    const handleUserLeft = (data) => {\r\n      setOnlineCount(data.totalUsers || 0);\r\n    };\r\n\r\n    const handleConnect = () => {\r\n      if (socketService.socket) {\r\n        socketService.socket.emit('getOnlineCount');\r\n      }\r\n    };\r\n\r\n    const handleOnlineCount = (data) => {\r\n      setOnlineCount(data.count || 0);\r\n    };\r\n\r\n    // Set up event listeners\r\n    socketService.on('timer', handleTimer);\r\n    socketService.on('newRound', handleNewRound);\r\n    socketService.on('roundReset', handleRoundReset);\r\n    socketService.on('gameState', handleGameState);\r\n    socketService.on('bettorsUpdate', handleBettorsUpdate);\r\n    socketService.on('waitingForWinner', handleWaitingForWinner);\r\n    socketService.on('winner', handleWinner);\r\n    socketService.on('winnerAnnouncement', handleWinnerAnnouncement);\r\n    socketService.on('user:joined', handleUserJoined);\r\n    socketService.on('user:left', handleUserLeft);\r\n    socketService.on('connect', handleConnect);\r\n    socketService.on('onlineCount', handleOnlineCount);\r\n\r\n    // Request initial count if already connected\r\n    if (socketService.isConnected && socketService.socket) {\r\n      socketService.socket.emit('getOnlineCount');\r\n    }\r\n\r\n    // Mark app as ready after socket setup\r\n    setIsReady(true);\r\n\r\n    return () => {\r\n      socketService.off('timer', handleTimer);\r\n      socketService.off('newRound', handleNewRound);\r\n      socketService.off('roundReset', handleRoundReset);\r\n      socketService.off('gameState', handleGameState);\r\n      socketService.off('bettorsUpdate', handleBettorsUpdate);\r\n      socketService.off('waitingForWinner', handleWaitingForWinner);\r\n      socketService.off('winner', handleWinner);\r\n      socketService.off('winnerAnnouncement', handleWinnerAnnouncement);\r\n      socketService.off('user:joined', handleUserJoined);\r\n      socketService.off('user:left', handleUserLeft);\r\n      socketService.off('connect', handleConnect);\r\n      socketService.off('onlineCount', handleOnlineCount);\r\n      socketService.disconnect();\r\n    };\r\n  }, [currentRound, showWinnerAnnouncements]);\r\n\r\n  // Bet placement handler\r\n  const handlePlaceBet = useCallback(async () => {\r\n    if (contractWinner || showWinnerAnnouncement) {\r\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\r\n      return;\r\n    }\r\n\r\n    if (!isConnected) {\r\n      showAlert('Please connect your wallet first!');\r\n      return;\r\n    }\r\n\r\n    const normalizedBetAmount = betAmount.toString().replace(',', '.');\r\n    const numericBetAmount = parseFloat(normalizedBetAmount);\r\n    \r\n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\r\n      showAlert('Please enter a valid bet amount!');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      hapticFeedback('medium');\r\n      \r\n      await placeBet(numericBetAmount);\r\n      \r\n      setBetLoadingState({\r\n        isWaitingForWagerChange: true,\r\n        lastWagerAmount: userBetTotal || 0,\r\n        lastBalance: safeContractState.userBalance || 0\r\n      });\r\n      \r\n      setBetAmount(0.1);\r\n      \r\n      hapticFeedback('success');\r\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\r\n    } catch (error) {\r\n      hapticFeedback('error');\r\n      showAlert(`❌ Failed to place bet: ${error.message}`);\r\n    }\r\n  }, [contractWinner, showWinnerAnnouncement, isConnected, betAmount, placeBet, userBetTotal, safeContractState.userBalance, hapticFeedback, showAlert]);\r\n\r\n  // Bet change handler\r\n  const handleBetChange = useCallback((e) => {\r\n    const inputValue = e.target.value;\r\n    \r\n    if (inputValue === '' || inputValue === '.' || inputValue === ',' || /^\\d*[.,]?\\d*$/.test(inputValue)) {\r\n      const normalizedValue = inputValue.replace(',', '.');\r\n      \r\n      if (normalizedValue === '' || normalizedValue === '.') {\r\n        setBetAmount(inputValue);\r\n        return;\r\n      }\r\n      \r\n      const numericValue = parseFloat(normalizedValue);\r\n      if (!isNaN(numericValue) && numericValue <= 10) {\r\n        setBetAmount(normalizedValue);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Tab change handler\r\n  const handleTabChange = useCallback((tab) => {\r\n    hapticFeedback('light');\r\n    setActiveTab(tab);\r\n  }, [hapticFeedback]);\r\n\r\n  // Username handlers\r\n  const handleShowUsernameInput = useCallback(() => {\r\n    setShowUsernameInput(true);\r\n  }, []);\r\n\r\n  const handleUsernameSet = useCallback((username) => {\r\n    setCurrentUsername(username);\r\n    setShowUsernameInput(false);\r\n    localStorage.setItem('slotpot_username', username);\r\n  }, []);\r\n\r\n  return {\r\n    // Ready state\r\n    isReady,\r\n    \r\n    // Core state\r\n    currentRound,\r\n    timeRemaining,\r\n    activeTab,\r\n    betAmount,\r\n    \r\n    // Winner state\r\n    waitingForWinner,\r\n    contractWinner,\r\n    postWinnerLoading,\r\n    showWinnerAnnouncement,\r\n    showWinnerVisually,\r\n    isInWinnerState,\r\n    \r\n    // Username state\r\n    showUsernameInput,\r\n    currentUsername,\r\n    \r\n    // Bet loading state\r\n    betLoadingState,\r\n    \r\n    // Bettors state\r\n    gameBettors,\r\n    previousRoundBettors,\r\n    slotSpinning,\r\n    \r\n    // Online count\r\n    onlineCount,\r\n    \r\n    // Contract state\r\n    contractState: safeContractState,\r\n    userStats,\r\n    adminInfo,\r\n    isLoadingContract,\r\n    isPlacingBet,\r\n    isConnected,\r\n    address,\r\n    \r\n    // Computed values\r\n    userBetTotal,\r\n    userWinChance,\r\n    isLive,\r\n    \r\n    // Telegram\r\n    user,\r\n    hapticFeedback,\r\n    showAlert,\r\n    hasRealUserData,\r\n    \r\n    // Handlers\r\n    handlePlaceBet,\r\n    handleBetChange,\r\n    handleTabChange,\r\n    handleShowUsernameInput,\r\n    handleUsernameSet,\r\n    \r\n    // Setters\r\n    setActiveTab,\r\n    setBetAmount,\r\n    setShowUsernameInput\r\n  };\r\n};\r\n\r\nexport default useAppState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}