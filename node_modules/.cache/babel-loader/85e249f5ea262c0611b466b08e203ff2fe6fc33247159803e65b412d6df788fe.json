{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst useTelegramWebApp = () => {\n  _s();\n  var _window$Telegram2, _webApp$initDataUnsaf;\n  const [webApp, setWebApp] = useState(null);\n  const [user, setUser] = useState(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [initData, setInitData] = useState(null);\n  useEffect(() => {\n    var _window$Telegram;\n    const app = (_window$Telegram = window.Telegram) === null || _window$Telegram === void 0 ? void 0 : _window$Telegram.WebApp;\n    if (app) {\n      var _app$initDataUnsafe;\n      app.ready();\n\n      // Enable full screen mode aggressively\n      app.expand();\n      app.enableClosingConfirmation();\n\n      // Request full screen viewport\n      if (app.viewportHeight && app.viewportStableHeight) {\n        console.log('ðŸ“± Telegram viewport:', {\n          height: app.viewportHeight,\n          stableHeight: app.viewportStableHeight,\n          isExpanded: app.isExpanded\n        });\n      }\n\n      // Set CSS custom properties for dynamic viewport\n      document.documentElement.style.setProperty('--tg-viewport-height', `${app.viewportHeight || window.innerHeight}px`);\n      document.documentElement.style.setProperty('--tg-viewport-stable-height', `${app.viewportStableHeight || window.innerHeight}px`);\n\n      // Set theme colors to match our design\n      app.setHeaderColor('#0a0a0f');\n      app.setBackgroundColor('#0a0a0f');\n\n      // Hide Telegram header if possible\n      if (app.setHeaderColor) {\n        app.setHeaderColor('#0a0a0f');\n      }\n      setWebApp(app);\n\n      // Get real user data\n      const userData = (_app$initDataUnsafe = app.initDataUnsafe) === null || _app$initDataUnsafe === void 0 ? void 0 : _app$initDataUnsafe.user;\n      const rawInitData = app.initData;\n      if (userData) {\n        setUser({\n          id: userData.id,\n          firstName: userData.first_name,\n          lastName: userData.last_name,\n          username: userData.username,\n          languageCode: userData.language_code,\n          isPremium: userData.is_premium || false,\n          photoUrl: userData.photo_url,\n          // Formatted display name\n          displayName: userData.first_name + (userData.last_name ? ` ${userData.last_name}` : ''),\n          // Short name for UI\n          shortName: userData.first_name || userData.username || 'User'\n        });\n        setInitData(rawInitData);\n        console.log('ðŸ“± Real Telegram user data loaded:', userData);\n      } else {\n        // Fallback to mock data for testing\n        console.log('ðŸ“± No Telegram user data - using mock');\n        setUser({\n          id: 123456789,\n          firstName: \"Test\",\n          lastName: \"User\",\n          username: \"testuser\",\n          languageCode: \"en\",\n          isPremium: false,\n          displayName: \"Test User\",\n          shortName: \"Test\",\n          photoUrl: null\n        });\n      }\n      setIsExpanded(true);\n\n      // Handle back button\n      app.BackButton.onClick(() => {\n        app.close();\n      });\n    } else {\n      console.log('Telegram WebApp not available - running in browser mode');\n      // Set mock user for browser testing\n      setUser({\n        id: 123456789,\n        firstName: \"Test\",\n        lastName: \"User\",\n        username: \"testuser\",\n        languageCode: \"en\",\n        isPremium: false,\n        displayName: \"Test User\",\n        shortName: \"Test\",\n        photoUrl: null\n      });\n    }\n  }, []);\n  const showAlert = message => {\n    if (webApp) {\n      webApp.showAlert(message);\n    } else {\n      window.alert(message);\n    }\n  };\n  const showConfirm = (message, callback) => {\n    if (webApp) {\n      webApp.showConfirm(message, callback);\n    } else {\n      callback(window.confirm(message));\n    }\n  };\n  const hapticFeedback = (type = 'impact') => {\n    if (webApp !== null && webApp !== void 0 && webApp.HapticFeedback) {\n      switch (type) {\n        case 'light':\n          webApp.HapticFeedback.impactOccurred('light');\n          break;\n        case 'medium':\n          webApp.HapticFeedback.impactOccurred('medium');\n          break;\n        case 'heavy':\n          webApp.HapticFeedback.impactOccurred('heavy');\n          break;\n        case 'error':\n          webApp.HapticFeedback.notificationOccurred('error');\n          break;\n        case 'success':\n          webApp.HapticFeedback.notificationOccurred('success');\n          break;\n        case 'warning':\n          webApp.HapticFeedback.notificationOccurred('warning');\n          break;\n        default:\n          webApp.HapticFeedback.impactOccurred('medium');\n      }\n    }\n  };\n\n  // Open external link (for wallet connections)\n  const openLink = url => {\n    if (webApp) {\n      webApp.openLink(url);\n    } else {\n      window.open(url, '_blank');\n    }\n  };\n\n  // Show main button (for betting actions)\n  const showMainButton = (text, onClick) => {\n    if (webApp !== null && webApp !== void 0 && webApp.MainButton) {\n      webApp.MainButton.setText(text);\n      webApp.MainButton.show();\n      webApp.MainButton.onClick(onClick);\n    }\n  };\n  const hideMainButton = () => {\n    if (webApp !== null && webApp !== void 0 && webApp.MainButton) {\n      webApp.MainButton.hide();\n    }\n  };\n\n  // Get user avatar URL or generate one\n  const getUserAvatar = () => {\n    var _user$shortName, _user$shortName$charA;\n    if (user !== null && user !== void 0 && user.photoUrl) {\n      return user.photoUrl;\n    }\n\n    // Generate avatar based on user initials\n    const initials = (user === null || user === void 0 ? void 0 : (_user$shortName = user.shortName) === null || _user$shortName === void 0 ? void 0 : (_user$shortName$charA = _user$shortName.charAt(0)) === null || _user$shortName$charA === void 0 ? void 0 : _user$shortName$charA.toUpperCase()) || 'U';\n    return `https://ui-avatars.com/api/?name=${initials}&background=6366f1&color=ffffff&size=128`;\n  };\n  return {\n    webApp,\n    user,\n    isExpanded,\n    initData,\n    showAlert,\n    showConfirm,\n    hapticFeedback,\n    openLink,\n    showMainButton,\n    hideMainButton,\n    getUserAvatar,\n    isReady: !!webApp,\n    isTelegramEnv: !!((_window$Telegram2 = window.Telegram) !== null && _window$Telegram2 !== void 0 && _window$Telegram2.WebApp),\n    // Helper to check if we have real user data\n    hasRealUserData: !!(webApp && (_webApp$initDataUnsaf = webApp.initDataUnsafe) !== null && _webApp$initDataUnsaf !== void 0 && _webApp$initDataUnsaf.user)\n  };\n};\n_s(useTelegramWebApp, \"gu5rV/gbqypa6cEZSSmp/UBqKDI=\");\nexport default useTelegramWebApp;","map":{"version":3,"names":["useEffect","useState","useTelegramWebApp","_s","_window$Telegram2","_webApp$initDataUnsaf","webApp","setWebApp","user","setUser","isExpanded","setIsExpanded","initData","setInitData","_window$Telegram","app","window","Telegram","WebApp","_app$initDataUnsafe","ready","expand","enableClosingConfirmation","viewportHeight","viewportStableHeight","console","log","height","stableHeight","document","documentElement","style","setProperty","innerHeight","setHeaderColor","setBackgroundColor","userData","initDataUnsafe","rawInitData","id","firstName","first_name","lastName","last_name","username","languageCode","language_code","isPremium","is_premium","photoUrl","photo_url","displayName","shortName","BackButton","onClick","close","showAlert","message","alert","showConfirm","callback","confirm","hapticFeedback","type","HapticFeedback","impactOccurred","notificationOccurred","openLink","url","open","showMainButton","text","MainButton","setText","show","hideMainButton","hide","getUserAvatar","_user$shortName","_user$shortName$charA","initials","charAt","toUpperCase","isReady","isTelegramEnv","hasRealUserData"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useTelegramWebApp.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useTelegramWebApp = () => {\r\n  const [webApp, setWebApp] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [initData, setInitData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const app = window.Telegram?.WebApp;\r\n    \r\n    if (app) {\r\n      app.ready();\r\n      \r\n      // Enable full screen mode aggressively\r\n      app.expand();\r\n      app.enableClosingConfirmation();\r\n      \r\n      // Request full screen viewport\r\n      if (app.viewportHeight && app.viewportStableHeight) {\r\n        console.log('ðŸ“± Telegram viewport:', {\r\n          height: app.viewportHeight,\r\n          stableHeight: app.viewportStableHeight,\r\n          isExpanded: app.isExpanded\r\n        });\r\n      }\r\n      \r\n      // Set CSS custom properties for dynamic viewport\r\n      document.documentElement.style.setProperty('--tg-viewport-height', `${app.viewportHeight || window.innerHeight}px`);\r\n      document.documentElement.style.setProperty('--tg-viewport-stable-height', `${app.viewportStableHeight || window.innerHeight}px`);\r\n      \r\n      // Set theme colors to match our design\r\n      app.setHeaderColor('#0a0a0f');\r\n      app.setBackgroundColor('#0a0a0f');\r\n      \r\n      // Hide Telegram header if possible\r\n      if (app.setHeaderColor) {\r\n        app.setHeaderColor('#0a0a0f');\r\n      }\r\n      \r\n      setWebApp(app);\r\n      \r\n      // Get real user data\r\n      const userData = app.initDataUnsafe?.user;\r\n      const rawInitData = app.initData;\r\n      \r\n      if (userData) {\r\n        setUser({\r\n          id: userData.id,\r\n          firstName: userData.first_name,\r\n          lastName: userData.last_name,\r\n          username: userData.username,\r\n          languageCode: userData.language_code,\r\n          isPremium: userData.is_premium || false,\r\n          photoUrl: userData.photo_url,\r\n          // Formatted display name\r\n          displayName: userData.first_name + (userData.last_name ? ` ${userData.last_name}` : ''),\r\n          // Short name for UI\r\n          shortName: userData.first_name || userData.username || 'User'\r\n        });\r\n        \r\n        setInitData(rawInitData);\r\n        console.log('ðŸ“± Real Telegram user data loaded:', userData);\r\n      } else {\r\n        // Fallback to mock data for testing\r\n        console.log('ðŸ“± No Telegram user data - using mock');\r\n        setUser({\r\n          id: 123456789,\r\n          firstName: \"Test\",\r\n          lastName: \"User\", \r\n          username: \"testuser\",\r\n          languageCode: \"en\",\r\n          isPremium: false,\r\n          displayName: \"Test User\",\r\n          shortName: \"Test\",\r\n          photoUrl: null\r\n        });\r\n      }\r\n      \r\n      setIsExpanded(true);\r\n      \r\n      // Handle back button\r\n      app.BackButton.onClick(() => {\r\n        app.close();\r\n      });\r\n      \r\n    } else {\r\n      console.log('Telegram WebApp not available - running in browser mode');\r\n      // Set mock user for browser testing\r\n      setUser({\r\n        id: 123456789,\r\n        firstName: \"Test\",\r\n        lastName: \"User\",\r\n        username: \"testuser\", \r\n        languageCode: \"en\",\r\n        isPremium: false,\r\n        displayName: \"Test User\",\r\n        shortName: \"Test\",\r\n        photoUrl: null\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const showAlert = (message) => {\r\n    if (webApp) {\r\n      webApp.showAlert(message);\r\n    } else {\r\n      window.alert(message);\r\n    }\r\n  };\r\n\r\n  const showConfirm = (message, callback) => {\r\n    if (webApp) {\r\n      webApp.showConfirm(message, callback);\r\n    } else {\r\n      callback(window.confirm(message));\r\n    }\r\n  };\r\n\r\n  const hapticFeedback = (type = 'impact') => {\r\n    if (webApp?.HapticFeedback) {\r\n      switch (type) {\r\n        case 'light':\r\n          webApp.HapticFeedback.impactOccurred('light');\r\n          break;\r\n        case 'medium':\r\n          webApp.HapticFeedback.impactOccurred('medium');\r\n          break;\r\n        case 'heavy':\r\n          webApp.HapticFeedback.impactOccurred('heavy');\r\n          break;\r\n        case 'error':\r\n          webApp.HapticFeedback.notificationOccurred('error');\r\n          break;\r\n        case 'success':\r\n          webApp.HapticFeedback.notificationOccurred('success');\r\n          break;\r\n        case 'warning':\r\n          webApp.HapticFeedback.notificationOccurred('warning');\r\n          break;\r\n        default:\r\n          webApp.HapticFeedback.impactOccurred('medium');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Open external link (for wallet connections)\r\n  const openLink = (url) => {\r\n    if (webApp) {\r\n      webApp.openLink(url);\r\n    } else {\r\n      window.open(url, '_blank');\r\n    }\r\n  };\r\n\r\n  // Show main button (for betting actions)\r\n  const showMainButton = (text, onClick) => {\r\n    if (webApp?.MainButton) {\r\n      webApp.MainButton.setText(text);\r\n      webApp.MainButton.show();\r\n      webApp.MainButton.onClick(onClick);\r\n    }\r\n  };\r\n\r\n  const hideMainButton = () => {\r\n    if (webApp?.MainButton) {\r\n      webApp.MainButton.hide();\r\n    }\r\n  };\r\n\r\n  // Get user avatar URL or generate one\r\n  const getUserAvatar = () => {\r\n    if (user?.photoUrl) {\r\n      return user.photoUrl;\r\n    }\r\n    \r\n    // Generate avatar based on user initials\r\n    const initials = user?.shortName?.charAt(0)?.toUpperCase() || 'U';\r\n    return `https://ui-avatars.com/api/?name=${initials}&background=6366f1&color=ffffff&size=128`;\r\n  };\r\n\r\n  return {\r\n    webApp,\r\n    user,\r\n    isExpanded,\r\n    initData,\r\n    showAlert,\r\n    showConfirm,\r\n    hapticFeedback,\r\n    openLink,\r\n    showMainButton,\r\n    hideMainButton,\r\n    getUserAvatar,\r\n    isReady: !!webApp,\r\n    isTelegramEnv: !!window.Telegram?.WebApp,\r\n    // Helper to check if we have real user data\r\n    hasRealUserData: !!(webApp && webApp.initDataUnsafe?.user)\r\n  };\r\n};\r\n\r\nexport default useTelegramWebApp; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}