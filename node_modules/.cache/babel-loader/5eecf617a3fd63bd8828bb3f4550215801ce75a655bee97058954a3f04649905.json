{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bitsToBytes = exports.bytesToBits = exports.lpad = void 0;\nfunction lpad(str, padString, length) {\n  while (str.length < length) {\n    str = padString + str;\n  }\n  return str;\n}\nexports.lpad = lpad;\nfunction bytesToBits(bytes) {\n  let res = '';\n  for (let i = 0; i < bytes.length; i++) {\n    let x = bytes.at(i);\n    res += lpad(x.toString(2), '0', 8);\n  }\n  return res;\n}\nexports.bytesToBits = bytesToBits;\nfunction bitsToBytes(src) {\n  if (src.length % 8 !== 0) {\n    throw Error('Uneven bits');\n  }\n  let res = [];\n  while (src.length > 0) {\n    res.push(parseInt(src.slice(0, 8), 2));\n    src = src.slice(8);\n  }\n  return Buffer.from(res);\n}\nexports.bitsToBytes = bitsToBytes;","map":{"version":3,"names":["Object","defineProperty","exports","value","bitsToBytes","bytesToBits","lpad","str","padString","length","bytes","res","i","x","at","toString","src","Error","push","parseInt","slice","Buffer","from"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/crypto/dist/utils/binary.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bitsToBytes = exports.bytesToBits = exports.lpad = void 0;\nfunction lpad(str, padString, length) {\n    while (str.length < length) {\n        str = padString + str;\n    }\n    return str;\n}\nexports.lpad = lpad;\nfunction bytesToBits(bytes) {\n    let res = '';\n    for (let i = 0; i < bytes.length; i++) {\n        let x = bytes.at(i);\n        res += lpad(x.toString(2), '0', 8);\n    }\n    return res;\n}\nexports.bytesToBits = bytesToBits;\nfunction bitsToBytes(src) {\n    if (src.length % 8 !== 0) {\n        throw Error('Uneven bits');\n    }\n    let res = [];\n    while (src.length > 0) {\n        res.push(parseInt(src.slice(0, 8), 2));\n        src = src.slice(8);\n    }\n    return Buffer.from(res);\n}\nexports.bitsToBytes = bitsToBytes;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,WAAW,GAAGH,OAAO,CAACI,IAAI,GAAG,KAAK,CAAC;AACjE,SAASA,IAAIA,CAACC,GAAG,EAAEC,SAAS,EAAEC,MAAM,EAAE;EAClC,OAAOF,GAAG,CAACE,MAAM,GAAGA,MAAM,EAAE;IACxBF,GAAG,GAAGC,SAAS,GAAGD,GAAG;EACzB;EACA,OAAOA,GAAG;AACd;AACAL,OAAO,CAACI,IAAI,GAAGA,IAAI;AACnB,SAASD,WAAWA,CAACK,KAAK,EAAE;EACxB,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACD,MAAM,EAAEG,CAAC,EAAE,EAAE;IACnC,IAAIC,CAAC,GAAGH,KAAK,CAACI,EAAE,CAACF,CAAC,CAAC;IACnBD,GAAG,IAAIL,IAAI,CAACO,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;EACtC;EACA,OAAOJ,GAAG;AACd;AACAT,OAAO,CAACG,WAAW,GAAGA,WAAW;AACjC,SAASD,WAAWA,CAACY,GAAG,EAAE;EACtB,IAAIA,GAAG,CAACP,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IACtB,MAAMQ,KAAK,CAAC,aAAa,CAAC;EAC9B;EACA,IAAIN,GAAG,GAAG,EAAE;EACZ,OAAOK,GAAG,CAACP,MAAM,GAAG,CAAC,EAAE;IACnBE,GAAG,CAACO,IAAI,CAACC,QAAQ,CAACH,GAAG,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtCJ,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC;EACtB;EACA,OAAOC,MAAM,CAACC,IAAI,CAACX,GAAG,CAAC;AAC3B;AACAT,OAAO,CAACE,WAAW,GAAGA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}