{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { TonIcon } from './IconComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  isSpinning,\n  onSpinComplete,\n  contractWinner,\n  totalJackpotValue\n}) => {\n  _s();\n  const [wheelState, setWheelState] = useState('idle');\n  const [lockedPlayers, setLockedPlayers] = useState([]);\n  const wheelRef = useRef();\n  const idleAnimationRef = useRef();\n  const currentPosition = useRef(0);\n  const winnerShowcaseTimeoutRef = useRef();\n\n  // Optimized card dimensions\n  const CARD_WIDTH = 105;\n  const CARD_MARGIN = 6;\n  const TOTAL_CARD_WIDTH = CARD_WIDTH + CARD_MARGIN;\n\n  // Lock players when spinning starts\n  useEffect(() => {\n    if (isSpinning && contractWinner && players.length > 0) {\n      setLockedPlayers([...players]);\n    }\n  }, [isSpinning, contractWinner, players]);\n  const effectivePlayers = wheelState === 'spinning' || wheelState === 'winner' ? lockedPlayers : players;\n\n  // Simplified player card rendering\n  const renderPlayerCard = useCallback((player, key) => {\n    if (!player) {\n      return `\n        <div class=\"waiting-card\">\n          <div class=\"avatar-container\">?</div>\n          <div class=\"waiting-text\">Waiting</div>\n          <div class=\"waiting-amount\">0.000</div>\n        </div>\n      `;\n    }\n    const amount = player.bet || player.amount || 0;\n    const isActive = amount > 0;\n    const avatar = player.avatar && player.avatar !== '‚ùì' && player.avatar !== 'üë§' ? player.avatar : `https://robohash.org/${player.address || player.name}.png?size=100x100`;\n    const username = player.username || player.displayName || player.name || 'Player';\n    const bet = amount.toFixed(3);\n    return `\n      <div class=\"player-card ${isActive ? 'active' : 'inactive'}\" data-key=\"${key}\">\n        <div class=\"card-content\">\n          <div class=\"avatar-container\">\n            <img src=\"${avatar}\" alt=\"${username}\" class=\"player-avatar\" loading=\"lazy\" />\n          </div>\n          <div class=\"player-info\">\n            <p class=\"player-name\">${username}</p>\n            <div class=\"bet-info\">\n              <div class=\"coin-icon ${!isActive ? 'grayscale' : ''}\"></div>\n              <span class=\"bet-amount\">${bet}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }, []);\n\n  // Optimized wheel initialization - reduced copies from 50 to 10\n  const initWheel = useCallback(() => {\n    if (!wheelRef.current || !effectivePlayers.length) return;\n    const wheel = wheelRef.current;\n    wheel.innerHTML = '';\n    const row = document.createElement('div');\n    row.className = 'roulette-row';\n\n    // Reduced from 50 to 10 copies for better performance\n    for (let copyIndex = 0; copyIndex < 10; copyIndex++) {\n      effectivePlayers.forEach((player, playerIndex) => {\n        const card = document.createElement('div');\n        card.className = 'roulette-card';\n        card.innerHTML = renderPlayerCard(player, `${copyIndex}-${playerIndex}`);\n        row.appendChild(card);\n      });\n    }\n    wheel.appendChild(row);\n  }, [effectivePlayers, renderPlayerCard]);\n\n  // Optimized idle movement - increased speed with 30fps\n  const startIdleMovement = useCallback(() => {\n    if (!wheelRef.current || wheelState !== 'idle') return;\n    let lastTime = 0;\n    const targetFPS = 30; // Keep at 30fps for better performance\n    const frameInterval = 1000 / targetFPS;\n    const animate = currentTime => {\n      if (wheelState !== 'idle') return;\n      if (currentTime - lastTime >= frameInterval) {\n        currentPosition.current -= 3.0; // Increased speed to 3.0 (10x faster than original)\n\n        const cycleWidth = effectivePlayers.length * TOTAL_CARD_WIDTH;\n        const resetPoint = -(cycleWidth * 5);\n        if (currentPosition.current <= resetPoint) {\n          currentPosition.current = -(cycleWidth * 2);\n        }\n        if (wheelRef.current) {\n          wheelRef.current.style.transform = `translateX(${currentPosition.current}px)`;\n        }\n        lastTime = currentTime;\n      }\n      idleAnimationRef.current = requestAnimationFrame(animate);\n    };\n    idleAnimationRef.current = requestAnimationFrame(animate);\n  }, [wheelState, effectivePlayers.length]);\n  const stopIdleMovement = useCallback(() => {\n    if (idleAnimationRef.current) {\n      cancelAnimationFrame(idleAnimationRef.current);\n      idleAnimationRef.current = null;\n    }\n  }, []);\n\n  // Simplified winner finding\n  const findWinnerPosition = useCallback(winner => {\n    if (!winner || !effectivePlayers.length) return -1;\n    for (let i = 0; i < effectivePlayers.length; i++) {\n      const player = effectivePlayers[i];\n      if (!player) continue;\n      const addressMatch = player.address && (player.address === winner.winner || player.address === winner.fullAddress) || player.fullAddress && (player.fullAddress === winner.winner || player.fullAddress === winner.fullAddress);\n      const usernameMatch = player.username && player.username === winner.username || player.displayName && player.displayName === winner.displayName || player.username && winner.username && player.username === winner.username || player.displayName && winner.winnerName && player.displayName === winner.winnerName;\n      if (addressMatch || usernameMatch) {\n        return i;\n      }\n    }\n    return -1;\n  }, [effectivePlayers]);\n\n  // Optimized spin wheel function\n  const spinWheel = useCallback(targetWinner => {\n    if (wheelState === 'spinning' || !wheelRef.current) return;\n    setWheelState('spinning');\n    stopIdleMovement();\n    const winnerPosition = findWinnerPosition(targetWinner);\n    if (winnerPosition === -1) {\n      // Fallback: land on first active player\n      const firstActivePlayer = effectivePlayers.findIndex(p => p && (p.bet > 0 || p.amount > 0));\n      const fallbackPosition = firstActivePlayer !== -1 ? firstActivePlayer : 0;\n      performSpin(fallbackPosition, targetWinner);\n      return;\n    }\n    performSpin(winnerPosition, targetWinner);\n  }, [wheelState, stopIdleMovement, findWinnerPosition, effectivePlayers.length, onSpinComplete]);\n\n  // Simplified spin animation\n  const performSpin = useCallback((winnerPosition, targetWinner) => {\n    const wheel = wheelRef.current;\n    if (!wheel) return;\n    const wheelWidth = wheel.offsetWidth;\n    const centerOffset = wheelWidth / 2;\n    const cycleLength = effectivePlayers.length * TOTAL_CARD_WIDTH;\n    const winnerOffset = winnerPosition * TOTAL_CARD_WIDTH;\n\n    // Simplified calculation\n    const minimumSpinDistance = cycleLength * 2;\n    const currentAbsolutePosition = Math.abs(currentPosition.current);\n    const targetCycle = Math.ceil((currentAbsolutePosition + minimumSpinDistance) / cycleLength);\n    const finalWinnerPosition = targetCycle * cycleLength + winnerOffset;\n    const finalPosition = -(finalWinnerPosition + CARD_WIDTH / 2 - centerOffset - 20);\n\n    // Faster animation - reduced duration\n    wheel.style.transitionTimingFunction = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n    wheel.style.transitionDuration = '2500ms'; // Reduced from 4000ms to 2500ms (37.5% faster)\n    wheel.style.transform = `translateX(${finalPosition}px)`;\n    currentPosition.current = finalPosition;\n\n    // Show winner after animation\n    setTimeout(() => {\n      setWheelState('winner');\n\n      // Highlight winner (simplified)\n      const allCards = wheel.querySelectorAll('.roulette-card');\n      const centerCardIndex = Math.round(Math.abs(finalPosition) / TOTAL_CARD_WIDTH);\n      const centerCard = allCards[centerCardIndex];\n      if (centerCard) {\n        centerCard.classList.add('winner-highlight');\n      }\n\n      // Show winner for 2 seconds (reduced from 3)\n      winnerShowcaseTimeoutRef.current = setTimeout(() => {\n        const highlightedCards = wheel.querySelectorAll('.winner-highlight');\n        highlightedCards.forEach(card => {\n          card.classList.remove('winner-highlight');\n        });\n        wheel.style.transitionTimingFunction = '';\n        wheel.style.transitionDuration = '';\n        setLockedPlayers([]);\n        setWheelState('finished');\n        onSpinComplete === null || onSpinComplete === void 0 ? void 0 : onSpinComplete(targetWinner);\n      }, 2000);\n    }, 2500);\n  }, [effectivePlayers.length, CARD_WIDTH, onSpinComplete]);\n\n  // State management\n  useEffect(() => {\n    if (isSpinning && contractWinner && wheelState === 'waiting') {\n      spinWheel(contractWinner);\n    } else if (isSpinning && !contractWinner && wheelState === 'idle') {\n      setWheelState('waiting');\n      stopIdleMovement();\n    } else if (!isSpinning && wheelState !== 'idle' && wheelState !== 'winner' && wheelState !== 'finished') {\n      setWheelState('idle');\n    }\n  }, [isSpinning, contractWinner, wheelState, spinWheel, stopIdleMovement]);\n  useEffect(() => {\n    if (wheelState === 'finished' && !contractWinner && !isSpinning) {\n      setWheelState('idle');\n    }\n  }, [wheelState, contractWinner, isSpinning]);\n  useEffect(() => {\n    if (wheelState === 'idle') {\n      startIdleMovement();\n    } else {\n      stopIdleMovement();\n    }\n    return () => stopIdleMovement();\n  }, [wheelState, startIdleMovement, stopIdleMovement]);\n  useEffect(() => {\n    if (wheelState !== 'winner' && wheelState !== 'finished') {\n      initWheel();\n    }\n  }, [initWheel, wheelState]);\n  useEffect(() => {\n    return () => {\n      if (winnerShowcaseTimeoutRef.current) {\n        clearTimeout(winnerShowcaseTimeoutRef.current);\n      }\n    };\n  }, []);\n  if (!effectivePlayers || effectivePlayers.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simple-carousel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carousel-message\",\n        children: \"Waiting for players to join...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roulette-selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wheelRef,\n      className: \"roulette-wheel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"VIxi7lGLuxZ4CmPOzTtmWajujkE=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","TonIcon","jsxDEV","_jsxDEV","SimpleCarousel","players","isSpinning","onSpinComplete","contractWinner","totalJackpotValue","_s","wheelState","setWheelState","lockedPlayers","setLockedPlayers","wheelRef","idleAnimationRef","currentPosition","winnerShowcaseTimeoutRef","CARD_WIDTH","CARD_MARGIN","TOTAL_CARD_WIDTH","length","effectivePlayers","renderPlayerCard","player","key","amount","bet","isActive","avatar","address","name","username","displayName","toFixed","initWheel","current","wheel","innerHTML","row","document","createElement","className","copyIndex","forEach","playerIndex","card","appendChild","startIdleMovement","lastTime","targetFPS","frameInterval","animate","currentTime","cycleWidth","resetPoint","style","transform","requestAnimationFrame","stopIdleMovement","cancelAnimationFrame","findWinnerPosition","winner","i","addressMatch","fullAddress","usernameMatch","winnerName","spinWheel","targetWinner","winnerPosition","firstActivePlayer","findIndex","p","fallbackPosition","performSpin","wheelWidth","offsetWidth","centerOffset","cycleLength","winnerOffset","minimumSpinDistance","currentAbsolutePosition","Math","abs","targetCycle","ceil","finalWinnerPosition","finalPosition","transitionTimingFunction","transitionDuration","setTimeout","allCards","querySelectorAll","centerCardIndex","round","centerCard","classList","add","highlightedCards","remove","clearTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { TonIcon } from './IconComponents';\n\nconst SimpleCarousel = ({ \n  players, \n  isSpinning, \n  onSpinComplete, \n  contractWinner,\n  totalJackpotValue \n}) => {\n  const [wheelState, setWheelState] = useState('idle');\n  const [lockedPlayers, setLockedPlayers] = useState([]);\n  const wheelRef = useRef();\n  const idleAnimationRef = useRef();\n  const currentPosition = useRef(0);\n  const winnerShowcaseTimeoutRef = useRef();\n  \n  // Optimized card dimensions\n  const CARD_WIDTH = 105;\n  const CARD_MARGIN = 6;\n  const TOTAL_CARD_WIDTH = CARD_WIDTH + CARD_MARGIN;\n  \n  // Lock players when spinning starts\n  useEffect(() => {\n    if (isSpinning && contractWinner && players.length > 0) {\n      setLockedPlayers([...players]);\n    }\n  }, [isSpinning, contractWinner, players]);\n  \n  const effectivePlayers = wheelState === 'spinning' || wheelState === 'winner' ? lockedPlayers : players;\n  \n  // Simplified player card rendering\n  const renderPlayerCard = useCallback((player, key) => {\n    if (!player) {\n      return `\n        <div class=\"waiting-card\">\n          <div class=\"avatar-container\">?</div>\n          <div class=\"waiting-text\">Waiting</div>\n          <div class=\"waiting-amount\">0.000</div>\n        </div>\n      `;\n    }\n    \n    const amount = player.bet || player.amount || 0;\n    const isActive = amount > 0;\n    const avatar = player.avatar && player.avatar !== '‚ùì' && player.avatar !== 'üë§' ? \n      player.avatar : \n      `https://robohash.org/${player.address || player.name}.png?size=100x100`;\n    const username = player.username || player.displayName || player.name || 'Player';\n    const bet = amount.toFixed(3);\n    \n    return `\n      <div class=\"player-card ${isActive ? 'active' : 'inactive'}\" data-key=\"${key}\">\n        <div class=\"card-content\">\n          <div class=\"avatar-container\">\n            <img src=\"${avatar}\" alt=\"${username}\" class=\"player-avatar\" loading=\"lazy\" />\n          </div>\n          <div class=\"player-info\">\n            <p class=\"player-name\">${username}</p>\n            <div class=\"bet-info\">\n              <div class=\"coin-icon ${!isActive ? 'grayscale' : ''}\"></div>\n              <span class=\"bet-amount\">${bet}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }, []);\n\n  // Optimized wheel initialization - reduced copies from 50 to 10\n  const initWheel = useCallback(() => {\n    if (!wheelRef.current || !effectivePlayers.length) return;\n    \n    const wheel = wheelRef.current;\n    wheel.innerHTML = '';\n    \n    const row = document.createElement('div');\n    row.className = 'roulette-row';\n    \n    // Reduced from 50 to 10 copies for better performance\n    for (let copyIndex = 0; copyIndex < 10; copyIndex++) {\n      effectivePlayers.forEach((player, playerIndex) => {\n        const card = document.createElement('div');\n        card.className = 'roulette-card';\n        card.innerHTML = renderPlayerCard(player, `${copyIndex}-${playerIndex}`);\n        row.appendChild(card);\n      });\n    }\n    \n    wheel.appendChild(row);\n  }, [effectivePlayers, renderPlayerCard]);\n\n  // Optimized idle movement - increased speed with 30fps\n  const startIdleMovement = useCallback(() => {\n    if (!wheelRef.current || wheelState !== 'idle') return;\n    \n    let lastTime = 0;\n    const targetFPS = 30; // Keep at 30fps for better performance\n    const frameInterval = 1000 / targetFPS;\n    \n    const animate = (currentTime) => {\n      if (wheelState !== 'idle') return;\n      \n      if (currentTime - lastTime >= frameInterval) {\n        currentPosition.current -= 3.0; // Increased speed to 3.0 (10x faster than original)\n        \n        const cycleWidth = effectivePlayers.length * TOTAL_CARD_WIDTH;\n        const resetPoint = -(cycleWidth * 5);\n        \n        if (currentPosition.current <= resetPoint) {\n          currentPosition.current = -(cycleWidth * 2);\n        }\n        \n        if (wheelRef.current) {\n          wheelRef.current.style.transform = `translateX(${currentPosition.current}px)`;\n        }\n        \n        lastTime = currentTime;\n      }\n      \n      idleAnimationRef.current = requestAnimationFrame(animate);\n    };\n    \n    idleAnimationRef.current = requestAnimationFrame(animate);\n  }, [wheelState, effectivePlayers.length]);\n\n  const stopIdleMovement = useCallback(() => {\n    if (idleAnimationRef.current) {\n      cancelAnimationFrame(idleAnimationRef.current);\n      idleAnimationRef.current = null;\n    }\n  }, []);\n\n  // Simplified winner finding\n  const findWinnerPosition = useCallback((winner) => {\n    if (!winner || !effectivePlayers.length) return -1;\n    \n    for (let i = 0; i < effectivePlayers.length; i++) {\n      const player = effectivePlayers[i];\n      if (!player) continue;\n      \n      const addressMatch = (\n        (player.address && (player.address === winner.winner || player.address === winner.fullAddress)) ||\n        (player.fullAddress && (player.fullAddress === winner.winner || player.fullAddress === winner.fullAddress))\n      );\n      \n      const usernameMatch = (\n        (player.username && player.username === winner.username) ||\n        (player.displayName && player.displayName === winner.displayName) ||\n        (player.username && winner.username && player.username === winner.username) ||\n        (player.displayName && winner.winnerName && player.displayName === winner.winnerName)\n      );\n      \n      if (addressMatch || usernameMatch) {\n        return i;\n      }\n    }\n    \n    return -1;\n  }, [effectivePlayers]);\n\n  // Optimized spin wheel function\n  const spinWheel = useCallback((targetWinner) => {\n    if (wheelState === 'spinning' || !wheelRef.current) return;\n    \n    setWheelState('spinning');\n    stopIdleMovement();\n    \n    const winnerPosition = findWinnerPosition(targetWinner);\n    if (winnerPosition === -1) {\n      // Fallback: land on first active player\n      const firstActivePlayer = effectivePlayers.findIndex(p => p && (p.bet > 0 || p.amount > 0));\n      const fallbackPosition = firstActivePlayer !== -1 ? firstActivePlayer : 0;\n      performSpin(fallbackPosition, targetWinner);\n      return;\n    }\n          \n    performSpin(winnerPosition, targetWinner);\n    \n  }, [wheelState, stopIdleMovement, findWinnerPosition, effectivePlayers.length, onSpinComplete]);\n\n  // Simplified spin animation\n  const performSpin = useCallback((winnerPosition, targetWinner) => {\n    const wheel = wheelRef.current;\n    if (!wheel) return;\n\n    const wheelWidth = wheel.offsetWidth;\n    const centerOffset = wheelWidth / 2;\n    const cycleLength = effectivePlayers.length * TOTAL_CARD_WIDTH;\n    const winnerOffset = winnerPosition * TOTAL_CARD_WIDTH;\n    \n    // Simplified calculation\n    const minimumSpinDistance = cycleLength * 2;\n    const currentAbsolutePosition = Math.abs(currentPosition.current);\n    const targetCycle = Math.ceil((currentAbsolutePosition + minimumSpinDistance) / cycleLength);\n    const finalWinnerPosition = (targetCycle * cycleLength) + winnerOffset;\n    const finalPosition = -(finalWinnerPosition + (CARD_WIDTH / 2) - centerOffset - 20);\n    \n    // Faster animation - reduced duration\n    wheel.style.transitionTimingFunction = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n    wheel.style.transitionDuration = '2500ms'; // Reduced from 4000ms to 2500ms (37.5% faster)\n    wheel.style.transform = `translateX(${finalPosition}px)`;\n    currentPosition.current = finalPosition;\n    \n    // Show winner after animation\n    setTimeout(() => {\n      setWheelState('winner');\n      \n      // Highlight winner (simplified)\n      const allCards = wheel.querySelectorAll('.roulette-card');\n      const centerCardIndex = Math.round(Math.abs(finalPosition) / TOTAL_CARD_WIDTH);\n      const centerCard = allCards[centerCardIndex];\n      \n      if (centerCard) {\n        centerCard.classList.add('winner-highlight');\n      }\n      \n      // Show winner for 2 seconds (reduced from 3)\n      winnerShowcaseTimeoutRef.current = setTimeout(() => {\n        const highlightedCards = wheel.querySelectorAll('.winner-highlight');\n        highlightedCards.forEach(card => {\n          card.classList.remove('winner-highlight');\n        });\n        \n        wheel.style.transitionTimingFunction = '';\n        wheel.style.transitionDuration = '';\n        \n        setLockedPlayers([]);\n        setWheelState('finished');\n        onSpinComplete?.(targetWinner);\n      }, 2000);\n      \n    }, 2500);\n    \n  }, [effectivePlayers.length, CARD_WIDTH, onSpinComplete]);\n\n  // State management\n  useEffect(() => {\n    if (isSpinning && contractWinner && wheelState === 'waiting') {\n      spinWheel(contractWinner);\n    } else if (isSpinning && !contractWinner && wheelState === 'idle') {\n      setWheelState('waiting');\n      stopIdleMovement();\n    } else if (!isSpinning && wheelState !== 'idle' && wheelState !== 'winner' && wheelState !== 'finished') {\n      setWheelState('idle');\n    }\n  }, [isSpinning, contractWinner, wheelState, spinWheel, stopIdleMovement]);\n\n  useEffect(() => {\n    if (wheelState === 'finished' && !contractWinner && !isSpinning) {\n      setWheelState('idle');\n    }\n  }, [wheelState, contractWinner, isSpinning]);\n\n  useEffect(() => {\n    if (wheelState === 'idle') {\n      startIdleMovement();\n    } else {\n      stopIdleMovement();\n    }\n    \n    return () => stopIdleMovement();\n  }, [wheelState, startIdleMovement, stopIdleMovement]);\n\n  useEffect(() => {\n    if (wheelState !== 'winner' && wheelState !== 'finished') {\n      initWheel();\n    }\n  }, [initWheel, wheelState]);\n\n  useEffect(() => {\n    return () => {\n      if (winnerShowcaseTimeoutRef.current) {\n        clearTimeout(winnerShowcaseTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  if (!effectivePlayers || effectivePlayers.length === 0) {\n    return (\n      <div className=\"simple-carousel\">\n        <div className=\"carousel-message\">\n          Waiting for players to join...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"roulette-wrapper\">\n      <div className=\"roulette-selector\"></div>\n      <div ref={wheelRef} className=\"roulette-wheel\"></div>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}