{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [isCustomSpinning, setIsCustomSpinning] = useState(false);\n  const [spinSpeed, setSpinSpeed] = useState(50);\n  const animationRef = useRef(null);\n  const targetIndexRef = useRef(null);\n  const spinPhaseRef = useRef('idle'); // 'idle', 'spinning', 'slowing', 'stopped'\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Natural casino-style spin animation\n  const startCasinoSpin = useCallback(() => {\n    if (!swiperRef.current || isCustomSpinning) return;\n    console.log('🎰 Starting casino-style spin animation');\n    setIsCustomSpinning(true);\n    spinPhaseRef.current = 'spinning';\n\n    // Stop any existing autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // Start fast spinning\n    let currentSpeed = 20; // Start very fast\n    setSpinSpeed(currentSpeed);\n    const spinInterval = setInterval(() => {\n      if (swiperRef.current && spinPhaseRef.current === 'spinning') {\n        // Get current slide index\n        const activeIndex = swiperRef.current.activeIndex;\n        // Move to next slide\n        swiperRef.current.slideNext(currentSpeed);\n      }\n    }, currentSpeed);\n\n    // Save interval reference for cleanup\n    animationRef.current = spinInterval;\n    return spinInterval;\n  }, [isCustomSpinning]);\n\n  // Natural deceleration to winner\n  const startSlowDownToWinner = useCallback(winnerIndex => {\n    if (!swiperRef.current || spinPhaseRef.current !== 'spinning') return;\n    console.log('🎯 Starting slow-down to winner at index:', winnerIndex);\n    spinPhaseRef.current = 'slowing';\n\n    // Clear fast spinning\n    if (animationRef.current) {\n      clearInterval(animationRef.current);\n    }\n\n    // Calculate how many slides to go past winner before slowing down\n    const currentIndex = swiperRef.current.activeIndex % players.length;\n    const overshoot = 8; // Go 8 slides past winner for natural feel\n    let targetSlide = winnerIndex + overshoot;\n\n    // If we need to loop around\n    if (targetSlide >= players.length) {\n      targetSlide = targetSlide % players.length;\n    }\n\n    // Start deceleration animation\n    let speed = 50; // Start medium speed\n    let currentPos = currentIndex;\n    const decelerateInterval = setInterval(() => {\n      if (!swiperRef.current) {\n        clearInterval(decelerateInterval);\n        return;\n      }\n\n      // Move to next slide\n      swiperRef.current.slideNext(speed);\n      currentPos = (currentPos + 1) % players.length;\n\n      // Check if we're getting close to target\n      const distanceToTarget = Math.abs(currentPos - winnerIndex);\n      const isClose = distanceToTarget <= 2 || distanceToTarget >= players.length - 2;\n      if (isClose && speed > 800) {\n        // We're close to winner and moving slowly enough - final positioning\n        clearInterval(decelerateInterval);\n\n        // Final slide to exact winner position\n        setTimeout(() => {\n          if (swiperRef.current) {\n            swiperRef.current.slideTo(winnerIndex, 1000); // Smooth final slide\n            spinPhaseRef.current = 'stopped';\n            setIsCustomSpinning(false);\n\n            // Trigger winner landed callback\n            setTimeout(() => {\n              onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n            }, 1000);\n          }\n        }, 200);\n      } else {\n        // Gradually slow down (realistic deceleration)\n        speed = Math.min(speed * 1.08, 800); // Exponential slowdown, max 800ms\n        setSpinSpeed(speed);\n      }\n    }, speed);\n    animationRef.current = decelerateInterval;\n  }, [players.length, onWinnerLand]);\n\n  // Handle winner announcement with realistic spin\n  useEffect(() => {\n    if (winner && swiperRef.current && players && !isCustomSpinning) {\n      const winnerIndex = players.findIndex(p => p && (p.address === winner.address || p.username === winner.username || p.address === winner.winner || p.address === winner.fullAddress || p.username === winner.displayName));\n      if (winnerIndex !== -1) {\n        targetIndexRef.current = winnerIndex;\n        console.log('🏆 Winner found at index:', winnerIndex, 'Starting casino spin...');\n\n        // Start spinning, then slow down to winner after 2-3 seconds\n        const spinInterval = startCasinoSpin();\n        setTimeout(() => {\n          startSlowDownToWinner(winnerIndex);\n        }, 2500); // Spin for 2.5 seconds before starting to slow down\n      }\n    }\n  }, [winner, players, isCustomSpinning, startCasinoSpin, startSlowDownToWinner]);\n\n  // Handle regular spinning state (not winner selection)\n  useEffect(() => {\n    if (isSpinning && !winner && !isCustomSpinning) {\n      // Regular fast spinning while waiting for winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    } else if (!isSpinning && !winner && !isCustomSpinning) {\n      // Normal slow movement when not spinning\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    }\n  }, [isSpinning, winner, isCustomSpinning]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        clearInterval(animationRef.current);\n      }\n    };\n  }, []);\n\n  // Prevent stopping when new players join during spin\n  useEffect(() => {\n    // Don't restart autoplay if we're in custom spinning mode\n    if (isCustomSpinning || spinPhaseRef.current !== 'idle') {\n      return;\n    }\n\n    // Only restart normal autoplay if we're not in winner selection mode\n    if (!winner && swiperRef.current && swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.start();\n    }\n  }, [players.length, isCustomSpinning, winner]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${isCustomSpinning && spinPhaseRef.current === 'slowing' ? 'winner-approaching' : spinPhaseRef.current === 'stopped' ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: players.length * 6 // More slides for smoother infinite scroll\n      ,\n      autoplay: {\n        delay: isSpinning && !isCustomSpinning ? 15 : 400,\n        // Very fast when spinning, normal otherwise\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: isCustomSpinning ? spinSpeed : isSpinning ? 30 : 300,\n      className: `player-swiper ${isSpinning || isCustomSpinning ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(6)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"qDhQd5C79nJhUPkbMQ+p9b1G28c=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","isCustomSpinning","setIsCustomSpinning","spinSpeed","setSpinSpeed","animationRef","targetIndexRef","spinPhaseRef","handleSwiperInit","swiper","current","startCasinoSpin","console","log","autoplay","stop","currentSpeed","spinInterval","setInterval","activeIndex","slideNext","startSlowDownToWinner","winnerIndex","clearInterval","currentIndex","length","overshoot","targetSlide","speed","currentPos","decelerateInterval","distanceToTarget","Math","abs","isClose","setTimeout","slideTo","min","findIndex","p","address","username","fullAddress","displayName","start","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","delay","disableOnInteraction","pauseOnMouseEnter","allowTouchMove","onSwiper","Array","map","_","setIndex","player","index","toUpperCase","amount","toFixed","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [isCustomSpinning, setIsCustomSpinning] = useState(false);\n  const [spinSpeed, setSpinSpeed] = useState(50);\n  const animationRef = useRef(null);\n  const targetIndexRef = useRef(null);\n  const spinPhaseRef = useRef('idle'); // 'idle', 'spinning', 'slowing', 'stopped'\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Natural casino-style spin animation\n  const startCasinoSpin = useCallback(() => {\n    if (!swiperRef.current || isCustomSpinning) return;\n    \n    console.log('🎰 Starting casino-style spin animation');\n    setIsCustomSpinning(true);\n    spinPhaseRef.current = 'spinning';\n    \n    // Stop any existing autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // Start fast spinning\n    let currentSpeed = 20; // Start very fast\n    setSpinSpeed(currentSpeed);\n    \n    const spinInterval = setInterval(() => {\n      if (swiperRef.current && spinPhaseRef.current === 'spinning') {\n        // Get current slide index\n        const activeIndex = swiperRef.current.activeIndex;\n        // Move to next slide\n        swiperRef.current.slideNext(currentSpeed);\n      }\n    }, currentSpeed);\n    \n    // Save interval reference for cleanup\n    animationRef.current = spinInterval;\n    \n    return spinInterval;\n  }, [isCustomSpinning]);\n\n  // Natural deceleration to winner\n  const startSlowDownToWinner = useCallback((winnerIndex) => {\n    if (!swiperRef.current || spinPhaseRef.current !== 'spinning') return;\n    \n    console.log('🎯 Starting slow-down to winner at index:', winnerIndex);\n    spinPhaseRef.current = 'slowing';\n    \n    // Clear fast spinning\n    if (animationRef.current) {\n      clearInterval(animationRef.current);\n    }\n    \n    // Calculate how many slides to go past winner before slowing down\n    const currentIndex = swiperRef.current.activeIndex % players.length;\n    const overshoot = 8; // Go 8 slides past winner for natural feel\n    let targetSlide = winnerIndex + overshoot;\n    \n    // If we need to loop around\n    if (targetSlide >= players.length) {\n      targetSlide = targetSlide % players.length;\n    }\n    \n    // Start deceleration animation\n    let speed = 50; // Start medium speed\n    let currentPos = currentIndex;\n    \n    const decelerateInterval = setInterval(() => {\n      if (!swiperRef.current) {\n        clearInterval(decelerateInterval);\n        return;\n      }\n      \n      // Move to next slide\n      swiperRef.current.slideNext(speed);\n      currentPos = (currentPos + 1) % players.length;\n      \n      // Check if we're getting close to target\n      const distanceToTarget = Math.abs(currentPos - winnerIndex);\n      const isClose = distanceToTarget <= 2 || distanceToTarget >= players.length - 2;\n      \n      if (isClose && speed > 800) {\n        // We're close to winner and moving slowly enough - final positioning\n        clearInterval(decelerateInterval);\n        \n        // Final slide to exact winner position\n        setTimeout(() => {\n          if (swiperRef.current) {\n            swiperRef.current.slideTo(winnerIndex, 1000); // Smooth final slide\n            spinPhaseRef.current = 'stopped';\n            setIsCustomSpinning(false);\n            \n            // Trigger winner landed callback\n            setTimeout(() => {\n              onWinnerLand?.();\n            }, 1000);\n          }\n        }, 200);\n      } else {\n        // Gradually slow down (realistic deceleration)\n        speed = Math.min(speed * 1.08, 800); // Exponential slowdown, max 800ms\n        setSpinSpeed(speed);\n      }\n    }, speed);\n    \n    animationRef.current = decelerateInterval;\n  }, [players.length, onWinnerLand]);\n\n  // Handle winner announcement with realistic spin\n  useEffect(() => {\n    if (winner && swiperRef.current && players && !isCustomSpinning) {\n      const winnerIndex = players.findIndex(p => \n        p && (\n          p.address === winner.address || \n          p.username === winner.username ||\n          p.address === winner.winner ||\n          p.address === winner.fullAddress ||\n          p.username === winner.displayName\n        )\n      );\n      \n      if (winnerIndex !== -1) {\n        targetIndexRef.current = winnerIndex;\n        console.log('🏆 Winner found at index:', winnerIndex, 'Starting casino spin...');\n        \n        // Start spinning, then slow down to winner after 2-3 seconds\n        const spinInterval = startCasinoSpin();\n        \n        setTimeout(() => {\n          startSlowDownToWinner(winnerIndex);\n        }, 2500); // Spin for 2.5 seconds before starting to slow down\n      }\n    }\n  }, [winner, players, isCustomSpinning, startCasinoSpin, startSlowDownToWinner]);\n\n  // Handle regular spinning state (not winner selection)\n  useEffect(() => {\n    if (isSpinning && !winner && !isCustomSpinning) {\n      // Regular fast spinning while waiting for winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    } else if (!isSpinning && !winner && !isCustomSpinning) {\n      // Normal slow movement when not spinning\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    }\n  }, [isSpinning, winner, isCustomSpinning]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        clearInterval(animationRef.current);\n      }\n    };\n  }, []);\n\n  // Prevent stopping when new players join during spin\n  useEffect(() => {\n    // Don't restart autoplay if we're in custom spinning mode\n    if (isCustomSpinning || spinPhaseRef.current !== 'idle') {\n      return;\n    }\n    \n    // Only restart normal autoplay if we're not in winner selection mode\n    if (!winner && swiperRef.current && swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.start();\n    }\n  }, [players.length, isCustomSpinning, winner]);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        isCustomSpinning && spinPhaseRef.current === 'slowing' ? 'winner-approaching' : \n        spinPhaseRef.current === 'stopped' ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={players.length * 6} // More slides for smoother infinite scroll\n        autoplay={{\n          delay: isSpinning && !isCustomSpinning ? 15 : 400, // Very fast when spinning, normal otherwise\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={isCustomSpinning ? spinSpeed : (isSpinning ? 30 : 300)}\n        className={`player-swiper ${isSpinning || isCustomSpinning ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Create 6 sets for much smoother infinite scroll */}\n        {[...Array(6)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACvE,SAASC,MAAM,EAAEC,WAAW,QAAQ,cAAc;AAClD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,OAAO,YAAY;AACnB,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAC;EACtBC,OAAO;EACPC,MAAM;EACNC,UAAU;EACVC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMkB,YAAY,GAAGpB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMqB,cAAc,GAAGrB,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMsB,YAAY,GAAGtB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMuB,gBAAgB,GAAIC,MAAM,IAAK;IACnCT,SAAS,CAACU,OAAO,GAAGD,MAAM;EAC5B,CAAC;;EAED;EACA,MAAME,eAAe,GAAGvB,WAAW,CAAC,MAAM;IACxC,IAAI,CAACY,SAAS,CAACU,OAAO,IAAIT,gBAAgB,EAAE;IAE5CW,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDX,mBAAmB,CAAC,IAAI,CAAC;IACzBK,YAAY,CAACG,OAAO,GAAG,UAAU;;IAEjC;IACA,IAAIV,SAAS,CAACU,OAAO,CAACI,QAAQ,EAAE;MAC9Bd,SAAS,CAACU,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC;IACnC;;IAEA;IACA,IAAIC,YAAY,GAAG,EAAE,CAAC,CAAC;IACvBZ,YAAY,CAACY,YAAY,CAAC;IAE1B,MAAMC,YAAY,GAAGC,WAAW,CAAC,MAAM;MACrC,IAAIlB,SAAS,CAACU,OAAO,IAAIH,YAAY,CAACG,OAAO,KAAK,UAAU,EAAE;QAC5D;QACA,MAAMS,WAAW,GAAGnB,SAAS,CAACU,OAAO,CAACS,WAAW;QACjD;QACAnB,SAAS,CAACU,OAAO,CAACU,SAAS,CAACJ,YAAY,CAAC;MAC3C;IACF,CAAC,EAAEA,YAAY,CAAC;;IAEhB;IACAX,YAAY,CAACK,OAAO,GAAGO,YAAY;IAEnC,OAAOA,YAAY;EACrB,CAAC,EAAE,CAAChB,gBAAgB,CAAC,CAAC;;EAEtB;EACA,MAAMoB,qBAAqB,GAAGjC,WAAW,CAAEkC,WAAW,IAAK;IACzD,IAAI,CAACtB,SAAS,CAACU,OAAO,IAAIH,YAAY,CAACG,OAAO,KAAK,UAAU,EAAE;IAE/DE,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAES,WAAW,CAAC;IACrEf,YAAY,CAACG,OAAO,GAAG,SAAS;;IAEhC;IACA,IAAIL,YAAY,CAACK,OAAO,EAAE;MACxBa,aAAa,CAAClB,YAAY,CAACK,OAAO,CAAC;IACrC;;IAEA;IACA,MAAMc,YAAY,GAAGxB,SAAS,CAACU,OAAO,CAACS,WAAW,GAAGxB,OAAO,CAAC8B,MAAM;IACnE,MAAMC,SAAS,GAAG,CAAC,CAAC,CAAC;IACrB,IAAIC,WAAW,GAAGL,WAAW,GAAGI,SAAS;;IAEzC;IACA,IAAIC,WAAW,IAAIhC,OAAO,CAAC8B,MAAM,EAAE;MACjCE,WAAW,GAAGA,WAAW,GAAGhC,OAAO,CAAC8B,MAAM;IAC5C;;IAEA;IACA,IAAIG,KAAK,GAAG,EAAE,CAAC,CAAC;IAChB,IAAIC,UAAU,GAAGL,YAAY;IAE7B,MAAMM,kBAAkB,GAAGZ,WAAW,CAAC,MAAM;MAC3C,IAAI,CAAClB,SAAS,CAACU,OAAO,EAAE;QACtBa,aAAa,CAACO,kBAAkB,CAAC;QACjC;MACF;;MAEA;MACA9B,SAAS,CAACU,OAAO,CAACU,SAAS,CAACQ,KAAK,CAAC;MAClCC,UAAU,GAAG,CAACA,UAAU,GAAG,CAAC,IAAIlC,OAAO,CAAC8B,MAAM;;MAE9C;MACA,MAAMM,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAACJ,UAAU,GAAGP,WAAW,CAAC;MAC3D,MAAMY,OAAO,GAAGH,gBAAgB,IAAI,CAAC,IAAIA,gBAAgB,IAAIpC,OAAO,CAAC8B,MAAM,GAAG,CAAC;MAE/E,IAAIS,OAAO,IAAIN,KAAK,GAAG,GAAG,EAAE;QAC1B;QACAL,aAAa,CAACO,kBAAkB,CAAC;;QAEjC;QACAK,UAAU,CAAC,MAAM;UACf,IAAInC,SAAS,CAACU,OAAO,EAAE;YACrBV,SAAS,CAACU,OAAO,CAAC0B,OAAO,CAACd,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;YAC9Cf,YAAY,CAACG,OAAO,GAAG,SAAS;YAChCR,mBAAmB,CAAC,KAAK,CAAC;;YAE1B;YACAiC,UAAU,CAAC,MAAM;cACfrC,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAG,CAAC;YAClB,CAAC,EAAE,IAAI,CAAC;UACV;QACF,CAAC,EAAE,GAAG,CAAC;MACT,CAAC,MAAM;QACL;QACA8B,KAAK,GAAGI,IAAI,CAACK,GAAG,CAACT,KAAK,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QACrCxB,YAAY,CAACwB,KAAK,CAAC;MACrB;IACF,CAAC,EAAEA,KAAK,CAAC;IAETvB,YAAY,CAACK,OAAO,GAAGoB,kBAAkB;EAC3C,CAAC,EAAE,CAACnC,OAAO,CAAC8B,MAAM,EAAE3B,YAAY,CAAC,CAAC;;EAElC;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIU,MAAM,IAAII,SAAS,CAACU,OAAO,IAAIf,OAAO,IAAI,CAACM,gBAAgB,EAAE;MAC/D,MAAMqB,WAAW,GAAG3B,OAAO,CAAC2C,SAAS,CAACC,CAAC,IACrCA,CAAC,KACCA,CAAC,CAACC,OAAO,KAAK5C,MAAM,CAAC4C,OAAO,IAC5BD,CAAC,CAACE,QAAQ,KAAK7C,MAAM,CAAC6C,QAAQ,IAC9BF,CAAC,CAACC,OAAO,KAAK5C,MAAM,CAACA,MAAM,IAC3B2C,CAAC,CAACC,OAAO,KAAK5C,MAAM,CAAC8C,WAAW,IAChCH,CAAC,CAACE,QAAQ,KAAK7C,MAAM,CAAC+C,WAAW,CAErC,CAAC;MAED,IAAIrB,WAAW,KAAK,CAAC,CAAC,EAAE;QACtBhB,cAAc,CAACI,OAAO,GAAGY,WAAW;QACpCV,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAES,WAAW,EAAE,yBAAyB,CAAC;;QAEhF;QACA,MAAML,YAAY,GAAGN,eAAe,CAAC,CAAC;QAEtCwB,UAAU,CAAC,MAAM;UACfd,qBAAqB,CAACC,WAAW,CAAC;QACpC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACZ;IACF;EACF,CAAC,EAAE,CAAC1B,MAAM,EAAED,OAAO,EAAEM,gBAAgB,EAAEU,eAAe,EAAEU,qBAAqB,CAAC,CAAC;;EAE/E;EACAnC,SAAS,CAAC,MAAM;IACd,IAAIW,UAAU,IAAI,CAACD,MAAM,IAAI,CAACK,gBAAgB,EAAE;MAC9C;MACA,IAAID,SAAS,CAACU,OAAO,IAAIV,SAAS,CAACU,OAAO,CAACI,QAAQ,EAAE;QACnDd,SAAS,CAACU,OAAO,CAACI,QAAQ,CAAC8B,KAAK,CAAC,CAAC;MACpC;IACF,CAAC,MAAM,IAAI,CAAC/C,UAAU,IAAI,CAACD,MAAM,IAAI,CAACK,gBAAgB,EAAE;MACtD;MACA,IAAID,SAAS,CAACU,OAAO,IAAIV,SAAS,CAACU,OAAO,CAACI,QAAQ,EAAE;QACnDd,SAAS,CAACU,OAAO,CAACI,QAAQ,CAAC8B,KAAK,CAAC,CAAC;MACpC;IACF;EACF,CAAC,EAAE,CAAC/C,UAAU,EAAED,MAAM,EAAEK,gBAAgB,CAAC,CAAC;;EAE1C;EACAf,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAImB,YAAY,CAACK,OAAO,EAAE;QACxBa,aAAa,CAAClB,YAAY,CAACK,OAAO,CAAC;MACrC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAxB,SAAS,CAAC,MAAM;IACd;IACA,IAAIe,gBAAgB,IAAIM,YAAY,CAACG,OAAO,KAAK,MAAM,EAAE;MACvD;IACF;;IAEA;IACA,IAAI,CAACd,MAAM,IAAII,SAAS,CAACU,OAAO,IAAIV,SAAS,CAACU,OAAO,CAACI,QAAQ,EAAE;MAC9Dd,SAAS,CAACU,OAAO,CAACI,QAAQ,CAAC8B,KAAK,CAAC,CAAC;IACpC;EACF,CAAC,EAAE,CAACjD,OAAO,CAAC8B,MAAM,EAAExB,gBAAgB,EAAEL,MAAM,CAAC,CAAC;EAE9C,oBACEH,OAAA;IAAKoD,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBAExCrD,OAAA;MAAKoD,SAAS,EAAE,kBACd5C,gBAAgB,IAAIM,YAAY,CAACG,OAAO,KAAK,SAAS,GAAG,oBAAoB,GAC7EH,YAAY,CAACG,OAAO,KAAK,SAAS,GAAG,eAAe,GAAG,EAAE,EACxD;MAAAoC,QAAA,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEZzD,OAAA,CAACJ,MAAM;MACL8D,GAAG,EAAEnD,SAAU;MACfoD,OAAO,EAAE,CAAC7D,QAAQ,CAAE;MACpB8D,YAAY,EAAE,EAAG;MACjBC,aAAa,EAAC,MAAM;MACpBC,cAAc,EAAE,IAAK;MACrBC,IAAI,EAAE,IAAK;MACXC,YAAY,EAAE9D,OAAO,CAAC8B,MAAM,GAAG,CAAE,CAAC;MAAA;MAClCX,QAAQ,EAAE;QACR4C,KAAK,EAAE7D,UAAU,IAAI,CAACI,gBAAgB,GAAG,EAAE,GAAG,GAAG;QAAE;QACnD0D,oBAAoB,EAAE,KAAK;QAC3BC,iBAAiB,EAAE;MACrB,CAAE;MACFhC,KAAK,EAAE3B,gBAAgB,GAAGE,SAAS,GAAIN,UAAU,GAAG,EAAE,GAAG,GAAK;MAC9DgD,SAAS,EAAE,iBAAiBhD,UAAU,IAAII,gBAAgB,GAAG,UAAU,GAAG,EAAE,EAAG;MAC/E4D,cAAc,EAAE,KAAM;MACtBC,QAAQ,EAAEtD,gBAAiB;MAAAsC,QAAA,EAG1B,CAAC,GAAGiB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,QAAQ,KAC7BvE,OAAO,CAACqE,GAAG,CAAC,CAACG,MAAM,EAAEC,KAAK,kBACxB3E,OAAA,CAACH,WAAW;QAA8DuD,SAAS,EAAC,cAAc;QAAAC,QAAA,eAChGrD,OAAA;UAAKoD,SAAS,EAAE,eACdjD,MAAM,IAAIuE,MAAM,KACdA,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAAC4C,OAAO,IACjC2B,MAAM,CAAC1B,QAAQ,KAAK7C,MAAM,CAAC6C,QAAQ,IACnC0B,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAACA,MAAM,IAChCuE,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAAC8C,WAAW,IACrCyB,MAAM,CAAC1B,QAAQ,KAAK7C,MAAM,CAAC+C,WAAW,CACvC,GAAG,QAAQ,GAAGwB,MAAM,GAAG,QAAQ,GAAG,SAAS,EAC3C;UAAArB,QAAA,gBACDrD,OAAA;YAAKoD,SAAS,EAAC,eAAe;YAAAC,QAAA,EAC3BqB,MAAM,gBACL1E,OAAA;cAAKoD,SAAS,EAAC,uBAAuB;cAAAC,QAAA,EACnCqB,MAAM,CAAC1B,QAAQ,GAAG0B,MAAM,CAAC1B,QAAQ,CAAC,CAAC,CAAC,CAAC4B,WAAW,CAAC,CAAC,GAAG;YAAG;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtD,CAAC,gBAENzD,OAAA;cAAKoD,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAC;YAAC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK;UACrC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACNzD,OAAA;YAAKoD,SAAS,EAAC,aAAa;YAAAC,QAAA,gBAC1BrD,OAAA;cAAKoD,SAAS,EAAC,aAAa;cAAAC,QAAA,EACzBqB,MAAM,GAAIA,MAAM,CAAC1B,QAAQ,IAAI0B,MAAM,CAACxB,WAAW,IAAI,QAAQ,GAAI;YAAS;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtE,CAAC,eACNzD,OAAA;cAAKoD,SAAS,EAAC,YAAY;cAAAC,QAAA,EACxBqB,MAAM,GAAG,GAAG,CAACA,MAAM,CAACG,MAAM,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,MAAM,GAAG;YAAU;cAAAxB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5D,CAAC,EACLtD,MAAM,IAAIuE,MAAM,KACfA,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAAC4C,OAAO,IACjC2B,MAAM,CAAC1B,QAAQ,KAAK7C,MAAM,CAAC6C,QAAQ,IACnC0B,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAACA,MAAM,IAChCuE,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAAC8C,WAAW,IACrCyB,MAAM,CAAC1B,QAAQ,KAAK7C,MAAM,CAAC+C,WAAW,CACvC,iBACClD,OAAA;cAAKoD,SAAS,EAAC,cAAc;cAAAC,QAAA,GAAC,MACxB,EAAC0B,UAAU,CAAC5E,MAAM,CAAC6E,KAAK,IAAI,CAAC,CAAC,CAACF,OAAO,CAAC,CAAC,CAAC,EAAC,MAChD;YAAA;cAAAxB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,EACLtD,MAAM,IAAIuE,MAAM,KACfA,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAAC4C,OAAO,IACjC2B,MAAM,CAAC1B,QAAQ,KAAK7C,MAAM,CAAC6C,QAAQ,IACnC0B,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAACA,MAAM,IAChCuE,MAAM,CAAC3B,OAAO,KAAK5C,MAAM,CAAC8C,WAAW,IACrCyB,MAAM,CAAC1B,QAAQ,KAAK7C,MAAM,CAAC+C,WAAW,CACvC,iBACClD,OAAA;YAAKoD,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CACtC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC,GA/CU,GAAGgB,QAAQ,IAAI,CAAAC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE3B,OAAO,KAAI,WAAW4B,KAAK,EAAE,EAAE;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgD3D,CACd,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACnD,EAAA,CAxQIL,cAAc;AAAAgF,EAAA,GAAdhF,cAAc;AA0QpB,eAAeA,cAAc;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}