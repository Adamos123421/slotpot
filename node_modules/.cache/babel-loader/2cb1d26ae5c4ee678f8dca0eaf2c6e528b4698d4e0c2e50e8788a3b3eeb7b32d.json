{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageValue = exports.storeMessage = exports.loadMessage = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst CommonMessageInfo_1 = require(\"./CommonMessageInfo\");\nconst StateInit_1 = require(\"./StateInit\");\nfunction loadMessage(slice) {\n  const info = (0, CommonMessageInfo_1.loadCommonMessageInfo)(slice);\n  let init = null;\n  if (slice.loadBit()) {\n    if (!slice.loadBit()) {\n      init = (0, StateInit_1.loadStateInit)(slice);\n    } else {\n      init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());\n    }\n  }\n  const body = slice.loadBit() ? slice.loadRef() : slice.asCell();\n  return {\n    info,\n    init,\n    body\n  };\n}\nexports.loadMessage = loadMessage;\nfunction storeMessage(message, opts) {\n  return builder => {\n    // Store CommonMsgInfo\n    builder.store((0, CommonMessageInfo_1.storeCommonMessageInfo)(message.info));\n    // Store init\n    if (message.init) {\n      builder.storeBit(true);\n      let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));\n      // Check if need to store it in ref\n      let needRef = false;\n      if (opts && opts.forceRef) {\n        needRef = true;\n      } else {\n        needRef = builder.availableBits - 2 /* At least two bits for ref flags */ < initCell.bits + message.body.bits.length;\n      }\n      // Persist init\n      if (needRef) {\n        builder.storeBit(true);\n        builder.storeRef(initCell);\n      } else {\n        builder.storeBit(false);\n        builder.storeBuilder(initCell);\n      }\n    } else {\n      builder.storeBit(false);\n    }\n    // Store body\n    let needRef = false;\n    if (opts && opts.forceRef) {\n      needRef = true;\n    } else {\n      needRef = builder.availableBits - 1 /* At least one bit for ref flag */ < message.body.bits.length || builder.refs + message.body.refs.length > 4;\n    }\n    if (needRef) {\n      builder.storeBit(true);\n      builder.storeRef(message.body);\n    } else {\n      builder.storeBit(false);\n      builder.storeBuilder(message.body.asBuilder());\n    }\n  };\n}\nexports.storeMessage = storeMessage;\nexports.MessageValue = {\n  serialize(src, builder) {\n    builder.storeRef((0, Builder_1.beginCell)().store(storeMessage(src)));\n  },\n  parse(slice) {\n    return loadMessage(slice.loadRef().beginParse());\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","MessageValue","storeMessage","loadMessage","Builder_1","require","CommonMessageInfo_1","StateInit_1","slice","info","loadCommonMessageInfo","init","loadBit","loadStateInit","loadRef","beginParse","body","asCell","message","opts","builder","store","storeCommonMessageInfo","storeBit","initCell","beginCell","storeStateInit","needRef","forceRef","availableBits","bits","length","storeRef","storeBuilder","refs","asBuilder","serialize","src","parse"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/core/dist/types/Message.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageValue = exports.storeMessage = exports.loadMessage = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst CommonMessageInfo_1 = require(\"./CommonMessageInfo\");\nconst StateInit_1 = require(\"./StateInit\");\nfunction loadMessage(slice) {\n    const info = (0, CommonMessageInfo_1.loadCommonMessageInfo)(slice);\n    let init = null;\n    if (slice.loadBit()) {\n        if (!slice.loadBit()) {\n            init = (0, StateInit_1.loadStateInit)(slice);\n        }\n        else {\n            init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());\n        }\n    }\n    const body = slice.loadBit() ? slice.loadRef() : slice.asCell();\n    return {\n        info,\n        init,\n        body\n    };\n}\nexports.loadMessage = loadMessage;\nfunction storeMessage(message, opts) {\n    return (builder) => {\n        // Store CommonMsgInfo\n        builder.store((0, CommonMessageInfo_1.storeCommonMessageInfo)(message.info));\n        // Store init\n        if (message.init) {\n            builder.storeBit(true);\n            let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));\n            // Check if need to store it in ref\n            let needRef = false;\n            if (opts && opts.forceRef) {\n                needRef = true;\n            }\n            else {\n                needRef = builder.availableBits - 2 /* At least two bits for ref flags */ < initCell.bits + message.body.bits.length;\n            }\n            // Persist init\n            if (needRef) {\n                builder.storeBit(true);\n                builder.storeRef(initCell);\n            }\n            else {\n                builder.storeBit(false);\n                builder.storeBuilder(initCell);\n            }\n        }\n        else {\n            builder.storeBit(false);\n        }\n        // Store body\n        let needRef = false;\n        if (opts && opts.forceRef) {\n            needRef = true;\n        }\n        else {\n            needRef = builder.availableBits - 1 /* At least one bit for ref flag */ < message.body.bits.length ||\n                builder.refs + message.body.refs.length > 4;\n        }\n        if (needRef) {\n            builder.storeBit(true);\n            builder.storeRef(message.body);\n        }\n        else {\n            builder.storeBit(false);\n            builder.storeBuilder(message.body.asBuilder());\n        }\n    };\n}\nexports.storeMessage = storeMessage;\nexports.MessageValue = {\n    serialize(src, builder) {\n        builder.storeRef((0, Builder_1.beginCell)()\n            .store(storeMessage(src)));\n    },\n    parse(slice) {\n        return loadMessage(slice.loadRef().beginParse());\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}