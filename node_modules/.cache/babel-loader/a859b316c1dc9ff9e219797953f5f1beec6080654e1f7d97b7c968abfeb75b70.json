{"ast":null,"code":"const API_BASE_URL = 'https://inclusion-intl-indexed-snapshot.trycloudflare.com/';\nclass ApiService {\n  constructor() {\n    this.baseUrl = API_BASE_URL;\n  }\n\n  // Generic fetch wrapper with error handling\n  async fetchApi(endpoint, options = {}) {\n    try {\n      const url = `${this.baseUrl}${endpoint}`;\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        ...options\n      };\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`API call failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Health check\n  async getHealth() {\n    return this.fetchApi('/api/health');\n  }\n\n  // Get chat messages and user count\n  async getChatData() {\n    return this.fetchApi('/api/chat/messages');\n  }\n\n  // Get server statistics (chat-focused, no game state needed)\n  async getServerStats() {\n    try {\n      var _chatData$messages;\n      const [chatData, health] = await Promise.all([this.getChatData(), this.getHealth()]);\n      return {\n        connectedUsers: chatData.totalUsers || 0,\n        totalMessages: ((_chatData$messages = chatData.messages) === null || _chatData$messages === void 0 ? void 0 : _chatData$messages.length) || 0,\n        recentMessages: chatData.messages || [],\n        serverStatus: health.status,\n        lastUpdated: new Date()\n      };\n    } catch (error) {\n      console.error('Failed to get server stats:', error);\n      return {\n        connectedUsers: 0,\n        totalMessages: 0,\n        recentMessages: [],\n        serverStatus: 'Error',\n        lastUpdated: new Date(),\n        error: error.message\n      };\n    }\n  }\n\n  // Check if server is reachable\n  async isServerReachable() {\n    try {\n      await this.getHealth();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n// Create and export singleton instance\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseUrl","fetchApi","endpoint","options","url","config","headers","response","fetch","ok","Error","status","json","error","console","getHealth","getChatData","getServerStats","_chatData$messages","chatData","health","Promise","all","connectedUsers","totalUsers","totalMessages","messages","length","recentMessages","serverStatus","lastUpdated","Date","message","isServerReachable","apiService"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/apiService.js"],"sourcesContent":["const API_BASE_URL = 'https://inclusion-intl-indexed-snapshot.trycloudflare.com/';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseUrl = API_BASE_URL;\r\n  }\r\n\r\n  // Generic fetch wrapper with error handling\r\n  async fetchApi(endpoint, options = {}) {\r\n    try {\r\n      const url = `${this.baseUrl}${endpoint}`;\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...options.headers,\r\n        },\r\n        ...options,\r\n      };\r\n\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`API call failed for ${endpoint}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Health check\r\n  async getHealth() {\r\n    return this.fetchApi('/api/health');\r\n  }\r\n\r\n  // Get chat messages and user count\r\n  async getChatData() {\r\n    return this.fetchApi('/api/chat/messages');\r\n  }\r\n\r\n  // Get server statistics (chat-focused, no game state needed)\r\n  async getServerStats() {\r\n    try {\r\n      const [chatData, health] = await Promise.all([\r\n        this.getChatData(),\r\n        this.getHealth()\r\n      ]);\r\n\r\n      return {\r\n        connectedUsers: chatData.totalUsers || 0,\r\n        totalMessages: chatData.messages?.length || 0,\r\n        recentMessages: chatData.messages || [],\r\n        serverStatus: health.status,\r\n        lastUpdated: new Date()\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to get server stats:', error);\r\n      return {\r\n        connectedUsers: 0,\r\n        totalMessages: 0,\r\n        recentMessages: [],\r\n        serverStatus: 'Error',\r\n        lastUpdated: new Date(),\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  // Check if server is reachable\r\n  async isServerReachable() {\r\n    try {\r\n      await this.getHealth();\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst apiService = new ApiService();\r\nexport default apiService; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,4DAA4D;AAEjF,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGH,YAAY;EAC7B;;EAEA;EACA,MAAMI,QAAQA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,IAAI;MACF,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,GAAGE,QAAQ,EAAE;MACxC,MAAMG,MAAM,GAAG;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,GAAGH,OAAO,CAACG;QACb,CAAC;QACD,GAAGH;MACL,CAAC;MAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuBX,QAAQ,GAAG,EAAEW,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,SAASA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACd,QAAQ,CAAC,aAAa,CAAC;EACrC;;EAEA;EACA,MAAMe,WAAWA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACf,QAAQ,CAAC,oBAAoB,CAAC;EAC5C;;EAEA;EACA,MAAMgB,cAAcA,CAAA,EAAG;IACrB,IAAI;MAAA,IAAAC,kBAAA;MACF,MAAM,CAACC,QAAQ,EAAEC,MAAM,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3C,IAAI,CAACN,WAAW,CAAC,CAAC,EAClB,IAAI,CAACD,SAAS,CAAC,CAAC,CACjB,CAAC;MAEF,OAAO;QACLQ,cAAc,EAAEJ,QAAQ,CAACK,UAAU,IAAI,CAAC;QACxCC,aAAa,EAAE,EAAAP,kBAAA,GAAAC,QAAQ,CAACO,QAAQ,cAAAR,kBAAA,uBAAjBA,kBAAA,CAAmBS,MAAM,KAAI,CAAC;QAC7CC,cAAc,EAAET,QAAQ,CAACO,QAAQ,IAAI,EAAE;QACvCG,YAAY,EAAET,MAAM,CAACT,MAAM;QAC3BmB,WAAW,EAAE,IAAIC,IAAI,CAAC;MACxB,CAAC;IACH,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO;QACLU,cAAc,EAAE,CAAC;QACjBE,aAAa,EAAE,CAAC;QAChBG,cAAc,EAAE,EAAE;QAClBC,YAAY,EAAE,OAAO;QACrBC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC;QACvBlB,KAAK,EAAEA,KAAK,CAACmB;MACf,CAAC;IACH;EACF;;EAEA;EACA,MAAMC,iBAAiBA,CAAA,EAAG;IACxB,IAAI;MACF,MAAM,IAAI,CAAClB,SAAS,CAAC,CAAC;MACtB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOF,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;AACF;;AAEA;AACA,MAAMqB,UAAU,GAAG,IAAIpC,UAAU,CAAC,CAAC;AACnC,eAAeoC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}