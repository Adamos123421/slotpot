{"ast":null,"code":"\"use strict\";\n\n/* Made by @Gusarich and @Miandic */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultisigOrder = void 0;\nconst crypto_1 = require(\"@ton/crypto\");\nconst core_1 = require(\"@ton/core\");\nclass MultisigOrder {\n  constructor(payload) {\n    this.signatures = {};\n    this.payload = payload;\n  }\n  static fromCell(cell) {\n    let s = cell.beginParse();\n    let signatures = s.loadMaybeRef()?.beginParse();\n    const messagesCell = s.asCell();\n    let order = new MultisigOrder(messagesCell);\n    if (signatures) {\n      while (signatures.remainingBits > 0) {\n        const signature = signatures.loadBuffer(64);\n        const ownerId = signatures.loadUint(8);\n        order.signatures[ownerId] = signature;\n        if (signatures.remainingRefs > 0) {\n          signatures = signatures.loadRef().asSlice();\n        } else {\n          signatures.skip(1);\n        }\n      }\n      signatures.endParse();\n    }\n    return order;\n  }\n  static fromPayload(payload) {\n    return new MultisigOrder(payload);\n  }\n  addSignature(ownerId, signature, multisig) {\n    const signingHash = this.payload.hash();\n    if (!(0, crypto_1.signVerify)(signingHash, signature, multisig.owners.get(ownerId).slice(0, -1))) {\n      throw Error('invalid signature');\n    }\n    this.signatures[ownerId] = signature;\n  }\n  sign(ownerId, secretKey) {\n    const signingHash = this.payload.hash();\n    this.signatures[ownerId] = (0, crypto_1.sign)(signingHash, secretKey);\n    return signingHash;\n  }\n  unionSignatures(other) {\n    this.signatures = Object.assign({}, this.signatures, other.signatures);\n  }\n  clearSignatures() {\n    this.signatures = {};\n  }\n  toCell(ownerId) {\n    let b = (0, core_1.beginCell)().storeBit(0);\n    for (const ownerId in this.signatures) {\n      const signature = this.signatures[ownerId];\n      b = (0, core_1.beginCell)().storeBit(1).storeRef((0, core_1.beginCell)().storeBuffer(signature).storeUint(parseInt(ownerId), 8).storeBuilder(b).endCell());\n    }\n    return (0, core_1.beginCell)().storeUint(ownerId, 8).storeBuilder(b).storeBuilder(this.payload.asBuilder()).endCell();\n  }\n}\nexports.MultisigOrder = MultisigOrder;","map":{"version":3,"names":["Object","defineProperty","exports","value","MultisigOrder","crypto_1","require","core_1","constructor","payload","signatures","fromCell","cell","s","beginParse","loadMaybeRef","messagesCell","asCell","order","remainingBits","signature","loadBuffer","ownerId","loadUint","remainingRefs","loadRef","asSlice","skip","endParse","fromPayload","addSignature","multisig","signingHash","hash","signVerify","owners","get","slice","Error","sign","secretKey","unionSignatures","other","assign","clearSignatures","toCell","b","beginCell","storeBit","storeRef","storeBuffer","storeUint","parseInt","storeBuilder","endCell","asBuilder"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@ton/ton/dist/multisig/MultisigOrder.js"],"sourcesContent":["\"use strict\";\n/* Made by @Gusarich and @Miandic */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MultisigOrder = void 0;\nconst crypto_1 = require(\"@ton/crypto\");\nconst core_1 = require(\"@ton/core\");\nclass MultisigOrder {\n    constructor(payload) {\n        this.signatures = {};\n        this.payload = payload;\n    }\n    static fromCell(cell) {\n        let s = cell.beginParse();\n        let signatures = s.loadMaybeRef()?.beginParse();\n        const messagesCell = s.asCell();\n        let order = new MultisigOrder(messagesCell);\n        if (signatures) {\n            while (signatures.remainingBits > 0) {\n                const signature = signatures.loadBuffer(64);\n                const ownerId = signatures.loadUint(8);\n                order.signatures[ownerId] = signature;\n                if (signatures.remainingRefs > 0) {\n                    signatures = signatures.loadRef().asSlice();\n                }\n                else {\n                    signatures.skip(1);\n                }\n            }\n            signatures.endParse();\n        }\n        return order;\n    }\n    static fromPayload(payload) {\n        return new MultisigOrder(payload);\n    }\n    addSignature(ownerId, signature, multisig) {\n        const signingHash = this.payload.hash();\n        if (!(0, crypto_1.signVerify)(signingHash, signature, multisig.owners.get(ownerId).slice(0, -1))) {\n            throw Error('invalid signature');\n        }\n        this.signatures[ownerId] = signature;\n    }\n    sign(ownerId, secretKey) {\n        const signingHash = this.payload.hash();\n        this.signatures[ownerId] = (0, crypto_1.sign)(signingHash, secretKey);\n        return signingHash;\n    }\n    unionSignatures(other) {\n        this.signatures = Object.assign({}, this.signatures, other.signatures);\n    }\n    clearSignatures() {\n        this.signatures = {};\n    }\n    toCell(ownerId) {\n        let b = (0, core_1.beginCell)().storeBit(0);\n        for (const ownerId in this.signatures) {\n            const signature = this.signatures[ownerId];\n            b = (0, core_1.beginCell)()\n                .storeBit(1)\n                .storeRef((0, core_1.beginCell)()\n                .storeBuffer(signature)\n                .storeUint(parseInt(ownerId), 8)\n                .storeBuilder(b)\n                .endCell());\n        }\n        return (0, core_1.beginCell)()\n            .storeUint(ownerId, 8)\n            .storeBuilder(b)\n            .storeBuilder(this.payload.asBuilder())\n            .endCell();\n    }\n}\nexports.MultisigOrder = MultisigOrder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}