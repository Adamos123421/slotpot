{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\nfunction AppContent() {\n  _s();\n  var _contractState$timer2;\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n\n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n\n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n  }, [gameBettors]);\n  useEffect(() => {\n    contractWinnerRef.current = contractWinner;\n  }, [contractWinner]);\n  useEffect(() => {\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n  }, [showWinnerAnnouncement]);\n  useEffect(() => {\n    waitingForWinnerRef.current = waitingForWinner;\n  }, [waitingForWinner]);\n  useEffect(() => {\n    previousRoundBettorsRef.current = previousRoundBettors;\n  }, [previousRoundBettors]);\n  useEffect(() => {\n    timeRemainingRef.current = timeRemaining;\n  }, [timeRemaining]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n\n    // Use coordinator to check if should block\n    if (winnerCoordinator.shouldBlock(winnerTimestamp)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n\n    // Set coordination flag via coordinator\n    winnerCoordinator.setActive(true, winnerTimestamp);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n\n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n\n    // Auto-clear announcement but keep winner highlighted for 10 seconds (no betting period)\n    setTimeout(() => {\n      setShowWinnerAnnouncement(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.setActive(false);\n      // DON'T clear contractWinner here - let it persist until new round\n    }, 10000); // Extended to 10 seconds as requested\n\n    return true;\n  }, []);\n\n  // Telegram integration\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n\n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    var _contractState$curren;\n    if (!contractState) return contractState;\n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' ? ((_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || 0 : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n\n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address || bettor.walletAddress === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || !jackpotValue || userBetTotal === 0) return 0;\n    return userBetTotal / jackpotValue * 100;\n  }, [userBetTotal, jackpotValue, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    var _contractState$timer;\n    // Always sync with backend timer when it changes\n    if (((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n    console.log('⏰ Starting local countdown timer...');\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n\n          // When we reach 0, trigger \"analyzing bets\" state locally\n          if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n          }\n          return newTime;\n        }\n\n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) return;\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    let winnerCardVisible = false;\n    const cardWidth = 110 + 10; // card width + gap\n\n    // Use refs to get current values without causing re-renders\n    const getCurrentBettors = () => gameBettorsRef.current;\n    const getPreviousBettors = () => previousRoundBettorsRef.current;\n    const getContractWinner = () => contractWinnerRef.current;\n    const getWaitingForWinner = () => waitingForWinnerRef.current;\n    const getTimeRemaining = () => timeRemainingRef.current;\n    const getBettorsForAnimation = () => {\n      const currentBettors = getCurrentBettors();\n      const prevBettors = getPreviousBettors();\n\n      // Simple: use current bettors, fallback to previous if empty\n      const bettors = currentBettors.length > 0 ? currentBettors : prevBettors;\n      console.log('🎠 getBettorsForAnimation - Using:', bettors.length, 'bettors');\n      return bettors;\n    };\n    const totalCards = 6; // Fixed to prevent recalculation\n    const resetPoint = cardWidth * totalCards;\n    console.log('🎠 Starting carousel animation with fixed parameters');\n    const animate = () => {\n      // Get current values using refs\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const timeLeft = getTimeRemaining();\n\n      // Check if we have a winner and if winner card is visible in DOM\n      if (currentWinner && !winnerCardVisible) {\n        const winnerCards = document.querySelectorAll('.carousel-card.winner');\n        if (winnerCards.length > 0) {\n          console.log('🎯 Winner card now visible in DOM, stopping analysis');\n          winnerCardVisible = true;\n        }\n      }\n\n      // Continue analyzing state until winner card is visible\n      if (isWaiting && timeLeft === 0 && !winnerCardVisible) {\n        currentPosition += 6; // Faster but still smooth\n\n        if (currentPosition >= resetPoint) {\n          currentPosition = 0;\n        }\n        carousel.style.transform = `translateX(-${currentPosition}px)`;\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n\n      // When winner is revealed and visible, slide to winner position and stop\n      if (currentWinner && winnerCardVisible) {\n        if (!winnerPositionFound) {\n          console.log('🎯 Winner revealed, finding position for:', currentWinner);\n          const bettorsForAnimation = getBettorsForAnimation();\n          const allItems = [...bettorsForAnimation, ...Array.from({\n            length: Math.max(0, 6 - bettorsForAnimation.length)\n          }, () => null)];\n          console.log('🎯 Searching in allItems:', allItems);\n          const winnerIndex = allItems.findIndex(item => {\n            if (!item || !currentWinner) return false;\n\n            // Simple direct matching with backend broadcast data\n            return item.address === currentWinner.winner || item.address === currentWinner.fullAddress || item.username === currentWinner.username;\n          });\n          if (winnerIndex !== -1) {\n            const winnerPosition = winnerIndex * cardWidth;\n            carousel.style.transform = `translateX(-${winnerPosition}px)`;\n            carousel.style.transition = 'transform 1.5s ease-out';\n            console.log('🎯 Sliding to winner at position:', winnerPosition, 'for winner:', currentWinner.username || currentWinner.winner);\n            winnerPositionFound = true;\n          } else {\n            console.log('⚠️ Winner not found in allItems, keeping current position');\n            console.log('⚠️ Winner data:', currentWinner);\n            console.log('⚠️ AllItems addresses:', allItems.map(item => (item === null || item === void 0 ? void 0 : item.address) || 'null'));\n          }\n        }\n        // Keep the winner position static (don't continue animating)\n        return;\n      }\n\n      // Normal carousel animation - smooth continuous scrolling\n      currentPosition += 2;\n      if (currentPosition >= resetPoint) {\n        currentPosition = 0;\n      }\n      carousel.style.transform = `translateX(-${currentPosition}px)`;\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n    };\n  }, []); // EMPTY dependency array to prevent re-initialization\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', timerData => {\n      console.log('⏰ App: Socket timer update:', timerData);\n\n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n\n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n\n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n\n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', roundData => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n\n      // Clear winner highlighting for new round\n      setContractWinner(null);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', gameState => {\n      var _gameState$timer;\n      console.log('🎮 App: Game state update:', gameState);\n\n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = (_gameState$timer = gameState.timer) === null || _gameState$timer === void 0 ? void 0 : _gameState$timer.timeRemaining;\n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n\n          // Only sync if there's a significant difference (>10s) or if backend is ahead\n          if (timeDiff > 10 || backendTimeRemaining > prev) {\n            console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n\n          // Keep local countdown running if difference is small\n          console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n\n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n\n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n\n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        setGameBettors(gameState.bettors);\n      }\n\n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', gameData => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', data => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', data => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n\n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      setWaitingForWinner(isWaiting);\n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', winnerData => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', winnerData => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', resetData => {\n      console.log('🔄 App: Round reset detected:', resetData);\n\n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n\n      // Clear any winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n\n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n    });\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = e => {\n    const value = parseFloat(e.target.value) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n  const handleTabChange = tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n    try {\n      hapticFeedback('medium');\n      await placeBet(betAmount);\n\n      // Reset bet amount after successful bet\n      setBetAmount(0.11);\n      hapticFeedback('success');\n      showAlert('✅ Bet placed successfully!');\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logo-icon\",\n              children: \"\\uD83C\\uDFB0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"app-name\",\n              children: \"SlotPot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-icons\",\n            children: /*#__PURE__*/_jsxDEV(WalletConnection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-label\",\n            children: \"Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-amount\",\n            children: [isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000', /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"balance-symbol\",\n              children: \"TON\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-title\",\n            children: \"\\uD83D\\uDCB0 JACKPOT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-value-display\",\n            children: jackpotValue.toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-subtitle\",\n            children: \"Winner takes all...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-input-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"bet-amount-input\",\n              value: betAmount,\n              onChange: handleBetChange,\n              step: \"0.01\",\n              min: \"0.01\",\n              placeholder: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bet-increment-btn\",\n              onClick: () => setBetAmount(prev => prev + 0.1),\n              children: \"+0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-button\",\n            onClick: handlePlaceBet,\n            disabled: isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement,\n            children: contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' : isPlacingBet ? 'Betting...' : 'Bet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: userBetTotal.toFixed(3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Wager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card chance-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: [userWinChance.toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Chance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Time Remaining \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: [Math.floor((timeRemaining || 0) / 60), \":\", ((timeRemaining || 0) % 60).toString().padStart(2, '0')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-carousel-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `carousel-header ${timeRemaining === 0 && waitingForWinner || contractWinner && !document.querySelectorAll('.carousel-card.winner').length ? 'analyzing' : contractWinner ? 'winner' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: timeRemaining === 0 && waitingForWinner || contractWinner && !document.querySelectorAll('.carousel-card.winner').length ? \"🔍 Analyzing Bets...\" : contractWinner ? `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` : `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"players-carousel\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: carouselRef,\n              className: `carousel-track ${timeRemaining === 0 && waitingForWinner || contractWinner && !document.querySelectorAll('.carousel-card.winner').length ? 'analyzing' : contractWinner ? 'winner-revealed' : slotSpinning ? 'sliding' : ''}`,\n              style: {\n                transition: timeRemaining === 0 && waitingForWinner || contractWinner && !document.querySelectorAll('.carousel-card.winner').length || contractWinner ? 'none' : ''\n              },\n              children: (() => {\n                // Simplified: Just use current game bettors, let backend broadcast identify winner\n                const bettorsToShow = gameBettors.length > 0 ? gameBettors : previousRoundBettors;\n                console.log('🎠 Using bettors:', bettorsToShow.length, 'total bettors');\n                console.log('🎠 ContractWinner from backend:', contractWinner);\n\n                // Check if we're showing waiting cards due to empty data\n                if (bettorsToShow.length === 0) {\n                  console.log('⚠️ SHOWING WAITING CARDS - No bettor data available');\n                }\n\n                // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                const allItems = [...bettorsToShow, ...Array.from({\n                  length: Math.max(0, 6 - bettorsToShow.length)\n                }, () => null)];\n\n                // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                const infiniteItems = [...allItems, ...allItems, ...allItems];\n                return infiniteItems.map((bettor, index) => {\n                  // Simple winner detection - only check if backend broadcast matches this bettor\n                  const isWinner = contractWinner && bettor && (bettor.address === contractWinner.winner || bettor.address === contractWinner.fullAddress || bettor.username === contractWinner.username);\n\n                  // Log when we find a winner card\n                  if (isWinner) {\n                    console.log('🏆 WINNER CARD FOUND!', {\n                      index,\n                      bettor,\n                      isWinner,\n                      winnerName: bettor.username || bettor.displayName || 'Player',\n                      winnerAddress: bettor.address\n                    });\n                  }\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `carousel-card ${isWinner ? 'winner' : bettor ? 'active' : 'waiting'}`,\n                    \"data-debug\": `winner: ${isWinner}, address: ${bettor === null || bettor === void 0 ? void 0 : bettor.address}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-avatar\",\n                      children: bettor ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"generated-avatar\",\n                        children: bettor.username ? bettor.username[0].toUpperCase() : '?'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 756,\n                        columnNumber: 33\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"waiting-icon\",\n                        children: \"\\u2753\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 760,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 754,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-info\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-name\",\n                        children: bettor ? bettor.username || bettor.displayName || 'Player' : 'Waiting'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 764,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-bet\",\n                        children: bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 767,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 763,\n                      columnNumber: 29\n                    }, this), isWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"winner-crown\",\n                      children: \"\\uD83D\\uDC51\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 772,\n                      columnNumber: 31\n                    }, this)]\n                  }, `${index}-${(bettor === null || bettor === void 0 ? void 0 : bettor.address) || 'waiting'}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 750,\n                    columnNumber: 27\n                  }, this);\n                });\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83C\\uDFE0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 788,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\u26A1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 791,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 792,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 795,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 796,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD0D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 799,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 800,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"games-button\",\n          children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n            size: 14\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 15\n          }, this), \"Games\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 9\n    }, this), isLoadingContract && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"\\uD83D\\uDD04\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading contract data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 814,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 812,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinnerBroadcast, {\n      socketService: socketService\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 819,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 605,\n    columnNumber: 5\n  }, this);\n}\n\n// Main App component with TON Connect Provider\n_s(AppContent, \"w5cL2ujXfITiIMGNdStBQKAzE8U=\", false, function () {\n  return [useTelegramWebApp, useJackpotContract];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(TonConnectUIProvider, {\n    manifestUrl: manifestUrl,\n    uiPreferences: uiOptions.uiPreferences,\n    language: uiOptions.language,\n    restoreConnection: uiOptions.restoreConnection,\n    actionsConfiguration: uiOptions.actionsConfiguration,\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 827,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","TonConnectUIProvider","Chat","GameArea","MobileChat","WalletConnection","WinnerBroadcast","useTelegramWebApp","useJackpotContract","socketService","winnerCoordinator","uiOptions","MessageCircle","Trophy","Users","DollarSign","jsxDEV","_jsxDEV","manifestUrl","AppContent","_s","_contractState$timer2","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","carouselRef","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","waitingForWinnerRef","previousRoundBettorsRef","timeRemainingRef","current","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","shouldBlock","console","log","setActive","setTimeout","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","address","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","_contractState$curren","timer","isActive","timeElapsed","timerExpired","undefined","jackpotValue","totalJackpot","isLive","userBetTotal","length","filter","bettor","walletAddress","reduce","total","amount","userWinChance","_contractState$timer","countdown","setInterval","prev","newTime","clearInterval","carousel","style","transition","animationId","currentPosition","winnerPositionFound","winnerCardVisible","cardWidth","getCurrentBettors","getPreviousBettors","getContractWinner","getWaitingForWinner","getTimeRemaining","getBettorsForAnimation","currentBettors","prevBettors","bettors","totalCards","resetPoint","animate","currentWinner","isWaiting","timeLeft","winnerCards","document","querySelectorAll","transform","requestAnimationFrame","bettorsForAnimation","allItems","Array","from","Math","max","winnerIndex","findIndex","item","winner","fullAddress","username","winnerPosition","map","cancelAnimationFrame","connect","on","timerData","warn","newTimeRemaining","newRoundNumber","timeDiff","abs","isNewRound","roundData","reset","gameState","_gameState$timer","backendTimeRemaining","isWaitingForWinner","isArray","winnerAnnouncement","gameData","data","message","resetData","off","disconnect","handleBetChange","e","value","parseFloat","target","min","handleTabChange","tab","handlePlaceBet","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userBalance","toFixed","type","onChange","step","placeholder","onClick","disabled","floor","toString","padStart","displayName","ref","bettorsToShow","infiniteItems","index","isWinner","winnerName","winnerAddress","toUpperCase","size","_c","App","uiPreferences","language","restoreConnection","actionsConfiguration","_c2","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  \n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { contractWinnerRef.current = contractWinner; }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n  useEffect(() => { waitingForWinnerRef.current = waitingForWinner; }, [waitingForWinner]);\n  useEffect(() => { previousRoundBettorsRef.current = previousRoundBettors; }, [previousRoundBettors]);\n  useEffect(() => { timeRemainingRef.current = timeRemaining; }, [timeRemaining]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Use coordinator to check if should block\n    if (winnerCoordinator.shouldBlock(winnerTimestamp)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    \n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n    \n    // Set coordination flag via coordinator\n    winnerCoordinator.setActive(true, winnerTimestamp);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Auto-clear announcement but keep winner highlighted for 10 seconds (no betting period)\n    setTimeout(() => {\n      setShowWinnerAnnouncement(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.setActive(false);\n      // DON'T clear contractWinner here - let it persist until new round\n    }, 10000); // Extended to 10 seconds as requested\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    \n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\n        : (Number(rawAdminInfo.currentRound) || 0)\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    if (!contractState) return contractState;\n    \n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' \n        ? (contractState.currentRound?.roundNumber || 0)\n        : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  \n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    \n    return gameBettors\n      .filter(bettor => \n        bettor.address === address || \n        bettor.walletAddress === address\n      )\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  \n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || !jackpotValue || userBetTotal === 0) return 0;\n    \n    return (userBetTotal / jackpotValue) * 100;\n  }, [userBetTotal, jackpotValue, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    // Always sync with backend timer when it changes\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n\n    console.log('⏰ Starting local countdown timer...');\n\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n        \n          // When we reach 0, trigger \"analyzing bets\" state locally\n        if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n        }\n        \n        return newTime;\n        }\n        \n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) return;\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    let winnerCardVisible = false;\n    const cardWidth = 110 + 10; // card width + gap\n    \n    // Use refs to get current values without causing re-renders\n    const getCurrentBettors = () => gameBettorsRef.current;\n    const getPreviousBettors = () => previousRoundBettorsRef.current;\n    const getContractWinner = () => contractWinnerRef.current;\n    const getWaitingForWinner = () => waitingForWinnerRef.current;\n    const getTimeRemaining = () => timeRemainingRef.current;\n    \n    const getBettorsForAnimation = () => {\n      const currentBettors = getCurrentBettors();\n      const prevBettors = getPreviousBettors();\n      \n      // Simple: use current bettors, fallback to previous if empty\n      const bettors = currentBettors.length > 0 ? currentBettors : prevBettors;\n      \n      console.log('🎠 getBettorsForAnimation - Using:', bettors.length, 'bettors');\n      \n      return bettors;\n    };\n    \n    const totalCards = 6; // Fixed to prevent recalculation\n    const resetPoint = cardWidth * totalCards;\n    \n    console.log('🎠 Starting carousel animation with fixed parameters');\n\n    const animate = () => {\n      // Get current values using refs\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const timeLeft = getTimeRemaining();\n      \n      // Check if we have a winner and if winner card is visible in DOM\n      if (currentWinner && !winnerCardVisible) {\n        const winnerCards = document.querySelectorAll('.carousel-card.winner');\n        if (winnerCards.length > 0) {\n          console.log('🎯 Winner card now visible in DOM, stopping analysis');\n          winnerCardVisible = true;\n        }\n      }\n\n      // Continue analyzing state until winner card is visible\n      if (isWaiting && timeLeft === 0 && !winnerCardVisible) {\n        currentPosition += 6; // Faster but still smooth\n        \n        if (currentPosition >= resetPoint) {\n          currentPosition = 0;\n        }\n        \n        carousel.style.transform = `translateX(-${currentPosition}px)`;\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n      \n      // When winner is revealed and visible, slide to winner position and stop\n      if (currentWinner && winnerCardVisible) {\n        if (!winnerPositionFound) {\n          console.log('🎯 Winner revealed, finding position for:', currentWinner);\n          \n          const bettorsForAnimation = getBettorsForAnimation();\n          const allItems = [\n            ...bettorsForAnimation,\n            ...Array.from({ length: Math.max(0, 6 - bettorsForAnimation.length) }, () => null)\n          ];\n          \n          console.log('🎯 Searching in allItems:', allItems);\n          \n          const winnerIndex = allItems.findIndex(item => {\n            if (!item || !currentWinner) return false;\n            \n            // Simple direct matching with backend broadcast data\n            return (\n              item.address === currentWinner.winner ||\n              item.address === currentWinner.fullAddress ||\n              item.username === currentWinner.username\n            );\n          });\n          \n          if (winnerIndex !== -1) {\n            const winnerPosition = winnerIndex * cardWidth;\n            carousel.style.transform = `translateX(-${winnerPosition}px)`;\n            carousel.style.transition = 'transform 1.5s ease-out';\n            console.log('🎯 Sliding to winner at position:', winnerPosition, 'for winner:', currentWinner.username || currentWinner.winner);\n            winnerPositionFound = true;\n          } else {\n            console.log('⚠️ Winner not found in allItems, keeping current position');\n            console.log('⚠️ Winner data:', currentWinner);\n            console.log('⚠️ AllItems addresses:', allItems.map(item => item?.address || 'null'));\n          }\n        }\n        // Keep the winner position static (don't continue animating)\n        return;\n      }\n\n      // Normal carousel animation - smooth continuous scrolling\n      currentPosition += 2;\n      \n      if (currentPosition >= resetPoint) {\n        currentPosition = 0;\n      }\n      \n      carousel.style.transform = `translateX(-${currentPosition}px)`;\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n    };\n  }, []); // EMPTY dependency array to prevent re-initialization\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      console.log('⏰ App: Socket timer update:', timerData);\n      \n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      \n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      \n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n        \n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n        \n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      \n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n      \n      // Clear winner highlighting for new round\n      setContractWinner(null);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      console.log('🎮 App: Game state update:', gameState);\n      \n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = gameState.timer?.timeRemaining;\n      \n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n          \n          // Only sync if there's a significant difference (>10s) or if backend is ahead\n          if (timeDiff > 10 || backendTimeRemaining > prev) {\n            console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n          \n          // Keep local countdown running if difference is small\n          console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        \n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        \n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        \n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (data) => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n      \n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      \n      setWaitingForWinner(isWaiting);\n      \n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', (resetData) => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      \n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n      \n      // Clear any winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      \n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    const value = parseFloat(e.target.value) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n\n    try {\n      hapticFeedback('medium');\n      await placeBet(betAmount);\n      \n      // Reset bet amount after successful bet\n      setBetAmount(0.11);\n      \n      hapticFeedback('success');\n      showAlert('✅ Bet placed successfully!');\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n        <div className=\"app-container\">\n          {/* Header Section */}\n          <div className=\"header-section\">\n            <div className=\"header-top\">\n              <div className=\"logo-section\">\n                <div className=\"logo-icon\">🎰</div>\n                <div className=\"app-name\">SlotPot</div>\n              </div>\n              <div className=\"header-icons\">\n                <WalletConnection />\n              </div>\n            </div>\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">\n                {isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000'}\n                <span className=\"balance-symbol\">TON</span>\n              </div>\n              </div>\n          </div>\n          \n          {/* Main Content */}\n          <div className=\"main-content\">\n            {/* Jackpot Display */}\n            <div className=\"jackpot-header\">\n              <div className=\"jackpot-title\">💰 JACKPOT</div>\n              <div className=\"jackpot-value-display\">{jackpotValue.toFixed(3)}</div>\n              <div className=\"jackpot-subtitle\">Winner takes all...</div>\n            </div>\n\n            {/* Betting Section */}\n            <div className=\"betting-section\">\n              <div className=\"bet-input-section\">\n                <input \n                  type=\"number\" \n                  className=\"bet-amount-input\" \n                  value={betAmount}\n                  onChange={handleBetChange}\n                  step=\"0.01\"\n                  min=\"0.01\"\n                  placeholder=\"0\"\n                />\n                <button className=\"bet-increment-btn\" onClick={() => setBetAmount(prev => prev + 0.1)}>\n                  +0.1\n          </button>\n              </div>\n          <button \n                className=\"bet-button\" \n                onClick={handlePlaceBet}\n                disabled={isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement}\n          >\n                {contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' :\n                 isPlacingBet ? 'Betting...' : 'Bet'}\n          </button>\n        </div>\n\n            {/* Stats Grid */}\n            <div className=\"stats-grid\">\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{userBetTotal.toFixed(3)}</div>\n                <div className=\"stat-label\">Your Wager</div>\n              </div>\n              <div className=\"stat-card chance-stat\">\n                <div className=\"stat-value\">{userWinChance.toFixed(2)}%</div>\n                <div className=\"stat-label\">Your Chance</div>\n          </div>\n        </div>\n\n            {/* Time Section */}\n            <div className=\"time-section\">\n              <div className=\"time-label\">Time Remaining </div>\n              <div className=\"time-value\">\n                {Math.floor((timeRemaining || 0) / 60)}:{((timeRemaining || 0) % 60).toString().padStart(2, '0')}\n          </div>\n        </div>\n\n            {/* Players Carousel Section */}\n            <div className=\"players-carousel-section\">\n              <div className={`carousel-header ${\n                (timeRemaining === 0 && waitingForWinner) || (contractWinner && !document.querySelectorAll('.carousel-card.winner').length) ? 'analyzing' : \n                contractWinner ? 'winner' : ''\n              }`}>\n                <h3>\n                  {(timeRemaining === 0 && waitingForWinner) || (contractWinner && !document.querySelectorAll('.carousel-card.winner').length) ? \n                    \"🔍 Analyzing Bets...\" : \n                    contractWinner ? \n                    `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` :\n                    `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                  }\n                </h3>\n              </div>\n              <div className=\"players-carousel\">\n                <div \n                  ref={carouselRef}\n                  className={`carousel-track ${\n                    (timeRemaining === 0 && waitingForWinner) || (contractWinner && !document.querySelectorAll('.carousel-card.winner').length) ? 'analyzing' : \n                    contractWinner ? 'winner-revealed' : \n                    slotSpinning ? 'sliding' : ''\n                  }`}\n                  style={{\n                    transition: ((timeRemaining === 0 && waitingForWinner) || (contractWinner && !document.querySelectorAll('.carousel-card.winner').length)) || contractWinner ? 'none' : ''\n                  }}\n                >\n                  {(() => {\n                    // Simplified: Just use current game bettors, let backend broadcast identify winner\n                    const bettorsToShow = gameBettors.length > 0 ? gameBettors : previousRoundBettors;\n                    \n                    console.log('🎠 Using bettors:', bettorsToShow.length, 'total bettors');\n                    console.log('🎠 ContractWinner from backend:', contractWinner);\n                    \n                    // Check if we're showing waiting cards due to empty data\n                    if (bettorsToShow.length === 0) {\n                      console.log('⚠️ SHOWING WAITING CARDS - No bettor data available');\n                    }\n                    \n                    // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                    const allItems = [\n                      ...bettorsToShow,\n                      ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n                    ];\n                    \n                    // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                    const infiniteItems = [...allItems, ...allItems, ...allItems];\n                    \n                    return infiniteItems.map((bettor, index) => {\n                      // Simple winner detection - only check if backend broadcast matches this bettor\n                      const isWinner = contractWinner && bettor && (\n                        bettor.address === contractWinner.winner ||\n                        bettor.address === contractWinner.fullAddress ||\n                        bettor.username === contractWinner.username\n                      );\n                      \n                      // Log when we find a winner card\n                      if (isWinner) {\n                        console.log('🏆 WINNER CARD FOUND!', { \n                          index, \n                          bettor, \n                          isWinner,\n                          winnerName: bettor.username || bettor.displayName || 'Player',\n                          winnerAddress: bettor.address\n                        });\n                      }\n                        \n                        return (\n                          <div key={`${index}-${bettor?.address || 'waiting'}`} className={`carousel-card ${\n                            isWinner ? 'winner' : \n                            bettor ? 'active' : 'waiting'\n                          }`} data-debug={`winner: ${isWinner}, address: ${bettor?.address}`}>\n                            <div className=\"mobile-player-avatar\">\n                              {bettor ? (\n                                <div className=\"generated-avatar\">\n                                  {bettor.username ? bettor.username[0].toUpperCase() : '?'}\n                                </div>\n                              ) : (\n                                <div className=\"waiting-icon\">❓</div>\n                              )}\n                            </div>\n                            <div className=\"mobile-player-info\">\n                              <div className=\"mobile-player-name\">\n                                {bettor ? (bettor.username || bettor.displayName || 'Player') : 'Waiting'}\n                              </div>\n                              <div className=\"mobile-player-bet\">\n                                {bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                              </div>\n                            </div>\n                            {isWinner && (\n                              <div className=\"winner-crown\">👑</div>\n                            )}\n                          </div>\n                        );\n                      });\n                  })()}\n                </div>\n              </div>\n        </div>\n      </div>\n\n      {/* Mobile Footer */}\n      <div className=\"mobile-footer\">\n            <div className=\"footer-stats\">\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🏠</div>\n                <div className=\"footer-stat-value\">Home</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">⚡</div>\n                <div className=\"footer-stat-value\">Fast</div>\n            </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🕐</div>\n                <div className=\"footer-stat-value\">History</div>\n            </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🔍</div>\n                <div className=\"footer-stat-value\">Search</div>\n              </div>\n          </div>\n            <button className=\"games-button\">\n              <DollarSign size={14} />\n            Games\n          </button>\n        </div>\n      </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\">🔄</div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}