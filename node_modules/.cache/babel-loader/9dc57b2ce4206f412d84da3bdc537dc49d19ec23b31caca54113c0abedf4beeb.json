{"ast":null,"code":"import React,{useState,useEffect,useCallback,useMemo,useRef}from'react';import PlayerSlot from'./PlayerSlot';import socketService from'../services/socketService';import'./GameArea.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function GameArea(_ref){var _contractState$timer3,_contractState$timer5,_contractState$curren2,_contractState$timer8,_contractState$timer9,_contractState$timer0,_contractState$timer1;let{jackpotValue,currentRound,timeRemaining,isLive,betAmount,onBetChange,onPlaceBet,isConnected,isLoading,userWinChance,userBetTotal,contractState,adminInfo,currentBettors,// Winner state props (passed from App.js)\nwaitingForWinner,contractWinner,postWinnerLoading,showWinnerAnnouncement}=_ref;// Local animation state only (winner states are now props from App.js)\nconst[isSpinning,setIsSpinning]=useState(false);const[reelOffset,setReelOffset]=useState(0);const[winner,setWinner]=useState(null);const[predeterminedWinner,setPredeterminedWinner]=useState(null);// Winner states removed - now passed as props from App.js:\n// waitingForWinner, contractWinner, showWinnerAnnouncement, postWinnerLoading\nconst[betConfirmationStatus,setBetConfirmationStatus]=useState({isPolling:false,attempts:0,maxAttempts:30,currentWager:0,expectedWager:0});const[transactionNotification,setTransactionNotification]=useState({show:false,message:'',type:'success'// 'success', 'pending', 'error'\n});// Use refs to prevent unnecessary re-renders\nconst animationFrameRef=useRef();const[localTimer,setLocalTimer]=useState(0);const lastSyncRef=useRef(null);// Memoized calculated values to prevent recalculation on every render\nconst memoizedValues=useMemo(()=>{var _contractState$timer$,_contractState$timer,_contractState$timer2;// Check if contract is active - if not, show everything as 0\nconst isContractActive=(contractState===null||contractState===void 0?void 0:contractState.isActive)!==false;// Use local countdown timer if active, otherwise fall back to contract/prop data\nconst backendTimer=(_contractState$timer$=contractState===null||contractState===void 0?void 0:(_contractState$timer=contractState.timer)===null||_contractState$timer===void 0?void 0:_contractState$timer.timeRemaining)!==null&&_contractState$timer$!==void 0?_contractState$timer$:timeRemaining;const displayTimer=isContractActive?localTimer>0?localTimer:backendTimer:0;// Debug logging for timer sync\nif(backendTimer>0&&Math.abs(backendTimer-localTimer)>5){console.log('⏰ Timer sync check:',{backend:backendTimer,local:localTimer,using:displayTimer});}const displayRound=(contractState===null||contractState===void 0?void 0:(_contractState$timer2=contractState.timer)===null||_contractState$timer2===void 0?void 0:_contractState$timer2.roundNumber)||currentRound;const totalPlayers=isContractActive?(contractState===null||contractState===void 0?void 0:contractState.betCount)||(currentBettors===null||currentBettors===void 0?void 0:currentBettors.length)||0:0;// Use contract's total jackpot value directly (this includes all bet amounts before fees)\nconst totalJackpotValue=isContractActive?(contractState===null||contractState===void 0?void 0:contractState.totalJackpot)||jackpotValue||0:0;// Calculate winner prize (95% of total jackpot, 5% is fee)\nconst winnerPrizeValue=totalJackpotValue*0.95;return{displayTimer,displayRound,totalPlayers,totalJackpotValue:parseFloat(totalJackpotValue.toFixed(3)),// Contract's total jackpot\nwinnerPrizeValue:parseFloat(winnerPrizeValue.toFixed(3)),// Amount winner gets (95% of total)\nisContractActive};},[contractState===null||contractState===void 0?void 0:contractState.isActive,contractState===null||contractState===void 0?void 0:(_contractState$timer3=contractState.timer)===null||_contractState$timer3===void 0?void 0:_contractState$timer3.roundNumber,contractState===null||contractState===void 0?void 0:contractState.betCount,contractState===null||contractState===void 0?void 0:contractState.totalJackpot,currentBettors,currentRound,jackpotValue,timeRemaining]);// Memoize player stats to prevent unnecessary updates\nconst playerStats=useMemo(()=>{// If contract is not active, show everything as 0\nif(!memoizedValues.isContractActive){return{yourWager:0,yourChance:0};}// Find user's bet in current bettors\nconst userBettor=currentBettors===null||currentBettors===void 0?void 0:currentBettors.find(bettor=>bettor.address===(contractState===null||contractState===void 0?void 0:contractState.userAddress)||bettor.fullAddress===(contractState===null||contractState===void 0?void 0:contractState.userAddress));const yourWager=userBettor?userBettor.amount:userBetTotal||0;// Show actual bet amount including fee\n// Use contract's probability calculation if available, otherwise fallback to manual calculation\nconst yourChance=userWinChance>0?userWinChance:userBettor!==null&&userBettor!==void 0&&userBettor.amount&&memoizedValues.totalJackpotValue>0?userBettor.amount*100/memoizedValues.totalJackpotValue:0;return{yourWager:parseFloat(yourWager.toFixed(3)),// Prevent floating point jitter\nyourChance:parseFloat(yourChance.toFixed(2))// Prevent floating point jitter\n};},[currentBettors,contractState===null||contractState===void 0?void 0:contractState.userAddress,userBetTotal,userWinChance,memoizedValues.totalJackpotValue,memoizedValues.isContractActive]);// Memoize game status to prevent text flicker\nconst gameStatus=useMemo(()=>{if(!memoizedValues.isContractActive)return\"⏸️ Jackpot is paused\";if(waitingForWinner)return\"🎯 Selecting winner...\";if(!isLive)return adminInfo!==null&&adminInfo!==void 0&&adminInfo.isAutoManaged?\"🤖 Auto-starting next round...\":\"Waiting for next round...\";if(winner)return\"\\uD83C\\uDF89 \".concat(winner.name,\" wins \").concat(memoizedValues.winnerPrizeValue.toFixed(3),\" TON!\");if(isSpinning)return\"🎰 Spinning...\";if(memoizedValues.displayTimer<=5&&memoizedValues.totalPlayers>0)return\"⏰ Get ready to spin!\";if(memoizedValues.totalPlayers===0)return\"💰 Place your bets to start!\";return\"\\uD83D\\uDCB0 \".concat(memoizedValues.totalPlayers,\" player\").concat(memoizedValues.totalPlayers!==1?'s':'',\" betting...\");},[waitingForWinner,isLive,winner,isSpinning,adminInfo===null||adminInfo===void 0?void 0:adminInfo.isAutoManaged,memoizedValues]);const{displayTimer,displayRound,totalPlayers,totalJackpotValue,winnerPrizeValue}=memoizedValues;// Memoized player creation to prevent recreation on every render\nconst players=useMemo(()=>{// Create fixed array of 20 cards\nconst FIXED_CARDS=20;const playersArray=[];// If contract is not active, show only waiting placeholders\nif(memoizedValues.isContractActive&&currentBettors&&currentBettors.length>0){currentBettors.forEach((bettor,index)=>{if(index<FIXED_CARDS){// Only fill up to 20 slots\n// Apply 0.5 TON fee deduction for jackpot calculations\nconst netBetAmount=Math.max(0,bettor.amount-0.5);// Use contract's probability calculation: (bettorAmount * 100) / totalJackpot\nconst winChance=memoizedValues.totalJackpotValue>0?bettor.amount*100/memoizedValues.totalJackpotValue:0;playersArray.push({id:index+1,name:bettor.username,avatar:'👤',bet:bettor.amount,// Show actual bet amount including fee\nnetBet:netBetAmount,// Store net bet for calculations\nchance:winChance,address:bettor.address,isRealPlayer:true});}});}// Fill remaining slots with waiting placeholders\nwhile(playersArray.length<FIXED_CARDS){playersArray.push({id:playersArray.length+1,name:'Waiting',avatar:'❓',bet:0,netBet:0,chance:0,isRealPlayer:false});}return playersArray;},[currentBettors,memoizedValues.totalJackpotValue,memoizedValues.isContractActive]);// Recalculate when bettors change or jackpot changes\n// Memoized extended players for slot machine\nconst extendedPlayers=useMemo(()=>{const extended=[];for(let i=0;i<20;i++){extended.push(...players);}return extended;},[players]);// Reset local state when new round starts (only track round number changes)\nconst[lastRoundNumber,setLastRoundNumber]=useState(null);useEffect(()=>{var _contractState$timer4;const currentRoundNumber=contractState===null||contractState===void 0?void 0:(_contractState$timer4=contractState.timer)===null||_contractState$timer4===void 0?void 0:_contractState$timer4.roundNumber;// Only reset when round number actually changes (indicating a new round)\nif(currentRoundNumber&&currentRoundNumber!==lastRoundNumber){console.log(\"\\uD83D\\uDD04 New round detected: \".concat(lastRoundNumber,\" \\u2192 \").concat(currentRoundNumber));// Reset all local game state for new round (winner states managed by App.js)\nsetIsSpinning(false);setWinner(null);setPredeterminedWinner(null);setReelOffset(0);// Reset bet confirmation status\nsetBetConfirmationStatus({isPolling:false,attempts:0,maxAttempts:30,currentWager:0,expectedWager:0});setLastRoundNumber(currentRoundNumber);}else if(!lastRoundNumber&&currentRoundNumber){// Initialize the round number on first load\nsetLastRoundNumber(currentRoundNumber);}},[contractState===null||contractState===void 0?void 0:(_contractState$timer5=contractState.timer)===null||_contractState$timer5===void 0?void 0:_contractState$timer5.roundNumber,lastRoundNumber]);// Winner state is now managed by App.js via socket events - no local timer logic needed\n// Handle contract winner detection and start animation\nuseEffect(()=>{if(contractState!==null&&contractState!==void 0&&contractState.roundJustEnded&&contractState!==null&&contractState!==void 0&&contractState.winnerAnnouncement){console.log('🎉 Contract winner detected:',contractState.winnerAnnouncement);// Winner states are now managed by App.js via socket events\n// Find the winner in our current bettors list\nconst realWinner=currentBettors.find(bettor=>bettor.address===contractState.winnerAnnouncement.fullAddress||bettor.address.toLowerCase()===contractState.winnerAnnouncement.fullAddress.toLowerCase());if(realWinner){console.log('🎯 Found winner in bettors list:',realWinner);// Convert to player format for animation\nconst netBetAmount=Math.max(0,realWinner.amount-0.5);// Subtract 0.5 TON fee\nconst winnerPlayer={id:currentBettors.indexOf(realWinner)+1,name:realWinner.username,avatar:'👤',bet:realWinner.amount,// Show actual bet amount including fee\nnetBet:netBetAmount,// Store net bet for calculations\nchance:0,address:realWinner.address,isRealPlayer:true};// Start the animation targeting this specific winner\nstartSpinToWinner(winnerPlayer);}else{console.log('⚠️ Winner not found in current bettors, winner display handled by App.js');// Winner display is now handled by App.js via socket events\n}}},[contractState===null||contractState===void 0?void 0:contractState.roundJustEnded,contractState===null||contractState===void 0?void 0:contractState.winnerAnnouncement]);// Persistent animation that doesn't restart on user changes\nuseEffect(()=>{let lastTimestamp=0;const animate=timestamp=>{// Only animate if conditions are met\nif(!isSpinning&&!winner){// Calculate delta time for smooth 60fps animation\nconst deltaTime=timestamp-lastTimestamp;lastTimestamp=timestamp;setReelOffset(prev=>{const currentCardWidth=window.innerWidth<=480?120:150;const gap=window.innerWidth<=480?15:20;const cardPlusGap=currentCardWidth+gap;// Smooth movement at 1.2 pixels per frame (60fps = 72px/sec)\nconst speed=Math.max(0.5,deltaTime/16.67*1.2);// Normalize to 60fps\nconst newOffset=prev+speed;const fullCycleWidth=20*cardPlusGap;// Reset to 0 when full cycle is complete for seamless loop\nif(newOffset>=fullCycleWidth){return newOffset-fullCycleWidth;}return newOffset;});}animationFrameRef.current=requestAnimationFrame(animate);};animationFrameRef.current=requestAnimationFrame(animate);return()=>{if(animationFrameRef.current){cancelAnimationFrame(animationFrameRef.current);}};},[]);// Empty dependency array - only run once on mount\n// Separate effect to handle game state changes without restarting animation\nuseEffect(()=>{// Don't restart animation, just let the conditions check in the animation loop\nconsole.log('Game state changed:',{isSpinning,winner:!!winner,isLive});},[isSpinning,winner,isLive]);// Select winner based on weighted probability\nconst selectWeightedWinner=()=>{const realPlayers=players.filter(p=>p.isRealPlayer&&p.netBet>0);if(realPlayers.length===0)return null;// Calculate cumulative weights based on net bet amounts (fair distribution)\nconst totalWeight=realPlayers.reduce((sum,player)=>sum+player.netBet,0);const random=Math.random()*totalWeight;let cumulativeWeight=0;for(const player of realPlayers){cumulativeWeight+=player.netBet;if(random<=cumulativeWeight){return player;}}// Fallback to last player\nreturn realPlayers[realPlayers.length-1];};const startSpin=()=>{if(!isLive||isSpinning)return;// Select winner based on weighted probability (bet amounts)\nconst selectedWinner=selectWeightedWinner();if(!selectedWinner)return;setPredeterminedWinner(selectedWinner);setIsSpinning(true);setWinner(null);// Calculate precise stopping position with responsive card width\nconst currentCardWidth=window.innerWidth<=480?120:150;const gap=window.innerWidth<=480?15:20;const cardPlusGap=currentCardWidth+gap;const centerOffset=window.innerWidth/2-cardPlusGap/2-25;const winnerIndex=players.findIndex(p=>p.id===selectedWinner.id);const baseSpins=2;const targetCardPosition=winnerIndex*cardPlusGap;const targetPosition=baseSpins*20*cardPlusGap+targetCardPosition+centerOffset;// Use fixed 20 cards\nsetReelOffset(targetPosition);console.log('🎰 Winner selected:',selectedWinner.name,'Bet:',selectedWinner.bet);// Stop spinning after 3 seconds\nsetTimeout(()=>{setIsSpinning(false);setWinner(selectedWinner);setPredeterminedWinner(null);// Stay on winner for 3 seconds\nsetTimeout(()=>{setWinner(null);},3000);},3000);};// New function to spin to a specific winner\nconst startSpinToWinner=targetWinner=>{if(isSpinning)return;console.log('🎰 Starting spin animation to winner:',targetWinner.name);setPredeterminedWinner(targetWinner);setIsSpinning(true);setWinner(null);// Calculate precise stopping position for the target winner\nconst currentCardWidth=window.innerWidth<=480?120:150;const gap=window.innerWidth<=480?15:20;const cardPlusGap=currentCardWidth+gap;const centerOffset=window.innerWidth/2-cardPlusGap/2-25;const winnerIndex=players.findIndex(p=>p.address===targetWinner.address||p.name===targetWinner.name);if(winnerIndex===-1){console.error('Winner not found in players array');return;}const baseSpins=2;const targetCardPosition=winnerIndex*cardPlusGap;const targetPosition=baseSpins*20*cardPlusGap+targetCardPosition+centerOffset;// Use fixed 20 cards\nsetReelOffset(targetPosition);console.log('🎯 Animation targeting winner:',targetWinner.name,'at position:',winnerIndex);// Stop spinning after 3 seconds and show winner\nsetTimeout(()=>{setIsSpinning(false);setWinner(targetWinner);setPredeterminedWinner(null);// Winner notification is now handled by App.js via socket events\n// Clear local winner after 3 seconds\nsetTimeout(()=>{setWinner(null);},3000);},3000);};// Global winner announcement is now handled by App.js via socket events\nconst formatTime=seconds=>{const mins=Math.floor(seconds/60);const secs=seconds%60;return\"\".concat(mins.toString().padStart(2,'0'),\":\").concat(secs.toString().padStart(2,'0'));};// REMOVED: All socket handling moved to App.js to prevent duplicate listeners and re-renders\n// GameArea now receives all data as props from App.js which handles all socket events\n// Monitor bet confirmation polling status\nuseEffect(()=>{// Set up a global handler for bet confirmation updates\nwindow.updateBetConfirmationStatus=status=>{setBetConfirmationStatus(status);};// Set up a global handler for transaction notifications\nwindow.showTransactionNotification=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'success';setTransactionNotification({show:true,message:message,type:type});// Auto-hide after 4 seconds\nsetTimeout(()=>{setTransactionNotification({show:false,message:'',type:'success'});},4000);};return()=>{delete window.updateBetConfirmationStatus;delete window.showTransactionNotification;};},[]);// Sync timer once and start local countdown\nuseEffect(()=>{var _contractState$curren,_contractState$timer6,_contractState$timer$2,_contractState$timer7;const currentRoundId=(contractState===null||contractState===void 0?void 0:(_contractState$curren=contractState.currentRound)===null||_contractState$curren===void 0?void 0:_contractState$curren.roundNumber)||(contractState===null||contractState===void 0?void 0:(_contractState$timer6=contractState.timer)===null||_contractState$timer6===void 0?void 0:_contractState$timer6.roundNumber);const backendTimer=(_contractState$timer$2=contractState===null||contractState===void 0?void 0:(_contractState$timer7=contractState.timer)===null||_contractState$timer7===void 0?void 0:_contractState$timer7.timeRemaining)!==null&&_contractState$timer$2!==void 0?_contractState$timer$2:timeRemaining;// Only sync if we have new round data or timer data changed significantly\nconst needsSync=!lastSyncRef.current||lastSyncRef.current.roundId!==currentRoundId||backendTimer>0&&Math.abs(backendTimer-localTimer)>10;if(needsSync&&backendTimer>0){console.log('⏰ Syncing timer:',backendTimer,'seconds');setLocalTimer(backendTimer);lastSyncRef.current={roundId:currentRoundId,timer:backendTimer,timestamp:Date.now()};}},[contractState===null||contractState===void 0?void 0:(_contractState$curren2=contractState.currentRound)===null||_contractState$curren2===void 0?void 0:_contractState$curren2.roundNumber,contractState===null||contractState===void 0?void 0:(_contractState$timer8=contractState.timer)===null||_contractState$timer8===void 0?void 0:_contractState$timer8.roundNumber,contractState===null||contractState===void 0?void 0:(_contractState$timer9=contractState.timer)===null||_contractState$timer9===void 0?void 0:_contractState$timer9.timeRemaining,timeRemaining]);// Local countdown timer (runs every second)\nuseEffect(()=>{if(localTimer<=0)return;const interval=setInterval(()=>{setLocalTimer(prev=>{const newTime=Math.max(0,prev-1);if(newTime===0){console.log('⏰ Timer reached zero');}return newTime;});},1000);return()=>clearInterval(interval);},[localTimer>0]);return/*#__PURE__*/_jsxs(\"div\",{className:\"game-area\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"jackpot-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"jackpot-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u26A1 JACKPOT\"}),/*#__PURE__*/_jsx(\"span\",{className:\"player-count\",children:totalPlayers}),(adminInfo===null||adminInfo===void 0?void 0:adminInfo.isAutoManaged)&&/*#__PURE__*/_jsx(\"span\",{className:\"automation-badge\",children:\"\\uD83E\\uDD16 AUTO\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"jackpot-subtitle\",children:gameStatus}),/*#__PURE__*/_jsxs(\"div\",{className:\"bet-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bet-amount-display\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"bet-amount-value\",children:(betAmount===null||betAmount===void 0?void 0:betAmount.toFixed(1))||'0.0'}),/*#__PURE__*/_jsx(\"span\",{className:\"currency-label\",children:\"TON\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bet-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"bet-preset\",onClick:()=>onBetChange({target:{value:'0.11'}}),children:\"0.11\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bet-preset\",onClick:()=>onBetChange({target:{value:'0.5'}}),children:\"0.5\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bet-preset\",onClick:()=>onBetChange({target:{value:'1.0'}}),children:\"1.0\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bet-preset\",onClick:()=>onBetChange({target:{value:'2.0'}}),children:\"2.0\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"bet-button\",onClick:onPlaceBet,disabled:!isConnected||!memoizedValues.isContractActive||!isLive||isLoading||isSpinning||waitingForWinner||postWinnerLoading,children:!memoizedValues.isContractActive?'⏸️ Paused':isSpinning?'🎰 Spinning...':waitingForWinner?'🎯 Selecting...':postWinnerLoading?'🔄 New Round...':isConnected?'Bet':'Connect Wallet'})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card jackpot-value\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-icon\",children:\"\\uD83C\\uDFB0\"}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-amount\",children:totalJackpotValue.toFixed(3)}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Total Jackpot\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card net-payout\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-icon\",children:\"\\uD83D\\uDCB0\"}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-amount\",children:winnerPrizeValue.toFixed(3)}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Winner Gets (95%)\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card your-wager\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-icon\",children:\"\\uD83C\\uDFAF\"}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-amount\",children:playerStats.yourWager.toFixed(3)}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Your Wager\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card your-chance\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-amount\",children:[playerStats.yourChance.toFixed(2),\"%\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Your Chance\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-card time-remaining\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-amount\",children:formatTime(displayTimer)}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:contractState!==null&&contractState!==void 0&&(_contractState$timer0=contractState.timer)!==null&&_contractState$timer0!==void 0&&_contractState$timer0.isActive?'Auto Timer':'Time Remaining'})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"winner-arrow-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"winner-arrow\",children:/*#__PURE__*/_jsx(\"div\",{className:\"arrow\",children:\"\\u25BC\"})})}),/*#__PURE__*/_jsx(\"div\",{className:\"slot-machine\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"slot-frame\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"slot-reel-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"slot-reel \".concat(isSpinning?'slot-spinning':'idle'),style:{transform:\"translateX(\".concat(-reelOffset,\"px)\"),willChange:'transform'},children:extendedPlayers.map((player,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"slot-card\",children:/*#__PURE__*/_jsx(PlayerSlot,{player:player,isWinner:winner&&winner.id===player.id&&!isSpinning,isPredetermined:predeterminedWinner&&predeterminedWinner.id===player.id})},\"\".concat(player.id,\"-\").concat(index)))})}),isSpinning&&/*#__PURE__*/_jsx(\"div\",{className:\"slot-blur\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"footer-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"payout-info\",children:[\"\\u26A1 Payouts are settled in TON\",(contractState===null||contractState===void 0?void 0:(_contractState$timer1=contractState.timer)===null||_contractState$timer1===void 0?void 0:_contractState$timer1.isActive)&&/*#__PURE__*/_jsx(\"span\",{className:\"automation-info\",children:\" \\u2022 \\uD83E\\uDD16 Automated rounds\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-stats\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"players-count\",children:[\"\\uD83D\\uDC65 \",totalPlayers,\" Players\"]}),/*#__PURE__*/_jsxs(\"span\",{className:\"round-number\",children:[\"Round #\",displayRound]}),isConnected&&/*#__PURE__*/_jsx(\"span\",{className:\"connection-status\",children:\"\\uD83D\\uDFE2 Connected\"})]})]}),showWinnerAnnouncement&&contractWinner&&/*#__PURE__*/_jsx(\"div\",{className:\"winner-announcement-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"winner-announcement-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"winner-icon\",children:\"\\uD83C\\uDF89\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"ROUND WINNER!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"winner-details\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"winner-address\",children:contractWinner.winner}),/*#__PURE__*/_jsxs(\"div\",{className:\"winner-prize\",children:[\"Won \",contractWinner.prize,\" TON\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"winner-confetti\",children:\"\\uD83C\\uDF8A \\uD83C\\uDF89 \\uD83C\\uDF8A\"})]})}),waitingForWinner&&/*#__PURE__*/_jsx(\"div\",{className:\"winner-selection-loading\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"winner-selection-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner-big\",children:\"\\uD83C\\uDFAF\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Selecting Winner...\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Analyzing bets and picking the winner\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"loading-dots\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]})]})}),postWinnerLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"winner-selection-loading\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"winner-selection-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner-big\",children:\"\\uD83D\\uDD04\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Preparing New Round...\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Setting up the next jackpot round\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"loading-dots\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]})]})}),transactionNotification.show&&/*#__PURE__*/_jsx(\"div\",{className:\"transaction-notification \".concat(transactionNotification.type),children:transactionNotification.message})]});}export default GameArea;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useRef","PlayerSlot","socketService","jsx","_jsx","jsxs","_jsxs","GameArea","_ref","_contractState$timer3","_contractState$timer5","_contractState$curren2","_contractState$timer8","_contractState$timer9","_contractState$timer0","_contractState$timer1","jackpotValue","currentRound","timeRemaining","isLive","betAmount","onBetChange","onPlaceBet","isConnected","isLoading","userWinChance","userBetTotal","contractState","adminInfo","currentBettors","waitingForWinner","contractWinner","postWinnerLoading","showWinnerAnnouncement","isSpinning","setIsSpinning","reelOffset","setReelOffset","winner","setWinner","predeterminedWinner","setPredeterminedWinner","betConfirmationStatus","setBetConfirmationStatus","isPolling","attempts","maxAttempts","currentWager","expectedWager","transactionNotification","setTransactionNotification","show","message","type","animationFrameRef","localTimer","setLocalTimer","lastSyncRef","memoizedValues","_contractState$timer$","_contractState$timer","_contractState$timer2","isContractActive","isActive","backendTimer","timer","displayTimer","Math","abs","console","log","backend","local","using","displayRound","roundNumber","totalPlayers","betCount","length","totalJackpotValue","totalJackpot","winnerPrizeValue","parseFloat","toFixed","playerStats","yourWager","yourChance","userBettor","find","bettor","address","userAddress","fullAddress","amount","gameStatus","isAutoManaged","concat","name","players","FIXED_CARDS","playersArray","forEach","index","netBetAmount","max","winChance","push","id","username","avatar","bet","netBet","chance","isRealPlayer","extendedPlayers","extended","i","lastRoundNumber","setLastRoundNumber","_contractState$timer4","currentRoundNumber","roundJustEnded","winnerAnnouncement","realWinner","toLowerCase","winnerPlayer","indexOf","startSpinToWinner","lastTimestamp","animate","timestamp","deltaTime","prev","currentCardWidth","window","innerWidth","gap","cardPlusGap","speed","newOffset","fullCycleWidth","current","requestAnimationFrame","cancelAnimationFrame","selectWeightedWinner","realPlayers","filter","p","totalWeight","reduce","sum","player","random","cumulativeWeight","startSpin","selectedWinner","centerOffset","winnerIndex","findIndex","baseSpins","targetCardPosition","targetPosition","setTimeout","targetWinner","error","formatTime","seconds","mins","floor","secs","toString","padStart","updateBetConfirmationStatus","status","showTransactionNotification","arguments","undefined","_contractState$curren","_contractState$timer6","_contractState$timer$2","_contractState$timer7","currentRoundId","needsSync","roundId","Date","now","interval","setInterval","newTime","clearInterval","className","children","onClick","target","value","disabled","style","transform","willChange","map","isWinner","isPredetermined","prize"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/GameArea.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport PlayerSlot from './PlayerSlot';\nimport socketService from '../services/socketService';\nimport './GameArea.css';\n\nfunction GameArea({ \n  jackpotValue,\n  currentRound,\n  timeRemaining,\n  isLive,\n  betAmount,\n  onBetChange,\n  onPlaceBet,\n  isConnected,\n  isLoading,\n  userWinChance,\n  userBetTotal,\n  contractState,\n  adminInfo,\n  currentBettors,\n  // Winner state props (passed from App.js)\n  waitingForWinner,\n  contractWinner,\n  postWinnerLoading,\n  showWinnerAnnouncement\n}) {\n  // Local animation state only (winner states are now props from App.js)\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [reelOffset, setReelOffset] = useState(0);\n  const [winner, setWinner] = useState(null);\n  const [predeterminedWinner, setPredeterminedWinner] = useState(null);\n  \n  // Winner states removed - now passed as props from App.js:\n  // waitingForWinner, contractWinner, showWinnerAnnouncement, postWinnerLoading\n  const [betConfirmationStatus, setBetConfirmationStatus] = useState({\n    isPolling: false,\n    attempts: 0,\n    maxAttempts: 30,\n    currentWager: 0,\n    expectedWager: 0\n  });\n  const [transactionNotification, setTransactionNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success' // 'success', 'pending', 'error'\n  });\n\n  // Use refs to prevent unnecessary re-renders\n  const animationFrameRef = useRef();\n  const [localTimer, setLocalTimer] = useState(0);\n  const lastSyncRef = useRef(null);\n\n  // Memoized calculated values to prevent recalculation on every render\n  const memoizedValues = useMemo(() => {\n    // Check if contract is active - if not, show everything as 0\n    const isContractActive = contractState?.isActive !== false;\n    \n         // Use local countdown timer if active, otherwise fall back to contract/prop data\n     const backendTimer = contractState?.timer?.timeRemaining ?? timeRemaining;\n     const displayTimer = isContractActive ? (localTimer > 0 ? localTimer : backendTimer) : 0;\n    \n         // Debug logging for timer sync\n     if (backendTimer > 0 && Math.abs(backendTimer - localTimer) > 5) {\n       console.log('⏰ Timer sync check:', {\n         backend: backendTimer,\n         local: localTimer,\n         using: displayTimer\n       });\n     }\n    const displayRound = contractState?.timer?.roundNumber || currentRound;\n    const totalPlayers = isContractActive ? (contractState?.betCount || currentBettors?.length || 0) : 0;\n\n    // Use contract's total jackpot value directly (this includes all bet amounts before fees)\n    const totalJackpotValue = isContractActive ? (contractState?.totalJackpot || jackpotValue || 0) : 0;\n\n    // Calculate winner prize (95% of total jackpot, 5% is fee)\n    const winnerPrizeValue = totalJackpotValue * 0.95;\n\n    return {\n      displayTimer,\n      displayRound,\n      totalPlayers,\n      totalJackpotValue: parseFloat(totalJackpotValue.toFixed(3)), // Contract's total jackpot\n      winnerPrizeValue: parseFloat(winnerPrizeValue.toFixed(3)), // Amount winner gets (95% of total)\n      isContractActive\n    };\n  }, [contractState?.isActive, contractState?.timer?.roundNumber, contractState?.betCount, contractState?.totalJackpot,\n      currentBettors, currentRound, jackpotValue, timeRemaining]);\n\n  // Memoize player stats to prevent unnecessary updates\n  const playerStats = useMemo(() => {\n    // If contract is not active, show everything as 0\n    if (!memoizedValues.isContractActive) {\n      return {\n        yourWager: 0,\n        yourChance: 0\n      };\n    }\n    \n    // Find user's bet in current bettors\n    const userBettor = currentBettors?.find(bettor => \n      bettor.address === contractState?.userAddress ||\n      bettor.fullAddress === contractState?.userAddress\n    );\n    \n    const yourWager = userBettor ? userBettor.amount : userBetTotal || 0; // Show actual bet amount including fee\n    \n    // Use contract's probability calculation if available, otherwise fallback to manual calculation\n    const yourChance = userWinChance > 0 ? userWinChance : \n      (userBettor?.amount && memoizedValues.totalJackpotValue > 0 ? \n        (userBettor.amount * 100) / memoizedValues.totalJackpotValue : 0);\n\n    return {\n      yourWager: parseFloat(yourWager.toFixed(3)), // Prevent floating point jitter\n      yourChance: parseFloat(yourChance.toFixed(2)) // Prevent floating point jitter\n    };\n  }, [currentBettors, contractState?.userAddress, userBetTotal, userWinChance, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]);\n\n  // Memoize game status to prevent text flicker\n  const gameStatus = useMemo(() => {\n    if (!memoizedValues.isContractActive) return \"⏸️ Jackpot is paused\";\n    if (waitingForWinner) return \"🎯 Selecting winner...\";\n    if (!isLive) return adminInfo?.isAutoManaged ? \"🤖 Auto-starting next round...\" : \"Waiting for next round...\";\n    if (winner) return `🎉 ${winner.name} wins ${memoizedValues.winnerPrizeValue.toFixed(3)} TON!`;\n    if (isSpinning) return \"🎰 Spinning...\";\n    if (memoizedValues.displayTimer <= 5 && memoizedValues.totalPlayers > 0) return \"⏰ Get ready to spin!\";\n    if (memoizedValues.totalPlayers === 0) return \"💰 Place your bets to start!\";\n    return `💰 ${memoizedValues.totalPlayers} player${memoizedValues.totalPlayers !== 1 ? 's' : ''} betting...`;\n  }, [waitingForWinner, isLive, winner, isSpinning, adminInfo?.isAutoManaged, memoizedValues]);\n\n  const { displayTimer, displayRound, totalPlayers, totalJackpotValue, winnerPrizeValue } = memoizedValues;\n\n  // Memoized player creation to prevent recreation on every render\n  const players = useMemo(() => {\n    // Create fixed array of 20 cards\n    const FIXED_CARDS = 20;\n    const playersArray = [];\n    \n    // If contract is not active, show only waiting placeholders\n    if (memoizedValues.isContractActive && currentBettors && currentBettors.length > 0) {\n      currentBettors.forEach((bettor, index) => {\n        if (index < FIXED_CARDS) { // Only fill up to 20 slots\n          // Apply 0.5 TON fee deduction for jackpot calculations\n          const netBetAmount = Math.max(0, bettor.amount - 0.5);\n          \n          // Use contract's probability calculation: (bettorAmount * 100) / totalJackpot\n          const winChance = memoizedValues.totalJackpotValue > 0 ? \n            (bettor.amount * 100) / memoizedValues.totalJackpotValue : 0;\n          \n          playersArray.push({\n            id: index + 1,\n            name: bettor.username,\n            avatar: '👤',\n            bet: bettor.amount, // Show actual bet amount including fee\n            netBet: netBetAmount, // Store net bet for calculations\n            chance: winChance,\n            address: bettor.address,\n            isRealPlayer: true\n          });\n        }\n      });\n    }\n    \n    // Fill remaining slots with waiting placeholders\n    while (playersArray.length < FIXED_CARDS) {\n      playersArray.push({\n        id: playersArray.length + 1,\n        name: 'Waiting',\n        avatar: '❓',\n        bet: 0,\n        netBet: 0,\n        chance: 0,\n        isRealPlayer: false\n      });\n    }\n    \n    return playersArray;\n  }, [currentBettors, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]); // Recalculate when bettors change or jackpot changes\n\n  // Memoized extended players for slot machine\n  const extendedPlayers = useMemo(() => {\n    const extended = [];\n    for (let i = 0; i < 20; i++) {\n      extended.push(...players);\n    }\n    return extended;\n  }, [players]);\n\n  // Reset local state when new round starts (only track round number changes)\n  const [lastRoundNumber, setLastRoundNumber] = useState(null);\n  \n  useEffect(() => {\n    const currentRoundNumber = contractState?.timer?.roundNumber;\n    \n    // Only reset when round number actually changes (indicating a new round)\n    if (currentRoundNumber && currentRoundNumber !== lastRoundNumber) {\n      console.log(`🔄 New round detected: ${lastRoundNumber} → ${currentRoundNumber}`);\n      \n      // Reset all local game state for new round (winner states managed by App.js)\n      setIsSpinning(false);\n      setWinner(null);\n      setPredeterminedWinner(null);\n      setReelOffset(0);\n      \n      // Reset bet confirmation status\n      setBetConfirmationStatus({\n        isPolling: false,\n        attempts: 0,\n        maxAttempts: 30,\n        currentWager: 0,\n        expectedWager: 0\n      });\n      \n      setLastRoundNumber(currentRoundNumber);\n    } else if (!lastRoundNumber && currentRoundNumber) {\n      // Initialize the round number on first load\n      setLastRoundNumber(currentRoundNumber);\n    }\n  }, [contractState?.timer?.roundNumber, lastRoundNumber]);\n\n  // Winner state is now managed by App.js via socket events - no local timer logic needed\n\n  // Handle contract winner detection and start animation\n  useEffect(() => {\n    if (contractState?.roundJustEnded && contractState?.winnerAnnouncement) {\n      console.log('🎉 Contract winner detected:', contractState.winnerAnnouncement);\n      \n      // Winner states are now managed by App.js via socket events\n      \n      // Find the winner in our current bettors list\n      const realWinner = currentBettors.find(bettor => \n        bettor.address === contractState.winnerAnnouncement.fullAddress ||\n        bettor.address.toLowerCase() === contractState.winnerAnnouncement.fullAddress.toLowerCase()\n      );\n      \n      if (realWinner) {\n        console.log('🎯 Found winner in bettors list:', realWinner);\n        \n        // Convert to player format for animation\n        const netBetAmount = Math.max(0, realWinner.amount - 0.5); // Subtract 0.5 TON fee\n        const winnerPlayer = {\n          id: currentBettors.indexOf(realWinner) + 1,\n          name: realWinner.username,\n          avatar: '👤',\n          bet: realWinner.amount, // Show actual bet amount including fee\n          netBet: netBetAmount, // Store net bet for calculations\n          chance: 0,\n          address: realWinner.address,\n          isRealPlayer: true\n        };\n        \n        // Start the animation targeting this specific winner\n        startSpinToWinner(winnerPlayer);\n      } else {\n        console.log('⚠️ Winner not found in current bettors, winner display handled by App.js');\n        // Winner display is now handled by App.js via socket events\n      }\n    }\n  }, [contractState?.roundJustEnded, contractState?.winnerAnnouncement]);\n\n  // Persistent animation that doesn't restart on user changes\n  useEffect(() => {\n    let lastTimestamp = 0;\n    \n    const animate = (timestamp) => {\n      // Only animate if conditions are met\n      if (!isSpinning && !winner) {\n        // Calculate delta time for smooth 60fps animation\n        const deltaTime = timestamp - lastTimestamp;\n        lastTimestamp = timestamp;\n        \n        setReelOffset(prev => {\n          const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n          const gap = window.innerWidth <= 480 ? 15 : 20;\n          const cardPlusGap = currentCardWidth + gap;\n          \n          // Smooth movement at 1.2 pixels per frame (60fps = 72px/sec)\n          const speed = Math.max(0.5, deltaTime / 16.67 * 1.2); // Normalize to 60fps\n          const newOffset = prev + speed;\n          const fullCycleWidth = 20 * cardPlusGap;\n          \n          // Reset to 0 when full cycle is complete for seamless loop\n          if (newOffset >= fullCycleWidth) {\n            return newOffset - fullCycleWidth;\n          }\n          return newOffset;\n        });\n      }\n      \n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []); // Empty dependency array - only run once on mount\n\n  // Separate effect to handle game state changes without restarting animation\n  useEffect(() => {\n    // Don't restart animation, just let the conditions check in the animation loop\n    console.log('Game state changed:', { isSpinning, winner: !!winner, isLive });\n  }, [isSpinning, winner, isLive]);\n\n  // Select winner based on weighted probability\n  const selectWeightedWinner = () => {\n    const realPlayers = players.filter(p => p.isRealPlayer && p.netBet > 0);\n    if (realPlayers.length === 0) return null;\n\n    // Calculate cumulative weights based on net bet amounts (fair distribution)\n    const totalWeight = realPlayers.reduce((sum, player) => sum + player.netBet, 0);\n    const random = Math.random() * totalWeight;\n    \n    let cumulativeWeight = 0;\n    for (const player of realPlayers) {\n      cumulativeWeight += player.netBet;\n      if (random <= cumulativeWeight) {\n        return player;\n      }\n    }\n    \n    // Fallback to last player\n    return realPlayers[realPlayers.length - 1];\n  };\n\n  const startSpin = () => {\n    if (!isLive || isSpinning) return;\n    \n    // Select winner based on weighted probability (bet amounts)\n    const selectedWinner = selectWeightedWinner();\n    if (!selectedWinner) return;\n    \n    setPredeterminedWinner(selectedWinner);\n    \n    setIsSpinning(true);\n    setWinner(null);\n    \n    // Calculate precise stopping position with responsive card width\n    const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n    const gap = window.innerWidth <= 480 ? 15 : 20;\n    const cardPlusGap = currentCardWidth + gap;\n    const centerOffset = (window.innerWidth / 2) - (cardPlusGap / 2) - 25;\n    const winnerIndex = players.findIndex(p => p.id === selectedWinner.id);\n    const baseSpins = 2;\n    \n    const targetCardPosition = winnerIndex * cardPlusGap;\n    const targetPosition = (baseSpins * 20 * cardPlusGap) + targetCardPosition + centerOffset; // Use fixed 20 cards\n    \n    setReelOffset(targetPosition);\n    \n    console.log('🎰 Winner selected:', selectedWinner.name, 'Bet:', selectedWinner.bet);\n    \n    // Stop spinning after 3 seconds\n    setTimeout(() => {\n      setIsSpinning(false);\n      setWinner(selectedWinner);\n      setPredeterminedWinner(null);\n      \n      // Stay on winner for 3 seconds\n      setTimeout(() => {\n        setWinner(null);\n      }, 3000);\n    }, 3000);\n  };\n\n  // New function to spin to a specific winner\n  const startSpinToWinner = (targetWinner) => {\n    if (isSpinning) return;\n    \n    console.log('🎰 Starting spin animation to winner:', targetWinner.name);\n    \n    setPredeterminedWinner(targetWinner);\n    setIsSpinning(true);\n    setWinner(null);\n    \n    // Calculate precise stopping position for the target winner\n    const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n    const gap = window.innerWidth <= 480 ? 15 : 20;\n    const cardPlusGap = currentCardWidth + gap;\n    const centerOffset = (window.innerWidth / 2) - (cardPlusGap / 2) - 25;\n    const winnerIndex = players.findIndex(p => \n      p.address === targetWinner.address || p.name === targetWinner.name\n    );\n    \n    if (winnerIndex === -1) {\n      console.error('Winner not found in players array');\n      return;\n    }\n    \n    const baseSpins = 2;\n    const targetCardPosition = winnerIndex * cardPlusGap;\n    const targetPosition = (baseSpins * 20 * cardPlusGap) + targetCardPosition + centerOffset; // Use fixed 20 cards\n    \n    setReelOffset(targetPosition);\n    \n    console.log('🎯 Animation targeting winner:', targetWinner.name, 'at position:', winnerIndex);\n    \n    // Stop spinning after 3 seconds and show winner\n    setTimeout(() => {\n      setIsSpinning(false);\n      setWinner(targetWinner);\n      setPredeterminedWinner(null);\n      \n      // Winner notification is now handled by App.js via socket events\n      \n      // Clear local winner after 3 seconds\n      setTimeout(() => {\n        setWinner(null);\n      }, 3000);\n    }, 3000);\n  };\n\n  // Global winner announcement is now handled by App.js via socket events\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // REMOVED: All socket handling moved to App.js to prevent duplicate listeners and re-renders\n  // GameArea now receives all data as props from App.js which handles all socket events\n\n  // Monitor bet confirmation polling status\n  useEffect(() => {\n    // Set up a global handler for bet confirmation updates\n    window.updateBetConfirmationStatus = (status) => {\n      setBetConfirmationStatus(status);\n    };\n\n    // Set up a global handler for transaction notifications\n    window.showTransactionNotification = (message, type = 'success') => {\n      setTransactionNotification({\n        show: true,\n        message: message,\n        type: type\n      });\n      \n      // Auto-hide after 4 seconds\n      setTimeout(() => {\n        setTransactionNotification({\n          show: false,\n          message: '',\n          type: 'success'\n        });\n      }, 4000);\n    };\n\n    return () => {\n      delete window.updateBetConfirmationStatus;\n      delete window.showTransactionNotification;\n    };\n  }, []);\n\n  // Sync timer once and start local countdown\n  useEffect(() => {\n    const currentRoundId = contractState?.currentRound?.roundNumber || contractState?.timer?.roundNumber;\n    const backendTimer = contractState?.timer?.timeRemaining ?? timeRemaining;\n    \n    // Only sync if we have new round data or timer data changed significantly\n    const needsSync = !lastSyncRef.current || \n                     lastSyncRef.current.roundId !== currentRoundId ||\n                     (backendTimer > 0 && Math.abs(backendTimer - localTimer) > 10);\n    \n    if (needsSync && backendTimer > 0) {\n      console.log('⏰ Syncing timer:', backendTimer, 'seconds');\n      setLocalTimer(backendTimer);\n      lastSyncRef.current = {\n        roundId: currentRoundId,\n        timer: backendTimer,\n        timestamp: Date.now()\n      };\n    }\n  }, [contractState?.currentRound?.roundNumber, contractState?.timer?.roundNumber, contractState?.timer?.timeRemaining, timeRemaining]);\n\n  // Local countdown timer (runs every second)\n  useEffect(() => {\n    if (localTimer <= 0) return;\n\n    const interval = setInterval(() => {\n      setLocalTimer(prev => {\n        const newTime = Math.max(0, prev - 1);\n        if (newTime === 0) {\n          console.log('⏰ Timer reached zero');\n        }\n        return newTime;\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [localTimer > 0]);\n\n  return (\n    <div className=\"game-area\">\n      {/* Jackpot Section */}\n      <div className=\"jackpot-section\">\n        <div className=\"jackpot-header\">\n          <h2>⚡ JACKPOT</h2>\n          <span className=\"player-count\">{totalPlayers}</span>\n          {adminInfo?.isAutoManaged && (\n            <span className=\"automation-badge\">🤖 AUTO</span>\n          )}\n        </div>\n        <p className=\"jackpot-subtitle\">\n          {gameStatus}\n        </p>\n        \n        <div className=\"bet-controls\">\n          <div className=\"bet-amount-display\">\n            <span className=\"bet-amount-value\">{betAmount?.toFixed(1) || '0.0'}</span>\n            <span className=\"currency-label\">TON</span>\n          </div>\n          <div className=\"bet-buttons\">\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '0.11' } })}>0.11</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '0.5' } })}>0.5</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '1.0' } })}>1.0</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '2.0' } })}>2.0</button>\n          </div>\n          <button \n            className=\"bet-button\" \n            onClick={onPlaceBet}\n            disabled={!isConnected || !memoizedValues.isContractActive || !isLive || isLoading || isSpinning || waitingForWinner || postWinnerLoading}\n          >\n            {!memoizedValues.isContractActive ? '⏸️ Paused' :\n             isSpinning ? '🎰 Spinning...' :\n             waitingForWinner ? '🎯 Selecting...' :\n             postWinnerLoading ? '🔄 New Round...' :\n             isConnected ? 'Bet' : 'Connect Wallet'}\n          </button>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"stats-grid\">\n        <div className=\"stat-card jackpot-value\">\n          <div className=\"stat-icon\">🎰</div>\n          <div className=\"stat-amount\">{totalJackpotValue.toFixed(3)}</div>\n          <div className=\"stat-label\">Total Jackpot</div>\n        </div>\n        \n        <div className=\"stat-card net-payout\">\n          <div className=\"stat-icon\">💰</div>\n          <div className=\"stat-amount\">{winnerPrizeValue.toFixed(3)}</div>\n          <div className=\"stat-label\">Winner Gets (95%)</div>\n        </div>\n        \n        <div className=\"stat-card your-wager\">\n          <div className=\"stat-icon\">🎯</div>\n          <div className=\"stat-amount\">\n            {playerStats.yourWager.toFixed(3)}\n          </div>\n          <div className=\"stat-label\">Your Wager</div>\n        </div>\n        \n        <div className=\"stat-card your-chance\">\n          <div className=\"stat-amount\">\n            {playerStats.yourChance.toFixed(2)}%\n          </div>\n          <div className=\"stat-label\">Your Chance</div>\n        </div>\n        \n        <div className=\"stat-card time-remaining\">\n          <div className=\"stat-amount\">{formatTime(displayTimer)}</div>\n          <div className=\"stat-label\">\n            {contractState?.timer?.isActive ? 'Auto Timer' : 'Time Remaining'}\n          </div>\n        </div>\n      </div>\n\n      {/* Winner Arrow */}\n      <div className=\"winner-arrow-container\">\n        <div className=\"winner-arrow\">\n          <div className=\"arrow\">▼</div>\n        </div>\n      </div>\n\n      {/* Slot Machine */}\n      <div className=\"slot-machine\">\n        <div className=\"slot-frame\">\n          <div className=\"slot-reel-container\">\n            <div \n              className={`slot-reel ${isSpinning ? 'slot-spinning' : 'idle'}`}\n              style={{ \n                transform: `translateX(${-reelOffset}px)`,\n                willChange: 'transform'\n              }}\n            >\n              {extendedPlayers.map((player, index) => (\n                <div key={`${player.id}-${index}`} className=\"slot-card\">\n                  <PlayerSlot \n                    player={player} \n                    isWinner={winner && winner.id === player.id && !isSpinning}\n                    isPredetermined={predeterminedWinner && predeterminedWinner.id === player.id}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          {/* Slot Machine Effects */}\n          {isSpinning && <div className=\"slot-blur\"></div>}\n        </div>\n      </div>\n\n      {/* Footer Info */}\n      <div className=\"footer-info\">\n        <div className=\"payout-info\">\n          ⚡ Payouts are settled in TON\n          {contractState?.timer?.isActive && (\n            <span className=\"automation-info\"> • 🤖 Automated rounds</span>\n          )}\n        </div>\n        <div className=\"game-stats\">\n          <span className=\"players-count\">👥 {totalPlayers} Players</span>\n          <span className=\"round-number\">Round #{displayRound}</span>\n          {isConnected && (\n            <span className=\"connection-status\">🟢 Connected</span>\n          )}\n        </div>\n      </div>\n\n      {/* Contract Winner Announcement Overlay */}\n      {showWinnerAnnouncement && contractWinner && (\n        <div className=\"winner-announcement-overlay\">\n          <div className=\"winner-announcement-card\">\n            <div className=\"winner-icon\">🎉</div>\n            <h3>ROUND WINNER!</h3>\n            <div className=\"winner-details\">\n              <div className=\"winner-address\">{contractWinner.winner}</div>\n              <div className=\"winner-prize\">Won {contractWinner.prize} TON</div>\n            </div>\n            <div className=\"winner-confetti\">🎊 🎉 🎊</div>\n          </div>\n        </div>\n      )}\n\n      {/* Big Loading Overlay for Winner Selection */}\n      {waitingForWinner && (\n        <div className=\"winner-selection-loading\">\n          <div className=\"winner-selection-content\">\n            <div className=\"loading-spinner-big\">🎯</div>\n            <h2>Selecting Winner...</h2>\n            <p>Analyzing bets and picking the winner</p>\n            <div className=\"loading-dots\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Post-Winner Loading Overlay */}\n      {postWinnerLoading && (\n        <div className=\"winner-selection-loading\">\n          <div className=\"winner-selection-content\">\n            <div className=\"loading-spinner-big\">🔄</div>\n            <h2>Preparing New Round...</h2>\n            <p>Setting up the next jackpot round</p>\n            <div className=\"loading-dots\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Transaction Notification */}\n      {transactionNotification.show && (\n        <div className={`transaction-notification ${transactionNotification.type}`}>\n          {transactionNotification.message}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}