{"ast":null,"code":"class WinnerCoordinator {\n  constructor() {\n    this.isActive = false;\n    this.listeners = new Set();\n    this.currentWinnerTimestamp = null;\n  }\n\n  // Register a component that shows winner announcements\n  register(callback) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  // Set active state and notify all listeners\n  setActive(isActive, winnerTimestamp = null) {\n    console.log(`ðŸŽ¯ WinnerCoordinator: Setting active state: ${isActive}, timestamp: ${winnerTimestamp}`);\n    this.isActive = isActive;\n    this.currentWinnerTimestamp = winnerTimestamp;\n\n    // Notify all registered components\n    this.listeners.forEach(callback => {\n      try {\n        callback({\n          isActive,\n          winnerTimestamp\n        });\n      } catch (error) {\n        console.error('Error in winner coordinator callback:', error);\n      }\n    });\n  }\n\n  // Check if a winner announcement should be blocked\n  shouldBlock(winnerTimestamp) {\n    const isAlreadyActive = this.isActive;\n    const isDuplicateTimestamp = this.currentWinnerTimestamp === winnerTimestamp;\n    console.log(`ðŸŽ¯ WinnerCoordinator shouldBlock check:`, {\n      isActive: isAlreadyActive,\n      currentTimestamp: this.currentWinnerTimestamp,\n      incomingTimestamp: winnerTimestamp,\n      isDuplicate: isDuplicateTimestamp,\n      shouldBlock: isAlreadyActive || isDuplicateTimestamp\n    });\n    return isAlreadyActive || isDuplicateTimestamp;\n  }\n\n  // Clear all states (for new rounds)\n  reset() {\n    console.log('ðŸ”„ WinnerCoordinator: Resetting all states');\n    this.setActive(false, null);\n  }\n\n  // Get current state\n  getState() {\n    return {\n      isActive: this.isActive,\n      currentWinnerTimestamp: this.currentWinnerTimestamp\n    };\n  }\n}\n\n// Create singleton instance\nconst winnerCoordinator = new WinnerCoordinator();\nexport default winnerCoordinator;","map":{"version":3,"names":["WinnerCoordinator","constructor","isActive","listeners","Set","currentWinnerTimestamp","register","callback","add","delete","setActive","winnerTimestamp","console","log","forEach","error","shouldBlock","isAlreadyActive","isDuplicateTimestamp","currentTimestamp","incomingTimestamp","isDuplicate","reset","getState","winnerCoordinator"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/winnerCoordinator.js"],"sourcesContent":["class WinnerCoordinator {\r\n  constructor() {\r\n    this.isActive = false;\r\n    this.listeners = new Set();\r\n    this.currentWinnerTimestamp = null;\r\n  }\r\n\r\n  // Register a component that shows winner announcements\r\n  register(callback) {\r\n    this.listeners.add(callback);\r\n    return () => this.listeners.delete(callback);\r\n  }\r\n\r\n  // Set active state and notify all listeners\r\n  setActive(isActive, winnerTimestamp = null) {\r\n    console.log(`ðŸŽ¯ WinnerCoordinator: Setting active state: ${isActive}, timestamp: ${winnerTimestamp}`);\r\n    this.isActive = isActive;\r\n    this.currentWinnerTimestamp = winnerTimestamp;\r\n    \r\n    // Notify all registered components\r\n    this.listeners.forEach(callback => {\r\n      try {\r\n        callback({ isActive, winnerTimestamp });\r\n      } catch (error) {\r\n        console.error('Error in winner coordinator callback:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Check if a winner announcement should be blocked\r\n  shouldBlock(winnerTimestamp) {\r\n    const isAlreadyActive = this.isActive;\r\n    const isDuplicateTimestamp = this.currentWinnerTimestamp === winnerTimestamp;\r\n    \r\n    console.log(`ðŸŽ¯ WinnerCoordinator shouldBlock check:`, {\r\n      isActive: isAlreadyActive,\r\n      currentTimestamp: this.currentWinnerTimestamp,\r\n      incomingTimestamp: winnerTimestamp,\r\n      isDuplicate: isDuplicateTimestamp,\r\n      shouldBlock: isAlreadyActive || isDuplicateTimestamp\r\n    });\r\n    \r\n    return isAlreadyActive || isDuplicateTimestamp;\r\n  }\r\n\r\n  // Clear all states (for new rounds)\r\n  reset() {\r\n    console.log('ðŸ”„ WinnerCoordinator: Resetting all states');\r\n    this.setActive(false, null);\r\n  }\r\n\r\n  // Get current state\r\n  getState() {\r\n    return {\r\n      isActive: this.isActive,\r\n      currentWinnerTimestamp: this.currentWinnerTimestamp\r\n    };\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst winnerCoordinator = new WinnerCoordinator();\r\nexport default winnerCoordinator; "],"mappings":"AAAA,MAAMA,iBAAiB,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,sBAAsB,GAAG,IAAI;EACpC;;EAEA;EACAC,QAAQA,CAACC,QAAQ,EAAE;IACjB,IAAI,CAACJ,SAAS,CAACK,GAAG,CAACD,QAAQ,CAAC;IAC5B,OAAO,MAAM,IAAI,CAACJ,SAAS,CAACM,MAAM,CAACF,QAAQ,CAAC;EAC9C;;EAEA;EACAG,SAASA,CAACR,QAAQ,EAAES,eAAe,GAAG,IAAI,EAAE;IAC1CC,OAAO,CAACC,GAAG,CAAC,+CAA+CX,QAAQ,gBAAgBS,eAAe,EAAE,CAAC;IACrG,IAAI,CAACT,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,sBAAsB,GAAGM,eAAe;;IAE7C;IACA,IAAI,CAACR,SAAS,CAACW,OAAO,CAACP,QAAQ,IAAI;MACjC,IAAI;QACFA,QAAQ,CAAC;UAAEL,QAAQ;UAAES;QAAgB,CAAC,CAAC;MACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC,CAAC;EACJ;;EAEA;EACAC,WAAWA,CAACL,eAAe,EAAE;IAC3B,MAAMM,eAAe,GAAG,IAAI,CAACf,QAAQ;IACrC,MAAMgB,oBAAoB,GAAG,IAAI,CAACb,sBAAsB,KAAKM,eAAe;IAE5EC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE;MACrDX,QAAQ,EAAEe,eAAe;MACzBE,gBAAgB,EAAE,IAAI,CAACd,sBAAsB;MAC7Ce,iBAAiB,EAAET,eAAe;MAClCU,WAAW,EAAEH,oBAAoB;MACjCF,WAAW,EAAEC,eAAe,IAAIC;IAClC,CAAC,CAAC;IAEF,OAAOD,eAAe,IAAIC,oBAAoB;EAChD;;EAEA;EACAI,KAAKA,CAAA,EAAG;IACNV,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IACzD,IAAI,CAACH,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC;EAC7B;;EAEA;EACAa,QAAQA,CAAA,EAAG;IACT,OAAO;MACLrB,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBG,sBAAsB,EAAE,IAAI,CAACA;IAC/B,CAAC;EACH;AACF;;AAEA;AACA,MAAMmB,iBAAiB,GAAG,IAAIxB,iBAAiB,CAAC,CAAC;AACjD,eAAewB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}