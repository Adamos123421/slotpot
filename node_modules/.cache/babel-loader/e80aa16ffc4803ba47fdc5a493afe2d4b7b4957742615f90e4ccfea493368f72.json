{"ast":null,"code":"/**\n * A JavaScript implementation of the SHA family of hashes - defined in FIPS PUB 180-4, FIPS PUB 202,\n * and SP 800-185 - as well as the corresponding HMAC implementation as defined in FIPS PUB 198-1.\n *\n * Copyright 2008-2020 Brian Turek, 1998-2009 Paul Johnston & Contributors\n * Distributed under the BSD License\n * See http://caligatio.github.com/jsSHA/ for more information\n *\n * Two ECMAScript polyfill functions carry the following license:\n *\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,\n * INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n * MERCHANTABLITY OR NON-INFRINGEMENT.\n *\n * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.\n */\n!function (n, r) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = r() : \"function\" == typeof define && define.amd ? define(r) : (n = \"undefined\" != typeof globalThis ? globalThis : n || self).jsSHA = r();\n}(this, function () {\n  \"use strict\";\n\n  var n = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  function r(n, r, t, e) {\n    var i,\n      o,\n      u,\n      f = r || [0],\n      w = (t = t || 0) >>> 3,\n      s = -1 === e ? 3 : 0;\n    for (i = 0; i < n.length; i += 1) o = (u = i + w) >>> 2, f.length <= o && f.push(0), f[o] |= n[i] << 8 * (s + e * (u % 4));\n    return {\n      value: f,\n      binLen: 8 * n.length + t\n    };\n  }\n  function t(t, e, i) {\n    switch (e) {\n      case \"UTF8\":\n      case \"UTF16BE\":\n      case \"UTF16LE\":\n        break;\n      default:\n        throw new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");\n    }\n    switch (t) {\n      case \"HEX\":\n        return function (n, r, t) {\n          return function (n, r, t, e) {\n            var i, o, u, f;\n            if (0 != n.length % 2) throw new Error(\"String of HEX type must be in byte increments\");\n            var w = r || [0],\n              s = (t = t || 0) >>> 3,\n              a = -1 === e ? 3 : 0;\n            for (i = 0; i < n.length; i += 2) {\n              if (o = parseInt(n.substr(i, 2), 16), isNaN(o)) throw new Error(\"String of HEX type contains invalid characters\");\n              for (u = (f = (i >>> 1) + s) >>> 2; w.length <= u;) w.push(0);\n              w[u] |= o << 8 * (a + e * (f % 4));\n            }\n            return {\n              value: w,\n              binLen: 4 * n.length + t\n            };\n          }(n, r, t, i);\n        };\n      case \"TEXT\":\n        return function (n, r, t) {\n          return function (n, r, t, e, i) {\n            var o,\n              u,\n              f,\n              w,\n              s,\n              a,\n              h,\n              c,\n              v = 0,\n              A = t || [0],\n              E = (e = e || 0) >>> 3;\n            if (\"UTF8\" === r) for (h = -1 === i ? 3 : 0, f = 0; f < n.length; f += 1) for (u = [], 128 > (o = n.charCodeAt(f)) ? u.push(o) : 2048 > o ? (u.push(192 | o >>> 6), u.push(128 | 63 & o)) : 55296 > o || 57344 <= o ? u.push(224 | o >>> 12, 128 | o >>> 6 & 63, 128 | 63 & o) : (f += 1, o = 65536 + ((1023 & o) << 10 | 1023 & n.charCodeAt(f)), u.push(240 | o >>> 18, 128 | o >>> 12 & 63, 128 | o >>> 6 & 63, 128 | 63 & o)), w = 0; w < u.length; w += 1) {\n              for (s = (a = v + E) >>> 2; A.length <= s;) A.push(0);\n              A[s] |= u[w] << 8 * (h + i * (a % 4)), v += 1;\n            } else for (h = -1 === i ? 2 : 0, c = \"UTF16LE\" === r && 1 !== i || \"UTF16LE\" !== r && 1 === i, f = 0; f < n.length; f += 1) {\n              for (o = n.charCodeAt(f), !0 === c && (o = (w = 255 & o) << 8 | o >>> 8), s = (a = v + E) >>> 2; A.length <= s;) A.push(0);\n              A[s] |= o << 8 * (h + i * (a % 4)), v += 2;\n            }\n            return {\n              value: A,\n              binLen: 8 * v + e\n            };\n          }(n, e, r, t, i);\n        };\n      case \"B64\":\n        return function (r, t, e) {\n          return function (r, t, e, i) {\n            var o,\n              u,\n              f,\n              w,\n              s,\n              a,\n              h = 0,\n              c = t || [0],\n              v = (e = e || 0) >>> 3,\n              A = -1 === i ? 3 : 0,\n              E = r.indexOf(\"=\");\n            if (-1 === r.search(/^[a-zA-Z0-9=+/]+$/)) throw new Error(\"Invalid character in base-64 string\");\n            if (r = r.replace(/=/g, \"\"), -1 !== E && E < r.length) throw new Error(\"Invalid '=' found in base-64 string\");\n            for (o = 0; o < r.length; o += 4) {\n              for (w = r.substr(o, 4), f = 0, u = 0; u < w.length; u += 1) f |= n.indexOf(w.charAt(u)) << 18 - 6 * u;\n              for (u = 0; u < w.length - 1; u += 1) {\n                for (s = (a = h + v) >>> 2; c.length <= s;) c.push(0);\n                c[s] |= (f >>> 16 - 8 * u & 255) << 8 * (A + i * (a % 4)), h += 1;\n              }\n            }\n            return {\n              value: c,\n              binLen: 8 * h + e\n            };\n          }(r, t, e, i);\n        };\n      case \"BYTES\":\n        return function (n, r, t) {\n          return function (n, r, t, e) {\n            var i,\n              o,\n              u,\n              f,\n              w = r || [0],\n              s = (t = t || 0) >>> 3,\n              a = -1 === e ? 3 : 0;\n            for (o = 0; o < n.length; o += 1) i = n.charCodeAt(o), u = (f = o + s) >>> 2, w.length <= u && w.push(0), w[u] |= i << 8 * (a + e * (f % 4));\n            return {\n              value: w,\n              binLen: 8 * n.length + t\n            };\n          }(n, r, t, i);\n        };\n      case \"ARRAYBUFFER\":\n        try {\n          new ArrayBuffer(0);\n        } catch (n) {\n          throw new Error(\"ARRAYBUFFER not supported by this environment\");\n        }\n        return function (n, t, e) {\n          return function (n, t, e, i) {\n            return r(new Uint8Array(n), t, e, i);\n          }(n, t, e, i);\n        };\n      case \"UINT8ARRAY\":\n        try {\n          new Uint8Array(0);\n        } catch (n) {\n          throw new Error(\"UINT8ARRAY not supported by this environment\");\n        }\n        return function (n, t, e) {\n          return r(n, t, e, i);\n        };\n      default:\n        throw new Error(\"format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY\");\n    }\n  }\n  function e(r, t, e, i) {\n    switch (r) {\n      case \"HEX\":\n        return function (n) {\n          return function (n, r, t, e) {\n            var i,\n              o,\n              u = \"\",\n              f = r / 8,\n              w = -1 === t ? 3 : 0;\n            for (i = 0; i < f; i += 1) o = n[i >>> 2] >>> 8 * (w + t * (i % 4)), u += \"0123456789abcdef\".charAt(o >>> 4 & 15) + \"0123456789abcdef\".charAt(15 & o);\n            return e.outputUpper ? u.toUpperCase() : u;\n          }(n, t, e, i);\n        };\n      case \"B64\":\n        return function (r) {\n          return function (r, t, e, i) {\n            var o,\n              u,\n              f,\n              w,\n              s,\n              a = \"\",\n              h = t / 8,\n              c = -1 === e ? 3 : 0;\n            for (o = 0; o < h; o += 3) for (w = o + 1 < h ? r[o + 1 >>> 2] : 0, s = o + 2 < h ? r[o + 2 >>> 2] : 0, f = (r[o >>> 2] >>> 8 * (c + e * (o % 4)) & 255) << 16 | (w >>> 8 * (c + e * ((o + 1) % 4)) & 255) << 8 | s >>> 8 * (c + e * ((o + 2) % 4)) & 255, u = 0; u < 4; u += 1) a += 8 * o + 6 * u <= t ? n.charAt(f >>> 6 * (3 - u) & 63) : i.b64Pad;\n            return a;\n          }(r, t, e, i);\n        };\n      case \"BYTES\":\n        return function (n) {\n          return function (n, r, t) {\n            var e,\n              i,\n              o = \"\",\n              u = r / 8,\n              f = -1 === t ? 3 : 0;\n            for (e = 0; e < u; e += 1) i = n[e >>> 2] >>> 8 * (f + t * (e % 4)) & 255, o += String.fromCharCode(i);\n            return o;\n          }(n, t, e);\n        };\n      case \"ARRAYBUFFER\":\n        try {\n          new ArrayBuffer(0);\n        } catch (n) {\n          throw new Error(\"ARRAYBUFFER not supported by this environment\");\n        }\n        return function (n) {\n          return function (n, r, t) {\n            var e,\n              i = r / 8,\n              o = new ArrayBuffer(i),\n              u = new Uint8Array(o),\n              f = -1 === t ? 3 : 0;\n            for (e = 0; e < i; e += 1) u[e] = n[e >>> 2] >>> 8 * (f + t * (e % 4)) & 255;\n            return o;\n          }(n, t, e);\n        };\n      case \"UINT8ARRAY\":\n        try {\n          new Uint8Array(0);\n        } catch (n) {\n          throw new Error(\"UINT8ARRAY not supported by this environment\");\n        }\n        return function (n) {\n          return function (n, r, t) {\n            var e,\n              i = r / 8,\n              o = -1 === t ? 3 : 0,\n              u = new Uint8Array(i);\n            for (e = 0; e < i; e += 1) u[e] = n[e >>> 2] >>> 8 * (o + t * (e % 4)) & 255;\n            return u;\n          }(n, t, e);\n        };\n      default:\n        throw new Error(\"format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY\");\n    }\n  }\n  var i = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298],\n    o = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428],\n    u = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225],\n    f = \"Chosen SHA variant is not supported\";\n  function w(n, r) {\n    var t,\n      e,\n      i = n.binLen >>> 3,\n      o = r.binLen >>> 3,\n      u = i << 3,\n      f = 4 - i << 3;\n    if (i % 4 != 0) {\n      for (t = 0; t < o; t += 4) e = i + t >>> 2, n.value[e] |= r.value[t >>> 2] << u, n.value.push(0), n.value[e + 1] |= r.value[t >>> 2] >>> f;\n      return (n.value.length << 2) - 4 >= o + i && n.value.pop(), {\n        value: n.value,\n        binLen: n.binLen + r.binLen\n      };\n    }\n    return {\n      value: n.value.concat(r.value),\n      binLen: n.binLen + r.binLen\n    };\n  }\n  function s(n) {\n    var r = {\n        outputUpper: !1,\n        b64Pad: \"=\",\n        outputLen: -1\n      },\n      t = n || {},\n      e = \"Output length must be a multiple of 8\";\n    if (r.outputUpper = t.outputUpper || !1, t.b64Pad && (r.b64Pad = t.b64Pad), t.outputLen) {\n      if (t.outputLen % 8 != 0) throw new Error(e);\n      r.outputLen = t.outputLen;\n    } else if (t.shakeLen) {\n      if (t.shakeLen % 8 != 0) throw new Error(e);\n      r.outputLen = t.shakeLen;\n    }\n    if (\"boolean\" != typeof r.outputUpper) throw new Error(\"Invalid outputUpper formatting option\");\n    if (\"string\" != typeof r.b64Pad) throw new Error(\"Invalid b64Pad formatting option\");\n    return r;\n  }\n  function a(n, r, e, i) {\n    var o = n + \" must include a value and format\";\n    if (!r) {\n      if (!i) throw new Error(o);\n      return i;\n    }\n    if (void 0 === r.value || !r.format) throw new Error(o);\n    return t(r.format, r.encoding || \"UTF8\", e)(r.value);\n  }\n  var h = function () {\n      function n(n, r, t) {\n        var e = t || {};\n        if (this.t = r, this.i = e.encoding || \"UTF8\", this.numRounds = e.numRounds || 1, isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds) throw new Error(\"numRounds must a integer >= 1\");\n        this.o = n, this.u = [], this.s = 0, this.h = !1, this.v = 0, this.A = !1, this.l = [], this.H = [];\n      }\n      return n.prototype.update = function (n) {\n        var r,\n          t = 0,\n          e = this.S >>> 5,\n          i = this.p(n, this.u, this.s),\n          o = i.binLen,\n          u = i.value,\n          f = o >>> 5;\n        for (r = 0; r < f; r += e) t + this.S <= o && (this.m = this.R(u.slice(r, r + e), this.m), t += this.S);\n        this.v += t, this.u = u.slice(t >>> 5), this.s = o % this.S, this.h = !0;\n      }, n.prototype.getHash = function (n, r) {\n        var t,\n          i,\n          o = this.U,\n          u = s(r);\n        if (this.T) {\n          if (-1 === u.outputLen) throw new Error(\"Output length must be specified in options\");\n          o = u.outputLen;\n        }\n        var f = e(n, o, this.C, u);\n        if (this.A && this.F) return f(this.F(u));\n        for (i = this.K(this.u.slice(), this.s, this.v, this.B(this.m), o), t = 1; t < this.numRounds; t += 1) this.T && o % 32 != 0 && (i[i.length - 1] &= 16777215 >>> 24 - o % 32), i = this.K(i, o, 0, this.L(this.o), o);\n        return f(i);\n      }, n.prototype.setHMACKey = function (n, r, e) {\n        if (!this.g) throw new Error(\"Variant does not support HMAC\");\n        if (this.h) throw new Error(\"Cannot set MAC key after calling update\");\n        var i = t(r, (e || {}).encoding || \"UTF8\", this.C);\n        this.k(i(n));\n      }, n.prototype.k = function (n) {\n        var r,\n          t = this.S >>> 3,\n          e = t / 4 - 1;\n        if (1 !== this.numRounds) throw new Error(\"Cannot set numRounds with MAC\");\n        if (this.A) throw new Error(\"MAC key already set\");\n        for (t < n.binLen / 8 && (n.value = this.K(n.value, n.binLen, 0, this.L(this.o), this.U)); n.value.length <= e;) n.value.push(0);\n        for (r = 0; r <= e; r += 1) this.l[r] = 909522486 ^ n.value[r], this.H[r] = 1549556828 ^ n.value[r];\n        this.m = this.R(this.l, this.m), this.v = this.S, this.A = !0;\n      }, n.prototype.getHMAC = function (n, r) {\n        var t = s(r);\n        return e(n, this.U, this.C, t)(this.Y());\n      }, n.prototype.Y = function () {\n        var n;\n        if (!this.A) throw new Error(\"Cannot call getHMAC without first setting MAC key\");\n        var r = this.K(this.u.slice(), this.s, this.v, this.B(this.m), this.U);\n        return n = this.R(this.H, this.L(this.o)), n = this.K(r, this.U, this.S, n, this.U);\n      }, n;\n    }(),\n    c = function (n, r) {\n      return (c = Object.setPrototypeOf || {\n        __proto__: []\n      } instanceof Array && function (n, r) {\n        n.__proto__ = r;\n      } || function (n, r) {\n        for (var t in r) Object.prototype.hasOwnProperty.call(r, t) && (n[t] = r[t]);\n      })(n, r);\n    };\n  function v(n, r) {\n    function t() {\n      this.constructor = n;\n    }\n    c(n, r), n.prototype = null === r ? Object.create(r) : (t.prototype = r.prototype, new t());\n  }\n  function A(n, r) {\n    return n << r | n >>> 32 - r;\n  }\n  function E(n, r) {\n    return n >>> r | n << 32 - r;\n  }\n  function l(n, r) {\n    return n >>> r;\n  }\n  function b(n, r, t) {\n    return n ^ r ^ t;\n  }\n  function H(n, r, t) {\n    return n & r ^ ~n & t;\n  }\n  function d(n, r, t) {\n    return n & r ^ n & t ^ r & t;\n  }\n  function S(n) {\n    return E(n, 2) ^ E(n, 13) ^ E(n, 22);\n  }\n  function p(n, r) {\n    var t = (65535 & n) + (65535 & r);\n    return (65535 & (n >>> 16) + (r >>> 16) + (t >>> 16)) << 16 | 65535 & t;\n  }\n  function m(n, r, t, e) {\n    var i = (65535 & n) + (65535 & r) + (65535 & t) + (65535 & e);\n    return (65535 & (n >>> 16) + (r >>> 16) + (t >>> 16) + (e >>> 16) + (i >>> 16)) << 16 | 65535 & i;\n  }\n  function y(n, r, t, e, i) {\n    var o = (65535 & n) + (65535 & r) + (65535 & t) + (65535 & e) + (65535 & i);\n    return (65535 & (n >>> 16) + (r >>> 16) + (t >>> 16) + (e >>> 16) + (i >>> 16) + (o >>> 16)) << 16 | 65535 & o;\n  }\n  function R(n) {\n    return E(n, 7) ^ E(n, 18) ^ l(n, 3);\n  }\n  function U(n) {\n    return E(n, 6) ^ E(n, 11) ^ E(n, 25);\n  }\n  function T(n) {\n    return [1732584193, 4023233417, 2562383102, 271733878, 3285377520];\n  }\n  function C(n, r) {\n    var t,\n      e,\n      i,\n      o,\n      u,\n      f,\n      w,\n      s = [];\n    for (t = r[0], e = r[1], i = r[2], o = r[3], u = r[4], w = 0; w < 80; w += 1) s[w] = w < 16 ? n[w] : A(s[w - 3] ^ s[w - 8] ^ s[w - 14] ^ s[w - 16], 1), f = w < 20 ? y(A(t, 5), H(e, i, o), u, 1518500249, s[w]) : w < 40 ? y(A(t, 5), b(e, i, o), u, 1859775393, s[w]) : w < 60 ? y(A(t, 5), d(e, i, o), u, 2400959708, s[w]) : y(A(t, 5), b(e, i, o), u, 3395469782, s[w]), u = o, o = i, i = A(e, 30), e = t, t = f;\n    return r[0] = p(t, r[0]), r[1] = p(e, r[1]), r[2] = p(i, r[2]), r[3] = p(o, r[3]), r[4] = p(u, r[4]), r;\n  }\n  function F(n, r, t, e) {\n    for (var i, o = 15 + (r + 65 >>> 9 << 4), u = r + t; n.length <= o;) n.push(0);\n    for (n[r >>> 5] |= 128 << 24 - r % 32, n[o] = 4294967295 & u, n[o - 1] = u / 4294967296 | 0, i = 0; i < n.length; i += 16) e = C(n.slice(i, i + 16), e);\n    return e;\n  }\n  var K = function (n) {\n    function r(r, e, i) {\n      var o = this;\n      if (\"SHA-1\" !== r) throw new Error(f);\n      var u = i || {};\n      return (o = n.call(this, r, e, i) || this).g = !0, o.F = o.Y, o.C = -1, o.p = t(o.t, o.i, o.C), o.R = C, o.B = function (n) {\n        return n.slice();\n      }, o.L = T, o.K = F, o.m = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], o.S = 512, o.U = 160, o.T = !1, u.hmacKey && o.k(a(\"hmacKey\", u.hmacKey, o.C)), o;\n    }\n    return v(r, n), r;\n  }(h);\n  function B(n) {\n    return \"SHA-224\" == n ? o.slice() : u.slice();\n  }\n  function L(n, r) {\n    var t,\n      e,\n      o,\n      u,\n      f,\n      w,\n      s,\n      a,\n      h,\n      c,\n      v,\n      A,\n      b = [];\n    for (t = r[0], e = r[1], o = r[2], u = r[3], f = r[4], w = r[5], s = r[6], a = r[7], v = 0; v < 64; v += 1) b[v] = v < 16 ? n[v] : m(E(A = b[v - 2], 17) ^ E(A, 19) ^ l(A, 10), b[v - 7], R(b[v - 15]), b[v - 16]), h = y(a, U(f), H(f, w, s), i[v], b[v]), c = p(S(t), d(t, e, o)), a = s, s = w, w = f, f = p(u, h), u = o, o = e, e = t, t = p(h, c);\n    return r[0] = p(t, r[0]), r[1] = p(e, r[1]), r[2] = p(o, r[2]), r[3] = p(u, r[3]), r[4] = p(f, r[4]), r[5] = p(w, r[5]), r[6] = p(s, r[6]), r[7] = p(a, r[7]), r;\n  }\n  var g = function (n) {\n      function r(r, e, i) {\n        var o = this;\n        if (\"SHA-224\" !== r && \"SHA-256\" !== r) throw new Error(f);\n        var u = i || {};\n        return (o = n.call(this, r, e, i) || this).F = o.Y, o.g = !0, o.C = -1, o.p = t(o.t, o.i, o.C), o.R = L, o.B = function (n) {\n          return n.slice();\n        }, o.L = B, o.K = function (n, t, e, i) {\n          return function (n, r, t, e, i) {\n            for (var o, u = 15 + (r + 65 >>> 9 << 4), f = r + t; n.length <= u;) n.push(0);\n            for (n[r >>> 5] |= 128 << 24 - r % 32, n[u] = 4294967295 & f, n[u - 1] = f / 4294967296 | 0, o = 0; o < n.length; o += 16) e = L(n.slice(o, o + 16), e);\n            return \"SHA-224\" === i ? [e[0], e[1], e[2], e[3], e[4], e[5], e[6]] : e;\n          }(n, t, e, i, r);\n        }, o.m = B(r), o.S = 512, o.U = \"SHA-224\" === r ? 224 : 256, o.T = !1, u.hmacKey && o.k(a(\"hmacKey\", u.hmacKey, o.C)), o;\n      }\n      return v(r, n), r;\n    }(h),\n    k = function (n, r) {\n      this.N = n, this.I = r;\n    };\n  function Y(n, r) {\n    var t;\n    return r > 32 ? (t = 64 - r, new k(n.I << r | n.N >>> t, n.N << r | n.I >>> t)) : 0 !== r ? (t = 32 - r, new k(n.N << r | n.I >>> t, n.I << r | n.N >>> t)) : n;\n  }\n  function N(n, r) {\n    var t;\n    return r < 32 ? (t = 32 - r, new k(n.N >>> r | n.I << t, n.I >>> r | n.N << t)) : (t = 64 - r, new k(n.I >>> r | n.N << t, n.N >>> r | n.I << t));\n  }\n  function I(n, r) {\n    return new k(n.N >>> r, n.I >>> r | n.N << 32 - r);\n  }\n  function M(n, r, t) {\n    return new k(n.N & r.N ^ ~n.N & t.N, n.I & r.I ^ ~n.I & t.I);\n  }\n  function X(n, r, t) {\n    return new k(n.N & r.N ^ n.N & t.N ^ r.N & t.N, n.I & r.I ^ n.I & t.I ^ r.I & t.I);\n  }\n  function z(n) {\n    var r = N(n, 28),\n      t = N(n, 34),\n      e = N(n, 39);\n    return new k(r.N ^ t.N ^ e.N, r.I ^ t.I ^ e.I);\n  }\n  function O(n, r) {\n    var t, e;\n    t = (65535 & n.I) + (65535 & r.I);\n    var i = (65535 & (e = (n.I >>> 16) + (r.I >>> 16) + (t >>> 16))) << 16 | 65535 & t;\n    return t = (65535 & n.N) + (65535 & r.N) + (e >>> 16), e = (n.N >>> 16) + (r.N >>> 16) + (t >>> 16), new k((65535 & e) << 16 | 65535 & t, i);\n  }\n  function j(n, r, t, e) {\n    var i, o;\n    i = (65535 & n.I) + (65535 & r.I) + (65535 & t.I) + (65535 & e.I);\n    var u = (65535 & (o = (n.I >>> 16) + (r.I >>> 16) + (t.I >>> 16) + (e.I >>> 16) + (i >>> 16))) << 16 | 65535 & i;\n    return i = (65535 & n.N) + (65535 & r.N) + (65535 & t.N) + (65535 & e.N) + (o >>> 16), o = (n.N >>> 16) + (r.N >>> 16) + (t.N >>> 16) + (e.N >>> 16) + (i >>> 16), new k((65535 & o) << 16 | 65535 & i, u);\n  }\n  function _(n, r, t, e, i) {\n    var o, u;\n    o = (65535 & n.I) + (65535 & r.I) + (65535 & t.I) + (65535 & e.I) + (65535 & i.I);\n    var f = (65535 & (u = (n.I >>> 16) + (r.I >>> 16) + (t.I >>> 16) + (e.I >>> 16) + (i.I >>> 16) + (o >>> 16))) << 16 | 65535 & o;\n    return o = (65535 & n.N) + (65535 & r.N) + (65535 & t.N) + (65535 & e.N) + (65535 & i.N) + (u >>> 16), u = (n.N >>> 16) + (r.N >>> 16) + (t.N >>> 16) + (e.N >>> 16) + (i.N >>> 16) + (o >>> 16), new k((65535 & u) << 16 | 65535 & o, f);\n  }\n  function P(n, r) {\n    return new k(n.N ^ r.N, n.I ^ r.I);\n  }\n  function x(n) {\n    var r = N(n, 1),\n      t = N(n, 8),\n      e = I(n, 7);\n    return new k(r.N ^ t.N ^ e.N, r.I ^ t.I ^ e.I);\n  }\n  function V(n) {\n    var r = N(n, 14),\n      t = N(n, 18),\n      e = N(n, 41);\n    return new k(r.N ^ t.N ^ e.N, r.I ^ t.I ^ e.I);\n  }\n  var Z = [new k(i[0], 3609767458), new k(i[1], 602891725), new k(i[2], 3964484399), new k(i[3], 2173295548), new k(i[4], 4081628472), new k(i[5], 3053834265), new k(i[6], 2937671579), new k(i[7], 3664609560), new k(i[8], 2734883394), new k(i[9], 1164996542), new k(i[10], 1323610764), new k(i[11], 3590304994), new k(i[12], 4068182383), new k(i[13], 991336113), new k(i[14], 633803317), new k(i[15], 3479774868), new k(i[16], 2666613458), new k(i[17], 944711139), new k(i[18], 2341262773), new k(i[19], 2007800933), new k(i[20], 1495990901), new k(i[21], 1856431235), new k(i[22], 3175218132), new k(i[23], 2198950837), new k(i[24], 3999719339), new k(i[25], 766784016), new k(i[26], 2566594879), new k(i[27], 3203337956), new k(i[28], 1034457026), new k(i[29], 2466948901), new k(i[30], 3758326383), new k(i[31], 168717936), new k(i[32], 1188179964), new k(i[33], 1546045734), new k(i[34], 1522805485), new k(i[35], 2643833823), new k(i[36], 2343527390), new k(i[37], 1014477480), new k(i[38], 1206759142), new k(i[39], 344077627), new k(i[40], 1290863460), new k(i[41], 3158454273), new k(i[42], 3505952657), new k(i[43], 106217008), new k(i[44], 3606008344), new k(i[45], 1432725776), new k(i[46], 1467031594), new k(i[47], 851169720), new k(i[48], 3100823752), new k(i[49], 1363258195), new k(i[50], 3750685593), new k(i[51], 3785050280), new k(i[52], 3318307427), new k(i[53], 3812723403), new k(i[54], 2003034995), new k(i[55], 3602036899), new k(i[56], 1575990012), new k(i[57], 1125592928), new k(i[58], 2716904306), new k(i[59], 442776044), new k(i[60], 593698344), new k(i[61], 3733110249), new k(i[62], 2999351573), new k(i[63], 3815920427), new k(3391569614, 3928383900), new k(3515267271, 566280711), new k(3940187606, 3454069534), new k(4118630271, 4000239992), new k(116418474, 1914138554), new k(174292421, 2731055270), new k(289380356, 3203993006), new k(460393269, 320620315), new k(685471733, 587496836), new k(852142971, 1086792851), new k(1017036298, 365543100), new k(1126000580, 2618297676), new k(1288033470, 3409855158), new k(1501505948, 4234509866), new k(1607167915, 987167468), new k(1816402316, 1246189591)];\n  function q(n) {\n    return \"SHA-384\" === n ? [new k(3418070365, o[0]), new k(1654270250, o[1]), new k(2438529370, o[2]), new k(355462360, o[3]), new k(1731405415, o[4]), new k(41048885895, o[5]), new k(3675008525, o[6]), new k(1203062813, o[7])] : [new k(u[0], 4089235720), new k(u[1], 2227873595), new k(u[2], 4271175723), new k(u[3], 1595750129), new k(u[4], 2917565137), new k(u[5], 725511199), new k(u[6], 4215389547), new k(u[7], 327033209)];\n  }\n  function D(n, r) {\n    var t,\n      e,\n      i,\n      o,\n      u,\n      f,\n      w,\n      s,\n      a,\n      h,\n      c,\n      v,\n      A,\n      E,\n      l,\n      b,\n      H = [];\n    for (t = r[0], e = r[1], i = r[2], o = r[3], u = r[4], f = r[5], w = r[6], s = r[7], c = 0; c < 80; c += 1) c < 16 ? (v = 2 * c, H[c] = new k(n[v], n[v + 1])) : H[c] = j((A = H[c - 2], E = void 0, l = void 0, b = void 0, E = N(A, 19), l = N(A, 61), b = I(A, 6), new k(E.N ^ l.N ^ b.N, E.I ^ l.I ^ b.I)), H[c - 7], x(H[c - 15]), H[c - 16]), a = _(s, V(u), M(u, f, w), Z[c], H[c]), h = O(z(t), X(t, e, i)), s = w, w = f, f = u, u = O(o, a), o = i, i = e, e = t, t = O(a, h);\n    return r[0] = O(t, r[0]), r[1] = O(e, r[1]), r[2] = O(i, r[2]), r[3] = O(o, r[3]), r[4] = O(u, r[4]), r[5] = O(f, r[5]), r[6] = O(w, r[6]), r[7] = O(s, r[7]), r;\n  }\n  var G = function (n) {\n      function r(r, e, i) {\n        var o = this;\n        if (\"SHA-384\" !== r && \"SHA-512\" !== r) throw new Error(f);\n        var u = i || {};\n        return (o = n.call(this, r, e, i) || this).F = o.Y, o.g = !0, o.C = -1, o.p = t(o.t, o.i, o.C), o.R = D, o.B = function (n) {\n          return n.slice();\n        }, o.L = q, o.K = function (n, t, e, i) {\n          return function (n, r, t, e, i) {\n            for (var o, u = 31 + (r + 129 >>> 10 << 5), f = r + t; n.length <= u;) n.push(0);\n            for (n[r >>> 5] |= 128 << 24 - r % 32, n[u] = 4294967295 & f, n[u - 1] = f / 4294967296 | 0, o = 0; o < n.length; o += 32) e = D(n.slice(o, o + 32), e);\n            return \"SHA-384\" === i ? [(e = e)[0].N, e[0].I, e[1].N, e[1].I, e[2].N, e[2].I, e[3].N, e[3].I, e[4].N, e[4].I, e[5].N, e[5].I] : [e[0].N, e[0].I, e[1].N, e[1].I, e[2].N, e[2].I, e[3].N, e[3].I, e[4].N, e[4].I, e[5].N, e[5].I, e[6].N, e[6].I, e[7].N, e[7].I];\n          }(n, t, e, i, r);\n        }, o.m = q(r), o.S = 1024, o.U = \"SHA-384\" === r ? 384 : 512, o.T = !1, u.hmacKey && o.k(a(\"hmacKey\", u.hmacKey, o.C)), o;\n      }\n      return v(r, n), r;\n    }(h),\n    J = [new k(0, 1), new k(0, 32898), new k(2147483648, 32906), new k(2147483648, 2147516416), new k(0, 32907), new k(0, 2147483649), new k(2147483648, 2147516545), new k(2147483648, 32777), new k(0, 138), new k(0, 136), new k(0, 2147516425), new k(0, 2147483658), new k(0, 2147516555), new k(2147483648, 139), new k(2147483648, 32905), new k(2147483648, 32771), new k(2147483648, 32770), new k(2147483648, 128), new k(0, 32778), new k(2147483648, 2147483658), new k(2147483648, 2147516545), new k(2147483648, 32896), new k(0, 2147483649), new k(2147483648, 2147516424)],\n    Q = [[0, 36, 3, 41, 18], [1, 44, 10, 45, 2], [62, 6, 43, 15, 61], [28, 55, 25, 21, 56], [27, 20, 39, 8, 14]];\n  function W(n) {\n    var r,\n      t = [];\n    for (r = 0; r < 5; r += 1) t[r] = [new k(0, 0), new k(0, 0), new k(0, 0), new k(0, 0), new k(0, 0)];\n    return t;\n  }\n  function $(n) {\n    var r,\n      t = [];\n    for (r = 0; r < 5; r += 1) t[r] = n[r].slice();\n    return t;\n  }\n  function nn(n, r) {\n    var t,\n      e,\n      i,\n      o,\n      u,\n      f,\n      w,\n      s,\n      a,\n      h = [],\n      c = [];\n    if (null !== n) for (e = 0; e < n.length; e += 2) r[(e >>> 1) % 5][(e >>> 1) / 5 | 0] = P(r[(e >>> 1) % 5][(e >>> 1) / 5 | 0], new k(n[e + 1], n[e]));\n    for (t = 0; t < 24; t += 1) {\n      for (o = W(), e = 0; e < 5; e += 1) h[e] = (u = r[e][0], f = r[e][1], w = r[e][2], s = r[e][3], a = r[e][4], new k(u.N ^ f.N ^ w.N ^ s.N ^ a.N, u.I ^ f.I ^ w.I ^ s.I ^ a.I));\n      for (e = 0; e < 5; e += 1) c[e] = P(h[(e + 4) % 5], Y(h[(e + 1) % 5], 1));\n      for (e = 0; e < 5; e += 1) for (i = 0; i < 5; i += 1) r[e][i] = P(r[e][i], c[e]);\n      for (e = 0; e < 5; e += 1) for (i = 0; i < 5; i += 1) o[i][(2 * e + 3 * i) % 5] = Y(r[e][i], Q[e][i]);\n      for (e = 0; e < 5; e += 1) for (i = 0; i < 5; i += 1) r[e][i] = P(o[e][i], new k(~o[(e + 1) % 5][i].N & o[(e + 2) % 5][i].N, ~o[(e + 1) % 5][i].I & o[(e + 2) % 5][i].I));\n      r[0][0] = P(r[0][0], J[t]);\n    }\n    return r;\n  }\n  function rn(n) {\n    var r,\n      t,\n      e = 0,\n      i = [0, 0],\n      o = [4294967295 & n, n / 4294967296 & 2097151];\n    for (r = 6; r >= 0; r--) 0 === (t = o[r >> 2] >>> 8 * r & 255) && 0 === e || (i[e + 1 >> 2] |= t << 8 * (e + 1), e += 1);\n    return e = 0 !== e ? e : 1, i[0] |= e, {\n      value: e + 1 > 4 ? i : [i[0]],\n      binLen: 8 + 8 * e\n    };\n  }\n  function tn(n) {\n    return w(rn(n.binLen), n);\n  }\n  function en(n, r) {\n    var t,\n      e = rn(r),\n      i = r >>> 2,\n      o = (i - (e = w(e, n)).value.length % i) % i;\n    for (t = 0; t < o; t++) e.value.push(0);\n    return e.value;\n  }\n  var on = function (n) {\n    function r(r, e, i) {\n      var o = this,\n        u = 6,\n        w = 0,\n        s = i || {};\n      if (1 !== (o = n.call(this, r, e, i) || this).numRounds) {\n        if (s.kmacKey || s.hmacKey) throw new Error(\"Cannot set numRounds with MAC\");\n        if (\"CSHAKE128\" === o.o || \"CSHAKE256\" === o.o) throw new Error(\"Cannot set numRounds for CSHAKE variants\");\n      }\n      switch (o.C = 1, o.p = t(o.t, o.i, o.C), o.R = nn, o.B = $, o.L = W, o.m = W(), o.T = !1, r) {\n        case \"SHA3-224\":\n          o.S = w = 1152, o.U = 224, o.g = !0, o.F = o.Y;\n          break;\n        case \"SHA3-256\":\n          o.S = w = 1088, o.U = 256, o.g = !0, o.F = o.Y;\n          break;\n        case \"SHA3-384\":\n          o.S = w = 832, o.U = 384, o.g = !0, o.F = o.Y;\n          break;\n        case \"SHA3-512\":\n          o.S = w = 576, o.U = 512, o.g = !0, o.F = o.Y;\n          break;\n        case \"SHAKE128\":\n          u = 31, o.S = w = 1344, o.U = -1, o.T = !0, o.g = !1, o.F = null;\n          break;\n        case \"SHAKE256\":\n          u = 31, o.S = w = 1088, o.U = -1, o.T = !0, o.g = !1, o.F = null;\n          break;\n        case \"KMAC128\":\n          u = 4, o.S = w = 1344, o.M(i), o.U = -1, o.T = !0, o.g = !1, o.F = o.X;\n          break;\n        case \"KMAC256\":\n          u = 4, o.S = w = 1088, o.M(i), o.U = -1, o.T = !0, o.g = !1, o.F = o.X;\n          break;\n        case \"CSHAKE128\":\n          o.S = w = 1344, u = o.O(i), o.U = -1, o.T = !0, o.g = !1, o.F = null;\n          break;\n        case \"CSHAKE256\":\n          o.S = w = 1088, u = o.O(i), o.U = -1, o.T = !0, o.g = !1, o.F = null;\n          break;\n        default:\n          throw new Error(f);\n      }\n      return o.K = function (n, r, t, e, i) {\n        return function (n, r, t, e, i, o, u) {\n          var f,\n            w,\n            s = 0,\n            a = [],\n            h = i >>> 5,\n            c = r >>> 5;\n          for (f = 0; f < c && r >= i; f += h) e = nn(n.slice(f, f + h), e), r -= i;\n          for (n = n.slice(f), r %= i; n.length < h;) n.push(0);\n          for (n[(f = r >>> 3) >> 2] ^= o << f % 4 * 8, n[h - 1] ^= 2147483648, e = nn(n, e); 32 * a.length < u && (w = e[s % 5][s / 5 | 0], a.push(w.I), !(32 * a.length >= u));) a.push(w.N), 0 == 64 * (s += 1) % i && (nn(null, e), s = 0);\n          return a;\n        }(n, r, 0, e, w, u, i);\n      }, s.hmacKey && o.k(a(\"hmacKey\", s.hmacKey, o.C)), o;\n    }\n    return v(r, n), r.prototype.O = function (n, r) {\n      var t = function (n) {\n        var r = n || {};\n        return {\n          funcName: a(\"funcName\", r.funcName, 1, {\n            value: [],\n            binLen: 0\n          }),\n          customization: a(\"Customization\", r.customization, 1, {\n            value: [],\n            binLen: 0\n          })\n        };\n      }(n || {});\n      r && (t.funcName = r);\n      var e = w(tn(t.funcName), tn(t.customization));\n      if (0 !== t.customization.binLen || 0 !== t.funcName.binLen) {\n        for (var i = en(e, this.S >>> 3), o = 0; o < i.length; o += this.S >>> 5) this.m = this.R(i.slice(o, o + (this.S >>> 5)), this.m), this.v += this.S;\n        return 4;\n      }\n      return 31;\n    }, r.prototype.M = function (n) {\n      var r = function (n) {\n        var r = n || {};\n        return {\n          kmacKey: a(\"kmacKey\", r.kmacKey, 1),\n          funcName: {\n            value: [1128353099],\n            binLen: 32\n          },\n          customization: a(\"Customization\", r.customization, 1, {\n            value: [],\n            binLen: 0\n          })\n        };\n      }(n || {});\n      this.O(n, r.funcName);\n      for (var t = en(tn(r.kmacKey), this.S >>> 3), e = 0; e < t.length; e += this.S >>> 5) this.m = this.R(t.slice(e, e + (this.S >>> 5)), this.m), this.v += this.S;\n      this.A = !0;\n    }, r.prototype.X = function (n) {\n      var r = w({\n        value: this.u.slice(),\n        binLen: this.s\n      }, function (n) {\n        var r,\n          t,\n          e = 0,\n          i = [0, 0],\n          o = [4294967295 & n, n / 4294967296 & 2097151];\n        for (r = 6; r >= 0; r--) 0 == (t = o[r >> 2] >>> 8 * r & 255) && 0 === e || (i[e >> 2] |= t << 8 * e, e += 1);\n        return i[(e = 0 !== e ? e : 1) >> 2] |= e << 8 * e, {\n          value: e + 1 > 4 ? i : [i[0]],\n          binLen: 8 + 8 * e\n        };\n      }(n.outputLen));\n      return this.K(r.value, r.binLen, this.v, this.B(this.m), n.outputLen);\n    }, r;\n  }(h);\n  return function () {\n    function n(n, r, t) {\n      if (\"SHA-1\" == n) this.j = new K(n, r, t);else if (\"SHA-224\" == n || \"SHA-256\" == n) this.j = new g(n, r, t);else if (\"SHA-384\" == n || \"SHA-512\" == n) this.j = new G(n, r, t);else {\n        if (\"SHA3-224\" != n && \"SHA3-256\" != n && \"SHA3-384\" != n && \"SHA3-512\" != n && \"SHAKE128\" != n && \"SHAKE256\" != n && \"CSHAKE128\" != n && \"CSHAKE256\" != n && \"KMAC128\" != n && \"KMAC256\" != n) throw new Error(f);\n        this.j = new on(n, r, t);\n      }\n    }\n    return n.prototype.update = function (n) {\n      this.j.update(n);\n    }, n.prototype.getHash = function (n, r) {\n      return this.j.getHash(n, r);\n    }, n.prototype.setHMACKey = function (n, r, t) {\n      this.j.setHMACKey(n, r, t);\n    }, n.prototype.getHMAC = function (n, r) {\n      return this.j.getHMAC(n, r);\n    }, n;\n  }();\n});","map":{"version":3,"names":["n","r","t","e","i","o","u","f","w","s","length","push","value","binLen","Error","a","parseInt","substr","isNaN","h","c","v","A","E","charCodeAt","indexOf","search","replace","charAt","ArrayBuffer","Uint8Array","outputUpper","toUpperCase","b64Pad","String","fromCharCode","pop","concat","outputLen","shakeLen","format","encoding","numRounds","l","H","prototype","update","S","p","m","R","slice","getHash","U","T","C","F","K","B","L","setHMACKey","g","k","getHMAC","Y","extendStatics","Object","setPrototypeOf","__proto__","Array","hasOwnProperty","call","constructor","create","b","d","y","hmacKey","jsSHABase","N","I","M","X","z","O","j","_","P","x","V","Z","q","D","G","J","Q","W","$","nn","rn","tn","en","on","kmacKey","funcName","customization"],"sources":["C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\converters.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\common.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\node_modules\\tslib\\tslib.es6.js","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\primitives_32.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\sha1.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\sha256.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\primitives_64.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\sha512.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\sha3.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\jssha\\src\\sha.ts"],"sourcesContent":["import { packedValue, EncodingType, FormatType } from \"./custom_types\";\n/**\n * Return type for all the *2packed functions\n */\nconst b64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nconst arraybuffer_error = \"ARRAYBUFFER not supported by this environment\";\nconst uint8array_error = \"UINT8ARRAY not supported by this environment\";\n\n/**\n * Convert a string to an array of words.\n *\n * There is a known bug with an odd number of existing bytes and using a UTF-16 encoding.  However, this function is\n * used such that the existing bytes are always a result of a previous UTF-16 str2packed call and therefore there \n * should never be an odd number of existing bytes.\n\n * @param str Unicode string to be converted to binary representation.\n * @param utfType The Unicode type to use to encode the source string.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked`.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction str2packed(\n  str: string,\n  utfType: EncodingType,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let codePnt,\n    codePntArr,\n    byteCnt = 0,\n    i,\n    j,\n    intOffset,\n    byteOffset,\n    shiftModifier,\n    transposeBytes;\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3;\n\n  if (\"UTF8\" === utfType) {\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n    for (i = 0; i < str.length; i += 1) {\n      codePnt = str.charCodeAt(i);\n      codePntArr = [];\n\n      if (0x80 > codePnt) {\n        codePntArr.push(codePnt);\n      } else if (0x800 > codePnt) {\n        codePntArr.push(0xc0 | (codePnt >>> 6));\n        codePntArr.push(0x80 | (codePnt & 0x3f));\n      } else if (0xd800 > codePnt || 0xe000 <= codePnt) {\n        codePntArr.push(0xe0 | (codePnt >>> 12), 0x80 | ((codePnt >>> 6) & 0x3f), 0x80 | (codePnt & 0x3f));\n      } else {\n        i += 1;\n        codePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n        codePntArr.push(\n          0xf0 | (codePnt >>> 18),\n          0x80 | ((codePnt >>> 12) & 0x3f),\n          0x80 | ((codePnt >>> 6) & 0x3f),\n          0x80 | (codePnt & 0x3f)\n        );\n      }\n\n      for (j = 0; j < codePntArr.length; j += 1) {\n        byteOffset = byteCnt + existingByteLen;\n        intOffset = byteOffset >>> 2;\n        while (packed.length <= intOffset) {\n          packed.push(0);\n        }\n        /* Known bug kicks in here */\n        packed[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n        byteCnt += 1;\n      }\n    }\n  } else {\n    /* UTF16BE or UTF16LE */\n    shiftModifier = bigEndianMod === -1 ? 2 : 0;\n    /* Internally strings are UTF-16BE so transpose bytes under two conditions:\n     * need LE and not switching endianness due to SHA-3\n     * need BE and switching endianness due to SHA-3 */\n    transposeBytes = (\"UTF16LE\" === utfType && bigEndianMod !== 1) || (\"UTF16LE\" !== utfType && bigEndianMod === 1);\n    for (i = 0; i < str.length; i += 1) {\n      codePnt = str.charCodeAt(i);\n      if (transposeBytes === true) {\n        j = codePnt & 0xff;\n        codePnt = (j << 8) | (codePnt >>> 8);\n      }\n\n      byteOffset = byteCnt + existingByteLen;\n      intOffset = byteOffset >>> 2;\n      while (packed.length <= intOffset) {\n        packed.push(0);\n      }\n      packed[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n      byteCnt += 2;\n    }\n  }\n  return { value: packed, binLen: byteCnt * 8 + existingPackedLen };\n}\n\n/**\n * Convert a hex string to an array of words.\n *\n * @param str Hexadecimal string to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction hex2packed(\n  str: string,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let i, num, intOffset, byteOffset;\n\n  if (0 !== str.length % 2) {\n    throw new Error(\"String of HEX type must be in byte increments\");\n  }\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < str.length; i += 2) {\n    num = parseInt(str.substr(i, 2), 16);\n    if (!isNaN(num)) {\n      byteOffset = (i >>> 1) + existingByteLen;\n      intOffset = byteOffset >>> 2;\n      while (packed.length <= intOffset) {\n        packed.push(0);\n      }\n      packed[intOffset] |= num << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n    } else {\n      throw new Error(\"String of HEX type contains invalid characters\");\n    }\n  }\n\n  return { value: packed, binLen: str.length * 4 + existingPackedLen };\n}\n\n/**\n * Convert a string of raw bytes to an array of words.\n *\n * @param str String of raw bytes to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction bytes2packed(\n  str: string,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let codePnt, i, intOffset, byteOffset;\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < str.length; i += 1) {\n    codePnt = str.charCodeAt(i);\n\n    byteOffset = i + existingByteLen;\n    intOffset = byteOffset >>> 2;\n    if (packed.length <= intOffset) {\n      packed.push(0);\n    }\n    packed[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n  }\n\n  return { value: packed, binLen: str.length * 8 + existingPackedLen };\n}\n\n/**\n * Convert a base-64 string to an array of words.\n *\n * @param str Base64-encoded string to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction b642packed(\n  str: string,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let byteCnt = 0,\n    index,\n    i,\n    j,\n    tmpInt,\n    strPart,\n    intOffset,\n    byteOffset;\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0,\n    firstEqual = str.indexOf(\"=\");\n\n  if (-1 === str.search(/^[a-zA-Z0-9=+/]+$/)) {\n    throw new Error(\"Invalid character in base-64 string\");\n  }\n\n  str = str.replace(/=/g, \"\");\n  if (-1 !== firstEqual && firstEqual < str.length) {\n    throw new Error(\"Invalid '=' found in base-64 string\");\n  }\n\n  for (i = 0; i < str.length; i += 4) {\n    strPart = str.substr(i, 4);\n    tmpInt = 0;\n\n    for (j = 0; j < strPart.length; j += 1) {\n      index = b64Tab.indexOf(strPart.charAt(j));\n      tmpInt |= index << (18 - 6 * j);\n    }\n\n    for (j = 0; j < strPart.length - 1; j += 1) {\n      byteOffset = byteCnt + existingByteLen;\n      intOffset = byteOffset >>> 2;\n      while (packed.length <= intOffset) {\n        packed.push(0);\n      }\n      packed[intOffset] |=\n        ((tmpInt >>> (16 - j * 8)) & 0xff) << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n      byteCnt += 1;\n    }\n  }\n\n  return { value: packed, binLen: byteCnt * 8 + existingPackedLen };\n}\n\n/**\n * Convert an Uint8Array to an array of words.\n *\n * @param arr Uint8Array to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction uint8array2packed(\n  arr: Uint8Array,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let i, intOffset, byteOffset;\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < arr.length; i += 1) {\n    byteOffset = i + existingByteLen;\n    intOffset = byteOffset >>> 2;\n    if (packed.length <= intOffset) {\n      packed.push(0);\n    }\n    packed[intOffset] |= arr[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n  }\n\n  return { value: packed, binLen: arr.length * 8 + existingPackedLen };\n}\n\n/**\n * Convert an ArrayBuffer to an array of words\n *\n * @param arr ArrayBuffer to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction arraybuffer2packed(\n  arr: ArrayBuffer,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  return uint8array2packed(new Uint8Array(arr), existingPacked, existingPackedLen, bigEndianMod);\n}\n\n/**\n * Function that takes an input format and UTF encoding and returns the appropriate function used to convert the input.\n *\n * @param format The format of the input to be converted\n * @param utfType The string encoding to use for TEXT inputs.\n * @param bigEndianMod Modifier for whether hash function is big or small endian\n * @returns Function that will convert an input to a packed int array.\n */\nexport function getStrConverter(\n  format: FormatType,\n  utfType: EncodingType,\n  bigEndianMod: -1 | 1\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n): (input: any, existingBin?: number[], existingBinLen?: number) => packedValue {\n  /* Validate encoding */\n  switch (utfType) {\n    case \"UTF8\":\n    /* Fallthrough */\n    case \"UTF16BE\":\n    /* Fallthrough */\n    case \"UTF16LE\":\n      /* Fallthrough */\n      break;\n    default:\n      throw new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");\n  }\n\n  /* Map inputFormat to the appropriate converter */\n  switch (format) {\n    case \"HEX\":\n      /**\n       * @param str String of hexadecimal bytes to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (str: string, existingBin?: number[], existingBinLen?: number): packedValue {\n        return hex2packed(str, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"TEXT\":\n      /**\n       * @param str Unicode string to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (str: string, existingBin?: number[], existingBinLen?: number): packedValue {\n        return str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"B64\":\n      /**\n       * @param str Base64-encoded string to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (str: string, existingBin?: number[], existingBinLen?: number): packedValue {\n        return b642packed(str, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"BYTES\":\n      /**\n       * @param str String of raw bytes to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (str: string, existingBin?: number[], existingBinLen?: number): packedValue {\n        return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"ARRAYBUFFER\":\n      try {\n        new ArrayBuffer(0);\n      } catch (ignore) {\n        throw new Error(arraybuffer_error);\n      }\n      /**\n       * @param arr ArrayBuffer to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (arr: ArrayBuffer, existingBin?: number[], existingBinLen?: number): packedValue {\n        return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"UINT8ARRAY\":\n      try {\n        new Uint8Array(0);\n      } catch (ignore) {\n        throw new Error(uint8array_error);\n      }\n      /**\n       * @param arr Uint8Array to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (arr: Uint8Array, existingBin?: number[], existingBinLen?: number): packedValue {\n        return uint8array2packed(arr, existingBin, existingBinLen, bigEndianMod);\n      };\n    default:\n      throw new Error(\"format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY\");\n  }\n}\n\n/**\n * Convert an array of words to a hexadecimal string.\n *\n * toString() won't work here because it removes preceding zeros (e.g. 0x00000001.toString === \"1\" rather than\n * \"00000001\" and 0.toString(16) === \"0\" rather than \"00\").\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @param formatOpts Hashmap containing validated output formatting options.\n * @returns Hexadecimal representation of `packed`.\n */\nexport function packed2hex(\n  packed: number[],\n  outputLength: number,\n  bigEndianMod: -1 | 1,\n  formatOpts: { outputUpper: boolean; b64Pad: string }\n): string {\n  const hex_tab = \"0123456789abcdef\";\n  let str = \"\",\n    i,\n    srcByte;\n\n  const length = outputLength / 8,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < length; i += 1) {\n    /* The below is more than a byte but it gets taken care of later */\n    srcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));\n    str += hex_tab.charAt((srcByte >>> 4) & 0xf) + hex_tab.charAt(srcByte & 0xf);\n  }\n\n  return formatOpts[\"outputUpper\"] ? str.toUpperCase() : str;\n}\n\n/**\n * Convert an array of words to a base-64 string.\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @param formatOpts Hashmap containing validated output formatting options.\n * @returns Base64-encoded representation of `packed`.\n */\nexport function packed2b64(\n  packed: number[],\n  outputLength: number,\n  bigEndianMod: -1 | 1,\n  formatOpts: { outputUpper: boolean; b64Pad: string }\n): string {\n  let str = \"\",\n    i,\n    j,\n    triplet,\n    int1,\n    int2;\n\n  const length = outputLength / 8,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < length; i += 3) {\n    int1 = i + 1 < length ? packed[(i + 1) >>> 2] : 0;\n    int2 = i + 2 < length ? packed[(i + 2) >>> 2] : 0;\n    triplet =\n      (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xff) << 16) |\n      (((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xff) << 8) |\n      ((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xff);\n    for (j = 0; j < 4; j += 1) {\n      if (i * 8 + j * 6 <= outputLength) {\n        str += b64Tab.charAt((triplet >>> (6 * (3 - j))) & 0x3f);\n      } else {\n        str += formatOpts[\"b64Pad\"];\n      }\n    }\n  }\n  return str;\n}\n\n/**\n * Convert an array of words to raw bytes string.\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Raw bytes representation of `packed`.\n */\nexport function packed2bytes(packed: number[], outputLength: number, bigEndianMod: -1 | 1): string {\n  let str = \"\",\n    i,\n    srcByte;\n\n  const length = outputLength / 8,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < length; i += 1) {\n    srcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xff;\n    str += String.fromCharCode(srcByte);\n  }\n\n  return str;\n}\n\n/**\n * Convert an array of words to an ArrayBuffer.\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns An ArrayBuffer containing bytes from `packed.\n */\nexport function packed2arraybuffer(packed: number[], outputLength: number, bigEndianMod: -1 | 1): ArrayBuffer {\n  let i;\n  const length = outputLength / 8,\n    retVal = new ArrayBuffer(length),\n    arrView = new Uint8Array(retVal),\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < length; i += 1) {\n    arrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xff;\n  }\n\n  return retVal;\n}\n\n/**\n * Convert an array of words to an Uint8Array.\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns An Uint8Array containing bytes from `packed.\n */\nexport function packed2uint8array(packed: number[], outputLength: number, bigEndianMod: -1 | 1): Uint8Array {\n  let i;\n  const length = outputLength / 8,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0,\n    retVal = new Uint8Array(length);\n\n  for (i = 0; i < length; i += 1) {\n    retVal[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xff;\n  }\n\n  return retVal;\n}\n\n/**\n * Function that takes an output format and associated parameters and returns a function that converts packed integers\n * to that format.\n *\n * @param format The desired output formatting.\n * @param outputBinLen Output length in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @param outputOptions Hashmap of output formatting options\n * @returns Function that will convert a packed integer array to desired format.\n */\nexport function getOutputConverter(\n  format: \"HEX\" | \"B64\" | \"BYTES\" | \"ARRAYBUFFER\" | \"UINT8ARRAY\",\n  outputBinLen: number,\n  bigEndianMod: -1 | 1,\n  outputOptions: { outputUpper: boolean; b64Pad: string }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n): (binarray: number[]) => any {\n  switch (format) {\n    case \"HEX\":\n      return function (binarray): string {\n        return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);\n      };\n    case \"B64\":\n      return function (binarray): string {\n        return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);\n      };\n    case \"BYTES\":\n      return function (binarray): string {\n        return packed2bytes(binarray, outputBinLen, bigEndianMod);\n      };\n    case \"ARRAYBUFFER\":\n      try {\n        /* Need to test ArrayBuffer support */\n        new ArrayBuffer(0);\n      } catch (ignore) {\n        throw new Error(arraybuffer_error);\n      }\n      return function (binarray): ArrayBuffer {\n        return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);\n      };\n    case \"UINT8ARRAY\":\n      try {\n        /* Need to test Uint8Array support */\n        new Uint8Array(0);\n      } catch (ignore) {\n        throw new Error(uint8array_error);\n      }\n      return function (binarray): Uint8Array {\n        return packed2uint8array(binarray, outputBinLen, bigEndianMod);\n      };\n    default:\n      throw new Error(\"format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY\");\n  }\n}\n","import { getStrConverter, getOutputConverter } from \"./converters\";\n\nimport {\n  FormatType,\n  EncodingType,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n  packedValue,\n  GenericInputType,\n} from \"./custom_types\";\n\nexport const TWO_PWR_32 = 4294967296;\n\n/* Constant used in SHA-2 families */\nexport const K_sha2 = [\n  0x428a2f98,\n  0x71374491,\n  0xb5c0fbcf,\n  0xe9b5dba5,\n  0x3956c25b,\n  0x59f111f1,\n  0x923f82a4,\n  0xab1c5ed5,\n  0xd807aa98,\n  0x12835b01,\n  0x243185be,\n  0x550c7dc3,\n  0x72be5d74,\n  0x80deb1fe,\n  0x9bdc06a7,\n  0xc19bf174,\n  0xe49b69c1,\n  0xefbe4786,\n  0x0fc19dc6,\n  0x240ca1cc,\n  0x2de92c6f,\n  0x4a7484aa,\n  0x5cb0a9dc,\n  0x76f988da,\n  0x983e5152,\n  0xa831c66d,\n  0xb00327c8,\n  0xbf597fc7,\n  0xc6e00bf3,\n  0xd5a79147,\n  0x06ca6351,\n  0x14292967,\n  0x27b70a85,\n  0x2e1b2138,\n  0x4d2c6dfc,\n  0x53380d13,\n  0x650a7354,\n  0x766a0abb,\n  0x81c2c92e,\n  0x92722c85,\n  0xa2bfe8a1,\n  0xa81a664b,\n  0xc24b8b70,\n  0xc76c51a3,\n  0xd192e819,\n  0xd6990624,\n  0xf40e3585,\n  0x106aa070,\n  0x19a4c116,\n  0x1e376c08,\n  0x2748774c,\n  0x34b0bcb5,\n  0x391c0cb3,\n  0x4ed8aa4a,\n  0x5b9cca4f,\n  0x682e6ff3,\n  0x748f82ee,\n  0x78a5636f,\n  0x84c87814,\n  0x8cc70208,\n  0x90befffa,\n  0xa4506ceb,\n  0xbef9a3f7,\n  0xc67178f2,\n];\n\n/* Constant used in SHA-2 families */\nexport const H_trunc = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n\n/* Constant used in SHA-2 families */\nexport const H_full = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\nexport const sha_variant_error = \"Chosen SHA variant is not supported\";\nexport const mac_rounds_error = \"Cannot set numRounds with MAC\";\n\n/**\n * Concatenates 2 packed arrays. Clobbers array `a`.\n *\n * @param a First array to concatenate.\n * @param b Second array to concatenate.\n * @returns The concatentation of `a` + `b`.\n */\nexport function packedLEConcat(a: packedValue, b: packedValue): packedValue {\n  let i, arrOffset;\n  const aByteLen = a[\"binLen\"] >>> 3,\n    bByteLen = b[\"binLen\"] >>> 3,\n    leftShiftAmount = aByteLen << 3,\n    rightShiftAmount = (4 - aByteLen) << 3;\n\n  /* If a only contains \"full\" integers, we can just use concat which is so much easier */\n  if (aByteLen % 4 !== 0) {\n    for (i = 0; i < bByteLen; i += 4) {\n      arrOffset = (aByteLen + i) >>> 2;\n      /* Left shift chops off bits over 32-bits */\n      a[\"value\"][arrOffset] |= b[\"value\"][i >>> 2] << leftShiftAmount;\n      a[\"value\"].push(0);\n      a[\"value\"][arrOffset + 1] |= b[\"value\"][i >>> 2] >>> rightShiftAmount;\n    }\n\n    /* Since an unconditional push was performed above, we may have pushed an extra value if it could have been\n       encoded without it.  Check if popping an int off (reducing total length by 4 bytes) is still bigger than the\n       needed size. */\n    if ((a[\"value\"].length << 2) - 4 >= bByteLen + aByteLen) {\n      a[\"value\"].pop();\n    }\n\n    return { value: a[\"value\"], binLen: a[\"binLen\"] + b[\"binLen\"] };\n  } else {\n    return { value: a[\"value\"].concat(b[\"value\"]), binLen: a[\"binLen\"] + b[\"binLen\"] };\n  }\n}\n\n/**\n * Validate hash list containing output formatting options, ensuring presence of every option or adding the default\n * value.\n *\n * @param options Hashmap of output formatting options from user.\n * @returns Validated hashmap containing output formatting options.\n */\nexport function getOutputOpts(options?: {\n  outputUpper?: boolean;\n  b64Pad?: string;\n  shakeLen?: number;\n  outputLen?: number;\n}): { outputUpper: boolean; b64Pad: string; outputLen: number } {\n  const retVal = { outputUpper: false, b64Pad: \"=\", outputLen: -1 },\n    outputOptions: { outputUpper?: boolean; b64Pad?: string; shakeLen?: number; outputLen?: number } = options || {},\n    lenErrstr = \"Output length must be a multiple of 8\";\n\n  retVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;\n\n  if (outputOptions[\"b64Pad\"]) {\n    retVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];\n  }\n\n  if (outputOptions[\"outputLen\"]) {\n    if (outputOptions[\"outputLen\"] % 8 !== 0) {\n      throw new Error(lenErrstr);\n    }\n    retVal[\"outputLen\"] = outputOptions[\"outputLen\"];\n  } else if (outputOptions[\"shakeLen\"]) {\n    if (outputOptions[\"shakeLen\"] % 8 !== 0) {\n      throw new Error(lenErrstr);\n    }\n    retVal[\"outputLen\"] = outputOptions[\"shakeLen\"];\n  }\n\n  if (\"boolean\" !== typeof retVal[\"outputUpper\"]) {\n    throw new Error(\"Invalid outputUpper formatting option\");\n  }\n\n  if (\"string\" !== typeof retVal[\"b64Pad\"]) {\n    throw new Error(\"Invalid b64Pad formatting option\");\n  }\n\n  return retVal;\n}\n\n/**\n * Parses an external constructor object and returns a packed number, if possible.\n *\n * @param key The human-friendly key name to prefix any errors with\n * @param value The input value object to parse\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @param fallback Fallback value if `value` is undefined.  If not present and `value` is undefined, an Error is thrown\n */\nexport function parseInputOption(\n  key: string,\n  value: GenericInputType | undefined,\n  bigEndianMod: -1 | 1,\n  fallback?: packedValue\n): packedValue {\n  const errStr = key + \" must include a value and format\";\n  if (!value) {\n    if (!fallback) {\n      throw new Error(errStr);\n    }\n    return fallback;\n  }\n\n  if (typeof value[\"value\"] === \"undefined\" || !value[\"format\"]) {\n    throw new Error(errStr);\n  }\n\n  return getStrConverter(\n    value[\"format\"],\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore - the value of encoding gets value checked by getStrConverter\n    value[\"encoding\"] || \"UTF8\",\n    bigEndianMod\n  )(value[\"value\"]);\n}\n\nexport abstract class jsSHABase<StateT, VariantT> {\n  /**\n   * @param variant The desired SHA variant.\n   * @param inputFormat The input format to be used in future `update` calls.\n   * @param options Hashmap of extra input options.\n   */\n  /* Needed inputs */\n  protected readonly shaVariant: VariantT;\n  protected readonly inputFormat: FormatType;\n  protected readonly utfType: EncodingType;\n  protected readonly numRounds: number;\n\n  /* State */\n  protected abstract intermediateState: StateT;\n  protected keyWithIPad: number[];\n  protected keyWithOPad: number[];\n  protected remainder: number[];\n  protected remainderLen: number;\n  protected updateCalled: boolean;\n  protected processedLen: number;\n  protected macKeySet: boolean;\n\n  /* Variant specifics */\n  protected abstract readonly variantBlockSize: number;\n  protected abstract readonly bigEndianMod: -1 | 1;\n  protected abstract readonly outputBinLen: number;\n  protected abstract readonly isVariableLen: boolean;\n  protected abstract readonly HMACSupported: boolean;\n\n  /* Functions */\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  protected abstract readonly converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  protected abstract readonly roundFunc: (block: number[], H: StateT) => StateT;\n  protected abstract readonly finalizeFunc: (\n    remainder: number[],\n    remainderBinLen: number,\n    processedBinLen: number,\n    H: StateT,\n    outputLen: number\n  ) => number[];\n  protected abstract readonly stateCloneFunc: (state: StateT) => StateT;\n  protected abstract readonly newStateFunc: (variant: VariantT) => StateT;\n  protected abstract readonly getMAC: ((options: { outputLen: number }) => number[]) | null;\n\n  protected constructor(variant: VariantT, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  protected constructor(variant: VariantT, inputFormat: FormatNoTextType, options?: FixedLengthOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected constructor(variant: any, inputFormat: any, options?: any) {\n    const inputOptions = options || {};\n    this.inputFormat = inputFormat;\n\n    this.utfType = inputOptions[\"encoding\"] || \"UTF8\";\n    this.numRounds = inputOptions[\"numRounds\"] || 1;\n\n    /* eslint-disable-next-line @typescript-eslint/ban-ts-ignore */\n    // @ts-ignore - The spec actually says ToString is called on the first parseInt argument so it's OK to use it here\n    // to check if an arugment is an integer. This cheat would break if it's used to get the value of the argument.\n    if (isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds) {\n      throw new Error(\"numRounds must a integer >= 1\");\n    }\n\n    this.shaVariant = variant;\n    this.remainder = [];\n    this.remainderLen = 0;\n    this.updateCalled = false;\n    this.processedLen = 0;\n    this.macKeySet = false;\n    this.keyWithIPad = [];\n    this.keyWithOPad = [];\n  }\n\n  /**\n   * Hashes as many blocks as possible.  Stores the rest for either a future update or getHash call.\n   *\n   * @param srcString The input to be hashed.\n   */\n  update(srcString: string | ArrayBuffer | Uint8Array): void {\n    let i,\n      updateProcessedLen = 0;\n    const variantBlockIntInc = this.variantBlockSize >>> 5,\n      convertRet = this.converterFunc(srcString, this.remainder, this.remainderLen),\n      chunkBinLen = convertRet[\"binLen\"],\n      chunk = convertRet[\"value\"],\n      chunkIntLen = chunkBinLen >>> 5;\n\n    for (i = 0; i < chunkIntLen; i += variantBlockIntInc) {\n      if (updateProcessedLen + this.variantBlockSize <= chunkBinLen) {\n        this.intermediateState = this.roundFunc(chunk.slice(i, i + variantBlockIntInc), this.intermediateState);\n        updateProcessedLen += this.variantBlockSize;\n      }\n    }\n    this.processedLen += updateProcessedLen;\n    this.remainder = chunk.slice(updateProcessedLen >>> 5);\n    this.remainderLen = chunkBinLen % this.variantBlockSize;\n    this.updateCalled = true;\n  }\n\n  /**\n   * Returns the desired SHA hash of the input fed in via `update` calls.\n   *\n   * @param format The desired output formatting\n   * @param options Hashmap of output formatting options. `outputLen` must be specified for variable length hashes.\n   *   `outputLen` replaces the now deprecated `shakeLen` key.\n   * @returns The hash in the format specified.\n   */\n  getHash(format: \"HEX\", options?: { outputUpper?: boolean; outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"B64\", options?: { b64Pad?: string; outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"BYTES\", options?: { outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"UINT8ARRAY\", options?: { outputLen?: number; shakeLen?: number }): Uint8Array;\n  getHash(format: \"ARRAYBUFFER\", options?: { outputLen?: number; shakeLen?: number }): ArrayBuffer;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getHash(format: any, options?: any): any {\n    let i,\n      finalizedState,\n      outputBinLen = this.outputBinLen;\n\n    const outputOptions = getOutputOpts(options);\n\n    if (this.isVariableLen) {\n      if (outputOptions[\"outputLen\"] === -1) {\n        throw new Error(\"Output length must be specified in options\");\n      }\n      outputBinLen = outputOptions[\"outputLen\"];\n    }\n\n    const formatFunc = getOutputConverter(format, outputBinLen, this.bigEndianMod, outputOptions);\n    if (this.macKeySet && this.getMAC) {\n      return formatFunc(this.getMAC(outputOptions));\n    }\n\n    finalizedState = this.finalizeFunc(\n      this.remainder.slice(),\n      this.remainderLen,\n      this.processedLen,\n      this.stateCloneFunc(this.intermediateState),\n      outputBinLen\n    );\n    for (i = 1; i < this.numRounds; i += 1) {\n      /* Need to mask out bits that should be zero due to output not being a multiple of 32 */\n      if (this.isVariableLen && outputBinLen % 32 !== 0) {\n        finalizedState[finalizedState.length - 1] &= 0x00ffffff >>> (24 - (outputBinLen % 32));\n      }\n      finalizedState = this.finalizeFunc(\n        finalizedState,\n        outputBinLen,\n        0,\n        this.newStateFunc(this.shaVariant),\n        outputBinLen\n      );\n    }\n\n    return formatFunc(finalizedState);\n  }\n\n  /**\n   * Sets the HMAC key for an eventual `getHMAC` call.  Must be called immediately after jsSHA object instantiation.\n   *\n   * @param key The key used to calculate the HMAC\n   * @param inputFormat The format of key.\n   * @param options Hashmap of extra input options.\n   */\n  setHMACKey(key: string, inputFormat: \"TEXT\", options?: { encoding?: EncodingType }): void;\n  setHMACKey(key: string, inputFormat: \"B64\" | \"HEX\" | \"BYTES\"): void;\n  setHMACKey(key: ArrayBuffer, inputFormat: \"ARRAYBUFFER\"): void;\n  setHMACKey(key: Uint8Array, inputFormat: \"UINT8ARRAY\"): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setHMACKey(key: any, inputFormat: any, options?: any): void {\n    if (!this.HMACSupported) {\n      throw new Error(\"Variant does not support HMAC\");\n    }\n\n    if (this.updateCalled) {\n      throw new Error(\"Cannot set MAC key after calling update\");\n    }\n\n    const keyOptions = options || {},\n      keyConverterFunc = getStrConverter(inputFormat, keyOptions[\"encoding\"] || \"UTF8\", this.bigEndianMod);\n\n    this._setHMACKey(keyConverterFunc(key));\n  }\n\n  /**\n   * Internal function that sets the MAC key.\n   *\n   * @param key The packed MAC key to use\n   */\n  protected _setHMACKey(key: packedValue): void {\n    const blockByteSize = this.variantBlockSize >>> 3,\n      lastArrayIndex = blockByteSize / 4 - 1;\n    let i;\n    if (this.numRounds !== 1) {\n      throw new Error(mac_rounds_error);\n    }\n\n    if (this.macKeySet) {\n      throw new Error(\"MAC key already set\");\n    }\n\n    /* Figure out what to do with the key based on its size relative to\n     * the hash's block size */\n    if (blockByteSize < key[\"binLen\"] / 8) {\n      key[\"value\"] = this.finalizeFunc(\n        key[\"value\"],\n        key[\"binLen\"],\n        0,\n        this.newStateFunc(this.shaVariant),\n        this.outputBinLen\n      );\n    }\n    while (key[\"value\"].length <= lastArrayIndex) {\n      key[\"value\"].push(0);\n    }\n    /* Create ipad and opad */\n    for (i = 0; i <= lastArrayIndex; i += 1) {\n      this.keyWithIPad[i] = key[\"value\"][i] ^ 0x36363636;\n      this.keyWithOPad[i] = key[\"value\"][i] ^ 0x5c5c5c5c;\n    }\n\n    this.intermediateState = this.roundFunc(this.keyWithIPad, this.intermediateState);\n    this.processedLen = this.variantBlockSize;\n\n    this.macKeySet = true;\n  }\n\n  /**\n   * Returns the the HMAC in the specified format using the key given by a previous `setHMACKey` call.\n   *\n   * @param format The desired output formatting.\n   * @param options Hashmap of extra outputs options.\n   * @returns The HMAC in the format specified.\n   */\n  getHMAC(format: \"HEX\", options?: { outputUpper?: boolean }): string;\n  getHMAC(format: \"B64\", options?: { b64Pad?: string }): string;\n  getHMAC(format: \"BYTES\"): string;\n  getHMAC(format: \"UINT8ARRAY\"): Uint8Array;\n  getHMAC(format: \"ARRAYBUFFER\"): ArrayBuffer;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getHMAC(format: any, options?: any): any {\n    const outputOptions = getOutputOpts(options),\n      formatFunc = getOutputConverter(format, this.outputBinLen, this.bigEndianMod, outputOptions);\n\n    return formatFunc(this._getHMAC());\n  }\n\n  /**\n   * Internal function that returns the \"raw\" HMAC\n   */\n  protected _getHMAC(): number[] {\n    let finalizedState;\n\n    if (!this.macKeySet) {\n      throw new Error(\"Cannot call getHMAC without first setting MAC key\");\n    }\n\n    const firstHash = this.finalizeFunc(\n      this.remainder.slice(),\n      this.remainderLen,\n      this.processedLen,\n      this.stateCloneFunc(this.intermediateState),\n      this.outputBinLen\n    );\n    finalizedState = this.roundFunc(this.keyWithOPad, this.newStateFunc(this.shaVariant));\n    finalizedState = this.finalizeFunc(\n      firstHash,\n      this.outputBinLen,\n      this.variantBlockSize,\n      finalizedState,\n      this.outputBinLen\n    );\n\n    return finalizedState;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n * Note 1: All the functions in this file guarantee only that the bottom 32-bits of the return value are correct.\n * JavaScript is flakey when it comes to bit operations and a '1' in the highest order bit of a 32-bit number causes\n * it to be interpreted as a negative number per two's complement.\n *\n * Note 2: Per the ECMAScript spec, all JavaScript operations mask the shift amount by 0x1F.  This results in weird\n * cases like 1 << 32 == 1 and 1 << 33 === 1 << 1 === 2\n */\n\n/**\n * The 32-bit implementation of circular rotate left.\n *\n * @param x The 32-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted left circularly by `n` bits\n */\nexport function rotl_32(x: number, n: number): number {\n  return (x << n) | (x >>> (32 - n));\n}\n\n/**\n * The 32-bit implementation of circular rotate right.\n *\n * @param x The 32-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted right circularly by `n` bits\n */\nfunction rotr_32(x: number, n: number): number {\n  return (x >>> n) | (x << (32 - n));\n}\n\n/**\n * The 32-bit implementation of shift right.\n *\n * @param x The 32-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted by `n` bits.\n */\nfunction shr_32(x: number, n: number): number {\n  return x >>> n;\n}\n\n/**\n * The 32-bit implementation of the NIST specified Parity function.\n *\n * @param x The first 32-bit integer argument.\n * @param y The second 32-bit integer argument.\n * @param z The third 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function parity_32(x: number, y: number, z: number): number {\n  return x ^ y ^ z;\n}\n\n/**\n * The 32-bit implementation of the NIST specified Ch function.\n *\n * @param x The first 32-bit integer argument.\n * @param y The second 32-bit integer argument.\n * @param z The third 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function ch_32(x: number, y: number, z: number): number {\n  return (x & y) ^ (~x & z);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Maj function.\n *\n * @param x The first 32-bit integer argument.\n * @param y The second 32-bit integer argument.\n * @param z The third 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function maj_32(x: number, y: number, z: number): number {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Sigma0 function.\n *\n * @param x The 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function sigma0_32(x: number): number {\n  return rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);\n}\n\n/**\n * Add two 32-bit integers.\n *\n * This uses 16-bit operations internally to work around sign problems due to JavaScript's lack of uint32 support.\n *\n * @param a The first 32-bit integer argument to be added.\n * @param b The second 32-bit integer argument to be added.\n * @returns The sum of `a` + `b`.\n */\nexport function safeAdd_32_2(a: number, b: number): number {\n  const lsw = (a & 0xffff) + (b & 0xffff),\n    msw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);\n\n  return ((msw & 0xffff) << 16) | (lsw & 0xffff);\n}\n\n/**\n * Add four 32-bit integers.\n *\n * This uses 16-bit operations internally to work around sign problems due to JavaScript's lack of uint32 support.\n *\n * @param a The first 32-bit integer argument to be added.\n * @param b The second 32-bit integer argument to be added.\n * @param c The third 32-bit integer argument to be added.\n * @param d The fourth 32-bit integer argument to be added.\n * @returns The sum of `a` + `b` + `c` + `d`.\n */\nexport function safeAdd_32_4(a: number, b: number, c: number, d: number): number {\n  const lsw = (a & 0xffff) + (b & 0xffff) + (c & 0xffff) + (d & 0xffff),\n    msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (lsw >>> 16);\n\n  return ((msw & 0xffff) << 16) | (lsw & 0xffff);\n}\n\n/**\n * Add five 32-bit integers.\n *\n * This uses 16-bit operations internally to work around sign problems due to JavaScript's lack of uint32 support.\n *\n * @param a The first 32-bit integer argument to be added.\n * @param b The second 32-bit integer argument to be added.\n * @param c The third 32-bit integer argument to be added.\n * @param d The fourth 32-bit integer argument to be added.\n * @param e The fifth 32-bit integer argument to be added.\n * @returns The sum of `a` + `b` + `c` + `d` + `e`.\n */\nexport function safeAdd_32_5(a: number, b: number, c: number, d: number, e: number): number {\n  const lsw = (a & 0xffff) + (b & 0xffff) + (c & 0xffff) + (d & 0xffff) + (e & 0xffff),\n    msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (e >>> 16) + (lsw >>> 16);\n\n  return ((msw & 0xffff) << 16) | (lsw & 0xffff);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Gamma1 function.\n *\n * @param x The 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function gamma1_32(x: number): number {\n  return rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Gamma0 function.\n *\n * @param x The 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function gamma0_32(x: number): number {\n  return rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Sigma1 function.\n *\n * @param x The 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function sigma1_32(x: number): number {\n  return rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);\n}\n","import { jsSHABase, TWO_PWR_32, sha_variant_error, parseInputOption } from \"./common\";\nimport {\n  packedValue,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n} from \"./custom_types\";\nimport { getStrConverter } from \"./converters\";\nimport { ch_32, parity_32, maj_32, rotl_32, safeAdd_32_2, safeAdd_32_5 } from \"./primitives_32\";\n\n/**\n * Gets the state values for the specified SHA variant.\n *\n * @param _variant: Unused\n * @returns The initial state values.\n */\nfunction getNewState(_variant: \"SHA-1\"): number[] {\n  return [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n}\n\n/**\n * Performs a round of SHA-1 hashing over a 512-byte block.  This clobbers `H`.\n *\n * @param block The binary array representation of the block to hash.\n * @param H The intermediate H values from a previous round.\n * @returns The resulting H values.\n */\nfunction roundSHA1(block: number[], H: number[]): number[] {\n  let a, b, c, d, e, T, t;\n  const W: number[] = [];\n\n  a = H[0];\n  b = H[1];\n  c = H[2];\n  d = H[3];\n  e = H[4];\n\n  for (t = 0; t < 80; t += 1) {\n    if (t < 16) {\n      W[t] = block[t];\n    } else {\n      W[t] = rotl_32(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    if (t < 20) {\n      T = safeAdd_32_5(rotl_32(a, 5), ch_32(b, c, d), e, 0x5a827999, W[t]);\n    } else if (t < 40) {\n      T = safeAdd_32_5(rotl_32(a, 5), parity_32(b, c, d), e, 0x6ed9eba1, W[t]);\n    } else if (t < 60) {\n      T = safeAdd_32_5(rotl_32(a, 5), maj_32(b, c, d), e, 0x8f1bbcdc, W[t]);\n    } else {\n      T = safeAdd_32_5(rotl_32(a, 5), parity_32(b, c, d), e, 0xca62c1d6, W[t]);\n    }\n\n    e = d;\n    d = c;\n    c = rotl_32(b, 30);\n    b = a;\n    a = T;\n  }\n\n  H[0] = safeAdd_32_2(a, H[0]);\n  H[1] = safeAdd_32_2(b, H[1]);\n  H[2] = safeAdd_32_2(c, H[2]);\n  H[3] = safeAdd_32_2(d, H[3]);\n  H[4] = safeAdd_32_2(e, H[4]);\n\n  return H;\n}\n\n/**\n * Finalizes the SHA-1 hash.  This clobbers `remainder` and `H`.\n *\n * @param remainder Any leftover unprocessed packed ints that still need to be processed.\n * @param remainderBinLen The number of bits in `remainder`.\n * @param processedBinLen The number of bits already processed.\n * @param H The intermediate H values from a previous round.\n * @returns The array of integers representing the SHA-1 hash of message.\n */\nfunction finalizeSHA1(remainder: number[], remainderBinLen: number, processedBinLen: number, H: number[]): number[] {\n  let i;\n\n  /* The 65 addition is a hack but it works.  The correct number is\n\t\tactually 72 (64 + 8) but the below math fails if\n\t\tremainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,\n\t\t\"shorting\" the addition is OK. */\n  const offset = (((remainderBinLen + 65) >>> 9) << 4) + 15,\n    totalLen = remainderBinLen + processedBinLen;\n  while (remainder.length <= offset) {\n    remainder.push(0);\n  }\n  /* Append '1' at the end of the binary string */\n  remainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));\n\n  /* Append length of binary string in the position such that the new\n   * length is a multiple of 512.  Logic does not work for even multiples\n   * of 512 but there can never be even multiples of 512. JavaScript\n   * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as\n   * a 64-bit integer. */\n  remainder[offset] = totalLen & 0xffffffff;\n\n  /* Bitwise operators treat the operand as a 32-bit number so need to\n   * use hacky division and round to get access to upper 32-ish bits */\n  remainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;\n\n  /* This will always be at least 1 full chunk */\n  for (i = 0; i < remainder.length; i += 16) {\n    H = roundSHA1(remainder.slice(i, i + 16), H);\n  }\n\n  return H;\n}\n\nexport default class jsSHA extends jsSHABase<number[], \"SHA-1\"> {\n  intermediateState: number[];\n  variantBlockSize: number;\n  bigEndianMod: -1 | 1;\n  outputBinLen: number;\n  isVariableLen: boolean;\n  HMACSupported: boolean;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  roundFunc: (block: number[], H: number[]) => number[];\n  finalizeFunc: (remainder: number[], remainderBinLen: number, processedBinLen: number, H: number[]) => number[];\n  stateCloneFunc: (state: number[]) => number[];\n  newStateFunc: (variant: \"SHA-1\") => number[];\n  getMAC: () => number[];\n\n  constructor(variant: \"SHA-1\", inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(variant: \"SHA-1\", inputFormat: FormatNoTextType, options?: FixedLengthOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    if (\"SHA-1\" !== variant) {\n      throw new Error(sha_variant_error);\n    }\n    super(variant, inputFormat, options);\n    const resolvedOptions = options || {};\n\n    this.HMACSupported = true;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.getMAC = this._getHMAC;\n    this.bigEndianMod = -1;\n    this.converterFunc = getStrConverter(this.inputFormat, this.utfType, this.bigEndianMod);\n    this.roundFunc = roundSHA1;\n    this.stateCloneFunc = function (state: number[]): number[] {\n      return state.slice();\n    };\n    this.newStateFunc = getNewState;\n    this.finalizeFunc = finalizeSHA1;\n\n    this.intermediateState = getNewState(variant);\n    this.variantBlockSize = 512;\n    this.outputBinLen = 160;\n    this.isVariableLen = false;\n\n    if (resolvedOptions[\"hmacKey\"]) {\n      this._setHMACKey(parseInputOption(\"hmacKey\", resolvedOptions[\"hmacKey\"], this.bigEndianMod));\n    }\n  }\n}\n","import { jsSHABase, TWO_PWR_32, H_full, H_trunc, K_sha2, sha_variant_error, parseInputOption } from \"./common\";\nimport {\n  packedValue,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n} from \"./custom_types\";\nimport { getStrConverter } from \"./converters\";\nimport {\n  ch_32,\n  gamma0_32,\n  gamma1_32,\n  maj_32,\n  safeAdd_32_2,\n  safeAdd_32_4,\n  safeAdd_32_5,\n  sigma0_32,\n  sigma1_32,\n} from \"./primitives_32\";\n\ntype VariantType = \"SHA-224\" | \"SHA-256\";\n\n/**\n * Gets the state values for the specified SHA variant.\n *\n * @param variant: The SHA-256 family variant.\n * @returns The initial state values.\n */\nfunction getNewState256(variant: VariantType): number[] {\n  let retVal;\n\n  if (\"SHA-224\" == variant) {\n    retVal = H_trunc.slice();\n  } else {\n    /* \"SHA-256\" */\n    retVal = H_full.slice();\n  }\n  return retVal;\n}\n\n/**\n * Performs a round of SHA-256 hashing over a block. This clobbers `H`.\n *\n * @param block The binary array representation of the block to hash.\n * @param H The intermediate H values from a previous round.\n * @returns The resulting H values.\n */\nfunction roundSHA256(block: number[], H: number[]): number[] {\n  let a, b, c, d, e, f, g, h, T1, T2, t;\n\n  const W: number[] = [];\n\n  a = H[0];\n  b = H[1];\n  c = H[2];\n  d = H[3];\n  e = H[4];\n  f = H[5];\n  g = H[6];\n  h = H[7];\n\n  for (t = 0; t < 64; t += 1) {\n    if (t < 16) {\n      W[t] = block[t];\n    } else {\n      W[t] = safeAdd_32_4(gamma1_32(W[t - 2]), W[t - 7], gamma0_32(W[t - 15]), W[t - 16]);\n    }\n    T1 = safeAdd_32_5(h, sigma1_32(e), ch_32(e, f, g), K_sha2[t], W[t]);\n    T2 = safeAdd_32_2(sigma0_32(a), maj_32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = safeAdd_32_2(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = safeAdd_32_2(T1, T2);\n  }\n\n  H[0] = safeAdd_32_2(a, H[0]);\n  H[1] = safeAdd_32_2(b, H[1]);\n  H[2] = safeAdd_32_2(c, H[2]);\n  H[3] = safeAdd_32_2(d, H[3]);\n  H[4] = safeAdd_32_2(e, H[4]);\n  H[5] = safeAdd_32_2(f, H[5]);\n  H[6] = safeAdd_32_2(g, H[6]);\n  H[7] = safeAdd_32_2(h, H[7]);\n\n  return H;\n}\n\n/**\n * Finalizes the SHA-256 hash. This clobbers `remainder` and `H`.\n *\n * @param remainder Any leftover unprocessed packed ints that still need to be processed.\n * @param remainderBinLen The number of bits in `remainder`.\n * @param processedBinLen The number of bits already processed.\n * @param H The intermediate H values from a previous round.\n * @param variant The desired SHA-256 variant.\n * @returns The array of integers representing the SHA-2 hash of message.\n */\nfunction finalizeSHA256(\n  remainder: number[],\n  remainderBinLen: number,\n  processedBinLen: number,\n  H: number[],\n  variant: VariantType\n): number[] {\n  let i, retVal;\n\n  /* The 65 addition is a hack but it works.  The correct number is\n    actually 72 (64 + 8) but the below math fails if\n    remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,\n    \"shorting\" the addition is OK. */\n  const offset = (((remainderBinLen + 65) >>> 9) << 4) + 15,\n    binaryStringInc = 16,\n    totalLen = remainderBinLen + processedBinLen;\n\n  while (remainder.length <= offset) {\n    remainder.push(0);\n  }\n  /* Append '1' at the end of the binary string */\n  remainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));\n  /* Append length of binary string in the position such that the new\n   * length is correct. JavaScript numbers are limited to 2^53 so it's\n   * \"safe\" to treat the totalLen as a 64-bit integer. */\n\n  remainder[offset] = totalLen & 0xffffffff;\n  /* Bitwise operators treat the operand as a 32-bit number so need to\n   * use hacky division and round to get access to upper 32-ish bits */\n  remainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;\n\n  /* This will always be at least 1 full chunk */\n  for (i = 0; i < remainder.length; i += binaryStringInc) {\n    H = roundSHA256(remainder.slice(i, i + binaryStringInc), H);\n  }\n\n  if (\"SHA-224\" === variant) {\n    retVal = [H[0], H[1], H[2], H[3], H[4], H[5], H[6]];\n  } else {\n    /* \"SHA-256 */\n    retVal = H;\n  }\n\n  return retVal;\n}\nexport default class jsSHA extends jsSHABase<number[], VariantType> {\n  intermediateState: number[];\n  variantBlockSize: number;\n  bigEndianMod: -1 | 1;\n  outputBinLen: number;\n  isVariableLen: boolean;\n  HMACSupported: boolean;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  roundFunc: (block: number[], H: number[]) => number[];\n  finalizeFunc: (remainder: number[], remainderBinLen: number, processedBinLen: number, H: number[]) => number[];\n  stateCloneFunc: (state: number[]) => number[];\n  newStateFunc: (variant: VariantType) => number[];\n  getMAC: () => number[];\n\n  constructor(variant: VariantType, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(variant: VariantType, inputFormat: FormatNoTextType, options?: FixedLengthOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    if (!(\"SHA-224\" === variant || \"SHA-256\" === variant)) {\n      throw new Error(sha_variant_error);\n    }\n    super(variant, inputFormat, options);\n    const resolvedOptions = options || {};\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.getMAC = this._getHMAC;\n    this.HMACSupported = true;\n    this.bigEndianMod = -1;\n    this.converterFunc = getStrConverter(this.inputFormat, this.utfType, this.bigEndianMod);\n    this.roundFunc = roundSHA256;\n    this.stateCloneFunc = function (state): number[] {\n      return state.slice();\n    };\n\n    this.newStateFunc = getNewState256;\n    this.finalizeFunc = function (remainder, remainderBinLen, processedBinLen, H): number[] {\n      return finalizeSHA256(remainder, remainderBinLen, processedBinLen, H, variant);\n    };\n\n    this.intermediateState = getNewState256(variant);\n    this.variantBlockSize = 512;\n    this.outputBinLen = \"SHA-224\" === variant ? 224 : 256;\n    this.isVariableLen = false;\n\n    if (resolvedOptions[\"hmacKey\"]) {\n      this._setHMACKey(parseInputOption(\"hmacKey\", resolvedOptions[\"hmacKey\"], this.bigEndianMod));\n    }\n  }\n}\n","/*\n * Note 1: All the functions in this file guarantee only that the bottom 32-bits of the returned Int_64 are correct.\n * JavaScript is flakey when it comes to bit operations and a '1' in the highest order bit of a 32-bit number causes\n * it to be interpreted as a negative number per two's complement.\n *\n * Note 2: Per the ECMAScript spec, all JavaScript operations mask the shift amount by 0x1F.  This results in weird\n * cases like 1 << 32 == 1 and 1 << 33 === 1 << 1 === 2\n */\n\n/**\n * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number.\n */\nexport class Int_64 {\n  /**\n   * @param msint_32 The most significant 32-bits of a 64-bit number.\n   * @param lsint_32 The least significant 32-bits of a 64-bit number.\n   */\n  readonly highOrder: number;\n  readonly lowOrder: number;\n  constructor(msint_32: number, lsint_32: number) {\n    this.highOrder = msint_32;\n    this.lowOrder = lsint_32;\n  }\n}\n\n/**\n * The 64-bit implementation of circular rotate left.\n *\n * This does not work for n >= 64 or n == 32 but those are never done.\n *\n * @param x The 64-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted left circularly by `n` bits.\n */\nexport function rotl_64(x: Int_64, n: number): Int_64 {\n  let tmp;\n  if (n > 32) {\n    tmp = 64 - n;\n    return new Int_64((x.lowOrder << n) | (x.highOrder >>> tmp), (x.highOrder << n) | (x.lowOrder >>> tmp));\n  } else if (0 !== n) {\n    tmp = 32 - n;\n    return new Int_64((x.highOrder << n) | (x.lowOrder >>> tmp), (x.lowOrder << n) | (x.highOrder >>> tmp));\n  } else {\n    return x;\n  }\n}\n\n/**\n * The 64-bit implementation of circular rotate right.\n *\n * This does not work for n >= 64, n == 32, or n == 0 but those are never done.\n *\n * @param x The 64-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted right circularly by `n` bits.\n */\nfunction rotr_64(x: Int_64, n: number): Int_64 {\n  let tmp;\n  if (n < 32) {\n    tmp = 32 - n;\n    return new Int_64((x.highOrder >>> n) | (x.lowOrder << tmp), (x.lowOrder >>> n) | (x.highOrder << tmp));\n  } else {\n    tmp = 64 - n;\n    return new Int_64((x.lowOrder >>> n) | (x.highOrder << tmp), (x.highOrder >>> n) | (x.lowOrder << tmp));\n  }\n}\n\n/**\n * The 64-bit implementation of shift right.\n *\n * This does not work for n >= 32 but is only called for n < 32.\n *\n * @param x The 64-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted right by `n` bits\n */\nfunction shr_64(x: Int_64, n: number): Int_64 {\n  return new Int_64(x.highOrder >>> n, (x.lowOrder >>> n) | (x.highOrder << (32 - n)));\n}\n\n/**\n * The 64-bit implementation of the NIST specified Ch function.\n *\n * @param x The first 64-bit integer argument.\n * @param y The second 64-bit integer argument.\n * @param z The third 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function ch_64(x: Int_64, y: Int_64, z: Int_64): Int_64 {\n  return new Int_64(\n    (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),\n    (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Maj function.\n *\n * @param x The first 64-bit integer argument.\n * @param y The second 64-bit integer argument.\n * @param z The third 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function maj_64(x: Int_64, y: Int_64, z: Int_64): Int_64 {\n  return new Int_64(\n    (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),\n    (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Sigma0 function.\n *\n * @param x The 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function sigma0_64(x: Int_64): Int_64 {\n  const rotr28 = rotr_64(x, 28),\n    rotr34 = rotr_64(x, 34),\n    rotr39 = rotr_64(x, 39);\n\n  return new Int_64(\n    rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,\n    rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder\n  );\n}\n\n/**\n * Add two 64-bit integers.\n *\n * @param x The first 64-bit integer argument to be added.\n * @param y The second 64-bit integer argument to be added.\n * @returns The sum of `x` + `y`.\n */\nexport function safeAdd_64_2(x: Int_64, y: Int_64): Int_64 {\n  let lsw, msw;\n\n  lsw = (x.lowOrder & 0xffff) + (y.lowOrder & 0xffff);\n  msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\n  const lowOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  lsw = (x.highOrder & 0xffff) + (y.highOrder & 0xffff) + (msw >>> 16);\n  msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\n  const highOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * Add four 64-bit integers.\n *\n * @param a The first 64-bit integer argument to be added.\n * @param b The second 64-bit integer argument to be added.\n * @param c The third 64-bit integer argument to be added.\n * @param d The fouth 64-bit integer argument to be added.\n * @returns The sum of `a` + `b` + `c` + `d`.\n */\nexport function safeAdd_64_4(a: Int_64, b: Int_64, c: Int_64, d: Int_64): Int_64 {\n  let lsw, msw;\n\n  lsw = (a.lowOrder & 0xffff) + (b.lowOrder & 0xffff) + (c.lowOrder & 0xffff) + (d.lowOrder & 0xffff);\n  msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\n  const lowOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  lsw =\n    (a.highOrder & 0xffff) + (b.highOrder & 0xffff) + (c.highOrder & 0xffff) + (d.highOrder & 0xffff) + (msw >>> 16);\n  msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\n  const highOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * Add five 64-bit integers.\n *\n * @param a The first 64-bit integer argument to be added.\n * @param b The second 64-bit integer argument to be added.\n * @param c The third 64-bit integer argument to be added.\n * @param d The fouth 64-bit integer argument to be added.\n * @param e The fifth 64-bit integer argument to be added.\n * @returns The sum of `a` + `b` + `c` + `d` + `e`.\n */\nexport function safeAdd_64_5(a: Int_64, b: Int_64, c: Int_64, d: Int_64, e: Int_64): Int_64 {\n  let lsw, msw;\n\n  lsw =\n    (a.lowOrder & 0xffff) +\n    (b.lowOrder & 0xffff) +\n    (c.lowOrder & 0xffff) +\n    (d.lowOrder & 0xffff) +\n    (e.lowOrder & 0xffff);\n  msw =\n    (a.lowOrder >>> 16) +\n    (b.lowOrder >>> 16) +\n    (c.lowOrder >>> 16) +\n    (d.lowOrder >>> 16) +\n    (e.lowOrder >>> 16) +\n    (lsw >>> 16);\n  const lowOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  lsw =\n    (a.highOrder & 0xffff) +\n    (b.highOrder & 0xffff) +\n    (c.highOrder & 0xffff) +\n    (d.highOrder & 0xffff) +\n    (e.highOrder & 0xffff) +\n    (msw >>> 16);\n  msw =\n    (a.highOrder >>> 16) +\n    (b.highOrder >>> 16) +\n    (c.highOrder >>> 16) +\n    (d.highOrder >>> 16) +\n    (e.highOrder >>> 16) +\n    (lsw >>> 16);\n  const highOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * XORs two given arguments.\n *\n * @param a The first argument to be XORed.\n * @param b The second argument to be XORed.\n * @returns The The XOR `a` and `b`\n */\nexport function xor_64_2(a: Int_64, b: Int_64): Int_64 {\n  return new Int_64(a.highOrder ^ b.highOrder, a.lowOrder ^ b.lowOrder);\n}\n\n/**\n * XORs five given arguments.\n *\n * @param a The first argument to be XORed.\n * @param b The second argument to be XORed.\n * @param c The third argument to be XORed.\n * @param d The fourth argument to be XORed.\n * @param e The fifth argument to be XORed.\n * @returns The XOR of `a`, `b`, `c`, `d`, and `e`.\n */\nexport function xor_64_5(a: Int_64, b: Int_64, c: Int_64, d: Int_64, e: Int_64): Int_64 {\n  return new Int_64(\n    a.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,\n    a.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Gamma1 function.\n *\n * @param x The 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function gamma1_64(x: Int_64): Int_64 {\n  const rotr19 = rotr_64(x, 19),\n    rotr61 = rotr_64(x, 61),\n    shr6 = shr_64(x, 6);\n\n  return new Int_64(\n    rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\n    rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Gamma0 function.\n *\n * @param x The 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function gamma0_64(x: Int_64): Int_64 {\n  const rotr1 = rotr_64(x, 1),\n    rotr8 = rotr_64(x, 8),\n    shr7 = shr_64(x, 7);\n\n  return new Int_64(\n    rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,\n    rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Sigma1 function.\n *\n * @param x The 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function sigma1_64(x: Int_64): Int_64 {\n  const rotr14 = rotr_64(x, 14),\n    rotr18 = rotr_64(x, 18),\n    rotr41 = rotr_64(x, 41);\n\n  return new Int_64(\n    rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\n    rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder\n  );\n}\n","import { jsSHABase, TWO_PWR_32, H_trunc, H_full, K_sha2, sha_variant_error, parseInputOption } from \"./common\";\nimport {\n  packedValue,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n} from \"./custom_types\";\nimport { getStrConverter } from \"./converters\";\nimport {\n  ch_64,\n  gamma0_64,\n  gamma1_64,\n  Int_64,\n  maj_64,\n  safeAdd_64_2,\n  safeAdd_64_4,\n  safeAdd_64_5,\n  sigma0_64,\n  sigma1_64,\n} from \"./primitives_64\";\n\ntype VariantType = \"SHA-384\" | \"SHA-512\";\n\nconst K_sha512 = [\n  new Int_64(K_sha2[0], 0xd728ae22),\n  new Int_64(K_sha2[1], 0x23ef65cd),\n  new Int_64(K_sha2[2], 0xec4d3b2f),\n  new Int_64(K_sha2[3], 0x8189dbbc),\n  new Int_64(K_sha2[4], 0xf348b538),\n  new Int_64(K_sha2[5], 0xb605d019),\n  new Int_64(K_sha2[6], 0xaf194f9b),\n  new Int_64(K_sha2[7], 0xda6d8118),\n  new Int_64(K_sha2[8], 0xa3030242),\n  new Int_64(K_sha2[9], 0x45706fbe),\n  new Int_64(K_sha2[10], 0x4ee4b28c),\n  new Int_64(K_sha2[11], 0xd5ffb4e2),\n  new Int_64(K_sha2[12], 0xf27b896f),\n  new Int_64(K_sha2[13], 0x3b1696b1),\n  new Int_64(K_sha2[14], 0x25c71235),\n  new Int_64(K_sha2[15], 0xcf692694),\n  new Int_64(K_sha2[16], 0x9ef14ad2),\n  new Int_64(K_sha2[17], 0x384f25e3),\n  new Int_64(K_sha2[18], 0x8b8cd5b5),\n  new Int_64(K_sha2[19], 0x77ac9c65),\n  new Int_64(K_sha2[20], 0x592b0275),\n  new Int_64(K_sha2[21], 0x6ea6e483),\n  new Int_64(K_sha2[22], 0xbd41fbd4),\n  new Int_64(K_sha2[23], 0x831153b5),\n  new Int_64(K_sha2[24], 0xee66dfab),\n  new Int_64(K_sha2[25], 0x2db43210),\n  new Int_64(K_sha2[26], 0x98fb213f),\n  new Int_64(K_sha2[27], 0xbeef0ee4),\n  new Int_64(K_sha2[28], 0x3da88fc2),\n  new Int_64(K_sha2[29], 0x930aa725),\n  new Int_64(K_sha2[30], 0xe003826f),\n  new Int_64(K_sha2[31], 0x0a0e6e70),\n  new Int_64(K_sha2[32], 0x46d22ffc),\n  new Int_64(K_sha2[33], 0x5c26c926),\n  new Int_64(K_sha2[34], 0x5ac42aed),\n  new Int_64(K_sha2[35], 0x9d95b3df),\n  new Int_64(K_sha2[36], 0x8baf63de),\n  new Int_64(K_sha2[37], 0x3c77b2a8),\n  new Int_64(K_sha2[38], 0x47edaee6),\n  new Int_64(K_sha2[39], 0x1482353b),\n  new Int_64(K_sha2[40], 0x4cf10364),\n  new Int_64(K_sha2[41], 0xbc423001),\n  new Int_64(K_sha2[42], 0xd0f89791),\n  new Int_64(K_sha2[43], 0x0654be30),\n  new Int_64(K_sha2[44], 0xd6ef5218),\n  new Int_64(K_sha2[45], 0x5565a910),\n  new Int_64(K_sha2[46], 0x5771202a),\n  new Int_64(K_sha2[47], 0x32bbd1b8),\n  new Int_64(K_sha2[48], 0xb8d2d0c8),\n  new Int_64(K_sha2[49], 0x5141ab53),\n  new Int_64(K_sha2[50], 0xdf8eeb99),\n  new Int_64(K_sha2[51], 0xe19b48a8),\n  new Int_64(K_sha2[52], 0xc5c95a63),\n  new Int_64(K_sha2[53], 0xe3418acb),\n  new Int_64(K_sha2[54], 0x7763e373),\n  new Int_64(K_sha2[55], 0xd6b2b8a3),\n  new Int_64(K_sha2[56], 0x5defb2fc),\n  new Int_64(K_sha2[57], 0x43172f60),\n  new Int_64(K_sha2[58], 0xa1f0ab72),\n  new Int_64(K_sha2[59], 0x1a6439ec),\n  new Int_64(K_sha2[60], 0x23631e28),\n  new Int_64(K_sha2[61], 0xde82bde9),\n  new Int_64(K_sha2[62], 0xb2c67915),\n  new Int_64(K_sha2[63], 0xe372532b),\n  new Int_64(0xca273ece, 0xea26619c),\n  new Int_64(0xd186b8c7, 0x21c0c207),\n  new Int_64(0xeada7dd6, 0xcde0eb1e),\n  new Int_64(0xf57d4f7f, 0xee6ed178),\n  new Int_64(0x06f067aa, 0x72176fba),\n  new Int_64(0x0a637dc5, 0xa2c898a6),\n  new Int_64(0x113f9804, 0xbef90dae),\n  new Int_64(0x1b710b35, 0x131c471b),\n  new Int_64(0x28db77f5, 0x23047d84),\n  new Int_64(0x32caab7b, 0x40c72493),\n  new Int_64(0x3c9ebe0a, 0x15c9bebc),\n  new Int_64(0x431d67c4, 0x9c100d4c),\n  new Int_64(0x4cc5d4be, 0xcb3e42b6),\n  new Int_64(0x597f299c, 0xfc657e2a),\n  new Int_64(0x5fcb6fab, 0x3ad6faec),\n  new Int_64(0x6c44198c, 0x4a475817),\n];\n\n/**\n * Gets the state values for the specified SHA variant.\n *\n * @param variant: The SHA-512 family variant.\n * @returns The initial state values.\n */\nfunction getNewState512(variant: VariantType): Int_64[] {\n  if (\"SHA-384\" === variant) {\n    return [\n      new Int_64(0xcbbb9d5d, H_trunc[0]),\n      new Int_64(0x0629a292a, H_trunc[1]),\n      new Int_64(0x9159015a, H_trunc[2]),\n      new Int_64(0x0152fecd8, H_trunc[3]),\n      new Int_64(0x67332667, H_trunc[4]),\n      new Int_64(0x98eb44a87, H_trunc[5]),\n      new Int_64(0xdb0c2e0d, H_trunc[6]),\n      new Int_64(0x047b5481d, H_trunc[7]),\n    ];\n  } else {\n    /* SHA-512 */\n    return [\n      new Int_64(H_full[0], 0xf3bcc908),\n      new Int_64(H_full[1], 0x84caa73b),\n      new Int_64(H_full[2], 0xfe94f82b),\n      new Int_64(H_full[3], 0x5f1d36f1),\n      new Int_64(H_full[4], 0xade682d1),\n      new Int_64(H_full[5], 0x2b3e6c1f),\n      new Int_64(H_full[6], 0xfb41bd6b),\n      new Int_64(H_full[7], 0x137e2179),\n    ];\n  }\n}\n\n/**\n * Performs a round of SHA-512 hashing over a block. This clobbers `H`.\n *\n * @param block The binary array representation of the block to hash.\n * @param H The intermediate H values from a previous round.\n * @returns The resulting H values.\n */\nfunction roundSHA512(block: number[], H: Int_64[]): Int_64[] {\n  let a, b, c, d, e, f, g, h, T1, T2, t, offset;\n\n  const W: Int_64[] = [];\n\n  a = H[0];\n  b = H[1];\n  c = H[2];\n  d = H[3];\n  e = H[4];\n  f = H[5];\n  g = H[6];\n  h = H[7];\n\n  for (t = 0; t < 80; t += 1) {\n    if (t < 16) {\n      offset = t * 2;\n      W[t] = new Int_64(block[offset], block[offset + 1]);\n    } else {\n      W[t] = safeAdd_64_4(gamma1_64(W[t - 2]), W[t - 7], gamma0_64(W[t - 15]), W[t - 16]);\n    }\n    T1 = safeAdd_64_5(h, sigma1_64(e), ch_64(e, f, g), K_sha512[t], W[t]);\n    T2 = safeAdd_64_2(sigma0_64(a), maj_64(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = safeAdd_64_2(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = safeAdd_64_2(T1, T2);\n  }\n\n  H[0] = safeAdd_64_2(a, H[0]);\n  H[1] = safeAdd_64_2(b, H[1]);\n  H[2] = safeAdd_64_2(c, H[2]);\n  H[3] = safeAdd_64_2(d, H[3]);\n  H[4] = safeAdd_64_2(e, H[4]);\n  H[5] = safeAdd_64_2(f, H[5]);\n  H[6] = safeAdd_64_2(g, H[6]);\n  H[7] = safeAdd_64_2(h, H[7]);\n\n  return H;\n}\n\n/**\n * Finalizes the SHA-512 hash. This clobbers `remainder` and `H`.\n *\n * @param remainder Any leftover unprocessed packed ints that still need to be processed.\n * @param remainderBinLen The number of bits in `remainder`.\n * @param processedBinLen The number of bits already processed.\n * @param H The intermediate H values from a previous round.\n * @param variant The desired SHA-512 variant.\n * @returns The array of integers representing the SHA-512 hash of message.\n */\nfunction finalizeSHA512(\n  remainder: number[],\n  remainderBinLen: number,\n  processedBinLen: number,\n  H: Int_64[],\n  variant: VariantType\n): number[] {\n  let i, retVal;\n\n  /* The 129 addition is a hack but it works.  The correct number is\n    actually 136 (128 + 8) but the below math fails if\n    remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,\n    \"shorting\" the addition is OK. */\n  const offset = (((remainderBinLen + 129) >>> 10) << 5) + 31,\n    binaryStringInc = 32,\n    totalLen = remainderBinLen + processedBinLen;\n\n  while (remainder.length <= offset) {\n    remainder.push(0);\n  }\n  /* Append '1' at the end of the binary string */\n  remainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));\n  /* Append length of binary string in the position such that the new\n   * length is correct. JavaScript numbers are limited to 2^53 so it's\n   * \"safe\" to treat the totalLen as a 64-bit integer. */\n\n  remainder[offset] = totalLen & 0xffffffff;\n  /* Bitwise operators treat the operand as a 32-bit number so need to\n   * use hacky division and round to get access to upper 32-ish bits */\n  remainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;\n\n  /* This will always be at least 1 full chunk */\n  for (i = 0; i < remainder.length; i += binaryStringInc) {\n    H = roundSHA512(remainder.slice(i, i + binaryStringInc), H);\n  }\n\n  if (\"SHA-384\" === variant) {\n    H = (H as unknown) as Int_64[];\n    retVal = [\n      H[0].highOrder,\n      H[0].lowOrder,\n      H[1].highOrder,\n      H[1].lowOrder,\n      H[2].highOrder,\n      H[2].lowOrder,\n      H[3].highOrder,\n      H[3].lowOrder,\n      H[4].highOrder,\n      H[4].lowOrder,\n      H[5].highOrder,\n      H[5].lowOrder,\n    ];\n  } else {\n    /* SHA-512 */\n    retVal = [\n      H[0].highOrder,\n      H[0].lowOrder,\n      H[1].highOrder,\n      H[1].lowOrder,\n      H[2].highOrder,\n      H[2].lowOrder,\n      H[3].highOrder,\n      H[3].lowOrder,\n      H[4].highOrder,\n      H[4].lowOrder,\n      H[5].highOrder,\n      H[5].lowOrder,\n      H[6].highOrder,\n      H[6].lowOrder,\n      H[7].highOrder,\n      H[7].lowOrder,\n    ];\n  }\n  return retVal;\n}\n\nexport default class jsSHA extends jsSHABase<Int_64[], VariantType> {\n  intermediateState: Int_64[];\n  variantBlockSize: number;\n  bigEndianMod: -1 | 1;\n  outputBinLen: number;\n  isVariableLen: boolean;\n  HMACSupported: boolean;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  roundFunc: (block: number[], H: Int_64[]) => Int_64[];\n  finalizeFunc: (remainder: number[], remainderBinLen: number, processedBinLen: number, H: Int_64[]) => number[];\n  stateCloneFunc: (state: Int_64[]) => Int_64[];\n  newStateFunc: (variant: VariantType) => Int_64[];\n  getMAC: () => number[];\n\n  constructor(variant: VariantType, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(variant: VariantType, inputFormat: FormatNoTextType, options?: FixedLengthOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    if (!(\"SHA-384\" === variant || \"SHA-512\" === variant)) {\n      throw new Error(sha_variant_error);\n    }\n    super(variant, inputFormat, options);\n    const resolvedOptions = options || {};\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.getMAC = this._getHMAC;\n    this.HMACSupported = true;\n    this.bigEndianMod = -1;\n    this.converterFunc = getStrConverter(this.inputFormat, this.utfType, this.bigEndianMod);\n    this.roundFunc = roundSHA512;\n    this.stateCloneFunc = function (state): Int_64[] {\n      return state.slice();\n    };\n    this.newStateFunc = getNewState512;\n    this.finalizeFunc = function (remainder, remainderBinLen, processedBinLen, H): number[] {\n      return finalizeSHA512(remainder, remainderBinLen, processedBinLen, H, variant);\n    };\n\n    this.intermediateState = getNewState512(variant);\n    this.variantBlockSize = 1024;\n    this.outputBinLen = \"SHA-384\" === variant ? 384 : 512;\n    this.isVariableLen = false;\n\n    if (resolvedOptions[\"hmacKey\"]) {\n      this._setHMACKey(parseInputOption(\"hmacKey\", resolvedOptions[\"hmacKey\"], this.bigEndianMod));\n    }\n  }\n}\n","import { jsSHABase, packedLEConcat, sha_variant_error, mac_rounds_error, TWO_PWR_32, parseInputOption } from \"./common\";\nimport {\n  packedValue,\n  CSHAKEOptionsNoEncodingType,\n  CSHAKEOptionsEncodingType,\n  SHAKEOptionsNoEncodingType,\n  SHAKEOptionsEncodingType,\n  KMACOptionsNoEncodingType,\n  KMACOptionsEncodingType,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n  ResolvedCSHAKEOptionsNoEncodingType,\n  ResolvedKMACOptionsNoEncodingType,\n} from \"./custom_types\";\nimport { getStrConverter } from \"./converters\";\nimport { Int_64, rotl_64, xor_64_2, xor_64_5 } from \"./primitives_64\";\n\ntype FixedLengthVariantType = \"SHA3-224\" | \"SHA3-256\" | \"SHA3-384\" | \"SHA3-512\" | \"SHAKE128\" | \"SHAKE256\";\n\ntype VariantType = FixedLengthVariantType | \"SHAKE128\" | \"SHAKE256\" | \"CSHAKE128\" | \"CSHAKE256\" | \"KMAC128\" | \"KMAC256\";\n\nconst rc_sha3 = [\n  new Int_64(0x00000000, 0x00000001),\n  new Int_64(0x00000000, 0x00008082),\n  new Int_64(0x80000000, 0x0000808a),\n  new Int_64(0x80000000, 0x80008000),\n  new Int_64(0x00000000, 0x0000808b),\n  new Int_64(0x00000000, 0x80000001),\n  new Int_64(0x80000000, 0x80008081),\n  new Int_64(0x80000000, 0x00008009),\n  new Int_64(0x00000000, 0x0000008a),\n  new Int_64(0x00000000, 0x00000088),\n  new Int_64(0x00000000, 0x80008009),\n  new Int_64(0x00000000, 0x8000000a),\n  new Int_64(0x00000000, 0x8000808b),\n  new Int_64(0x80000000, 0x0000008b),\n  new Int_64(0x80000000, 0x00008089),\n  new Int_64(0x80000000, 0x00008003),\n  new Int_64(0x80000000, 0x00008002),\n  new Int_64(0x80000000, 0x00000080),\n  new Int_64(0x00000000, 0x0000800a),\n  new Int_64(0x80000000, 0x8000000a),\n  new Int_64(0x80000000, 0x80008081),\n  new Int_64(0x80000000, 0x00008080),\n  new Int_64(0x00000000, 0x80000001),\n  new Int_64(0x80000000, 0x80008008),\n];\n\nconst r_sha3 = [\n  [0, 36, 3, 41, 18],\n  [1, 44, 10, 45, 2],\n  [62, 6, 43, 15, 61],\n  [28, 55, 25, 21, 56],\n  [27, 20, 39, 8, 14],\n];\n\n/**\n * Gets the state values for the specified SHA-3 variant.\n *\n * @param _variant Unused for this family.\n * @returns The initial state values.\n */\nfunction getNewState(_variant: VariantType): Int_64[][] {\n  let i;\n  const retVal = [];\n\n  for (i = 0; i < 5; i += 1) {\n    retVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];\n  }\n\n  return retVal;\n}\n\n/**\n * Returns a clone of the given SHA3 state.\n *\n * @param state The state to be cloned.\n * @returns The cloned state.\n */\nfunction cloneSHA3State(state: Int_64[][]): Int_64[][] {\n  let i;\n  const clone = [];\n  for (i = 0; i < 5; i += 1) {\n    clone[i] = state[i].slice();\n  }\n\n  return clone;\n}\n\n/**\n * Performs a round of SHA-3 hashing over a block. This clobbers `state`.\n *\n * @param block The binary array representation of the block to hash.\n * @param state Hash state from a previous round.\n * @returns The resulting state value.\n */\nfunction roundSHA3(block: number[] | null, state: Int_64[][]): Int_64[][] {\n  let round, x, y, B;\n  const C = [],\n    D = [];\n\n  if (null !== block) {\n    for (x = 0; x < block.length; x += 2) {\n      state[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(\n        state[(x >>> 1) % 5][((x >>> 1) / 5) | 0],\n        new Int_64(block[x + 1], block[x])\n      );\n    }\n  }\n\n  for (round = 0; round < 24; round += 1) {\n    /* Any SHA-3 variant name will do here */\n    B = getNewState(\"SHA3-384\");\n\n    /* Perform theta step */\n    for (x = 0; x < 5; x += 1) {\n      C[x] = xor_64_5(state[x][0], state[x][1], state[x][2], state[x][3], state[x][4]);\n    }\n    for (x = 0; x < 5; x += 1) {\n      D[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));\n    }\n    for (x = 0; x < 5; x += 1) {\n      for (y = 0; y < 5; y += 1) {\n        state[x][y] = xor_64_2(state[x][y], D[x]);\n      }\n    }\n\n    /* Perform combined ro and pi steps */\n    for (x = 0; x < 5; x += 1) {\n      for (y = 0; y < 5; y += 1) {\n        B[y][(2 * x + 3 * y) % 5] = rotl_64(state[x][y], r_sha3[x][y]);\n      }\n    }\n\n    /* Perform chi step */\n    for (x = 0; x < 5; x += 1) {\n      for (y = 0; y < 5; y += 1) {\n        state[x][y] = xor_64_2(\n          B[x][y],\n          new Int_64(\n            ~B[(x + 1) % 5][y].highOrder & B[(x + 2) % 5][y].highOrder,\n            ~B[(x + 1) % 5][y].lowOrder & B[(x + 2) % 5][y].lowOrder\n          )\n        );\n      }\n    }\n\n    /* Perform iota step */\n    state[0][0] = xor_64_2(state[0][0], rc_sha3[round]);\n  }\n\n  return state;\n}\n\n/**\n * Finalizes the SHA-3 hash. This clobbers `remainder` and `state`.\n *\n * @param remainder Any leftover unprocessed packed ints that still need to be processed.\n * @param remainderBinLen The number of bits in `remainder`.\n * @param _processedBinLen Unused for this family.\n * @param state The state from a previous round.\n * @param blockSize The block size/rate of the variant in bits\n * @param delimiter The delimiter value for the variant\n * @param outputLen The output length for the variant in bits\n * @returns The array of integers representing the SHA-3 hash of message.\n */\nfunction finalizeSHA3(\n  remainder: number[],\n  remainderBinLen: number,\n  _processedBinLen: number,\n  state: Int_64[][],\n  blockSize: number,\n  delimiter: number,\n  outputLen: number\n): number[] {\n  let i,\n    state_offset = 0,\n    temp;\n  const retVal = [],\n    binaryStringInc = blockSize >>> 5,\n    remainderIntLen = remainderBinLen >>> 5;\n\n  /* Process as many blocks as possible, some may be here for multiple rounds\n\t\twith SHAKE\n\t*/\n  for (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc) {\n    state = roundSHA3(remainder.slice(i, i + binaryStringInc), state);\n    remainderBinLen -= blockSize;\n  }\n\n  remainder = remainder.slice(i);\n  remainderBinLen = remainderBinLen % blockSize;\n\n  /* Pad out the remainder to a full block */\n  while (remainder.length < binaryStringInc) {\n    remainder.push(0);\n  }\n\n  /* Find the next \"empty\" byte for the 0x80 and append it via an xor */\n  i = remainderBinLen >>> 3;\n  remainder[i >> 2] ^= delimiter << (8 * (i % 4));\n\n  remainder[binaryStringInc - 1] ^= 0x80000000;\n  state = roundSHA3(remainder, state);\n\n  while (retVal.length * 32 < outputLen) {\n    temp = state[state_offset % 5][(state_offset / 5) | 0];\n    retVal.push(temp.lowOrder);\n    if (retVal.length * 32 >= outputLen) {\n      break;\n    }\n    retVal.push(temp.highOrder);\n    state_offset += 1;\n\n    if (0 === (state_offset * 64) % blockSize) {\n      roundSHA3(null, state);\n      state_offset = 0;\n    }\n  }\n\n  return retVal;\n}\n\n/**\n * Performs NIST left_encode function returned with no extra garbage bits. `x` is limited to <= 9007199254740991.\n *\n * @param x 32-bit number to to encode.\n * @returns The NIST specified output of the function.\n */\nfunction left_encode(x: number): packedValue {\n  let byteOffset,\n    byte,\n    numEncodedBytes = 0;\n  /* JavaScript numbers max out at 0x1FFFFFFFFFFFFF (7 bytes) so this will return a maximum of 7 + 1 = 8 bytes */\n  const retVal = [0, 0],\n    x_64 = [x & 0xffffffff, (x / TWO_PWR_32) & 0x1fffff];\n\n  for (byteOffset = 6; byteOffset >= 0; byteOffset--) {\n    /* This will surprisingly work for large shifts because JavaScript masks the shift amount by 0x1F */\n    byte = (x_64[byteOffset >> 2] >>> (8 * byteOffset)) & 0xff;\n\n    /* Starting from the most significant byte of a 64-bit number, start recording the first non-0 byte and then\n       every byte thereafter */\n    if (byte !== 0 || numEncodedBytes !== 0) {\n      retVal[(numEncodedBytes + 1) >> 2] |= byte << ((numEncodedBytes + 1) * 8);\n      numEncodedBytes += 1;\n    }\n  }\n  numEncodedBytes = numEncodedBytes !== 0 ? numEncodedBytes : 1;\n  retVal[0] |= numEncodedBytes;\n\n  return { value: numEncodedBytes + 1 > 4 ? retVal : [retVal[0]], binLen: 8 + numEncodedBytes * 8 };\n}\n\n/**\n * Performs NIST right_encode function returned with no extra garbage bits. `x` is limited to <= 9007199254740991.\n *\n * @param x 32-bit number to to encode.\n * @returns The NIST specified output of the function.\n */\nfunction right_encode(x: number): packedValue {\n  let byteOffset,\n    byte,\n    numEncodedBytes = 0;\n  /* JavaScript numbers max out at 0x1FFFFFFFFFFFFF (7 bytes) so this will return a maximum of 7 + 1 = 8 bytes */\n  const retVal = [0, 0],\n    x_64 = [x & 0xffffffff, (x / TWO_PWR_32) & 0x1fffff];\n\n  for (byteOffset = 6; byteOffset >= 0; byteOffset--) {\n    /* This will surprisingly work for large shifts because JavaScript masks the shift amount by 0x1F */\n    byte = (x_64[byteOffset >> 2] >>> (8 * byteOffset)) & 0xff;\n\n    /* Starting from the most significant byte of a 64-bit number, start recording the first non-0 byte and then\n       every byte thereafter */\n    if (byte !== 0 || numEncodedBytes !== 0) {\n      retVal[numEncodedBytes >> 2] |= byte << (numEncodedBytes * 8);\n      numEncodedBytes += 1;\n    }\n  }\n  numEncodedBytes = numEncodedBytes !== 0 ? numEncodedBytes : 1;\n  retVal[numEncodedBytes >> 2] |= numEncodedBytes << (numEncodedBytes * 8);\n\n  return { value: numEncodedBytes + 1 > 4 ? retVal : [retVal[0]], binLen: 8 + numEncodedBytes * 8 };\n}\n\n/**\n * Performs NIST encode_string function.\n *\n * @param input Packed array of integers.\n * @returns NIST encode_string output.\n */\nfunction encode_string(input: packedValue): packedValue {\n  return packedLEConcat(left_encode(input[\"binLen\"]), input);\n}\n\n/**\n * Performs NIST byte_pad function.\n *\n * @param packed Packed array of integers.\n * @param outputByteLen Desired length of the output in bytes, assumed to be a multiple of 4.\n * @returns NIST byte_pad output.\n */\nfunction byte_pad(packed: packedValue, outputByteLen: number): number[] {\n  let encodedLen = left_encode(outputByteLen),\n    i;\n\n  encodedLen = packedLEConcat(encodedLen, packed);\n  const outputIntLen = outputByteLen >>> 2,\n    intsToAppend = (outputIntLen - (encodedLen[\"value\"].length % outputIntLen)) % outputIntLen;\n\n  for (i = 0; i < intsToAppend; i++) {\n    encodedLen[\"value\"].push(0);\n  }\n\n  return encodedLen[\"value\"];\n}\n\n/**\n * Parses/validate constructor options for a CSHAKE variant\n *\n * @param options Option given to constructor\n */\nfunction resolveCSHAKEOptions(options: CSHAKEOptionsNoEncodingType): ResolvedCSHAKEOptionsNoEncodingType {\n  const resolvedOptions = options || {};\n\n  return {\n    funcName: parseInputOption(\"funcName\", resolvedOptions[\"funcName\"], 1, { value: [], binLen: 0 }),\n    customization: parseInputOption(\"Customization\", resolvedOptions[\"customization\"], 1, { value: [], binLen: 0 }),\n  };\n}\n\n/**\n * Parses/validate constructor options for a KMAC variant\n *\n * @param options Option given to constructor\n */\nfunction resolveKMACOptions(options: KMACOptionsNoEncodingType): ResolvedKMACOptionsNoEncodingType {\n  const resolvedOptions = options || {};\n\n  return {\n    kmacKey: parseInputOption(\"kmacKey\", resolvedOptions[\"kmacKey\"], 1),\n    /* This is little-endian packed \"KMAC\" */\n    funcName: { value: [0x43414d4b], binLen: 32 },\n    customization: parseInputOption(\"Customization\", resolvedOptions[\"customization\"], 1, { value: [], binLen: 0 }),\n  };\n}\n\nexport default class jsSHA extends jsSHABase<Int_64[][], VariantType> {\n  intermediateState: Int_64[][];\n  variantBlockSize: number;\n  bigEndianMod: -1 | 1;\n  outputBinLen: number;\n  isVariableLen: boolean;\n  HMACSupported: boolean;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  roundFunc: (block: number[], H: Int_64[][]) => Int_64[][];\n  finalizeFunc: (\n    remainder: number[],\n    remainderBinLen: number,\n    processedBinLen: number,\n    H: Int_64[][],\n    outputLen: number\n  ) => number[];\n  stateCloneFunc: (state: Int_64[][]) => Int_64[][];\n  newStateFunc: (variant: VariantType) => Int_64[][];\n  getMAC: ((options: { outputLen: number }) => number[]) | null;\n\n  constructor(variant: FixedLengthVariantType, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(\n    variant: FixedLengthVariantType,\n    inputFormat: FormatNoTextType,\n    options?: FixedLengthOptionsNoEncodingType\n  );\n  constructor(variant: \"SHAKE128\" | \"SHAKE256\", inputFormat: \"TEXT\", options?: SHAKEOptionsEncodingType);\n  constructor(variant: \"SHAKE128\" | \"SHAKE256\", inputFormat: FormatNoTextType, options?: SHAKEOptionsNoEncodingType);\n  constructor(variant: \"CSHAKE128\" | \"CSHAKE256\", inputFormat: \"TEXT\", options?: CSHAKEOptionsEncodingType);\n  constructor(variant: \"CSHAKE128\" | \"CSHAKE256\", inputFormat: FormatNoTextType, options?: CSHAKEOptionsNoEncodingType);\n  constructor(variant: \"KMAC128\" | \"KMAC256\", inputFormat: \"TEXT\", options: KMACOptionsEncodingType);\n  constructor(variant: \"KMAC128\" | \"KMAC256\", inputFormat: FormatNoTextType, options: KMACOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    let delimiter = 0x06,\n      variantBlockSize = 0;\n    super(variant, inputFormat, options);\n    const resolvedOptions = options || {};\n\n    /* In other variants, this was done after variable initialization but need to do it earlier here becaue we want to\n       avoid KMAC initialization */\n    if (this.numRounds !== 1) {\n      if (resolvedOptions[\"kmacKey\"] || resolvedOptions[\"hmacKey\"]) {\n        throw new Error(mac_rounds_error);\n      } else if (this.shaVariant === \"CSHAKE128\" || this.shaVariant === \"CSHAKE256\") {\n        throw new Error(\"Cannot set numRounds for CSHAKE variants\");\n      }\n    }\n\n    this.bigEndianMod = 1;\n    this.converterFunc = getStrConverter(this.inputFormat, this.utfType, this.bigEndianMod);\n    this.roundFunc = roundSHA3;\n    this.stateCloneFunc = cloneSHA3State;\n    this.newStateFunc = getNewState;\n    this.intermediateState = getNewState(variant);\n\n    this.isVariableLen = false;\n    switch (variant) {\n      case \"SHA3-224\":\n        this.variantBlockSize = variantBlockSize = 1152;\n        this.outputBinLen = 224;\n        this.HMACSupported = true;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getHMAC;\n        break;\n      case \"SHA3-256\":\n        this.variantBlockSize = variantBlockSize = 1088;\n        this.outputBinLen = 256;\n        this.HMACSupported = true;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getHMAC;\n        break;\n      case \"SHA3-384\":\n        this.variantBlockSize = variantBlockSize = 832;\n        this.outputBinLen = 384;\n        this.HMACSupported = true;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getHMAC;\n        break;\n      case \"SHA3-512\":\n        this.variantBlockSize = variantBlockSize = 576;\n        this.outputBinLen = 512;\n        this.HMACSupported = true;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getHMAC;\n        break;\n      case \"SHAKE128\":\n        delimiter = 0x1f;\n        this.variantBlockSize = variantBlockSize = 1344;\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        this.getMAC = null;\n        break;\n      case \"SHAKE256\":\n        delimiter = 0x1f;\n        this.variantBlockSize = variantBlockSize = 1088;\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        this.getMAC = null;\n        break;\n      case \"KMAC128\":\n        delimiter = 0x4;\n        this.variantBlockSize = variantBlockSize = 1344;\n        this._initializeKMAC(options);\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getKMAC;\n        break;\n      case \"KMAC256\":\n        delimiter = 0x4;\n        this.variantBlockSize = variantBlockSize = 1088;\n        this._initializeKMAC(options);\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getKMAC;\n        break;\n      case \"CSHAKE128\":\n        this.variantBlockSize = variantBlockSize = 1344;\n        delimiter = this._initializeCSHAKE(options);\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        this.getMAC = null;\n        break;\n      case \"CSHAKE256\":\n        this.variantBlockSize = variantBlockSize = 1088;\n        delimiter = this._initializeCSHAKE(options);\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        this.getMAC = null;\n        break;\n      default:\n        throw new Error(sha_variant_error);\n    }\n\n    /* This needs to be down here as CSHAKE can change its delimiter */\n    this.finalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputBinLen): number[] {\n      return finalizeSHA3(\n        remainder,\n        remainderBinLen,\n        processedBinLen,\n        state,\n        variantBlockSize,\n        delimiter,\n        outputBinLen\n      );\n    };\n\n    if (resolvedOptions[\"hmacKey\"]) {\n      this._setHMACKey(parseInputOption(\"hmacKey\", resolvedOptions[\"hmacKey\"], this.bigEndianMod));\n    }\n  }\n\n  /**\n   * Initialize CSHAKE variants.\n   *\n   * @param options Options containing CSHAKE params.\n   * @param funcNameOverride Overrides any \"funcName\" present in `options` (used with KMAC)\n   * @returns The delimiter to be used\n   */\n  protected _initializeCSHAKE(options?: CSHAKEOptionsNoEncodingType, funcNameOverride?: packedValue): number {\n    const resolvedOptions = resolveCSHAKEOptions(options || {});\n    if (funcNameOverride) {\n      resolvedOptions[\"funcName\"] = funcNameOverride;\n    }\n    const packedParams = packedLEConcat(\n      encode_string(resolvedOptions[\"funcName\"]),\n      encode_string(resolvedOptions[\"customization\"])\n    );\n\n    /* CSHAKE is defined to be a call to SHAKE iff both the customization and function-name string are both empty.  This\n       can be accomplished by processing nothing in this step. */\n    if (resolvedOptions[\"customization\"][\"binLen\"] !== 0 || resolvedOptions[\"funcName\"][\"binLen\"] !== 0) {\n      const byte_pad_out = byte_pad(packedParams, this.variantBlockSize >>> 3);\n      for (let i = 0; i < byte_pad_out.length; i += this.variantBlockSize >>> 5) {\n        this.intermediateState = this.roundFunc(\n          byte_pad_out.slice(i, i + (this.variantBlockSize >>> 5)),\n          this.intermediateState\n        );\n        this.processedLen += this.variantBlockSize;\n      }\n      return 0x04;\n    } else {\n      return 0x1f;\n    }\n  }\n\n  /**\n   * Initialize KMAC variants.\n   *\n   * @param options Options containing KMAC params.\n   */\n  protected _initializeKMAC(options: KMACOptionsNoEncodingType): void {\n    const resolvedOptions = resolveKMACOptions(options || {});\n\n    this._initializeCSHAKE(options, resolvedOptions[\"funcName\"]);\n    const byte_pad_out = byte_pad(encode_string(resolvedOptions[\"kmacKey\"]), this.variantBlockSize >>> 3);\n    for (let i = 0; i < byte_pad_out.length; i += this.variantBlockSize >>> 5) {\n      this.intermediateState = this.roundFunc(\n        byte_pad_out.slice(i, i + (this.variantBlockSize >>> 5)),\n        this.intermediateState\n      );\n      this.processedLen += this.variantBlockSize;\n    }\n    this.macKeySet = true;\n  }\n\n  /**\n   * Returns the the KMAC in the specified format.\n   *\n   * @param options Hashmap of extra outputs options. `outputLen` must be specified.\n   * @returns The KMAC in the format specified.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected _getKMAC(options: { outputLen: number }): number[] {\n    const concatedRemainder = packedLEConcat(\n      { value: this.remainder.slice(), binLen: this.remainderLen },\n      right_encode(options[\"outputLen\"])\n    );\n\n    return this.finalizeFunc(\n      concatedRemainder[\"value\"],\n      concatedRemainder[\"binLen\"],\n      this.processedLen,\n      this.stateCloneFunc(this.intermediateState),\n      options[\"outputLen\"]\n    );\n  }\n}\n","import { sha_variant_error } from \"./common\";\nimport {\n  CSHAKEOptionsEncodingType,\n  CSHAKEOptionsNoEncodingType,\n  SHAKEOptionsEncodingType,\n  SHAKEOptionsNoEncodingType,\n  EncodingType,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n  KMACOptionsNoEncodingType,\n  KMACOptionsEncodingType,\n} from \"./custom_types\";\nimport jsSHA1 from \"./sha1\";\nimport jsSHA256 from \"./sha256\";\nimport jsSHA512 from \"./sha512\";\nimport jsSHA3 from \"./sha3\";\n\ntype FixedLengthVariantType =\n  | \"SHA-1\"\n  | \"SHA-224\"\n  | \"SHA-256\"\n  | \"SHA-384\"\n  | \"SHA-512\"\n  | \"SHA3-224\"\n  | \"SHA3-256\"\n  | \"SHA3-384\"\n  | \"SHA3-512\";\n\nexport default class jsSHA {\n  private readonly shaObj: jsSHA1 | jsSHA256 | jsSHA512 | jsSHA3;\n  /**\n   * @param variant The desired SHA variant (SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-256,\n   *   SHA3-384, SHA3-512, SHAKE128, SHAKE256, CSHAKE128, CSHAKE256, KMAC128, or KMAC256) as a string.\n   * @param inputFormat The input format to be used in future `update` calls (TEXT, HEX, B64, BYTES, ARRAYBUFFER,\n   *   or UINT8ARRAY) as a string.\n   * @param options Options in the form of { encoding?: \"UTF8\" | \"UTF16BE\" | \"UTF16LE\"; numRounds?: number }.\n   *   `encoding` is for only TEXT input (defaults to UTF8) and `numRounds` defaults to 1.\n   *   `numRounds` is not valid for any of the MAC or CSHAKE variants.\n   *   * If the variant supports HMAC, `options` may have an additional `hmacKey` key which must be in the form of\n   *     {value: <INPUT>, format: <FORMAT>, encoding?: \"UTF8\" | \"UTF16BE\" | \"UTF16LE\"} where <FORMAT> takes the same\n   *     values as `inputFormat` and <INPUT> can be a `string | ArrayBuffer | Uint8Array` depending on <FORMAT>.\n   *     Supplying this key switches to HMAC calculation and replaces the now deprecated call to `setHMACKey`.\n   *   * If the variant is CSHAKE128 or CSHAKE256, `options` may have two additional keys, `customization` and `funcName`,\n   *     which are the NIST customization and function-name strings.  Both must be in the same form as `hmacKey`.\n   *   * If the variant is KMAC128 or KMAC256, `options` can include the `customization` key from CSHAKE variants and\n   *     *must* have a `kmacKey` key that takes the same form as the `customization` key.\n   */\n  constructor(variant: FixedLengthVariantType, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(\n    variant: FixedLengthVariantType,\n    inputFormat: FormatNoTextType,\n    options?: FixedLengthOptionsNoEncodingType\n  );\n  constructor(variant: \"SHAKE128\" | \"SHAKE256\", inputFormat: \"TEXT\", options?: SHAKEOptionsEncodingType);\n  constructor(variant: \"SHAKE128\" | \"SHAKE256\", inputFormat: FormatNoTextType, options?: SHAKEOptionsNoEncodingType);\n  constructor(variant: \"CSHAKE128\" | \"CSHAKE256\", inputFormat: \"TEXT\", options?: CSHAKEOptionsEncodingType);\n  constructor(variant: \"CSHAKE128\" | \"CSHAKE256\", inputFormat: FormatNoTextType, options?: CSHAKEOptionsNoEncodingType);\n  constructor(variant: \"KMAC128\" | \"KMAC256\", inputFormat: \"TEXT\", options: KMACOptionsEncodingType);\n  constructor(variant: \"KMAC128\" | \"KMAC256\", inputFormat: FormatNoTextType, options: KMACOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    if (\"SHA-1\" == variant) {\n      this.shaObj = new jsSHA1(variant, inputFormat, options);\n    } else if (\"SHA-224\" == variant || \"SHA-256\" == variant) {\n      this.shaObj = new jsSHA256(variant, inputFormat, options);\n    } else if (\"SHA-384\" == variant || \"SHA-512\" == variant) {\n      this.shaObj = new jsSHA512(variant, inputFormat, options);\n    } else if (\n      \"SHA3-224\" == variant ||\n      \"SHA3-256\" == variant ||\n      \"SHA3-384\" == variant ||\n      \"SHA3-512\" == variant ||\n      \"SHAKE128\" == variant ||\n      \"SHAKE256\" == variant ||\n      \"CSHAKE128\" == variant ||\n      \"CSHAKE256\" == variant ||\n      \"KMAC128\" == variant ||\n      \"KMAC256\" == variant\n    ) {\n      this.shaObj = new jsSHA3(variant, inputFormat, options);\n    } else {\n      throw new Error(sha_variant_error);\n    }\n  }\n\n  /**\n   * Takes `input` and hashes as many blocks as possible. Stores the rest for either a future `update` or `getHash` call.\n   *\n   * @param input The input to be hashed\n   */\n  update(input: string | ArrayBuffer | Uint8Array): void {\n    this.shaObj.update(input);\n  }\n\n  /**\n   * Returns the desired SHA or MAC (if a HMAC/KMAC key was specified) hash of the input fed in via `update` calls.\n   *\n   * @param format The desired output formatting (B64, HEX, BYTES, ARRAYBUFFER, or UINT8ARRAY) as a string.\n   * @param options Options in the form of { outputUpper?: boolean; b64Pad?: string; outputLen?: number;  }.\n   *   `outputLen` is required for variable length output variants (this option was previously called `shakeLen` which\n   *    is now deprecated).\n   *   `outputUpper` is only for HEX output (defaults to false) and b64pad is only for B64 output (defaults to \"=\").\n   * @returns The hash in the format specified.\n   */\n  getHash(format: \"HEX\", options?: { outputUpper?: boolean; outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"B64\", options?: { b64Pad?: string; outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"BYTES\", options?: { outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"UINT8ARRAY\", options?: { outputLen?: number; shakeLen?: number }): Uint8Array;\n  getHash(format: \"ARRAYBUFFER\", options?: { outputLen?: number; shakeLen?: number }): ArrayBuffer;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getHash(format: any, options?: any): any {\n    return this.shaObj.getHash(format, options);\n  }\n\n  /**\n   * Sets the HMAC key for an eventual `getHMAC` call.  Must be called immediately after jsSHA object instantiation.\n   * Now deprecated in favor of setting the `hmacKey` at object instantiation.\n   *\n   * @param key The key used to calculate the HMAC\n   * @param inputFormat The format of key (HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY) as a string.\n   * @param options Options in the form of { encoding?: \"UTF8\" | \"UTF16BE\" | \"UTF16LE }.  `encoding` is only for TEXT\n   *   and defaults to UTF8.\n   */\n  setHMACKey(key: string, inputFormat: \"TEXT\", options?: { encoding?: EncodingType }): void;\n  setHMACKey(key: string, inputFormat: \"B64\" | \"HEX\" | \"BYTES\"): void;\n  setHMACKey(key: ArrayBuffer, inputFormat: \"ARRAYBUFFER\"): void;\n  setHMACKey(key: Uint8Array, inputFormat: \"UINT8ARRAY\"): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setHMACKey(key: any, inputFormat: any, options?: any): void {\n    this.shaObj.setHMACKey(key, inputFormat, options);\n  }\n\n  /**\n   * Returns the the HMAC in the specified format using the key given by a previous `setHMACKey` call. Now deprecated\n   * in favor of just calling `getHash`.\n   *\n   * @param format The desired output formatting (B64, HEX, BYTES, ARRAYBUFFER, or UINT8ARRAY) as a string.\n   * @param options Options in the form of { outputUpper?: boolean; b64Pad?: string }. `outputUpper` is only for HEX\n   *   output (defaults to false) and `b64pad` is only for B64 output (defaults to \"=\").\n   * @returns The HMAC in the format specified.\n   */\n  getHMAC(format: \"HEX\", options?: { outputUpper?: boolean }): string;\n  getHMAC(format: \"B64\", options?: { b64Pad?: string }): string;\n  getHMAC(format: \"BYTES\"): string;\n  getHMAC(format: \"UINT8ARRAY\"): Uint8Array;\n  getHMAC(format: \"ARRAYBUFFER\"): ArrayBuffer;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getHMAC(format: any, options?: any): any {\n    return this.shaObj.getHMAC(format, options);\n  }\n}\n"],"mappings":"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A,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,YACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,YACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,YACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,YACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,YACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAAA,CAAO1D,CAAA,CAAO,KAAK,aACvB,IAAI0D,CAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}