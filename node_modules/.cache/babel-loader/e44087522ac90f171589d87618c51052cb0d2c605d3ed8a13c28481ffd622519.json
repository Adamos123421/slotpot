{"ast":null,"code":"\"use strict\";\n\n/* Made by @Gusarich and @Miandic */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultisigWallet = void 0;\nconst crypto_1 = require(\"@ton/crypto\");\nconst core_1 = require(\"@ton/core\");\nconst MULTISIG_CODE = core_1.Cell.fromBase64('te6ccgECKwEABBgAART/APSkE/S88sgLAQIBIAIDAgFIBAUE2vIgxwCOgzDbPOCDCNcYIPkBAdMH2zwiwAAToVNxePQOb6Hyn9s8VBq6+RDyoAb0BCD5AQHTH1EYuvKq0z9wUwHwCgHCCAGDCryx8mhTFYBA9A5voSCYDqQgwgryZw7f+COqH1NAufJhVCOjU04gIyEiAgLMBgcCASAMDQIBIAgJAgFmCgsAA9GEAiPymAvHoHN9CYbZ5S7Z4BPHohwhJQAtAKkItdJEqCTItdKlwLUAdAT8ArobBKAATwhbpEx4CBukTDgAdAg10rDAJrUAvALyFjPFszJ4HHXI8gBzxb0AMmACASAODwIBIBQVARW77ZbVA0cFUg2zyCoCAUgQEQIBIBITAXOxHXQgwjXGCD5AQHTB4IB1MTtQ9hTIHj0Dm+h8p/XC/9eMfkQ8qCuAfQEIW6TW3Ey4PkBWNs8AaQBgJwA9rtqA6ADoAPoCAXoCEfyAgPyA3XlP+AXkegAA54tkwAAXrhlXP8EA1WZ2oexAAgEgFhcCASAYGQFRtyVbZ4YmRmpGEAgegc30McJNhFpAADMaYeYuAFrgJhwLb+4cC3d0bhAjAYm1WZtnhqvgb+2xxsoicAgej430pBHEoFpAADHDhBACGuQkuuBk9kUWE5kAOeLKhACQCB6IYFImHFImHFImXEA2YlzNijAjAgEgGhsAF7UGtc4QQDVZnah7EAIBIBwdAgOZOB4fARGsGm2eL4G2CUAjABWt+UEAzJV2oewYQAENqTbPBVfBYCMAFa3f3CCAarM7UPYgAiDbPALyZfgAUENxQxPbPO1UIyoACtP/0wcwBKDbPC+uUyCw8mISsQKkJbNTHLmwJYEA4aojoCi8sPJpggGGoPgBBZcCERACPj4wjo0REB/bPEDXePRDEL0F4lQWW1Rz51YQU9zbPFRxClR6vCQlKCYAIO1E0NMf0wfTB9M/9AT0BNEAXgGOGjDSAAHyo9MH0wdQA9cBIPkBBfkBFbrypFAD4GwhIddKqgIi10m68qtwVCATAAwByMv/ywcE1ts87VT4D3AlblOJvrGYEG4QLVDHXwePGzBUJANQTds8UFWgRlAQSRA6SwlTuds8UFQWf+L4AAeDJaGOLCaAQPSWb6UglDBTA7neII4WODk5CNIAAZfTBzAW8AcFkTDifwgHBZJsMeKz5jAGKicoKQBgcI4pA9CDCNcY0wf0BDBTFnj0Dm+h8qXXC/9URUT5EPKmrlIgsVIDvRShI27mbCIyAH5SML6OIF8D+ACTItdKmALTB9QC+wAC6DJwyMoAQBSAQPRDAvAHjhdxyMsAFMsHEssHWM8BWM8WQBOAQPRDAeIBII6KEEUQNEMA2zztVJJfBuIqABzIyx/LB8sHyz/0APQAyQ==');\nclass MultisigWallet {\n  constructor(publicKeys, workchain, walletId, k, opts) {\n    this.provider = null;\n    this.owners = core_1.Dictionary.empty();\n    this.workchain = workchain;\n    this.walletId = walletId;\n    this.k = k;\n    for (let i = 0; i < publicKeys.length; i += 1) {\n      this.owners.set(i, Buffer.concat([publicKeys[i], Buffer.alloc(1)]));\n    }\n    this.init = {\n      code: MULTISIG_CODE,\n      data: (0, core_1.beginCell)().storeUint(this.walletId, 32).storeUint(this.owners.size, 8).storeUint(this.k, 8).storeUint(0, 64).storeDict(this.owners, core_1.Dictionary.Keys.Uint(8), core_1.Dictionary.Values.Buffer(33)).storeBit(0).endCell()\n    };\n    this.address = opts?.address || (0, core_1.contractAddress)(workchain, this.init);\n    if (opts?.provider) {\n      this.provider = opts.provider;\n    } else if (opts?.client) {\n      this.provider = opts.client.provider(this.address, {\n        code: this.init.code,\n        data: this.init.data\n      });\n    }\n  }\n  static async fromAddress(address, opts) {\n    let provider;\n    if (opts.provider) {\n      provider = opts.provider;\n    } else {\n      if (!opts.client) {\n        throw Error('Either provider or client must be specified');\n      }\n      provider = opts.client.provider(address, {\n        code: null,\n        data: null\n      });\n    }\n    const contractState = (await provider.getState()).state;\n    if (contractState.type !== 'active') {\n      throw Error('Contract must be active');\n    }\n    const data = core_1.Cell.fromBoc(contractState.data)[0].beginParse();\n    const walletId = data.loadUint(32);\n    data.skip(8);\n    const k = data.loadUint(8);\n    data.skip(64);\n    const owners = data.loadDict(core_1.Dictionary.Keys.Uint(8), core_1.Dictionary.Values.Buffer(33));\n    let publicKeys = [];\n    for (const [key, value] of owners) {\n      const publicKey = value.subarray(0, 32);\n      publicKeys.push(publicKey);\n    }\n    return new MultisigWallet(publicKeys, address.workChain, walletId, k, {\n      address,\n      provider,\n      client: opts.client\n    });\n  }\n  async deployExternal(provider) {\n    if (!provider && !this.provider) {\n      throw Error('you must specify provider if there is no such property in MultisigWallet instance');\n    }\n    if (!provider) {\n      provider = this.provider;\n    }\n    await provider.external(core_1.Cell.EMPTY);\n  }\n  async deployInternal(sender, value = 1000000000n) {\n    await sender.send({\n      sendMode: 3,\n      to: this.address,\n      value: value,\n      init: this.init,\n      body: core_1.Cell.EMPTY,\n      bounce: true\n    });\n  }\n  async sendOrder(order, secretKey, provider) {\n    if (!provider && !this.provider) {\n      throw Error('you must specify provider if there is no such property in MultisigWallet instance');\n    }\n    if (!provider) {\n      provider = this.provider;\n    }\n    let publicKey = (0, crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n    let ownerId = this.getOwnerIdByPubkey(publicKey);\n    let cell = order.toCell(ownerId);\n    let signature = (0, crypto_1.sign)(cell.hash(), secretKey);\n    cell = (0, core_1.beginCell)().storeBuffer(signature).storeSlice(cell.asSlice()).endCell();\n    await provider.external(cell);\n  }\n  async sendOrderWithoutSecretKey(order, signature, ownerId, provider) {\n    if (!provider && !this.provider) {\n      throw Error('you must specify provider if there is no such property in MultisigWallet instance');\n    }\n    if (!provider) {\n      provider = this.provider;\n    }\n    let cell = order.toCell(ownerId);\n    cell = (0, core_1.beginCell)().storeBuffer(signature).storeSlice(cell.asSlice()).endCell();\n    await provider.external(cell);\n  }\n  getOwnerIdByPubkey(publicKey) {\n    for (const [key, value] of this.owners) {\n      if (value.subarray(0, 32).equals(publicKey)) {\n        return key;\n      }\n    }\n    throw Error('public key is not an owner');\n  }\n}\nexports.MultisigWallet = MultisigWallet;","map":{"version":3,"names":["Object","defineProperty","exports","value","MultisigWallet","crypto_1","require","core_1","MULTISIG_CODE","Cell","fromBase64","constructor","publicKeys","workchain","walletId","k","opts","provider","owners","Dictionary","empty","i","length","set","Buffer","concat","alloc","init","code","data","beginCell","storeUint","size","storeDict","Keys","Uint","Values","storeBit","endCell","address","contractAddress","client","fromAddress","Error","contractState","getState","state","type","fromBoc","beginParse","loadUint","skip","loadDict","key","publicKey","subarray","push","workChain","deployExternal","external","EMPTY","deployInternal","sender","send","sendMode","to","body","bounce","sendOrder","order","secretKey","keyPairFromSecretKey","ownerId","getOwnerIdByPubkey","cell","toCell","signature","sign","hash","storeBuffer","storeSlice","asSlice","sendOrderWithoutSecretKey","equals"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/ton/dist/multisig/MultisigWallet.js"],"sourcesContent":["\"use strict\";\n/* Made by @Gusarich and @Miandic */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MultisigWallet = void 0;\nconst crypto_1 = require(\"@ton/crypto\");\nconst core_1 = require(\"@ton/core\");\nconst MULTISIG_CODE = core_1.Cell.fromBase64('te6ccgECKwEABBgAART/APSkE/S88sgLAQIBIAIDAgFIBAUE2vIgxwCOgzDbPOCDCNcYIPkBAdMH2zwiwAAToVNxePQOb6Hyn9s8VBq6+RDyoAb0BCD5AQHTH1EYuvKq0z9wUwHwCgHCCAGDCryx8mhTFYBA9A5voSCYDqQgwgryZw7f+COqH1NAufJhVCOjU04gIyEiAgLMBgcCASAMDQIBIAgJAgFmCgsAA9GEAiPymAvHoHN9CYbZ5S7Z4BPHohwhJQAtAKkItdJEqCTItdKlwLUAdAT8ArobBKAATwhbpEx4CBukTDgAdAg10rDAJrUAvALyFjPFszJ4HHXI8gBzxb0AMmACASAODwIBIBQVARW77ZbVA0cFUg2zyCoCAUgQEQIBIBITAXOxHXQgwjXGCD5AQHTB4IB1MTtQ9hTIHj0Dm+h8p/XC/9eMfkQ8qCuAfQEIW6TW3Ey4PkBWNs8AaQBgJwA9rtqA6ADoAPoCAXoCEfyAgPyA3XlP+AXkegAA54tkwAAXrhlXP8EA1WZ2oexAAgEgFhcCASAYGQFRtyVbZ4YmRmpGEAgegc30McJNhFpAADMaYeYuAFrgJhwLb+4cC3d0bhAjAYm1WZtnhqvgb+2xxsoicAgej430pBHEoFpAADHDhBACGuQkuuBk9kUWE5kAOeLKhACQCB6IYFImHFImHFImXEA2YlzNijAjAgEgGhsAF7UGtc4QQDVZnah7EAIBIBwdAgOZOB4fARGsGm2eL4G2CUAjABWt+UEAzJV2oewYQAENqTbPBVfBYCMAFa3f3CCAarM7UPYgAiDbPALyZfgAUENxQxPbPO1UIyoACtP/0wcwBKDbPC+uUyCw8mISsQKkJbNTHLmwJYEA4aojoCi8sPJpggGGoPgBBZcCERACPj4wjo0REB/bPEDXePRDEL0F4lQWW1Rz51YQU9zbPFRxClR6vCQlKCYAIO1E0NMf0wfTB9M/9AT0BNEAXgGOGjDSAAHyo9MH0wdQA9cBIPkBBfkBFbrypFAD4GwhIddKqgIi10m68qtwVCATAAwByMv/ywcE1ts87VT4D3AlblOJvrGYEG4QLVDHXwePGzBUJANQTds8UFWgRlAQSRA6SwlTuds8UFQWf+L4AAeDJaGOLCaAQPSWb6UglDBTA7neII4WODk5CNIAAZfTBzAW8AcFkTDifwgHBZJsMeKz5jAGKicoKQBgcI4pA9CDCNcY0wf0BDBTFnj0Dm+h8qXXC/9URUT5EPKmrlIgsVIDvRShI27mbCIyAH5SML6OIF8D+ACTItdKmALTB9QC+wAC6DJwyMoAQBSAQPRDAvAHjhdxyMsAFMsHEssHWM8BWM8WQBOAQPRDAeIBII6KEEUQNEMA2zztVJJfBuIqABzIyx/LB8sHyz/0APQAyQ==');\nclass MultisigWallet {\n    constructor(publicKeys, workchain, walletId, k, opts) {\n        this.provider = null;\n        this.owners = core_1.Dictionary.empty();\n        this.workchain = workchain;\n        this.walletId = walletId;\n        this.k = k;\n        for (let i = 0; i < publicKeys.length; i += 1) {\n            this.owners.set(i, Buffer.concat([publicKeys[i], Buffer.alloc(1)]));\n        }\n        this.init = {\n            code: MULTISIG_CODE,\n            data: (0, core_1.beginCell)()\n                .storeUint(this.walletId, 32)\n                .storeUint(this.owners.size, 8)\n                .storeUint(this.k, 8)\n                .storeUint(0, 64)\n                .storeDict(this.owners, core_1.Dictionary.Keys.Uint(8), core_1.Dictionary.Values.Buffer(33))\n                .storeBit(0)\n                .endCell(),\n        };\n        this.address = opts?.address || (0, core_1.contractAddress)(workchain, this.init);\n        if (opts?.provider) {\n            this.provider = opts.provider;\n        }\n        else if (opts?.client) {\n            this.provider = opts.client.provider(this.address, {\n                code: this.init.code,\n                data: this.init.data,\n            });\n        }\n    }\n    static async fromAddress(address, opts) {\n        let provider;\n        if (opts.provider) {\n            provider = opts.provider;\n        }\n        else {\n            if (!opts.client) {\n                throw Error('Either provider or client must be specified');\n            }\n            provider = opts.client.provider(address, {\n                code: null,\n                data: null,\n            });\n        }\n        const contractState = (await provider.getState()).state;\n        if (contractState.type !== 'active') {\n            throw Error('Contract must be active');\n        }\n        const data = core_1.Cell.fromBoc(contractState.data)[0].beginParse();\n        const walletId = data.loadUint(32);\n        data.skip(8);\n        const k = data.loadUint(8);\n        data.skip(64);\n        const owners = data.loadDict(core_1.Dictionary.Keys.Uint(8), core_1.Dictionary.Values.Buffer(33));\n        let publicKeys = [];\n        for (const [key, value] of owners) {\n            const publicKey = value.subarray(0, 32);\n            publicKeys.push(publicKey);\n        }\n        return new MultisigWallet(publicKeys, address.workChain, walletId, k, {\n            address,\n            provider,\n            client: opts.client,\n        });\n    }\n    async deployExternal(provider) {\n        if (!provider && !this.provider) {\n            throw Error('you must specify provider if there is no such property in MultisigWallet instance');\n        }\n        if (!provider) {\n            provider = this.provider;\n        }\n        await provider.external(core_1.Cell.EMPTY);\n    }\n    async deployInternal(sender, value = 1000000000n) {\n        await sender.send({\n            sendMode: 3,\n            to: this.address,\n            value: value,\n            init: this.init,\n            body: core_1.Cell.EMPTY,\n            bounce: true,\n        });\n    }\n    async sendOrder(order, secretKey, provider) {\n        if (!provider && !this.provider) {\n            throw Error('you must specify provider if there is no such property in MultisigWallet instance');\n        }\n        if (!provider) {\n            provider = this.provider;\n        }\n        let publicKey = (0, crypto_1.keyPairFromSecretKey)(secretKey).publicKey;\n        let ownerId = this.getOwnerIdByPubkey(publicKey);\n        let cell = order.toCell(ownerId);\n        let signature = (0, crypto_1.sign)(cell.hash(), secretKey);\n        cell = (0, core_1.beginCell)()\n            .storeBuffer(signature)\n            .storeSlice(cell.asSlice())\n            .endCell();\n        await provider.external(cell);\n    }\n    async sendOrderWithoutSecretKey(order, signature, ownerId, provider) {\n        if (!provider && !this.provider) {\n            throw Error('you must specify provider if there is no such property in MultisigWallet instance');\n        }\n        if (!provider) {\n            provider = this.provider;\n        }\n        let cell = order.toCell(ownerId);\n        cell = (0, core_1.beginCell)()\n            .storeBuffer(signature)\n            .storeSlice(cell.asSlice())\n            .endCell();\n        await provider.external(cell);\n    }\n    getOwnerIdByPubkey(publicKey) {\n        for (const [key, value] of this.owners) {\n            if (value.subarray(0, 32).equals(publicKey)) {\n                return key;\n            }\n        }\n        throw Error('public key is not an owner');\n    }\n}\nexports.MultisigWallet = MultisigWallet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}