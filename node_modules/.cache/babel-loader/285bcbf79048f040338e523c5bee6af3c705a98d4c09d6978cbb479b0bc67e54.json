{"ast":null,"code":"class SoundService {\n  constructor() {\n    this.sounds = {};\n    this.isEnabled = true;\n    this.volume = 0.7;\n    this.isLoaded = false;\n\n    // Sound definitions with their corresponding files\n    this.soundFiles = {\n      bet: '/bet.wav',\n      countdown: '/decompte-temps.wav',\n      analyze: '/annalyse-bet.wav',\n      spin: '/tic-roue.wav',\n      launch: '/lancement-tirage-v3.wav',\n      launchV2: '/lancement-tirage-v2.wav',\n      launchV1: '/lancement-tirage.wav',\n      winner: '/gagnant.wav'\n    };\n    this.init();\n  }\n  async init() {\n    try {\n      await this.loadSounds();\n      this.isLoaded = true;\n      console.log('ðŸ”Š Sound service initialized successfully');\n    } catch (error) {\n      console.warn('ðŸ”‡ Sound service failed to initialize:', error);\n    }\n  }\n  async loadSounds() {\n    const loadPromises = Object.entries(this.soundFiles).map(async ([key, path]) => {\n      try {\n        const audio = new Audio(path);\n        audio.preload = 'auto';\n        audio.volume = this.volume;\n        return new Promise((resolve, reject) => {\n          audio.addEventListener('canplaythrough', () => {\n            this.sounds[key] = audio;\n            resolve();\n          });\n          audio.addEventListener('error', e => {\n            console.warn(`Failed to load sound: ${key} (${path})`, e);\n            reject(e);\n          });\n\n          // Start loading\n          audio.load();\n        });\n      } catch (error) {\n        console.warn(`Error loading sound ${key}:`, error);\n      }\n    });\n\n    // Wait for all sounds to load (or fail)\n    await Promise.allSettled(loadPromises);\n  }\n  play(soundName, options = {}) {\n    if (!this.isEnabled || !this.isLoaded) {\n      return;\n    }\n    const sound = this.sounds[soundName];\n    if (!sound) {\n      console.warn(`Sound not found: ${soundName}`);\n      return;\n    }\n    try {\n      // Clone the audio to allow multiple simultaneous plays\n      const audioClone = sound.cloneNode();\n      audioClone.volume = options.volume !== undefined ? options.volume : this.volume;\n\n      // Play the sound\n      const playPromise = audioClone.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          console.warn(`Error playing sound ${soundName}:`, error);\n        });\n      }\n\n      // Clean up after playing\n      audioClone.addEventListener('ended', () => {\n        audioClone.remove();\n      });\n      return audioClone;\n    } catch (error) {\n      console.warn(`Error playing sound ${soundName}:`, error);\n    }\n  }\n\n  // Specific game sound methods\n  playBet() {\n    this.play('bet', {\n      volume: 0.5\n    });\n  }\n  playCountdown() {\n    this.play('countdown', {\n      volume: 0.6\n    });\n  }\n  playAnalyze() {\n    this.play('analyze', {\n      volume: 0.7\n    });\n  }\n  playSpin() {\n    this.play('spin', {\n      volume: 0.3\n    });\n  }\n\n  // Play spin with variable volume for dramatic effect\n  playSpinWithVolume(volume = 0.3) {\n    this.play('spin', {\n      volume\n    });\n  }\n  playLaunch() {\n    // Use the latest version by default\n    this.play('launch', {\n      volume: 0.8\n    });\n  }\n  playWinner() {\n    this.play('winner', {\n      volume: 0.9\n    });\n  }\n\n  // Volume and settings control\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume));\n    Object.values(this.sounds).forEach(sound => {\n      sound.volume = this.volume;\n    });\n  }\n  toggle() {\n    this.isEnabled = !this.isEnabled;\n    return this.isEnabled;\n  }\n  enable() {\n    this.isEnabled = true;\n  }\n  disable() {\n    this.isEnabled = false;\n  }\n\n  // Stop all sounds\n  stopAll() {\n    Object.values(this.sounds).forEach(sound => {\n      sound.pause();\n      sound.currentTime = 0;\n    });\n  }\n\n  // Check if sounds are loaded\n  isReady() {\n    return this.isLoaded;\n  }\n\n  // Get available sounds\n  getAvailableSounds() {\n    return Object.keys(this.soundFiles);\n  }\n}\n\n// Create and export singleton instance\nconst soundService = new SoundService();\nexport default soundService;","map":{"version":3,"names":["SoundService","constructor","sounds","isEnabled","volume","isLoaded","soundFiles","bet","countdown","analyze","spin","launch","launchV2","launchV1","winner","init","loadSounds","console","log","error","warn","loadPromises","Object","entries","map","key","path","audio","Audio","preload","Promise","resolve","reject","addEventListener","e","load","allSettled","play","soundName","options","sound","audioClone","cloneNode","undefined","playPromise","catch","remove","playBet","playCountdown","playAnalyze","playSpin","playSpinWithVolume","playLaunch","playWinner","setVolume","Math","max","min","values","forEach","toggle","enable","disable","stopAll","pause","currentTime","isReady","getAvailableSounds","keys","soundService"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/soundService.js"],"sourcesContent":["class SoundService {\r\n  constructor() {\r\n    this.sounds = {};\r\n    this.isEnabled = true;\r\n    this.volume = 0.7;\r\n    this.isLoaded = false;\r\n    \r\n    // Sound definitions with their corresponding files\r\n    this.soundFiles = {\r\n      bet: '/bet.wav',\r\n      countdown: '/decompte-temps.wav',\r\n      analyze: '/annalyse-bet.wav',\r\n      spin: '/tic-roue.wav',\r\n      launch: '/lancement-tirage-v3.wav',\r\n      launchV2: '/lancement-tirage-v2.wav',\r\n      launchV1: '/lancement-tirage.wav',\r\n      winner: '/gagnant.wav'\r\n    };\r\n    \r\n    this.init();\r\n  }\r\n  \r\n  async init() {\r\n    try {\r\n      await this.loadSounds();\r\n      this.isLoaded = true;\r\n      console.log('ðŸ”Š Sound service initialized successfully');\r\n    } catch (error) {\r\n      console.warn('ðŸ”‡ Sound service failed to initialize:', error);\r\n    }\r\n  }\r\n  \r\n  async loadSounds() {\r\n    const loadPromises = Object.entries(this.soundFiles).map(async ([key, path]) => {\r\n      try {\r\n        const audio = new Audio(path);\r\n        audio.preload = 'auto';\r\n        audio.volume = this.volume;\r\n        \r\n        return new Promise((resolve, reject) => {\r\n          audio.addEventListener('canplaythrough', () => {\r\n            this.sounds[key] = audio;\r\n            resolve();\r\n          });\r\n          \r\n          audio.addEventListener('error', (e) => {\r\n            console.warn(`Failed to load sound: ${key} (${path})`, e);\r\n            reject(e);\r\n          });\r\n          \r\n          // Start loading\r\n          audio.load();\r\n        });\r\n      } catch (error) {\r\n        console.warn(`Error loading sound ${key}:`, error);\r\n      }\r\n    });\r\n    \r\n    // Wait for all sounds to load (or fail)\r\n    await Promise.allSettled(loadPromises);\r\n  }\r\n  \r\n  play(soundName, options = {}) {\r\n    if (!this.isEnabled || !this.isLoaded) {\r\n      return;\r\n    }\r\n    \r\n    const sound = this.sounds[soundName];\r\n    if (!sound) {\r\n      console.warn(`Sound not found: ${soundName}`);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Clone the audio to allow multiple simultaneous plays\r\n      const audioClone = sound.cloneNode();\r\n      audioClone.volume = options.volume !== undefined ? options.volume : this.volume;\r\n      \r\n      // Play the sound\r\n      const playPromise = audioClone.play();\r\n      \r\n      if (playPromise !== undefined) {\r\n        playPromise.catch(error => {\r\n          console.warn(`Error playing sound ${soundName}:`, error);\r\n        });\r\n      }\r\n      \r\n      // Clean up after playing\r\n      audioClone.addEventListener('ended', () => {\r\n        audioClone.remove();\r\n      });\r\n      \r\n      return audioClone;\r\n    } catch (error) {\r\n      console.warn(`Error playing sound ${soundName}:`, error);\r\n    }\r\n  }\r\n  \r\n  // Specific game sound methods\r\n  playBet() {\r\n    this.play('bet', { volume: 0.5 });\r\n  }\r\n  \r\n  playCountdown() {\r\n    this.play('countdown', { volume: 0.6 });\r\n  }\r\n  \r\n  playAnalyze() {\r\n    this.play('analyze', { volume: 0.7 });\r\n  }\r\n  \r\n  playSpin() {\r\n    this.play('spin', { volume: 0.3 });\r\n  }\r\n  \r\n  // Play spin with variable volume for dramatic effect\r\n  playSpinWithVolume(volume = 0.3) {\r\n    this.play('spin', { volume });\r\n  }\r\n  \r\n  playLaunch() {\r\n    // Use the latest version by default\r\n    this.play('launch', { volume: 0.8 });\r\n  }\r\n  \r\n  playWinner() {\r\n    this.play('winner', { volume: 0.9 });\r\n  }\r\n  \r\n  // Volume and settings control\r\n  setVolume(volume) {\r\n    this.volume = Math.max(0, Math.min(1, volume));\r\n    Object.values(this.sounds).forEach(sound => {\r\n      sound.volume = this.volume;\r\n    });\r\n  }\r\n  \r\n  toggle() {\r\n    this.isEnabled = !this.isEnabled;\r\n    return this.isEnabled;\r\n  }\r\n  \r\n  enable() {\r\n    this.isEnabled = true;\r\n  }\r\n  \r\n  disable() {\r\n    this.isEnabled = false;\r\n  }\r\n  \r\n  // Stop all sounds\r\n  stopAll() {\r\n    Object.values(this.sounds).forEach(sound => {\r\n      sound.pause();\r\n      sound.currentTime = 0;\r\n    });\r\n  }\r\n  \r\n  // Check if sounds are loaded\r\n  isReady() {\r\n    return this.isLoaded;\r\n  }\r\n  \r\n  // Get available sounds\r\n  getAvailableSounds() {\r\n    return Object.keys(this.soundFiles);\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst soundService = new SoundService();\r\n\r\nexport default soundService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}