{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseFullConfig = exports.loadConfigParamsAsSlice = exports.loadConfigParamById = exports.parseVotingSetup = exports.parseProposalSetup = exports.configParse29 = exports.configParse28 = exports.configParseMsgPrices = exports.configParseGasLimitsPrices = exports.configParseBridge = exports.configParseValidatorSet = exports.configParse12 = exports.configParseWorkchainDescriptor = exports.configParse40 = exports.configParse8 = exports.configParse18 = exports.configParse17 = exports.configParse16 = exports.configParse15 = exports.configParse13 = exports.configParse5 = exports.configParseMasterAddressRequired = exports.parseBridge = exports.parseValidatorSet = exports.configParseMasterAddress = void 0;\nconst core_1 = require(\"@ton/core\");\nfunction configParseMasterAddress(slice) {\n  if (slice) {\n    return new core_1.Address(-1, slice.loadBuffer(32));\n  } else {\n    return null;\n  }\n}\nexports.configParseMasterAddress = configParseMasterAddress;\nfunction readPublicKey(slice) {\n  // 8e81278a\n  if (slice.loadUint(32) !== 0x8e81278a) {\n    throw Error('Invalid config');\n  }\n  return slice.loadBuffer(32);\n}\nconst ValidatorDescriptionDictValue = {\n  serialize(src, builder) {\n    throw Error(\"not implemented\");\n  },\n  parse(src) {\n    const header = src.loadUint(8);\n    if (header === 0x53) {\n      return {\n        publicKey: readPublicKey(src),\n        weight: src.loadUintBig(64),\n        adnlAddress: null\n      };\n    } else if (header === 0x73) {\n      return {\n        publicKey: readPublicKey(src),\n        weight: src.loadUintBig(64),\n        adnlAddress: src.loadBuffer(32)\n      };\n    } else {\n      throw Error('Invalid config');\n    }\n  }\n};\nfunction parseValidatorSet(slice) {\n  const header = slice.loadUint(8);\n  if (header === 0x11) {\n    const timeSince = slice.loadUint(32);\n    const timeUntil = slice.loadUint(32);\n    const total = slice.loadUint(16);\n    const main = slice.loadUint(16);\n    const list = slice.loadDictDirect(core_1.Dictionary.Keys.Uint(16), ValidatorDescriptionDictValue);\n    return {\n      timeSince,\n      timeUntil,\n      total,\n      main,\n      totalWeight: null,\n      list\n    };\n  } else if (header === 0x12) {\n    const timeSince = slice.loadUint(32);\n    const timeUntil = slice.loadUint(32);\n    const total = slice.loadUint(16);\n    const main = slice.loadUint(16);\n    const totalWeight = slice.loadUintBig(64);\n    const list = slice.loadDict(core_1.Dictionary.Keys.Uint(16), ValidatorDescriptionDictValue);\n    return {\n      timeSince,\n      timeUntil,\n      total,\n      main,\n      totalWeight,\n      list\n    };\n  }\n}\nexports.parseValidatorSet = parseValidatorSet;\nfunction parseBridge(slice) {\n  const bridgeAddress = new core_1.Address(-1, slice.loadBuffer(32));\n  const oracleMultisigAddress = new core_1.Address(-1, slice.loadBuffer(32));\n  const oraclesDict = slice.loadDict(core_1.Dictionary.Keys.Buffer(32), core_1.Dictionary.Values.Buffer(32));\n  const oracles = new Map();\n  for (const [local, remote] of oraclesDict) {\n    oracles.set(new core_1.Address(-1, local).toString(), remote);\n  }\n  const externalChainAddress = slice.loadBuffer(32);\n  return {\n    bridgeAddress,\n    oracleMultisigAddress,\n    oracles,\n    externalChainAddress\n  };\n}\nexports.parseBridge = parseBridge;\nfunction configParseMasterAddressRequired(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  return configParseMasterAddress(slice);\n}\nexports.configParseMasterAddressRequired = configParseMasterAddressRequired;\nfunction configParse5(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  const magic = slice.loadUint(8);\n  if (magic === 0x01) {\n    const blackholeAddr = slice.loadBit() ? new core_1.Address(-1, slice.loadBuffer(32)) : null;\n    const feeBurnNominator = slice.loadUint(32);\n    const feeBurnDenominator = slice.loadUint(32);\n    return {\n      blackholeAddr,\n      feeBurnNominator,\n      feeBurnDenominator\n    };\n  }\n  throw new Error('Invalid config');\n}\nexports.configParse5 = configParse5;\nfunction configParse13(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  const magic = slice.loadUint(8);\n  if (magic === 0x1a) {\n    const deposit = slice.loadCoins();\n    const bitPrice = slice.loadCoins();\n    const cellPrice = slice.loadCoins();\n    return {\n      deposit,\n      bitPrice,\n      cellPrice\n    };\n  }\n  throw new Error('Invalid config');\n}\nexports.configParse13 = configParse13;\nfunction configParse15(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  const validatorsElectedFor = slice.loadUint(32);\n  const electorsStartBefore = slice.loadUint(32);\n  const electorsEndBefore = slice.loadUint(32);\n  const stakeHeldFor = slice.loadUint(32);\n  return {\n    validatorsElectedFor,\n    electorsStartBefore,\n    electorsEndBefore,\n    stakeHeldFor\n  };\n}\nexports.configParse15 = configParse15;\nfunction configParse16(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  const maxValidators = slice.loadUint(16);\n  const maxMainValidators = slice.loadUint(16);\n  const minValidators = slice.loadUint(16);\n  return {\n    maxValidators,\n    maxMainValidators,\n    minValidators\n  };\n}\nexports.configParse16 = configParse16;\nfunction configParse17(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  const minStake = slice.loadCoins();\n  const maxStake = slice.loadCoins();\n  const minTotalStake = slice.loadCoins();\n  const maxStakeFactor = slice.loadUint(32);\n  return {\n    minStake,\n    maxStake,\n    minTotalStake,\n    maxStakeFactor\n  };\n}\nexports.configParse17 = configParse17;\nconst StoragePricesDictValue = {\n  serialize(src, builder) {\n    throw Error(\"not implemented\");\n  },\n  parse(src) {\n    const header = src.loadUint(8);\n    if (header !== 0xcc) {\n      throw Error('Invalid config');\n    }\n    const utime_since = src.loadUint(32);\n    const bit_price_ps = src.loadUintBig(64);\n    const cell_price_ps = src.loadUintBig(64);\n    const mc_bit_price_ps = src.loadUintBig(64);\n    const mc_cell_price_ps = src.loadUintBig(64);\n    return {\n      utime_since,\n      bit_price_ps,\n      cell_price_ps,\n      mc_bit_price_ps,\n      mc_cell_price_ps\n    };\n  }\n};\nfunction configParse18(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  return slice.loadDictDirect(core_1.Dictionary.Keys.Buffer(4), StoragePricesDictValue).values();\n}\nexports.configParse18 = configParse18;\nfunction configParse8(slice) {\n  if (!slice) {\n    return {\n      version: 0,\n      capabilities: 0n\n    };\n  }\n  const version = slice.loadUint(32);\n  const capabilities = slice.loadUintBig(64);\n  return {\n    version,\n    capabilities\n  };\n}\nexports.configParse8 = configParse8;\nfunction configParse40(slice) {\n  if (!slice) {\n    return null;\n  }\n  const header = slice.loadUint(8);\n  if (header !== 1) {\n    throw Error('Invalid config');\n  }\n  const defaultFlatFine = slice.loadCoins();\n  const defaultProportionaFine = slice.loadCoins();\n  const severityFlatMult = slice.loadUint(16);\n  const severityProportionalMult = slice.loadUint(16);\n  const unfunishableInterval = slice.loadUint(16);\n  const longInterval = slice.loadUint(16);\n  const longFlatMult = slice.loadUint(16);\n  const longProportionalMult = slice.loadUint(16);\n  const mediumInterval = slice.loadUint(16);\n  const mediumFlatMult = slice.loadUint(16);\n  const mediumProportionalMult = slice.loadUint(16);\n  return {\n    defaultFlatFine,\n    defaultProportionaFine,\n    severityFlatMult,\n    severityProportionalMult,\n    unfunishableInterval,\n    longInterval,\n    longFlatMult,\n    longProportionalMult,\n    mediumInterval,\n    mediumFlatMult,\n    mediumProportionalMult\n  };\n}\nexports.configParse40 = configParse40;\nfunction configParseWorkchainDescriptor(slice) {\n  if (slice.loadUint(8) !== 0xA6) {\n    throw Error('Invalid config');\n  }\n  const enabledSince = slice.loadUint(32);\n  const actialMinSplit = slice.loadUint(8);\n  const min_split = slice.loadUint(8);\n  const max_split = slice.loadUint(8);\n  const basic = slice.loadBit();\n  const active = slice.loadBit();\n  const accept_msgs = slice.loadBit();\n  const flags = slice.loadUint(13);\n  const zerostateRootHash = slice.loadBuffer(32);\n  const zerostateFileHash = slice.loadBuffer(32);\n  const version = slice.loadUint(32);\n  // Only basic format supported\n  if (slice.loadBit()) {\n    throw Error('Invalid config');\n  }\n  const vmVersion = slice.loadUint(32);\n  const vmMode = slice.loadUintBig(64);\n  return {\n    enabledSince,\n    actialMinSplit,\n    min_split,\n    max_split,\n    basic,\n    active,\n    accept_msgs,\n    flags,\n    zerostateRootHash,\n    zerostateFileHash,\n    version,\n    format: {\n      vmVersion,\n      vmMode\n    }\n  };\n}\nexports.configParseWorkchainDescriptor = configParseWorkchainDescriptor;\nconst WorkchainDescriptorDictValue = {\n  serialize(src, builder) {\n    throw Error(\"not implemented\");\n  },\n  parse(src) {\n    if (src.loadUint(8) !== 0xA6) {\n      throw Error('Invalid config');\n    }\n    const enabledSince = src.loadUint(32);\n    const actialMinSplit = src.loadUint(8);\n    const min_split = src.loadUint(8);\n    const max_split = src.loadUint(8);\n    const basic = src.loadBit();\n    const active = src.loadBit();\n    const accept_msgs = src.loadBit();\n    const flags = src.loadUint(13);\n    const zerostateRootHash = src.loadBuffer(32);\n    const zerostateFileHash = src.loadBuffer(32);\n    const version = src.loadUint(32);\n    // Only basic format supported\n    if (src.loadBit()) {\n      throw Error('Invalid config');\n    }\n    const vmVersion = src.loadUint(32);\n    const vmMode = src.loadUintBig(64);\n    return {\n      enabledSince,\n      actialMinSplit,\n      min_split,\n      max_split,\n      basic,\n      active,\n      accept_msgs,\n      flags,\n      zerostateRootHash,\n      zerostateFileHash,\n      version,\n      format: {\n        vmVersion,\n        vmMode\n      }\n    };\n  }\n};\nfunction configParse12(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  const wd = slice.loadDict(core_1.Dictionary.Keys.Uint(32), WorkchainDescriptorDictValue);\n  if (wd) {\n    return wd;\n  }\n  throw Error('No workchains exist');\n}\nexports.configParse12 = configParse12;\nfunction configParseValidatorSet(slice) {\n  if (!slice) {\n    return null;\n  }\n  return parseValidatorSet(slice);\n}\nexports.configParseValidatorSet = configParseValidatorSet;\nfunction configParseBridge(slice) {\n  if (!slice) {\n    return null;\n  }\n  return parseBridge(slice);\n}\nexports.configParseBridge = configParseBridge;\nfunction parseGasLimitsInternal(slice) {\n  const tag = slice.loadUint(8);\n  if (tag === 0xde) {\n    const gasPrice = slice.loadUintBig(64);\n    const gasLimit = slice.loadUintBig(64);\n    const specialGasLimit = slice.loadUintBig(64);\n    const gasCredit = slice.loadUintBig(64);\n    const blockGasLimit = slice.loadUintBig(64);\n    const freezeDueLimit = slice.loadUintBig(64);\n    const deleteDueLimit = slice.loadUintBig(64);\n    return {\n      gasPrice,\n      gasLimit,\n      specialGasLimit,\n      gasCredit,\n      blockGasLimit,\n      freezeDueLimit,\n      deleteDueLimit\n    };\n  } else if (tag === 0xdd) {\n    const gasPrice = slice.loadUintBig(64);\n    const gasLimit = slice.loadUintBig(64);\n    const gasCredit = slice.loadUintBig(64);\n    const blockGasLimit = slice.loadUintBig(64);\n    const freezeDueLimit = slice.loadUintBig(64);\n    const deleteDueLimit = slice.loadUintBig(64);\n    return {\n      gasPrice,\n      gasLimit,\n      gasCredit,\n      blockGasLimit,\n      freezeDueLimit,\n      deleteDueLimit\n    };\n  } else {\n    throw Error('Invalid config');\n  }\n}\nfunction configParseGasLimitsPrices(slice) {\n  if (!slice) {\n    throw Error('Invalid config');\n  }\n  const tag = slice.loadUint(8);\n  if (tag === 0xd1) {\n    const flatLimit = slice.loadUintBig(64);\n    const flatGasPrice = slice.loadUintBig(64);\n    const other = parseGasLimitsInternal(slice);\n    return {\n      flatLimit,\n      flatGasPrice,\n      other\n    };\n  } else {\n    throw Error('Invalid config');\n  }\n}\nexports.configParseGasLimitsPrices = configParseGasLimitsPrices;\nfunction configParseMsgPrices(slice) {\n  if (!slice) {\n    throw new Error('Invalid config');\n  }\n  const magic = slice.loadUint(8);\n  if (magic !== 0xea) {\n    throw new Error('Invalid msg prices param');\n  }\n  return {\n    lumpPrice: slice.loadUintBig(64),\n    bitPrice: slice.loadUintBig(64),\n    cellPrice: slice.loadUintBig(64),\n    ihrPriceFactor: slice.loadUint(32),\n    firstFrac: slice.loadUint(16),\n    nextFrac: slice.loadUint(16)\n  };\n}\nexports.configParseMsgPrices = configParseMsgPrices;\n// catchain_config#c1 mc_catchain_lifetime:uint32 shard_catchain_lifetime:uint32 \n//   shard_validators_lifetime:uint32 shard_validators_num:uint32 = CatchainConfig;\n// catchain_config_new#c2 flags:(## 7) { flags = 0 } shuffle_mc_validators:Bool\n//   mc_catchain_lifetime:uint32 shard_catchain_lifetime:uint32\n//   shard_validators_lifetime:uint32 shard_validators_num:uint32 = CatchainConfig;\nfunction configParse28(slice) {\n  if (!slice) {\n    throw new Error('Invalid config');\n  }\n  const magic = slice.loadUint(8);\n  if (magic === 0xc1) {\n    const masterCatchainLifetime = slice.loadUint(32);\n    const shardCatchainLifetime = slice.loadUint(32);\n    const shardValidatorsLifetime = slice.loadUint(32);\n    const shardValidatorsCount = slice.loadUint(32);\n    return {\n      masterCatchainLifetime,\n      shardCatchainLifetime,\n      shardValidatorsLifetime,\n      shardValidatorsCount\n    };\n  }\n  if (magic === 0xc2) {\n    const flags = slice.loadUint(7);\n    const suffleMasterValidators = slice.loadBit();\n    const masterCatchainLifetime = slice.loadUint(32);\n    const shardCatchainLifetime = slice.loadUint(32);\n    const shardValidatorsLifetime = slice.loadUint(32);\n    const shardValidatorsCount = slice.loadUint(32);\n    return {\n      flags,\n      suffleMasterValidators,\n      masterCatchainLifetime,\n      shardCatchainLifetime,\n      shardValidatorsLifetime,\n      shardValidatorsCount\n    };\n  }\n  throw new Error('Invalid config');\n}\nexports.configParse28 = configParse28;\n// consensus_config#d6 round_candidates:# { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 = ConsensusConfig;\n// consensus_config_new#d7 flags:(## 7) { flags = 0 } new_catchain_ids:Bool\n//   round_candidates:(## 8) { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 = ConsensusConfig;\n// consensus_config_v3#d8 flags:(## 7) { flags = 0 } new_catchain_ids:Bool\n//   round_candidates:(## 8) { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 \n//   proto_version:uint16 = ConsensusConfig;\nfunction configParse29(slice) {\n  if (!slice) {\n    throw new Error('Invalid config');\n  }\n  const magic = slice.loadUint(8);\n  if (magic === 0xd6) {\n    const roundCandidates = slice.loadUint(32);\n    const nextCandidateDelay = slice.loadUint(32);\n    const consensusTimeout = slice.loadUint(32);\n    const fastAttempts = slice.loadUint(32);\n    const attemptDuration = slice.loadUint(32);\n    const catchainMaxDeps = slice.loadUint(32);\n    const maxBlockBytes = slice.loadUint(32);\n    const maxColaltedBytes = slice.loadUint(32);\n    return {\n      roundCandidates,\n      nextCandidateDelay,\n      consensusTimeout,\n      fastAttempts,\n      attemptDuration,\n      catchainMaxDeps,\n      maxBlockBytes,\n      maxColaltedBytes\n    };\n  } else if (magic === 0xd7) {\n    const flags = slice.loadUint(7);\n    const newCatchainIds = slice.loadBit();\n    const roundCandidates = slice.loadUint(8);\n    const nextCandidateDelay = slice.loadUint(32);\n    const consensusTimeout = slice.loadUint(32);\n    const fastAttempts = slice.loadUint(32);\n    const attemptDuration = slice.loadUint(32);\n    const catchainMaxDeps = slice.loadUint(32);\n    const maxBlockBytes = slice.loadUint(32);\n    const maxColaltedBytes = slice.loadUint(32);\n    return {\n      flags,\n      newCatchainIds,\n      roundCandidates,\n      nextCandidateDelay,\n      consensusTimeout,\n      fastAttempts,\n      attemptDuration,\n      catchainMaxDeps,\n      maxBlockBytes,\n      maxColaltedBytes\n    };\n  } else if (magic === 0xd8) {\n    const flags = slice.loadUint(7);\n    const newCatchainIds = slice.loadBit();\n    const roundCandidates = slice.loadUint(8);\n    const nextCandidateDelay = slice.loadUint(32);\n    const consensusTimeout = slice.loadUint(32);\n    const fastAttempts = slice.loadUint(32);\n    const attemptDuration = slice.loadUint(32);\n    const catchainMaxDeps = slice.loadUint(32);\n    const maxBlockBytes = slice.loadUint(32);\n    const maxColaltedBytes = slice.loadUint(32);\n    const protoVersion = slice.loadUint(16);\n    return {\n      flags,\n      newCatchainIds,\n      roundCandidates,\n      nextCandidateDelay,\n      consensusTimeout,\n      fastAttempts,\n      attemptDuration,\n      catchainMaxDeps,\n      maxBlockBytes,\n      maxColaltedBytes,\n      protoVersion\n    };\n  } else if (magic === 0xd9) {\n    const flags = slice.loadUint(7);\n    const newCatchainIds = slice.loadBit();\n    const roundCandidates = slice.loadUint(8);\n    const nextCandidateDelay = slice.loadUint(32);\n    const consensusTimeout = slice.loadUint(32);\n    const fastAttempts = slice.loadUint(32);\n    const attemptDuration = slice.loadUint(32);\n    const catchainMaxDeps = slice.loadUint(32);\n    const maxBlockBytes = slice.loadUint(32);\n    const maxColaltedBytes = slice.loadUint(32);\n    const protoVersion = slice.loadUint(16);\n    const catchainMaxBlocksCoeff = slice.loadUint(32);\n    return {\n      flags,\n      newCatchainIds,\n      roundCandidates,\n      nextCandidateDelay,\n      consensusTimeout,\n      fastAttempts,\n      attemptDuration,\n      catchainMaxDeps,\n      maxBlockBytes,\n      maxColaltedBytes,\n      protoVersion,\n      catchainMaxBlocksCoeff\n    };\n  }\n  throw new Error('Invalid config');\n}\nexports.configParse29 = configParse29;\n// cfg_vote_cfg#36 min_tot_rounds:uint8 max_tot_rounds:uint8 min_wins:uint8 max_losses:uint8 min_store_sec:uint32 max_store_sec:uint32 bit_price:uint32 cell_price:uint32 = ConfigProposalSetup;\nfunction parseProposalSetup(slice) {\n  const magic = slice.loadUint(8);\n  if (magic !== 0x36) {\n    throw new Error('Invalid config');\n  }\n  const minTotalRounds = slice.loadUint(8);\n  const maxTotalRounds = slice.loadUint(8);\n  const minWins = slice.loadUint(8);\n  const maxLoses = slice.loadUint(8);\n  const minStoreSec = slice.loadUint(32);\n  const maxStoreSec = slice.loadUint(32);\n  const bitPrice = slice.loadUint(32);\n  const cellPrice = slice.loadUint(32);\n  return {\n    minTotalRounds,\n    maxTotalRounds,\n    minWins,\n    maxLoses,\n    minStoreSec,\n    maxStoreSec,\n    bitPrice,\n    cellPrice\n  };\n}\nexports.parseProposalSetup = parseProposalSetup;\n// cfg_vote_setup#91 normal_params:^ConfigProposalSetup critical_params:^ConfigProposalSetup = ConfigVotingSetup;\nfunction parseVotingSetup(slice) {\n  if (!slice) {\n    throw new Error('Invalid config');\n  }\n  const magic = slice.loadUint(8);\n  if (magic !== 0x91) {\n    throw new Error('Invalid config');\n  }\n  const normalParams = parseProposalSetup(slice.loadRef().beginParse());\n  const criticalParams = parseProposalSetup(slice.loadRef().beginParse());\n  return {\n    normalParams,\n    criticalParams\n  };\n}\nexports.parseVotingSetup = parseVotingSetup;\nfunction loadConfigParams(configBase64) {\n  const comfigMap = core_1.Cell.fromBase64(configBase64).beginParse().loadDictDirect(core_1.Dictionary.Keys.Int(32), core_1.Dictionary.Values.Cell());\n  return comfigMap;\n}\nfunction loadConfigParamById(configBase64, id) {\n  return loadConfigParams(configBase64).get(id);\n}\nexports.loadConfigParamById = loadConfigParamById;\nfunction loadConfigParamsAsSlice(configBase64) {\n  const pramsAsCells = loadConfigParams(configBase64);\n  const params = new Map();\n  for (const [key, value] of pramsAsCells) {\n    params.set(key, value.beginParse());\n  }\n  return params;\n}\nexports.loadConfigParamsAsSlice = loadConfigParamsAsSlice;\nfunction parseFullConfig(configs) {\n  return {\n    configAddress: configParseMasterAddressRequired(configs.get(0)),\n    electorAddress: configParseMasterAddressRequired(configs.get(1)),\n    minterAddress: configParseMasterAddress(configs.get(2)),\n    feeCollectorAddress: configParseMasterAddress(configs.get(3)),\n    dnsRootAddress: configParseMasterAddress(configs.get(4)),\n    burningConfig: configParse5(configs.get(5)),\n    globalVersion: configParse8(configs.get(8)),\n    workchains: configParse12(configs.get(12)),\n    voting: parseVotingSetup(configs.get(11)),\n    validators: {\n      ...configParse15(configs.get(15)),\n      ...configParse16(configs.get(16)),\n      ...configParse17(configs.get(17))\n    },\n    storagePrices: configParse18(configs.get(18)),\n    gasPrices: {\n      masterchain: configParseGasLimitsPrices(configs.get(20)),\n      workchain: configParseGasLimitsPrices(configs.get(21))\n    },\n    msgPrices: {\n      masterchain: configParseMsgPrices(configs.get(24)),\n      workchain: configParseMsgPrices(configs.get(25))\n    },\n    validatorSets: {\n      prevValidators: configParseValidatorSet(configs.get(32)),\n      prevTempValidators: configParseValidatorSet(configs.get(33)),\n      currentValidators: configParseValidatorSet(configs.get(34)),\n      currentTempValidators: configParseValidatorSet(configs.get(35)),\n      nextValidators: configParseValidatorSet(configs.get(36)),\n      nextTempValidators: configParseValidatorSet(configs.get(37))\n    },\n    validatorsPunish: configParse40(configs.get(40)),\n    bridges: {\n      ethereum: configParseBridge(configs.get(71)),\n      binance: configParseBridge(configs.get(72)),\n      polygon: configParseBridge(configs.get(73))\n    },\n    catchain: configParse28(configs.get(28)),\n    consensus: configParse29(configs.get(29))\n    // TODO: mint_new_price:Grams mint_add_price:Grams = ConfigParam 6;\n    // TODO: to_mint:ExtraCurrencyCollection = ConfigParam 7\n    // TODO: mandatory_params:(Hashmap 32 True) = ConfigParam 9\n    // TODO: critical_params:(Hashmap 32 True) = ConfigParam 10\n    // TODO: BlockCreateFees = ConfigParam 14\n  };\n}\nexports.parseFullConfig = parseFullConfig;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseFullConfig","loadConfigParamsAsSlice","loadConfigParamById","parseVotingSetup","parseProposalSetup","configParse29","configParse28","configParseMsgPrices","configParseGasLimitsPrices","configParseBridge","configParseValidatorSet","configParse12","configParseWorkchainDescriptor","configParse40","configParse8","configParse18","configParse17","configParse16","configParse15","configParse13","configParse5","configParseMasterAddressRequired","parseBridge","parseValidatorSet","configParseMasterAddress","core_1","require","slice","Address","loadBuffer","readPublicKey","loadUint","Error","ValidatorDescriptionDictValue","serialize","src","builder","parse","header","publicKey","weight","loadUintBig","adnlAddress","timeSince","timeUntil","total","main","list","loadDictDirect","Dictionary","Keys","Uint","totalWeight","loadDict","bridgeAddress","oracleMultisigAddress","oraclesDict","Buffer","Values","oracles","Map","local","remote","set","toString","externalChainAddress","magic","blackholeAddr","loadBit","feeBurnNominator","feeBurnDenominator","deposit","loadCoins","bitPrice","cellPrice","validatorsElectedFor","electorsStartBefore","electorsEndBefore","stakeHeldFor","maxValidators","maxMainValidators","minValidators","minStake","maxStake","minTotalStake","maxStakeFactor","StoragePricesDictValue","utime_since","bit_price_ps","cell_price_ps","mc_bit_price_ps","mc_cell_price_ps","values","version","capabilities","defaultFlatFine","defaultProportionaFine","severityFlatMult","severityProportionalMult","unfunishableInterval","longInterval","longFlatMult","longProportionalMult","mediumInterval","mediumFlatMult","mediumProportionalMult","enabledSince","actialMinSplit","min_split","max_split","basic","active","accept_msgs","flags","zerostateRootHash","zerostateFileHash","vmVersion","vmMode","format","WorkchainDescriptorDictValue","wd","parseGasLimitsInternal","tag","gasPrice","gasLimit","specialGasLimit","gasCredit","blockGasLimit","freezeDueLimit","deleteDueLimit","flatLimit","flatGasPrice","other","lumpPrice","ihrPriceFactor","firstFrac","nextFrac","masterCatchainLifetime","shardCatchainLifetime","shardValidatorsLifetime","shardValidatorsCount","suffleMasterValidators","roundCandidates","nextCandidateDelay","consensusTimeout","fastAttempts","attemptDuration","catchainMaxDeps","maxBlockBytes","maxColaltedBytes","newCatchainIds","protoVersion","catchainMaxBlocksCoeff","minTotalRounds","maxTotalRounds","minWins","maxLoses","minStoreSec","maxStoreSec","normalParams","loadRef","beginParse","criticalParams","loadConfigParams","configBase64","comfigMap","Cell","fromBase64","Int","id","get","pramsAsCells","params","key","configs","configAddress","electorAddress","minterAddress","feeCollectorAddress","dnsRootAddress","burningConfig","globalVersion","workchains","voting","validators","storagePrices","gasPrices","masterchain","workchain","msgPrices","validatorSets","prevValidators","prevTempValidators","currentValidators","currentTempValidators","nextValidators","nextTempValidators","validatorsPunish","bridges","ethereum","binance","polygon","catchain","consensus"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/ton/dist/config/ConfigParser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseFullConfig = exports.loadConfigParamsAsSlice = exports.loadConfigParamById = exports.parseVotingSetup = exports.parseProposalSetup = exports.configParse29 = exports.configParse28 = exports.configParseMsgPrices = exports.configParseGasLimitsPrices = exports.configParseBridge = exports.configParseValidatorSet = exports.configParse12 = exports.configParseWorkchainDescriptor = exports.configParse40 = exports.configParse8 = exports.configParse18 = exports.configParse17 = exports.configParse16 = exports.configParse15 = exports.configParse13 = exports.configParse5 = exports.configParseMasterAddressRequired = exports.parseBridge = exports.parseValidatorSet = exports.configParseMasterAddress = void 0;\nconst core_1 = require(\"@ton/core\");\nfunction configParseMasterAddress(slice) {\n    if (slice) {\n        return new core_1.Address(-1, slice.loadBuffer(32));\n    }\n    else {\n        return null;\n    }\n}\nexports.configParseMasterAddress = configParseMasterAddress;\nfunction readPublicKey(slice) {\n    // 8e81278a\n    if (slice.loadUint(32) !== 0x8e81278a) {\n        throw Error('Invalid config');\n    }\n    return slice.loadBuffer(32);\n}\nconst ValidatorDescriptionDictValue = {\n    serialize(src, builder) {\n        throw Error(\"not implemented\");\n    },\n    parse(src) {\n        const header = src.loadUint(8);\n        if (header === 0x53) {\n            return {\n                publicKey: readPublicKey(src),\n                weight: src.loadUintBig(64),\n                adnlAddress: null\n            };\n        }\n        else if (header === 0x73) {\n            return {\n                publicKey: readPublicKey(src),\n                weight: src.loadUintBig(64),\n                adnlAddress: src.loadBuffer(32)\n            };\n        }\n        else {\n            throw Error('Invalid config');\n        }\n    }\n};\nfunction parseValidatorSet(slice) {\n    const header = slice.loadUint(8);\n    if (header === 0x11) {\n        const timeSince = slice.loadUint(32);\n        const timeUntil = slice.loadUint(32);\n        const total = slice.loadUint(16);\n        const main = slice.loadUint(16);\n        const list = slice.loadDictDirect(core_1.Dictionary.Keys.Uint(16), ValidatorDescriptionDictValue);\n        return {\n            timeSince,\n            timeUntil,\n            total,\n            main,\n            totalWeight: null,\n            list\n        };\n    }\n    else if (header === 0x12) {\n        const timeSince = slice.loadUint(32);\n        const timeUntil = slice.loadUint(32);\n        const total = slice.loadUint(16);\n        const main = slice.loadUint(16);\n        const totalWeight = slice.loadUintBig(64);\n        const list = slice.loadDict(core_1.Dictionary.Keys.Uint(16), ValidatorDescriptionDictValue);\n        return {\n            timeSince,\n            timeUntil,\n            total,\n            main,\n            totalWeight,\n            list\n        };\n    }\n}\nexports.parseValidatorSet = parseValidatorSet;\nfunction parseBridge(slice) {\n    const bridgeAddress = new core_1.Address(-1, slice.loadBuffer(32));\n    const oracleMultisigAddress = new core_1.Address(-1, slice.loadBuffer(32));\n    const oraclesDict = slice.loadDict(core_1.Dictionary.Keys.Buffer(32), core_1.Dictionary.Values.Buffer(32));\n    const oracles = new Map();\n    for (const [local, remote] of oraclesDict) {\n        oracles.set(new core_1.Address(-1, local).toString(), remote);\n    }\n    const externalChainAddress = slice.loadBuffer(32);\n    return {\n        bridgeAddress,\n        oracleMultisigAddress,\n        oracles,\n        externalChainAddress\n    };\n}\nexports.parseBridge = parseBridge;\nfunction configParseMasterAddressRequired(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    return configParseMasterAddress(slice);\n}\nexports.configParseMasterAddressRequired = configParseMasterAddressRequired;\nfunction configParse5(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    const magic = slice.loadUint(8);\n    if (magic === 0x01) {\n        const blackholeAddr = slice.loadBit() ? new core_1.Address(-1, slice.loadBuffer(32)) : null;\n        const feeBurnNominator = slice.loadUint(32);\n        const feeBurnDenominator = slice.loadUint(32);\n        return {\n            blackholeAddr,\n            feeBurnNominator,\n            feeBurnDenominator\n        };\n    }\n    throw new Error('Invalid config');\n}\nexports.configParse5 = configParse5;\nfunction configParse13(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    const magic = slice.loadUint(8);\n    if (magic === 0x1a) {\n        const deposit = slice.loadCoins();\n        const bitPrice = slice.loadCoins();\n        const cellPrice = slice.loadCoins();\n        return {\n            deposit,\n            bitPrice,\n            cellPrice\n        };\n    }\n    throw new Error('Invalid config');\n}\nexports.configParse13 = configParse13;\nfunction configParse15(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    const validatorsElectedFor = slice.loadUint(32);\n    const electorsStartBefore = slice.loadUint(32);\n    const electorsEndBefore = slice.loadUint(32);\n    const stakeHeldFor = slice.loadUint(32);\n    return {\n        validatorsElectedFor,\n        electorsStartBefore,\n        electorsEndBefore,\n        stakeHeldFor\n    };\n}\nexports.configParse15 = configParse15;\nfunction configParse16(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    const maxValidators = slice.loadUint(16);\n    const maxMainValidators = slice.loadUint(16);\n    const minValidators = slice.loadUint(16);\n    return {\n        maxValidators,\n        maxMainValidators,\n        minValidators\n    };\n}\nexports.configParse16 = configParse16;\nfunction configParse17(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    const minStake = slice.loadCoins();\n    const maxStake = slice.loadCoins();\n    const minTotalStake = slice.loadCoins();\n    const maxStakeFactor = slice.loadUint(32);\n    return {\n        minStake,\n        maxStake,\n        minTotalStake,\n        maxStakeFactor\n    };\n}\nexports.configParse17 = configParse17;\nconst StoragePricesDictValue = {\n    serialize(src, builder) {\n        throw Error(\"not implemented\");\n    },\n    parse(src) {\n        const header = src.loadUint(8);\n        if (header !== 0xcc) {\n            throw Error('Invalid config');\n        }\n        const utime_since = src.loadUint(32);\n        const bit_price_ps = src.loadUintBig(64);\n        const cell_price_ps = src.loadUintBig(64);\n        const mc_bit_price_ps = src.loadUintBig(64);\n        const mc_cell_price_ps = src.loadUintBig(64);\n        return {\n            utime_since,\n            bit_price_ps,\n            cell_price_ps,\n            mc_bit_price_ps,\n            mc_cell_price_ps\n        };\n    }\n};\nfunction configParse18(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    return slice.loadDictDirect(core_1.Dictionary.Keys.Buffer(4), StoragePricesDictValue).values();\n}\nexports.configParse18 = configParse18;\nfunction configParse8(slice) {\n    if (!slice) {\n        return {\n            version: 0,\n            capabilities: 0n\n        };\n    }\n    const version = slice.loadUint(32);\n    const capabilities = slice.loadUintBig(64);\n    return {\n        version,\n        capabilities\n    };\n}\nexports.configParse8 = configParse8;\nfunction configParse40(slice) {\n    if (!slice) {\n        return null;\n    }\n    const header = slice.loadUint(8);\n    if (header !== 1) {\n        throw Error('Invalid config');\n    }\n    const defaultFlatFine = slice.loadCoins();\n    const defaultProportionaFine = slice.loadCoins();\n    const severityFlatMult = slice.loadUint(16);\n    const severityProportionalMult = slice.loadUint(16);\n    const unfunishableInterval = slice.loadUint(16);\n    const longInterval = slice.loadUint(16);\n    const longFlatMult = slice.loadUint(16);\n    const longProportionalMult = slice.loadUint(16);\n    const mediumInterval = slice.loadUint(16);\n    const mediumFlatMult = slice.loadUint(16);\n    const mediumProportionalMult = slice.loadUint(16);\n    return {\n        defaultFlatFine,\n        defaultProportionaFine,\n        severityFlatMult,\n        severityProportionalMult,\n        unfunishableInterval,\n        longInterval,\n        longFlatMult,\n        longProportionalMult,\n        mediumInterval,\n        mediumFlatMult,\n        mediumProportionalMult\n    };\n}\nexports.configParse40 = configParse40;\nfunction configParseWorkchainDescriptor(slice) {\n    if (slice.loadUint(8) !== 0xA6) {\n        throw Error('Invalid config');\n    }\n    const enabledSince = slice.loadUint(32);\n    const actialMinSplit = slice.loadUint(8);\n    const min_split = slice.loadUint(8);\n    const max_split = slice.loadUint(8);\n    const basic = slice.loadBit();\n    const active = slice.loadBit();\n    const accept_msgs = slice.loadBit();\n    const flags = slice.loadUint(13);\n    const zerostateRootHash = slice.loadBuffer(32);\n    const zerostateFileHash = slice.loadBuffer(32);\n    const version = slice.loadUint(32);\n    // Only basic format supported\n    if (slice.loadBit()) {\n        throw Error('Invalid config');\n    }\n    const vmVersion = slice.loadUint(32);\n    const vmMode = slice.loadUintBig(64);\n    return {\n        enabledSince,\n        actialMinSplit,\n        min_split,\n        max_split,\n        basic,\n        active,\n        accept_msgs,\n        flags,\n        zerostateRootHash,\n        zerostateFileHash,\n        version,\n        format: {\n            vmVersion,\n            vmMode\n        }\n    };\n}\nexports.configParseWorkchainDescriptor = configParseWorkchainDescriptor;\nconst WorkchainDescriptorDictValue = {\n    serialize(src, builder) {\n        throw Error(\"not implemented\");\n    },\n    parse(src) {\n        if (src.loadUint(8) !== 0xA6) {\n            throw Error('Invalid config');\n        }\n        const enabledSince = src.loadUint(32);\n        const actialMinSplit = src.loadUint(8);\n        const min_split = src.loadUint(8);\n        const max_split = src.loadUint(8);\n        const basic = src.loadBit();\n        const active = src.loadBit();\n        const accept_msgs = src.loadBit();\n        const flags = src.loadUint(13);\n        const zerostateRootHash = src.loadBuffer(32);\n        const zerostateFileHash = src.loadBuffer(32);\n        const version = src.loadUint(32);\n        // Only basic format supported\n        if (src.loadBit()) {\n            throw Error('Invalid config');\n        }\n        const vmVersion = src.loadUint(32);\n        const vmMode = src.loadUintBig(64);\n        return {\n            enabledSince,\n            actialMinSplit,\n            min_split,\n            max_split,\n            basic,\n            active,\n            accept_msgs,\n            flags,\n            zerostateRootHash,\n            zerostateFileHash,\n            version,\n            format: {\n                vmVersion,\n                vmMode\n            }\n        };\n    }\n};\nfunction configParse12(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    const wd = slice.loadDict(core_1.Dictionary.Keys.Uint(32), WorkchainDescriptorDictValue);\n    if (wd) {\n        return wd;\n    }\n    throw Error('No workchains exist');\n}\nexports.configParse12 = configParse12;\nfunction configParseValidatorSet(slice) {\n    if (!slice) {\n        return null;\n    }\n    return parseValidatorSet(slice);\n}\nexports.configParseValidatorSet = configParseValidatorSet;\nfunction configParseBridge(slice) {\n    if (!slice) {\n        return null;\n    }\n    return parseBridge(slice);\n}\nexports.configParseBridge = configParseBridge;\nfunction parseGasLimitsInternal(slice) {\n    const tag = slice.loadUint(8);\n    if (tag === 0xde) {\n        const gasPrice = slice.loadUintBig(64);\n        const gasLimit = slice.loadUintBig(64);\n        const specialGasLimit = slice.loadUintBig(64);\n        const gasCredit = slice.loadUintBig(64);\n        const blockGasLimit = slice.loadUintBig(64);\n        const freezeDueLimit = slice.loadUintBig(64);\n        const deleteDueLimit = slice.loadUintBig(64);\n        return {\n            gasPrice,\n            gasLimit,\n            specialGasLimit,\n            gasCredit,\n            blockGasLimit,\n            freezeDueLimit,\n            deleteDueLimit\n        };\n    }\n    else if (tag === 0xdd) {\n        const gasPrice = slice.loadUintBig(64);\n        const gasLimit = slice.loadUintBig(64);\n        const gasCredit = slice.loadUintBig(64);\n        const blockGasLimit = slice.loadUintBig(64);\n        const freezeDueLimit = slice.loadUintBig(64);\n        const deleteDueLimit = slice.loadUintBig(64);\n        return {\n            gasPrice,\n            gasLimit,\n            gasCredit,\n            blockGasLimit,\n            freezeDueLimit,\n            deleteDueLimit\n        };\n    }\n    else {\n        throw Error('Invalid config');\n    }\n}\nfunction configParseGasLimitsPrices(slice) {\n    if (!slice) {\n        throw Error('Invalid config');\n    }\n    const tag = slice.loadUint(8);\n    if (tag === 0xd1) {\n        const flatLimit = slice.loadUintBig(64);\n        const flatGasPrice = slice.loadUintBig(64);\n        const other = parseGasLimitsInternal(slice);\n        return {\n            flatLimit,\n            flatGasPrice,\n            other\n        };\n    }\n    else {\n        throw Error('Invalid config');\n    }\n}\nexports.configParseGasLimitsPrices = configParseGasLimitsPrices;\nfunction configParseMsgPrices(slice) {\n    if (!slice) {\n        throw new Error('Invalid config');\n    }\n    const magic = slice.loadUint(8);\n    if (magic !== 0xea) {\n        throw new Error('Invalid msg prices param');\n    }\n    return {\n        lumpPrice: slice.loadUintBig(64),\n        bitPrice: slice.loadUintBig(64),\n        cellPrice: slice.loadUintBig(64),\n        ihrPriceFactor: slice.loadUint(32),\n        firstFrac: slice.loadUint(16),\n        nextFrac: slice.loadUint(16)\n    };\n}\nexports.configParseMsgPrices = configParseMsgPrices;\n// catchain_config#c1 mc_catchain_lifetime:uint32 shard_catchain_lifetime:uint32 \n//   shard_validators_lifetime:uint32 shard_validators_num:uint32 = CatchainConfig;\n// catchain_config_new#c2 flags:(## 7) { flags = 0 } shuffle_mc_validators:Bool\n//   mc_catchain_lifetime:uint32 shard_catchain_lifetime:uint32\n//   shard_validators_lifetime:uint32 shard_validators_num:uint32 = CatchainConfig;\nfunction configParse28(slice) {\n    if (!slice) {\n        throw new Error('Invalid config');\n    }\n    const magic = slice.loadUint(8);\n    if (magic === 0xc1) {\n        const masterCatchainLifetime = slice.loadUint(32);\n        const shardCatchainLifetime = slice.loadUint(32);\n        const shardValidatorsLifetime = slice.loadUint(32);\n        const shardValidatorsCount = slice.loadUint(32);\n        return {\n            masterCatchainLifetime,\n            shardCatchainLifetime,\n            shardValidatorsLifetime,\n            shardValidatorsCount\n        };\n    }\n    if (magic === 0xc2) {\n        const flags = slice.loadUint(7);\n        const suffleMasterValidators = slice.loadBit();\n        const masterCatchainLifetime = slice.loadUint(32);\n        const shardCatchainLifetime = slice.loadUint(32);\n        const shardValidatorsLifetime = slice.loadUint(32);\n        const shardValidatorsCount = slice.loadUint(32);\n        return {\n            flags,\n            suffleMasterValidators,\n            masterCatchainLifetime,\n            shardCatchainLifetime,\n            shardValidatorsLifetime,\n            shardValidatorsCount\n        };\n    }\n    throw new Error('Invalid config');\n}\nexports.configParse28 = configParse28;\n// consensus_config#d6 round_candidates:# { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 = ConsensusConfig;\n// consensus_config_new#d7 flags:(## 7) { flags = 0 } new_catchain_ids:Bool\n//   round_candidates:(## 8) { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 = ConsensusConfig;\n// consensus_config_v3#d8 flags:(## 7) { flags = 0 } new_catchain_ids:Bool\n//   round_candidates:(## 8) { round_candidates >= 1 }\n//   next_candidate_delay_ms:uint32 consensus_timeout_ms:uint32\n//   fast_attempts:uint32 attempt_duration:uint32 catchain_max_deps:uint32\n//   max_block_bytes:uint32 max_collated_bytes:uint32 \n//   proto_version:uint16 = ConsensusConfig;\nfunction configParse29(slice) {\n    if (!slice) {\n        throw new Error('Invalid config');\n    }\n    const magic = slice.loadUint(8);\n    if (magic === 0xd6) {\n        const roundCandidates = slice.loadUint(32);\n        const nextCandidateDelay = slice.loadUint(32);\n        const consensusTimeout = slice.loadUint(32);\n        const fastAttempts = slice.loadUint(32);\n        const attemptDuration = slice.loadUint(32);\n        const catchainMaxDeps = slice.loadUint(32);\n        const maxBlockBytes = slice.loadUint(32);\n        const maxColaltedBytes = slice.loadUint(32);\n        return {\n            roundCandidates,\n            nextCandidateDelay,\n            consensusTimeout,\n            fastAttempts,\n            attemptDuration,\n            catchainMaxDeps,\n            maxBlockBytes,\n            maxColaltedBytes\n        };\n    }\n    else if (magic === 0xd7) {\n        const flags = slice.loadUint(7);\n        const newCatchainIds = slice.loadBit();\n        const roundCandidates = slice.loadUint(8);\n        const nextCandidateDelay = slice.loadUint(32);\n        const consensusTimeout = slice.loadUint(32);\n        const fastAttempts = slice.loadUint(32);\n        const attemptDuration = slice.loadUint(32);\n        const catchainMaxDeps = slice.loadUint(32);\n        const maxBlockBytes = slice.loadUint(32);\n        const maxColaltedBytes = slice.loadUint(32);\n        return {\n            flags,\n            newCatchainIds,\n            roundCandidates,\n            nextCandidateDelay,\n            consensusTimeout,\n            fastAttempts,\n            attemptDuration,\n            catchainMaxDeps,\n            maxBlockBytes,\n            maxColaltedBytes\n        };\n    }\n    else if (magic === 0xd8) {\n        const flags = slice.loadUint(7);\n        const newCatchainIds = slice.loadBit();\n        const roundCandidates = slice.loadUint(8);\n        const nextCandidateDelay = slice.loadUint(32);\n        const consensusTimeout = slice.loadUint(32);\n        const fastAttempts = slice.loadUint(32);\n        const attemptDuration = slice.loadUint(32);\n        const catchainMaxDeps = slice.loadUint(32);\n        const maxBlockBytes = slice.loadUint(32);\n        const maxColaltedBytes = slice.loadUint(32);\n        const protoVersion = slice.loadUint(16);\n        return {\n            flags,\n            newCatchainIds,\n            roundCandidates,\n            nextCandidateDelay,\n            consensusTimeout,\n            fastAttempts,\n            attemptDuration,\n            catchainMaxDeps,\n            maxBlockBytes,\n            maxColaltedBytes,\n            protoVersion\n        };\n    }\n    else if (magic === 0xd9) {\n        const flags = slice.loadUint(7);\n        const newCatchainIds = slice.loadBit();\n        const roundCandidates = slice.loadUint(8);\n        const nextCandidateDelay = slice.loadUint(32);\n        const consensusTimeout = slice.loadUint(32);\n        const fastAttempts = slice.loadUint(32);\n        const attemptDuration = slice.loadUint(32);\n        const catchainMaxDeps = slice.loadUint(32);\n        const maxBlockBytes = slice.loadUint(32);\n        const maxColaltedBytes = slice.loadUint(32);\n        const protoVersion = slice.loadUint(16);\n        const catchainMaxBlocksCoeff = slice.loadUint(32);\n        return {\n            flags,\n            newCatchainIds,\n            roundCandidates,\n            nextCandidateDelay,\n            consensusTimeout,\n            fastAttempts,\n            attemptDuration,\n            catchainMaxDeps,\n            maxBlockBytes,\n            maxColaltedBytes,\n            protoVersion,\n            catchainMaxBlocksCoeff\n        };\n    }\n    throw new Error('Invalid config');\n}\nexports.configParse29 = configParse29;\n// cfg_vote_cfg#36 min_tot_rounds:uint8 max_tot_rounds:uint8 min_wins:uint8 max_losses:uint8 min_store_sec:uint32 max_store_sec:uint32 bit_price:uint32 cell_price:uint32 = ConfigProposalSetup;\nfunction parseProposalSetup(slice) {\n    const magic = slice.loadUint(8);\n    if (magic !== 0x36) {\n        throw new Error('Invalid config');\n    }\n    const minTotalRounds = slice.loadUint(8);\n    const maxTotalRounds = slice.loadUint(8);\n    const minWins = slice.loadUint(8);\n    const maxLoses = slice.loadUint(8);\n    const minStoreSec = slice.loadUint(32);\n    const maxStoreSec = slice.loadUint(32);\n    const bitPrice = slice.loadUint(32);\n    const cellPrice = slice.loadUint(32);\n    return { minTotalRounds, maxTotalRounds, minWins, maxLoses, minStoreSec, maxStoreSec, bitPrice, cellPrice };\n}\nexports.parseProposalSetup = parseProposalSetup;\n// cfg_vote_setup#91 normal_params:^ConfigProposalSetup critical_params:^ConfigProposalSetup = ConfigVotingSetup;\nfunction parseVotingSetup(slice) {\n    if (!slice) {\n        throw new Error('Invalid config');\n    }\n    const magic = slice.loadUint(8);\n    if (magic !== 0x91) {\n        throw new Error('Invalid config');\n    }\n    const normalParams = parseProposalSetup(slice.loadRef().beginParse());\n    const criticalParams = parseProposalSetup(slice.loadRef().beginParse());\n    return { normalParams, criticalParams };\n}\nexports.parseVotingSetup = parseVotingSetup;\nfunction loadConfigParams(configBase64) {\n    const comfigMap = core_1.Cell.fromBase64(configBase64).beginParse().loadDictDirect(core_1.Dictionary.Keys.Int(32), core_1.Dictionary.Values.Cell());\n    return comfigMap;\n}\nfunction loadConfigParamById(configBase64, id) {\n    return loadConfigParams(configBase64).get(id);\n}\nexports.loadConfigParamById = loadConfigParamById;\nfunction loadConfigParamsAsSlice(configBase64) {\n    const pramsAsCells = loadConfigParams(configBase64);\n    const params = new Map();\n    for (const [key, value] of pramsAsCells) {\n        params.set(key, value.beginParse());\n    }\n    return params;\n}\nexports.loadConfigParamsAsSlice = loadConfigParamsAsSlice;\nfunction parseFullConfig(configs) {\n    return {\n        configAddress: configParseMasterAddressRequired(configs.get(0)),\n        electorAddress: configParseMasterAddressRequired(configs.get(1)),\n        minterAddress: configParseMasterAddress(configs.get(2)),\n        feeCollectorAddress: configParseMasterAddress(configs.get(3)),\n        dnsRootAddress: configParseMasterAddress(configs.get(4)),\n        burningConfig: configParse5(configs.get(5)),\n        globalVersion: configParse8(configs.get(8)),\n        workchains: configParse12(configs.get(12)),\n        voting: parseVotingSetup(configs.get(11)),\n        validators: {\n            ...configParse15(configs.get(15)),\n            ...configParse16(configs.get(16)),\n            ...configParse17(configs.get(17))\n        },\n        storagePrices: configParse18(configs.get(18)),\n        gasPrices: {\n            masterchain: configParseGasLimitsPrices(configs.get(20)),\n            workchain: configParseGasLimitsPrices(configs.get(21)),\n        },\n        msgPrices: {\n            masterchain: configParseMsgPrices(configs.get(24)),\n            workchain: configParseMsgPrices(configs.get(25)),\n        },\n        validatorSets: {\n            prevValidators: configParseValidatorSet(configs.get(32)),\n            prevTempValidators: configParseValidatorSet(configs.get(33)),\n            currentValidators: configParseValidatorSet(configs.get(34)),\n            currentTempValidators: configParseValidatorSet(configs.get(35)),\n            nextValidators: configParseValidatorSet(configs.get(36)),\n            nextTempValidators: configParseValidatorSet(configs.get(37))\n        },\n        validatorsPunish: configParse40(configs.get(40)),\n        bridges: {\n            ethereum: configParseBridge(configs.get(71)),\n            binance: configParseBridge(configs.get(72)),\n            polygon: configParseBridge(configs.get(73))\n        },\n        catchain: configParse28(configs.get(28)),\n        consensus: configParse29(configs.get(29))\n        // TODO: mint_new_price:Grams mint_add_price:Grams = ConfigParam 6;\n        // TODO: to_mint:ExtraCurrencyCollection = ConfigParam 7\n        // TODO: mandatory_params:(Hashmap 32 True) = ConfigParam 9\n        // TODO: critical_params:(Hashmap 32 True) = ConfigParam 10\n        // TODO: BlockCreateFees = ConfigParam 14\n    };\n}\nexports.parseFullConfig = parseFullConfig;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}