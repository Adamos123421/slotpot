{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { TonIcon } from './IconComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  isSpinning,\n  onSpinComplete,\n  contractWinner,\n  totalJackpotValue\n}) => {\n  _s();\n  const [wheelState, setWheelState] = useState('idle'); // 'idle', 'waiting', 'spinning'\n  const wheelRef = useRef();\n  const idleAnimationRef = useRef();\n  const currentPosition = useRef(0);\n\n  // Card dimensions (matching roulette example)\n  const CARD_WIDTH = 81; // 75px + 3px margin on each side\n\n  // Render individual player card HTML\n  const renderPlayerCard = useCallback((player, key) => {\n    var _player$bet;\n    if (!player) return '<div class=\"waiting-card\">Waiting...</div>';\n    const isActive = player.isRealPlayer && player.bet > 0;\n    const avatar = player.avatar && player.avatar !== '‚ùì' ? player.avatar : \"/img/unknown.webp\";\n    const username = player.username || player.displayName || player.name || 'Player';\n    const bet = isActive ? ((_player$bet = player.bet) === null || _player$bet === void 0 ? void 0 : _player$bet.toFixed(3)) || '0.000' : '0.000';\n    return `\n      <div class=\"player-card ${isActive ? 'active' : 'inactive'}\" data-key=\"${key}\">\n        <div class=\"card-content\">\n          <div class=\"avatar-container\">\n            <img src=\"${avatar}\" alt=\"${username}\" class=\"player-avatar\" />\n          </div>\n          <div class=\"player-info\">\n            <p class=\"player-name\">${username}</p>\n            <div class=\"bet-info\">\n              <img src=\"${isActive ? 'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png' : '/img/solana.png'}\" \n                   class=\"coin-icon ${!isActive ? 'grayscale' : ''}\" alt=\"\" />\n              <span class=\"bet-amount\">${bet}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }, []);\n\n  // Initialize wheel with player rows\n  const initWheel = useCallback(() => {\n    if (!wheelRef.current || !players.length) return;\n    const wheel = wheelRef.current;\n    wheel.innerHTML = ''; // Clear existing content\n\n    // Create multiple rows like in roulette example (29 rows)\n    for (let rowIndex = 0; rowIndex < 29; rowIndex++) {\n      const row = document.createElement('div');\n      row.className = 'roulette-row';\n\n      // Add all players to each row\n      players.forEach((player, playerIndex) => {\n        const card = document.createElement('div');\n        card.className = 'roulette-card';\n        card.innerHTML = renderPlayerCard(player, `${rowIndex}-${playerIndex}`);\n        row.appendChild(card);\n      });\n      wheel.appendChild(row);\n    }\n  }, [players, renderPlayerCard]);\n\n  // Idle movement - constant speed\n  const startIdleMovement = useCallback(() => {\n    if (!wheelRef.current || wheelState !== 'idle') return;\n    const animate = () => {\n      if (wheelState !== 'idle') return;\n      currentPosition.current -= 2; // Move 2px left per frame\n\n      // Reset position when we've moved one full cycle\n      const resetPoint = -(players.length * CARD_WIDTH);\n      if (currentPosition.current <= resetPoint) {\n        currentPosition.current = 0;\n      }\n      if (wheelRef.current) {\n        wheelRef.current.style.transform = `translate3d(${currentPosition.current}px, 0px, 0px)`;\n      }\n      idleAnimationRef.current = requestAnimationFrame(animate);\n    };\n    idleAnimationRef.current = requestAnimationFrame(animate);\n  }, [wheelState, players.length, CARD_WIDTH]);\n\n  // Stop idle movement\n  const stopIdleMovement = useCallback(() => {\n    if (idleAnimationRef.current) {\n      cancelAnimationFrame(idleAnimationRef.current);\n      idleAnimationRef.current = null;\n    }\n  }, []);\n\n  // Find winner position in player array\n  const findWinnerPosition = useCallback(winner => {\n    if (!winner || !players.length) return -1;\n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n      if (player && player.address && (player.address === winner.winner || player.address === winner.fullAddress) || player && player.fullAddress && (player.fullAddress === winner.winner || player.fullAddress === winner.fullAddress) || player && player.username && player.username === winner.username) {\n        return i;\n      }\n    }\n    return -1;\n  }, [players]);\n\n  // Spin wheel function (roulette logic)\n  const spinWheel = useCallback(targetWinner => {\n    if (wheelState === 'spinning' || !wheelRef.current) return;\n    setWheelState('spinning');\n    stopIdleMovement();\n    const winnerPosition = findWinnerPosition(targetWinner);\n    if (winnerPosition === -1) {\n      console.warn('Winner not found in player list');\n      setWheelState('idle');\n      return;\n    }\n\n    // Calculate landing position (roulette logic)\n    const rows = 12; // Number of rows to spin through\n    const landingPosition = rows * players.length * CARD_WIDTH + winnerPosition * CARD_WIDTH;\n\n    // Add randomization for natural landing\n    const randomize = Math.floor(Math.random() * CARD_WIDTH) - CARD_WIDTH / 2;\n    const finalPosition = currentPosition.current - landingPosition + randomize;\n\n    // Random easing curve for dynamic animation\n    const randomX = Math.floor(Math.random() * 50) / 100;\n    const randomY = Math.floor(Math.random() * 20) / 100;\n\n    // Apply CSS transition\n    const wheel = wheelRef.current;\n    wheel.style.transitionTimingFunction = `cubic-bezier(0, ${randomX}, ${randomY}, 1)`;\n    wheel.style.transitionDuration = '6s';\n    wheel.style.transform = `translate3d(${finalPosition}px, 0px, 0px)`;\n\n    // Update current position\n    currentPosition.current = finalPosition;\n\n    // Reset after animation\n    setTimeout(() => {\n      wheel.style.transitionTimingFunction = '';\n      wheel.style.transitionDuration = '';\n      const resetTo = -(winnerPosition * CARD_WIDTH + randomize);\n      wheel.style.transform = `translate3d(${resetTo}px, 0px, 0px)`;\n      currentPosition.current = resetTo;\n      setWheelState('idle');\n      onSpinComplete === null || onSpinComplete === void 0 ? void 0 : onSpinComplete(targetWinner);\n    }, 6000);\n  }, [wheelState, stopIdleMovement, findWinnerPosition, players.length, onSpinComplete, CARD_WIDTH]);\n\n  // Handle state changes\n  useEffect(() => {\n    if (isSpinning && contractWinner && wheelState === 'waiting') {\n      // Backend responded with winner, start spinning\n      console.log('Starting roulette spin with winner:', contractWinner);\n      spinWheel(contractWinner);\n    } else if (isSpinning && !contractWinner && wheelState === 'idle') {\n      // Bet placed, stop and wait for backend\n      console.log('Stopping wheel, waiting for winner...');\n      setWheelState('waiting');\n      stopIdleMovement();\n    } else if (!isSpinning && wheelState !== 'idle') {\n      // Reset to idle state\n      setWheelState('idle');\n    }\n  }, [isSpinning, contractWinner, wheelState, spinWheel, stopIdleMovement]);\n\n  // Start/stop idle movement based on state\n  useEffect(() => {\n    if (wheelState === 'idle') {\n      startIdleMovement();\n    } else {\n      stopIdleMovement();\n    }\n    return () => stopIdleMovement();\n  }, [wheelState, startIdleMovement, stopIdleMovement]);\n\n  // Initialize wheel when players change\n  useEffect(() => {\n    initWheel();\n  }, [initWheel]);\n  if (!players || players.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simple-carousel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carousel-message\",\n        children: \"Waiting for players to join...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roulette-selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wheelRef,\n      className: \"roulette-wheel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel-state-indicator\",\n      children: [wheelState === 'idle' && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83C\\uDFB0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 35\n      }, this), wheelState === 'waiting' && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u23F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 38\n      }, this), wheelState === 'spinning' && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83C\\uDFAF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute -top-1/4 -right-1/3 h-full opacity-75 will-change-transform z-[3] pointer-events-none\",\n      style: {\n        maskImage: 'linear-gradient(black, transparent 50%)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/img/glare.webp\",\n        className: \"w-full object-cover object-center\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"z2ceagN9LVV790rEVjyql9iDuKQ=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","TonIcon","jsxDEV","_jsxDEV","SimpleCarousel","players","isSpinning","onSpinComplete","contractWinner","totalJackpotValue","_s","wheelState","setWheelState","wheelRef","idleAnimationRef","currentPosition","CARD_WIDTH","renderPlayerCard","player","key","_player$bet","isActive","isRealPlayer","bet","avatar","username","displayName","name","toFixed","initWheel","current","length","wheel","innerHTML","rowIndex","row","document","createElement","className","forEach","playerIndex","card","appendChild","startIdleMovement","animate","resetPoint","style","transform","requestAnimationFrame","stopIdleMovement","cancelAnimationFrame","findWinnerPosition","winner","i","address","fullAddress","spinWheel","targetWinner","winnerPosition","console","warn","rows","landingPosition","randomize","Math","floor","random","finalPosition","randomX","randomY","transitionTimingFunction","transitionDuration","setTimeout","resetTo","log","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","maskImage","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { TonIcon } from './IconComponents';\n\nconst SimpleCarousel = ({ \n  players, \n  isSpinning, \n  onSpinComplete, \n  contractWinner,\n  totalJackpotValue \n}) => {\n  const [wheelState, setWheelState] = useState('idle'); // 'idle', 'waiting', 'spinning'\n  const wheelRef = useRef();\n  const idleAnimationRef = useRef();\n  const currentPosition = useRef(0);\n  \n  // Card dimensions (matching roulette example)\n  const CARD_WIDTH = 81; // 75px + 3px margin on each side\n  \n  // Render individual player card HTML\n  const renderPlayerCard = useCallback((player, key) => {\n    if (!player) return '<div class=\"waiting-card\">Waiting...</div>';\n    \n    const isActive = player.isRealPlayer && player.bet > 0;\n    const avatar = player.avatar && player.avatar !== '‚ùì' ? player.avatar : \"/img/unknown.webp\";\n    const username = player.username || player.displayName || player.name || 'Player';\n    const bet = isActive ? (player.bet?.toFixed(3) || '0.000') : '0.000';\n    \n    return `\n      <div class=\"player-card ${isActive ? 'active' : 'inactive'}\" data-key=\"${key}\">\n        <div class=\"card-content\">\n          <div class=\"avatar-container\">\n            <img src=\"${avatar}\" alt=\"${username}\" class=\"player-avatar\" />\n          </div>\n          <div class=\"player-info\">\n            <p class=\"player-name\">${username}</p>\n            <div class=\"bet-info\">\n              <img src=\"${isActive ? 'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png' : '/img/solana.png'}\" \n                   class=\"coin-icon ${!isActive ? 'grayscale' : ''}\" alt=\"\" />\n              <span class=\"bet-amount\">${bet}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }, []);\n\n  // Initialize wheel with player rows\n  const initWheel = useCallback(() => {\n    if (!wheelRef.current || !players.length) return;\n    \n    const wheel = wheelRef.current;\n    wheel.innerHTML = ''; // Clear existing content\n    \n    // Create multiple rows like in roulette example (29 rows)\n    for (let rowIndex = 0; rowIndex < 29; rowIndex++) {\n      const row = document.createElement('div');\n      row.className = 'roulette-row';\n      \n      // Add all players to each row\n      players.forEach((player, playerIndex) => {\n        const card = document.createElement('div');\n        card.className = 'roulette-card';\n        card.innerHTML = renderPlayerCard(player, `${rowIndex}-${playerIndex}`);\n        row.appendChild(card);\n      });\n      \n      wheel.appendChild(row);\n    }\n  }, [players, renderPlayerCard]);\n\n  // Idle movement - constant speed\n  const startIdleMovement = useCallback(() => {\n    if (!wheelRef.current || wheelState !== 'idle') return;\n    \n    const animate = () => {\n      if (wheelState !== 'idle') return;\n      \n      currentPosition.current -= 2; // Move 2px left per frame\n      \n      // Reset position when we've moved one full cycle\n      const resetPoint = -(players.length * CARD_WIDTH);\n      if (currentPosition.current <= resetPoint) {\n        currentPosition.current = 0;\n      }\n      \n      if (wheelRef.current) {\n        wheelRef.current.style.transform = `translate3d(${currentPosition.current}px, 0px, 0px)`;\n      }\n      \n      idleAnimationRef.current = requestAnimationFrame(animate);\n    };\n    \n    idleAnimationRef.current = requestAnimationFrame(animate);\n  }, [wheelState, players.length, CARD_WIDTH]);\n\n  // Stop idle movement\n  const stopIdleMovement = useCallback(() => {\n    if (idleAnimationRef.current) {\n      cancelAnimationFrame(idleAnimationRef.current);\n      idleAnimationRef.current = null;\n    }\n  }, []);\n\n  // Find winner position in player array\n  const findWinnerPosition = useCallback((winner) => {\n    if (!winner || !players.length) return -1;\n    \n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n      if (\n        (player && player.address && (player.address === winner.winner || player.address === winner.fullAddress)) ||\n        (player && player.fullAddress && (player.fullAddress === winner.winner || player.fullAddress === winner.fullAddress)) ||\n        (player && player.username && player.username === winner.username)\n      ) {\n        return i;\n      }\n    }\n    return -1;\n  }, [players]);\n\n  // Spin wheel function (roulette logic)\n  const spinWheel = useCallback((targetWinner) => {\n    if (wheelState === 'spinning' || !wheelRef.current) return;\n    \n    setWheelState('spinning');\n    stopIdleMovement();\n    \n    const winnerPosition = findWinnerPosition(targetWinner);\n    if (winnerPosition === -1) {\n      console.warn('Winner not found in player list');\n      setWheelState('idle');\n      return;\n    }\n\n    // Calculate landing position (roulette logic)\n    const rows = 12; // Number of rows to spin through\n    const landingPosition = (rows * players.length * CARD_WIDTH) + (winnerPosition * CARD_WIDTH);\n    \n    // Add randomization for natural landing\n    const randomize = Math.floor(Math.random() * CARD_WIDTH) - (CARD_WIDTH / 2);\n    const finalPosition = currentPosition.current - landingPosition + randomize;\n    \n    // Random easing curve for dynamic animation\n    const randomX = Math.floor(Math.random() * 50) / 100;\n    const randomY = Math.floor(Math.random() * 20) / 100;\n    \n    // Apply CSS transition\n    const wheel = wheelRef.current;\n    wheel.style.transitionTimingFunction = `cubic-bezier(0, ${randomX}, ${randomY}, 1)`;\n    wheel.style.transitionDuration = '6s';\n    wheel.style.transform = `translate3d(${finalPosition}px, 0px, 0px)`;\n    \n    // Update current position\n    currentPosition.current = finalPosition;\n    \n    // Reset after animation\n    setTimeout(() => {\n      wheel.style.transitionTimingFunction = '';\n      wheel.style.transitionDuration = '';\n      \n      const resetTo = -(winnerPosition * CARD_WIDTH + randomize);\n      wheel.style.transform = `translate3d(${resetTo}px, 0px, 0px)`;\n      currentPosition.current = resetTo;\n      \n      setWheelState('idle');\n      onSpinComplete?.(targetWinner);\n    }, 6000);\n    \n  }, [wheelState, stopIdleMovement, findWinnerPosition, players.length, onSpinComplete, CARD_WIDTH]);\n\n  // Handle state changes\n  useEffect(() => {\n    if (isSpinning && contractWinner && wheelState === 'waiting') {\n      // Backend responded with winner, start spinning\n      console.log('Starting roulette spin with winner:', contractWinner);\n      spinWheel(contractWinner);\n    } else if (isSpinning && !contractWinner && wheelState === 'idle') {\n      // Bet placed, stop and wait for backend\n      console.log('Stopping wheel, waiting for winner...');\n      setWheelState('waiting');\n      stopIdleMovement();\n    } else if (!isSpinning && wheelState !== 'idle') {\n      // Reset to idle state\n      setWheelState('idle');\n    }\n  }, [isSpinning, contractWinner, wheelState, spinWheel, stopIdleMovement]);\n\n  // Start/stop idle movement based on state\n  useEffect(() => {\n    if (wheelState === 'idle') {\n      startIdleMovement();\n    } else {\n      stopIdleMovement();\n    }\n    \n    return () => stopIdleMovement();\n  }, [wheelState, startIdleMovement, stopIdleMovement]);\n\n  // Initialize wheel when players change\n  useEffect(() => {\n    initWheel();\n  }, [initWheel]);\n\n  if (!players || players.length === 0) {\n    return (\n      <div className=\"simple-carousel\">\n        <div className=\"carousel-message\">\n          Waiting for players to join...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"roulette-wrapper\">\n      {/* Center selector line */}\n      <div className=\"roulette-selector\"></div>\n      \n      {/* Spinning wheel */}\n      <div ref={wheelRef} className=\"roulette-wheel\"></div>\n      \n      {/* State indicator */}\n      <div className=\"wheel-state-indicator\">\n        {wheelState === 'idle' && <span>üé∞</span>}\n        {wheelState === 'waiting' && <span>‚è≥</span>}\n        {wheelState === 'spinning' && <span>üéØ</span>}\n      </div>\n      \n      {/* Glare Effect */}\n      <div \n        className=\"absolute -top-1/4 -right-1/3 h-full opacity-75 will-change-transform z-[3] pointer-events-none\"\n        style={{ maskImage: 'linear-gradient(black, transparent 50%)' }}\n      >\n        <img src=\"/img/glare.webp\" className=\"w-full object-cover object-center\" alt=\"\" />\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}