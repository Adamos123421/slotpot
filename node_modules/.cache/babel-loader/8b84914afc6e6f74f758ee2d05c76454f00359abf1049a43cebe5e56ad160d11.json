{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadShardStateUnsplit = void 0;\nconst MasterchainStateExtra_1 = require(\"./MasterchainStateExtra\");\nconst ShardAccounts_1 = require(\"./ShardAccounts\");\nconst ShardIdent_1 = require(\"./ShardIdent\");\nfunction loadShardStateUnsplit(cs) {\n  if (cs.loadUint(32) !== 0x9023afe2) {\n    throw Error('Invalid data');\n  }\n  let globalId = cs.loadInt(32);\n  let shardId = (0, ShardIdent_1.loadShardIdent)(cs);\n  let seqno = cs.loadUint(32);\n  let vertSeqNo = cs.loadUint(32);\n  let genUtime = cs.loadUint(32);\n  let genLt = cs.loadUintBig(64);\n  let minRefMcSeqno = cs.loadUint(32);\n  // Skip OutMsgQueueInfo: usually exotic\n  cs.loadRef();\n  let beforeSplit = cs.loadBit();\n  // Parse accounts\n  let shardAccountsRef = cs.loadRef();\n  let accounts = undefined;\n  if (!shardAccountsRef.isExotic) {\n    accounts = (0, ShardAccounts_1.loadShardAccounts)(shardAccountsRef.beginParse());\n  }\n  // Skip (not used by apps)\n  cs.loadRef();\n  // Parse extras\n  let mcStateExtra = cs.loadBit();\n  let extras = null;\n  if (mcStateExtra) {\n    let cell = cs.loadRef();\n    if (!cell.isExotic) {\n      extras = (0, MasterchainStateExtra_1.loadMasterchainStateExtra)(cell.beginParse());\n    }\n  }\n  ;\n  return {\n    globalId,\n    shardId,\n    seqno,\n    vertSeqNo,\n    genUtime,\n    genLt,\n    minRefMcSeqno,\n    beforeSplit,\n    accounts,\n    extras\n  };\n}\nexports.loadShardStateUnsplit = loadShardStateUnsplit;","map":{"version":3,"names":["Object","defineProperty","exports","value","loadShardStateUnsplit","MasterchainStateExtra_1","require","ShardAccounts_1","ShardIdent_1","cs","loadUint","Error","globalId","loadInt","shardId","loadShardIdent","seqno","vertSeqNo","genUtime","genLt","loadUintBig","minRefMcSeqno","loadRef","beforeSplit","loadBit","shardAccountsRef","accounts","undefined","isExotic","loadShardAccounts","beginParse","mcStateExtra","extras","cell","loadMasterchainStateExtra"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@ton/core/dist/types/ShardStateUnsplit.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadShardStateUnsplit = void 0;\nconst MasterchainStateExtra_1 = require(\"./MasterchainStateExtra\");\nconst ShardAccounts_1 = require(\"./ShardAccounts\");\nconst ShardIdent_1 = require(\"./ShardIdent\");\nfunction loadShardStateUnsplit(cs) {\n    if (cs.loadUint(32) !== 0x9023afe2) {\n        throw Error('Invalid data');\n    }\n    let globalId = cs.loadInt(32);\n    let shardId = (0, ShardIdent_1.loadShardIdent)(cs);\n    let seqno = cs.loadUint(32);\n    let vertSeqNo = cs.loadUint(32);\n    let genUtime = cs.loadUint(32);\n    let genLt = cs.loadUintBig(64);\n    let minRefMcSeqno = cs.loadUint(32);\n    // Skip OutMsgQueueInfo: usually exotic\n    cs.loadRef();\n    let beforeSplit = cs.loadBit();\n    // Parse accounts\n    let shardAccountsRef = cs.loadRef();\n    let accounts = undefined;\n    if (!shardAccountsRef.isExotic) {\n        accounts = (0, ShardAccounts_1.loadShardAccounts)(shardAccountsRef.beginParse());\n    }\n    // Skip (not used by apps)\n    cs.loadRef();\n    // Parse extras\n    let mcStateExtra = cs.loadBit();\n    let extras = null;\n    if (mcStateExtra) {\n        let cell = cs.loadRef();\n        if (!cell.isExotic) {\n            extras = (0, MasterchainStateExtra_1.loadMasterchainStateExtra)(cell.beginParse());\n        }\n    }\n    ;\n    return {\n        globalId,\n        shardId,\n        seqno,\n        vertSeqNo,\n        genUtime,\n        genLt,\n        minRefMcSeqno,\n        beforeSplit,\n        accounts,\n        extras\n    };\n}\nexports.loadShardStateUnsplit = loadShardStateUnsplit;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtC,MAAMC,uBAAuB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAClE,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAClD,MAAME,YAAY,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC5C,SAASF,qBAAqBA,CAACK,EAAE,EAAE;EAC/B,IAAIA,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,KAAK,UAAU,EAAE;IAChC,MAAMC,KAAK,CAAC,cAAc,CAAC;EAC/B;EACA,IAAIC,QAAQ,GAAGH,EAAE,CAACI,OAAO,CAAC,EAAE,CAAC;EAC7B,IAAIC,OAAO,GAAG,CAAC,CAAC,EAAEN,YAAY,CAACO,cAAc,EAAEN,EAAE,CAAC;EAClD,IAAIO,KAAK,GAAGP,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC;EAC3B,IAAIO,SAAS,GAAGR,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC;EAC/B,IAAIQ,QAAQ,GAAGT,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC;EAC9B,IAAIS,KAAK,GAAGV,EAAE,CAACW,WAAW,CAAC,EAAE,CAAC;EAC9B,IAAIC,aAAa,GAAGZ,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC;EACnC;EACAD,EAAE,CAACa,OAAO,CAAC,CAAC;EACZ,IAAIC,WAAW,GAAGd,EAAE,CAACe,OAAO,CAAC,CAAC;EAC9B;EACA,IAAIC,gBAAgB,GAAGhB,EAAE,CAACa,OAAO,CAAC,CAAC;EACnC,IAAII,QAAQ,GAAGC,SAAS;EACxB,IAAI,CAACF,gBAAgB,CAACG,QAAQ,EAAE;IAC5BF,QAAQ,GAAG,CAAC,CAAC,EAAEnB,eAAe,CAACsB,iBAAiB,EAAEJ,gBAAgB,CAACK,UAAU,CAAC,CAAC,CAAC;EACpF;EACA;EACArB,EAAE,CAACa,OAAO,CAAC,CAAC;EACZ;EACA,IAAIS,YAAY,GAAGtB,EAAE,CAACe,OAAO,CAAC,CAAC;EAC/B,IAAIQ,MAAM,GAAG,IAAI;EACjB,IAAID,YAAY,EAAE;IACd,IAAIE,IAAI,GAAGxB,EAAE,CAACa,OAAO,CAAC,CAAC;IACvB,IAAI,CAACW,IAAI,CAACL,QAAQ,EAAE;MAChBI,MAAM,GAAG,CAAC,CAAC,EAAE3B,uBAAuB,CAAC6B,yBAAyB,EAAED,IAAI,CAACH,UAAU,CAAC,CAAC,CAAC;IACtF;EACJ;EACA;EACA,OAAO;IACHlB,QAAQ;IACRE,OAAO;IACPE,KAAK;IACLC,SAAS;IACTC,QAAQ;IACRC,KAAK;IACLE,aAAa;IACbE,WAAW;IACXG,QAAQ;IACRM;EACJ,CAAC;AACL;AACA9B,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}