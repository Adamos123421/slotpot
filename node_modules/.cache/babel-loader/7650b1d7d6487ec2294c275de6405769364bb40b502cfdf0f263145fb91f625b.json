{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('üö´ Animation blocked:', {\n        hasSwiper: !!swiperRef.current,\n        hasWinner: !!winner,\n        isActive: winnerAnimationActive\n      });\n      return;\n    }\n    console.log('üé∞ Starting SIMPLE winner animation');\n    console.log('üîç Winner data:', winner);\n    setWinnerAnimationActive(true);\n\n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // STEP 1: Find winner slide index by checking CSS classes (most reliable)\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    console.log('üîç Searching through', slides.length, 'slides for winner...');\n\n    // Primary method: Find slide with winner CSS class\n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const winnerCard = slide.querySelector('.player-card.winner');\n      if (winnerCard) {\n        winnerSlideIndex = i;\n        console.log('‚úÖ Found winner slide at index:', i);\n        break;\n      }\n    }\n\n    // Backup method: Find by player name\n    if (winnerSlideIndex === -1) {\n      const winnerName = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName) || 'Player';\n      console.log('üîç Searching by name:', winnerName);\n      for (let i = 0; i < slides.length; i++) {\n        var _nameEl$textContent;\n        const slide = slides[i];\n        const nameEl = slide.querySelector('.player-name');\n        const playerName = nameEl === null || nameEl === void 0 ? void 0 : (_nameEl$textContent = nameEl.textContent) === null || _nameEl$textContent === void 0 ? void 0 : _nameEl$textContent.trim();\n        if (playerName && (playerName === winnerName || playerName.includes(winnerName))) {\n          winnerSlideIndex = i;\n          console.log('‚úÖ Found winner by name at index:', i);\n          break;\n        }\n      }\n    }\n    if (winnerSlideIndex === -1) {\n      console.error('‚ùå Could not find winner slide at all!');\n      setWinnerAnimationActive(false);\n      // Don't set locked here, let it try again\n      return;\n    }\n    console.log('üéØ Target winner slide index:', winnerSlideIndex);\n\n    // STEP 2: Improved slot machine animation with dramatic slowdown\n    console.log('‚ö° Starting exciting spin...');\n\n    // Phase 1: Fast exciting spin (1 second)\n    let spinCount = 0;\n    const fastSpinDuration = 20; // 1 second of fast spinning\n\n    const fastSpinInterval = setInterval(() => {\n      if (swiperRef.current && spinCount < fastSpinDuration) {\n        swiperRef.current.slideNext(30); // Very fast\n        spinCount++;\n      } else {\n        clearInterval(fastSpinInterval);\n\n        // Phase 2: Medium speed approach (0.8 seconds)\n        console.log('üéØ Phase 2: Medium speed approach...');\n        let mediumCount = 0;\n        const mediumSpinDuration = 16; // 0.8 seconds\n\n        const mediumSpinInterval = setInterval(() => {\n          if (swiperRef.current && mediumCount < mediumSpinDuration) {\n            swiperRef.current.slideNext(80); // Medium speed\n            mediumCount++;\n          } else {\n            clearInterval(mediumSpinInterval);\n\n            // Phase 3: Slow dramatic approach (1 second)\n            console.log('üéØ Phase 3: Slow dramatic approach...');\n            let slowCount = 0;\n            const slowSpinDuration = 10; // 1 second\n\n            const slowSpinInterval = setInterval(() => {\n              if (swiperRef.current && slowCount < slowSpinDuration) {\n                swiperRef.current.slideNext(150 + slowCount * 20); // Getting progressively slower\n                slowCount++;\n              } else {\n                clearInterval(slowSpinInterval);\n\n                // Phase 4: Final precise landing\n                console.log('üèÜ Phase 4: Final precision landing...');\n                setTimeout(() => {\n                  if (swiperRef.current) {\n                    // Calculate the correct index for looped slides\n                    // We have 2 sets of players, so we need to find the index within one set\n                    const totalSlides = slides.length;\n                    const slidesPerSet = players.length;\n                    console.log('üìä Slide analysis:', {\n                      totalSlides,\n                      slidesPerSet,\n                      winnerSlideIndex,\n                      playersLength: players.length\n                    });\n\n                    // Convert absolute slide index to real index within one set\n                    let realIndex = winnerSlideIndex % slidesPerSet;\n\n                    // Find the winner in the players array to get the true position\n                    let winnerPositionInPlayers = -1;\n                    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n                    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n                    for (let i = 0; i < players.length; i++) {\n                      const player = players[i];\n                      if (!player) continue; // Skip waiting cards\n\n                      const isMatch = player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName || winnerUsername && player.username === winnerUsername || winnerUsername && player.displayName === winnerUsername;\n                      if (isMatch) {\n                        winnerPositionInPlayers = i;\n                        console.log('üéØ Found winner in players array at position:', i, 'Player:', player.username || player.displayName);\n                        break;\n                      }\n                    }\n                    if (winnerPositionInPlayers !== -1) {\n                      realIndex = winnerPositionInPlayers;\n                      console.log('‚úÖ Using winner position from players array:', realIndex);\n                    } else {\n                      console.log('‚ö†Ô∏è Could not find winner in players array, using calculated index:', realIndex);\n                    }\n                    console.log('üéØ Final target index:', realIndex);\n\n                    // Use slideToLoop for looped carousels - smooth final landing\n                    swiperRef.current.slideToLoop(realIndex, 2000, false); // Slower final slide for drama\n\n                    // STEP 5: Lock the carousel after animation completes\n                    setTimeout(() => {\n                      console.log('üîí Locking winner in position');\n                      if (swiperRef.current) {\n                        // Completely disable movement\n                        swiperRef.current.autoplay.stop();\n                        swiperRef.current.allowSlideNext = false;\n                        swiperRef.current.allowSlidePrev = false;\n                        swiperRef.current.allowTouchMove = false;\n\n                        // Force center the winner slide\n                        const activeIndex = swiperRef.current.activeIndex;\n                        const realIndexCheck = swiperRef.current.realIndex;\n                        console.log('üéØ Final check - Active index:', activeIndex, 'Real index:', realIndexCheck, 'Target was:', realIndex);\n\n                        // If we're still not on the right slide, try one more correction\n                        if (realIndexCheck !== realIndex) {\n                          console.log('üîß Final correction needed...');\n                          swiperRef.current.slideToLoop(realIndex, 0, false);\n                        }\n\n                        // Force stop any transitions\n                        const wrapper = swiperRef.current.wrapperEl;\n                        if (wrapper) {\n                          wrapper.style.transition = 'none';\n                        }\n                      }\n                      setWinnerLocked(true);\n                      setWinnerAnimationActive(false);\n                      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n                      console.log('‚úÖ Winner animation complete and LOCKED!');\n\n                      // NO AUTO-RESET - let the game logic handle when to reset\n                      console.log('üéØ Winner display locked - waiting for game to start new round');\n                    }, 2100); // Wait for final slide animation\n                  }\n                }, 200); // Small pause before final landing\n              }\n            }, 100); // Slow interval\n          }\n        }, 50); // Medium interval\n      }\n    }, 50); // Fast interval\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    console.log('üîí Locking on winner...');\n\n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('üîç Looking for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon = playerNameEl.textContent) === null || _playerNameEl$textCon === void 0 ? void 0 : _playerNameEl$textCon.trim();\n      console.log(`üîç Checking slide ${i}: \"${playerName}\"`);\n\n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n\n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        }\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n      }\n\n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      console.log(`üîç Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        console.log(`‚úÖ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    if (winnerSlideIndex !== -1) {\n      console.log('‚úÖ Found winner slide at index:', winnerSlideIndex);\n\n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n\n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('üèÜ Winner locked in position!');\n\n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n\n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }, 1100);\n    } else {\n      console.warn('‚ùå Could not find winner slide');\n      console.log('üîç Available slides:', slides.length);\n      console.log('üîç Winner data:', winner);\n\n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`üéØ Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      if (fallbackIndex !== -1) {\n        console.log('üéØ Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('üö® Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('üîÑ Resetting to idle state');\n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n\n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n\n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n\n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('üö´ No winner, skipping animation');\n      return;\n    }\n    if (winnerAnimationActive) {\n      console.log('üö´ Animation already active, skipping');\n      return;\n    }\n    if (winnerLocked) {\n      console.log('üö´ Winner already locked, skipping');\n      return;\n    }\n\n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n\n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('üÜï New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n\n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('üö´ Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('üéØ Forcing winner display without animation');\n\n      // Just show the winner without animation\n      setWinnerLocked(true);\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n      // NO AUTO-RESET - let game logic handle it\n      console.log('üéØ Winner locked without animation - waiting for new round');\n      return;\n    }\n    console.log('üèÜ Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`üîÑ Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    animationAttemptsRef.current++;\n\n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('üîÑ Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${winnerAnimationActive && !winnerLocked ? 'winner-approaching' : winnerLocked ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: Math.max(players.length, 6),\n      autoplay: {\n        delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: 300,\n      className: `player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(2)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 19\n            }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 17\n          }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"+lturoi5MGn+/8Zh6H9qMrupE2I=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","winnerAnimationActive","setWinnerAnimationActive","winnerLocked","setWinnerLocked","winnerTimeoutRef","animationAttemptsRef","lastWinnerRef","handleSwiperInit","swiper","current","animateToWinner","console","log","hasSwiper","hasWinner","isActive","autoplay","stop","slides","winnerSlideIndex","length","i","slide","winnerCard","querySelector","winnerName","username","displayName","_nameEl$textContent","nameEl","playerName","textContent","trim","includes","error","spinCount","fastSpinDuration","fastSpinInterval","setInterval","slideNext","clearInterval","mediumCount","mediumSpinDuration","mediumSpinInterval","slowCount","slowSpinDuration","slowSpinInterval","setTimeout","totalSlides","slidesPerSet","playersLength","realIndex","winnerPositionInPlayers","winnerUsername","winnerAddress","address","fullAddress","player","isMatch","slideToLoop","allowSlideNext","allowSlidePrev","allowTouchMove","activeIndex","realIndexCheck","wrapper","wrapperEl","style","transition","lockOnWinner","closestToCenter","Infinity","containerCenter","el","clientWidth","_playerNameEl$textCon","playerNameEl","isWinner","slice","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","Math","abs","slideTo","transform","getComputedStyle","resetToIdle","warn","fallbackIndex","start","clearTimeout","currentWinnerKey","lastWinnerKey","params","delay","disableOnInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","max","pauseOnMouseEnter","speed","onSwiper","Array","map","_","setIndex","index","toUpperCase","amount","toFixed","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('üö´ Animation blocked:', { \n        hasSwiper: !!swiperRef.current, \n        hasWinner: !!winner, \n        isActive: winnerAnimationActive \n      });\n      return;\n    }\n    \n    console.log('üé∞ Starting SIMPLE winner animation');\n    console.log('üîç Winner data:', winner);\n    \n    setWinnerAnimationActive(true);\n    \n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // STEP 1: Find winner slide index by checking CSS classes (most reliable)\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    console.log('üîç Searching through', slides.length, 'slides for winner...');\n    \n    // Primary method: Find slide with winner CSS class\n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const winnerCard = slide.querySelector('.player-card.winner');\n      if (winnerCard) {\n        winnerSlideIndex = i;\n        console.log('‚úÖ Found winner slide at index:', i);\n        break;\n      }\n    }\n    \n    // Backup method: Find by player name\n    if (winnerSlideIndex === -1) {\n      const winnerName = winner?.username || winner?.displayName || 'Player';\n      console.log('üîç Searching by name:', winnerName);\n      \n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        const nameEl = slide.querySelector('.player-name');\n        const playerName = nameEl?.textContent?.trim();\n        \n        if (playerName && (playerName === winnerName || playerName.includes(winnerName))) {\n          winnerSlideIndex = i;\n          console.log('‚úÖ Found winner by name at index:', i);\n          break;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex === -1) {\n      console.error('‚ùå Could not find winner slide at all!');\n      setWinnerAnimationActive(false);\n      // Don't set locked here, let it try again\n      return;\n    }\n    \n    console.log('üéØ Target winner slide index:', winnerSlideIndex);\n    \n    // STEP 2: Improved slot machine animation with dramatic slowdown\n    console.log('‚ö° Starting exciting spin...');\n    \n    // Phase 1: Fast exciting spin (1 second)\n    let spinCount = 0;\n    const fastSpinDuration = 20; // 1 second of fast spinning\n    \n    const fastSpinInterval = setInterval(() => {\n      if (swiperRef.current && spinCount < fastSpinDuration) {\n        swiperRef.current.slideNext(30); // Very fast\n        spinCount++;\n      } else {\n        clearInterval(fastSpinInterval);\n        \n        // Phase 2: Medium speed approach (0.8 seconds)\n        console.log('üéØ Phase 2: Medium speed approach...');\n        let mediumCount = 0;\n        const mediumSpinDuration = 16; // 0.8 seconds\n        \n        const mediumSpinInterval = setInterval(() => {\n          if (swiperRef.current && mediumCount < mediumSpinDuration) {\n            swiperRef.current.slideNext(80); // Medium speed\n            mediumCount++;\n          } else {\n            clearInterval(mediumSpinInterval);\n            \n            // Phase 3: Slow dramatic approach (1 second)\n            console.log('üéØ Phase 3: Slow dramatic approach...');\n            let slowCount = 0;\n            const slowSpinDuration = 10; // 1 second\n            \n            const slowSpinInterval = setInterval(() => {\n              if (swiperRef.current && slowCount < slowSpinDuration) {\n                swiperRef.current.slideNext(150 + (slowCount * 20)); // Getting progressively slower\n                slowCount++;\n              } else {\n                clearInterval(slowSpinInterval);\n                \n                // Phase 4: Final precise landing\n                console.log('üèÜ Phase 4: Final precision landing...');\n                \n                setTimeout(() => {\n                  if (swiperRef.current) {\n                    // Calculate the correct index for looped slides\n                    // We have 2 sets of players, so we need to find the index within one set\n                    const totalSlides = slides.length;\n                    const slidesPerSet = players.length;\n                    \n                    console.log('üìä Slide analysis:', {\n                      totalSlides,\n                      slidesPerSet,\n                      winnerSlideIndex,\n                      playersLength: players.length\n                    });\n                    \n                    // Convert absolute slide index to real index within one set\n                    let realIndex = winnerSlideIndex % slidesPerSet;\n                    \n                    // Find the winner in the players array to get the true position\n                    let winnerPositionInPlayers = -1;\n                    const winnerUsername = winner?.username || winner?.displayName;\n                    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n                    \n                    for (let i = 0; i < players.length; i++) {\n                      const player = players[i];\n                      if (!player) continue; // Skip waiting cards\n                      \n                      const isMatch = (player.address === winner.address) ||\n                                     (player.username === winner.username) ||\n                                     (player.address === winner.winner) ||\n                                     (player.address === winner.fullAddress) ||\n                                     (player.username === winner.displayName) ||\n                                     (winnerUsername && player.username === winnerUsername) ||\n                                     (winnerUsername && player.displayName === winnerUsername);\n                      \n                      if (isMatch) {\n                        winnerPositionInPlayers = i;\n                        console.log('üéØ Found winner in players array at position:', i, 'Player:', player.username || player.displayName);\n                        break;\n                      }\n                    }\n                    \n                    if (winnerPositionInPlayers !== -1) {\n                      realIndex = winnerPositionInPlayers;\n                      console.log('‚úÖ Using winner position from players array:', realIndex);\n                    } else {\n                      console.log('‚ö†Ô∏è Could not find winner in players array, using calculated index:', realIndex);\n                    }\n                    \n                    console.log('üéØ Final target index:', realIndex);\n                    \n                    // Use slideToLoop for looped carousels - smooth final landing\n                    swiperRef.current.slideToLoop(realIndex, 2000, false); // Slower final slide for drama\n                    \n                    // STEP 5: Lock the carousel after animation completes\n                    setTimeout(() => {\n                      console.log('üîí Locking winner in position');\n                      \n                      if (swiperRef.current) {\n                        // Completely disable movement\n                        swiperRef.current.autoplay.stop();\n                        swiperRef.current.allowSlideNext = false;\n                        swiperRef.current.allowSlidePrev = false;\n                        swiperRef.current.allowTouchMove = false;\n                        \n                        // Force center the winner slide\n                        const activeIndex = swiperRef.current.activeIndex;\n                        const realIndexCheck = swiperRef.current.realIndex;\n                        console.log('üéØ Final check - Active index:', activeIndex, 'Real index:', realIndexCheck, 'Target was:', realIndex);\n                        \n                        // If we're still not on the right slide, try one more correction\n                        if (realIndexCheck !== realIndex) {\n                          console.log('üîß Final correction needed...');\n                          swiperRef.current.slideToLoop(realIndex, 0, false);\n                        }\n                        \n                        // Force stop any transitions\n                        const wrapper = swiperRef.current.wrapperEl;\n                        if (wrapper) {\n                          wrapper.style.transition = 'none';\n                        }\n                      }\n                      \n                      setWinnerLocked(true);\n                      setWinnerAnimationActive(false);\n                      onWinnerLand?.();\n                      \n                      console.log('‚úÖ Winner animation complete and LOCKED!');\n                      \n                      // NO AUTO-RESET - let the game logic handle when to reset\n                      console.log('üéØ Winner display locked - waiting for game to start new round');\n                      \n                    }, 2100); // Wait for final slide animation\n                  }\n                }, 200); // Small pause before final landing\n              }\n            }, 100); // Slow interval\n          }\n        }, 50); // Medium interval\n      }\n    }, 50); // Fast interval\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    \n    console.log('üîí Locking on winner...');\n    \n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('üîç Looking for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`üîç Checking slide ${i}: \"${playerName}\"`);\n      \n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n        \n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner?.displayName);\n        }\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || \n                   winnerAddress.includes(playerName);\n      }\n      \n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      \n      console.log(`üîç Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      \n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        \n        console.log(`‚úÖ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        \n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex !== -1) {\n      console.log('‚úÖ Found winner slide at index:', winnerSlideIndex);\n      \n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n      \n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('üèÜ Winner locked in position!');\n        \n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n          \n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        \n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        \n      }, 1100);\n    } else {\n      console.warn('‚ùå Could not find winner slide');\n      console.log('üîç Available slides:', slides.length);\n      console.log('üîç Winner data:', winner);\n      \n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`üéØ Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      \n      if (fallbackIndex !== -1) {\n        console.log('üéØ Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        \n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand?.();\n          \n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('üö® Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('üîÑ Resetting to idle state');\n    \n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n      \n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n      \n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    \n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    \n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    \n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('üö´ No winner, skipping animation');\n      return;\n    }\n    \n    if (winnerAnimationActive) {\n      console.log('üö´ Animation already active, skipping');\n      return;\n    }\n    \n    if (winnerLocked) {\n      console.log('üö´ Winner already locked, skipping');\n      return;\n    }\n    \n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n    \n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('üÜï New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n    \n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('üö´ Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('üéØ Forcing winner display without animation');\n      \n      // Just show the winner without animation\n      setWinnerLocked(true);\n      onWinnerLand?.();\n      \n      // NO AUTO-RESET - let game logic handle it\n      console.log('üéØ Winner locked without animation - waiting for new round');\n      \n      return;\n    }\n    \n    console.log('üèÜ Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`üîÑ Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    \n    animationAttemptsRef.current++;\n    \n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n    \n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    \n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('üîÑ Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        winnerAnimationActive && !winnerLocked ? 'winner-approaching' : \n        winnerLocked ? 'winner-landed' : ''\n      }`}>‚¨áÔ∏è</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={Math.max(players.length, 6)}\n        autoplay={{\n          delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={300}\n        className={`player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Only 2 sets to reduce complexity */}\n        {[...Array(2)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">‚ùì</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">üëë</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}