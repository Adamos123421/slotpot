{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.eventHandlers = new Map();\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.gameState = {\n      isWaitingForWinner: false,\n      currentRound: null,\n      timeRemaining: null,\n      lastWinner: null,\n      jackpotValue: 0,\n      bettors: []\n    };\n  }\n  connect() {\n    var _this$socket, _this$socket2;\n    // Prevent multiple connections - return if already connected or connecting\n    if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected || (_this$socket2 = this.socket) !== null && _this$socket2 !== void 0 && _this$socket2.connecting) {\n      console.log('🔌 Socket already connected/connecting, skipping duplicate connection');\n      return;\n    }\n    const socketUrl = \"https://hk-seeks-jet-session.trycloudflare.com\";\n\n    // Creating socket connection\n    this.socket = io(socketUrl, {\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      transports: ['websocket'],\n      withCredentials: true\n    });\n    this.setupEventHandlers();\n  }\n  setupEventHandlers() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      // Connected to socket server\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n\n      // Request current game state on connect (with null check)\n      if (this.socket && this.socket.connected) {\n        this.socket.emit('getGameState');\n      }\n\n      // Join as a user to get online count\n      this.socket.emit('user:join', {\n        username: 'Player',\n        avatar: '🎮'\n      });\n    });\n    this.socket.on('disconnect', () => {\n      // Disconnected from socket server\n      this.isConnected = false;\n    });\n    this.socket.on('connect_error', error => {\n      console.log('🚫 Connection error:', error);\n      this.reconnectAttempts++;\n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.log('❌ Max reconnection attempts reached');\n        this.socket.disconnect();\n      }\n    });\n\n    // Game specific events\n    this.socket.on('gameState', data => {\n      this.gameState = {\n        ...this.gameState,\n        ...data\n      };\n\n      // If joining when timer is 0 and no winner yet, show waiting state\n      if (data.timeRemaining === 0 && !data.lastWinner) {\n        this.gameState.isWaitingForWinner = true;\n        this.emit('waitingForWinner', true);\n      }\n      this.emit('gameState', this.gameState);\n    });\n    this.socket.on('winner', data => {\n      console.log('🏆 Winner announced:', data);\n      this.gameState.lastWinner = data;\n      this.gameState.isWaitingForWinner = false;\n      this.emit('winner', data);\n    });\n\n    // Handle direct winner announcements (reliable delivery)\n    this.socket.on('winnerAnnouncement', data => {\n      console.log('🎯 Direct winner announcement received:', data);\n      this.gameState.lastWinner = data;\n      this.gameState.isWaitingForWinner = false;\n      this.gameState.winnerAnnouncement = data;\n      this.emit('winnerAnnouncement', data);\n    });\n    this.socket.on('newBet', data => {\n      // Update local game state with new bet\n      if (!this.gameState.bettors.find(b => b.address === data.address)) {\n        this.gameState.bettors.push(data);\n      }\n      this.gameState.jackpotValue += parseFloat(data.amount) - 0.05; // Account for fee\n      this.emit('newBet', data);\n    });\n    this.socket.on('timer', data => {\n      // SAFETY: Ensure data exists and has required properties\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n\n      // Extract timer properties safely\n      const timeRemaining = typeof data.timeRemaining === 'number' ? data.timeRemaining : 0;\n      const roundNumber = typeof data.roundNumber === 'number' ? data.roundNumber : this.gameState.currentRound;\n      this.gameState.timeRemaining = timeRemaining;\n      this.gameState.currentRound = roundNumber;\n\n      // If timer hits 0 and we weren't already waiting, set waiting state\n      if (timeRemaining === 0 && !this.gameState.isWaitingForWinner) {\n        this.gameState.isWaitingForWinner = true;\n        this.emit('waitingForWinner', true);\n      }\n\n      // Emit with safe data structure\n      this.emit('timer', {\n        timeRemaining,\n        roundNumber,\n        timeElapsed: typeof data.timeElapsed === 'number' ? data.timeElapsed : 0,\n        isActive: Boolean(data.isActive)\n      });\n    });\n\n    // Online user events\n    this.socket.on('user:joined', data => {\n      console.log('👤 User joined:', data);\n      this.emit('user:joined', data);\n    });\n    this.socket.on('user:left', data => {\n      console.log('👋 User left:', data);\n      this.emit('user:left', data);\n    });\n\n    // Handle round reset\n    this.socket.on('roundReset', data => {\n      console.log('🔄 Round reset:', data);\n\n      // SAFETY: Ensure data exists\n      const resetData = data || {};\n      const timeRemaining = typeof resetData.timeRemaining === 'number' ? resetData.timeRemaining : 30;\n      const roundNumber = typeof resetData.roundNumber === 'number' ? resetData.roundNumber : this.gameState.currentRound;\n      this.gameState = {\n        ...this.gameState,\n        isWaitingForWinner: false,\n        bettors: [],\n        jackpotValue: 0,\n        lastWinner: null,\n        timeRemaining,\n        currentRound: roundNumber\n      };\n      this.emit('roundReset', {\n        timeRemaining,\n        roundNumber,\n        message: resetData.message || 'Round reset'\n      });\n    });\n\n    // Handle new round start\n    this.socket.on('newRound', data => {\n      console.log('🎰 New round started:', data);\n\n      // SAFETY: Ensure data exists and has required properties\n      if (!data || typeof data !== 'object') {\n        console.warn('⚠️ Invalid newRound data received:', data);\n        return;\n      }\n      const timeRemaining = typeof data.timeRemaining === 'number' ? data.timeRemaining : 30;\n      const roundNumber = typeof data.roundNumber === 'number' ? data.roundNumber : this.gameState.currentRound + 1;\n      this.gameState = {\n        ...this.gameState,\n        isWaitingForWinner: false,\n        isPostWinnerLoading: false,\n        bettors: [],\n        jackpotValue: 0,\n        lastWinner: null,\n        currentRound: roundNumber,\n        timeRemaining: timeRemaining\n      };\n      this.emit('newRound', {\n        roundNumber,\n        timeRemaining,\n        isActive: true\n      });\n      this.emit('gameState', this.gameState);\n    });\n\n    // Handle comprehensive game data updates\n    this.socket.on('fullGameUpdate', data => {\n      //console.log('🎮 Full game data update:', data);\n      this.gameState = {\n        ...this.gameState,\n        ...data\n      };\n      this.emit('fullGameUpdate', data);\n      this.emit('gameState', this.gameState);\n    });\n\n    // Handle legacy bettors update for backwards compatibility\n    this.socket.on('bettorsUpdate', data => {\n      console.log('💰 Bettors update:', data);\n      this.gameState.bettors = data.bettors || [];\n      this.gameState.jackpotValue = data.totalPot || 0;\n      this.gameState.betCount = data.betCount || 0;\n      this.emit('bettorsUpdate', data);\n      this.emit('gameState', this.gameState);\n    });\n  }\n  on(event, callback) {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, new Set());\n    }\n    const handlers = this.eventHandlers.get(event);\n\n    // Prevent duplicate handlers\n    if (handlers.has(callback)) {\n      console.warn(`🔌 Duplicate listener for '${event}' event prevented`);\n      return;\n    }\n    handlers.add(callback);\n    console.log(`🔌 Added listener for '${event}' event (${handlers.size} total)`);\n  }\n  off(event, callback) {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      const wasDeleted = handlers.delete(callback);\n      if (wasDeleted) {\n        console.log(`🔌 Removed listener for '${event}' event (${handlers.size} remaining)`);\n      }\n    }\n  }\n  emit(event, data) {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error(`🚫 Error in ${event} handler:`, error);\n          console.error('Data that caused error:', data);\n        }\n      });\n    }\n  }\n  placeBet(betData) {\n    var _this$socket3;\n    if (!((_this$socket3 = this.socket) !== null && _this$socket3 !== void 0 && _this$socket3.connected)) {\n      console.error('Cannot place bet: Socket not connected');\n      return;\n    }\n    this.socket.emit('placeBet', betData);\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n  reconnect() {\n    this.disconnect();\n    this.connect();\n  }\n  getGameState() {\n    return this.gameState;\n  }\n  isWaitingForWinner() {\n    return this.gameState.isWaitingForWinner;\n  }\n  isPostWinnerLoading() {\n    return this.gameState.isPostWinnerLoading || false;\n  }\n  getCurrentRound() {\n    return this.gameState.currentRound;\n  }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","eventHandlers","Map","isConnected","reconnectAttempts","maxReconnectAttempts","gameState","isWaitingForWinner","currentRound","timeRemaining","lastWinner","jackpotValue","bettors","connect","_this$socket","_this$socket2","connected","connecting","console","log","socketUrl","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","transports","withCredentials","setupEventHandlers","on","emit","username","avatar","error","disconnect","data","winnerAnnouncement","find","b","address","push","parseFloat","amount","roundNumber","timeElapsed","isActive","Boolean","resetData","message","warn","isPostWinnerLoading","totalPot","betCount","event","callback","has","set","Set","handlers","get","add","size","off","wasDeleted","delete","forEach","handler","placeBet","betData","_this$socket3","reconnect","getGameState","getCurrentRound","socketService"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.eventHandlers = new Map();\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.gameState = {\n      isWaitingForWinner: false,\n      currentRound: null,\n      timeRemaining: null,\n      lastWinner: null,\n      jackpotValue: 0,\n      bettors: []\n    };\n  }\n\n  connect() {\n    // Prevent multiple connections - return if already connected or connecting\n    if (this.socket?.connected || this.socket?.connecting) {\n      console.log('🔌 Socket already connected/connecting, skipping duplicate connection');\n      return;\n    }\n\n    const socketUrl = \"https://hk-seeks-jet-session.trycloudflare.com\";\n    \n    // Creating socket connection\n    this.socket = io(socketUrl, {\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      transports: ['websocket'],\n      withCredentials: true\n    });\n\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    if (!this.socket) return;\n\n    this.socket.on('connect', () => {\n      // Connected to socket server\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      \n      // Request current game state on connect (with null check)\n      if (this.socket && this.socket.connected) {\n        this.socket.emit('getGameState');\n      }\n      \n      // Join as a user to get online count\n      this.socket.emit('user:join', {\n        username: 'Player',\n        avatar: '🎮'\n      });\n    });\n\n    this.socket.on('disconnect', () => {\n      // Disconnected from socket server\n      this.isConnected = false;\n    });\n\n    this.socket.on('connect_error', (error) => {\n      console.log('🚫 Connection error:', error);\n      this.reconnectAttempts++;\n      \n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n        console.log('❌ Max reconnection attempts reached');\n        this.socket.disconnect();\n      }\n    });\n\n    // Game specific events\n    this.socket.on('gameState', (data) => {\n      this.gameState = {\n        ...this.gameState,\n        ...data\n      };\n      \n      // If joining when timer is 0 and no winner yet, show waiting state\n      if (data.timeRemaining === 0 && !data.lastWinner) {\n        this.gameState.isWaitingForWinner = true;\n        this.emit('waitingForWinner', true);\n      }\n      \n      this.emit('gameState', this.gameState);\n    });\n\n    this.socket.on('winner', (data) => {\n      console.log('🏆 Winner announced:', data);\n      this.gameState.lastWinner = data;\n      this.gameState.isWaitingForWinner = false;\n      this.emit('winner', data);\n    });\n\n    // Handle direct winner announcements (reliable delivery)\n    this.socket.on('winnerAnnouncement', (data) => {\n      console.log('🎯 Direct winner announcement received:', data);\n      this.gameState.lastWinner = data;\n      this.gameState.isWaitingForWinner = false;\n      this.gameState.winnerAnnouncement = data;\n      this.emit('winnerAnnouncement', data);\n    });\n\n    this.socket.on('newBet', (data) => {\n      // Update local game state with new bet\n      if (!this.gameState.bettors.find(b => b.address === data.address)) {\n        this.gameState.bettors.push(data);\n      }\n              this.gameState.jackpotValue += (parseFloat(data.amount) - 0.05); // Account for fee\n      this.emit('newBet', data);\n    });\n\n    this.socket.on('timer', (data) => {\n      // SAFETY: Ensure data exists and has required properties\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      \n      // Extract timer properties safely\n      const timeRemaining = typeof data.timeRemaining === 'number' ? data.timeRemaining : 0;\n      const roundNumber = typeof data.roundNumber === 'number' ? data.roundNumber : this.gameState.currentRound;\n      \n      this.gameState.timeRemaining = timeRemaining;\n      this.gameState.currentRound = roundNumber;\n      \n      // If timer hits 0 and we weren't already waiting, set waiting state\n      if (timeRemaining === 0 && !this.gameState.isWaitingForWinner) {\n        this.gameState.isWaitingForWinner = true;\n        this.emit('waitingForWinner', true);\n      }\n      \n      // Emit with safe data structure\n      this.emit('timer', {\n        timeRemaining,\n        roundNumber,\n        timeElapsed: typeof data.timeElapsed === 'number' ? data.timeElapsed : 0,\n        isActive: Boolean(data.isActive)\n      });\n    });\n\n    // Online user events\n    this.socket.on('user:joined', (data) => {\n      console.log('👤 User joined:', data);\n      this.emit('user:joined', data);\n    });\n\n    this.socket.on('user:left', (data) => {\n      console.log('👋 User left:', data);\n      this.emit('user:left', data);\n    });\n\n    // Handle round reset\n    this.socket.on('roundReset', (data) => {\n      console.log('🔄 Round reset:', data);\n      \n      // SAFETY: Ensure data exists\n      const resetData = data || {};\n      const timeRemaining = typeof resetData.timeRemaining === 'number' ? resetData.timeRemaining : 30;\n      const roundNumber = typeof resetData.roundNumber === 'number' ? resetData.roundNumber : this.gameState.currentRound;\n      \n      this.gameState = {\n        ...this.gameState,\n        isWaitingForWinner: false,\n        bettors: [],\n        jackpotValue: 0,\n        lastWinner: null,\n        timeRemaining,\n        currentRound: roundNumber\n      };\n      \n      this.emit('roundReset', {\n        timeRemaining,\n        roundNumber,\n        message: resetData.message || 'Round reset'\n      });\n    });\n\n    // Handle new round start\n    this.socket.on('newRound', (data) => {\n      console.log('🎰 New round started:', data);\n      \n      // SAFETY: Ensure data exists and has required properties\n      if (!data || typeof data !== 'object') {\n        console.warn('⚠️ Invalid newRound data received:', data);\n        return;\n      }\n      \n      const timeRemaining = typeof data.timeRemaining === 'number' ? data.timeRemaining : 30;\n      const roundNumber = typeof data.roundNumber === 'number' ? data.roundNumber : (this.gameState.currentRound + 1);\n      \n      this.gameState = {\n        ...this.gameState,\n        isWaitingForWinner: false,\n        isPostWinnerLoading: false,\n        bettors: [],\n        jackpotValue: 0,\n        lastWinner: null,\n        currentRound: roundNumber,\n        timeRemaining: timeRemaining\n      };\n      \n      this.emit('newRound', {\n        roundNumber,\n        timeRemaining,\n        isActive: true\n      });\n      this.emit('gameState', this.gameState);\n    });\n\n    // Handle comprehensive game data updates\n    this.socket.on('fullGameUpdate', (data) => {\n      //console.log('🎮 Full game data update:', data);\n      this.gameState = {\n        ...this.gameState,\n        ...data\n      };\n      this.emit('fullGameUpdate', data);\n      this.emit('gameState', this.gameState);\n    });\n\n    // Handle legacy bettors update for backwards compatibility\n    this.socket.on('bettorsUpdate', (data) => {\n      console.log('💰 Bettors update:', data);\n      this.gameState.bettors = data.bettors || [];\n      this.gameState.jackpotValue = data.totalPot || 0;\n      this.gameState.betCount = data.betCount || 0;\n      this.emit('bettorsUpdate', data);\n      this.emit('gameState', this.gameState);\n    });\n  }\n\n  on(event, callback) {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, new Set());\n    }\n    \n    const handlers = this.eventHandlers.get(event);\n    \n    // Prevent duplicate handlers\n    if (handlers.has(callback)) {\n      console.warn(`🔌 Duplicate listener for '${event}' event prevented`);\n      return;\n    }\n    \n    handlers.add(callback);\n    console.log(`🔌 Added listener for '${event}' event (${handlers.size} total)`);\n  }\n\n  off(event, callback) {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      const wasDeleted = handlers.delete(callback);\n      if (wasDeleted) {\n        console.log(`🔌 Removed listener for '${event}' event (${handlers.size} remaining)`);\n      }\n    }\n  }\n\n  emit(event, data) {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error(`🚫 Error in ${event} handler:`, error);\n          console.error('Data that caused error:', data);\n        }\n      });\n    }\n  }\n\n  placeBet(betData) {\n    if (!this.socket?.connected) {\n      console.error('Cannot place bet: Socket not connected');\n      return;\n    }\n    this.socket.emit('placeBet', betData);\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  reconnect() {\n    this.disconnect();\n    this.connect();\n  }\n\n  getGameState() {\n    return this.gameState;\n  }\n\n  isWaitingForWinner() {\n    return this.gameState.isWaitingForWinner;\n  }\n\n  isPostWinnerLoading() {\n    return this.gameState.isPostWinnerLoading || false;\n  }\n\n  getCurrentRound() {\n    return this.gameState.currentRound;\n  }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\nexport default socketService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}