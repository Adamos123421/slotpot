{"ast":null,"code":"// Backend API service for frontend\nclass BackendApiService {\n  constructor() {\n    this.baseUrl = \"http://localhost:5002\";\n  }\n  async fetchJson(endpoint, options = {}) {\n    try {\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        ...options\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // CONTRACT API METHODS REMOVED - ALL DATA NOW COMES VIA SOCKET\n\n  // Admin automation status\n  async getAdminStatus() {\n    return this.fetchJson('/api/admin/status');\n  }\n\n  // Update admin settings\n  async updateAdminSettings(settings) {\n    return this.fetchJson('/api/admin/settings', {\n      method: 'POST',\n      body: JSON.stringify(settings)\n    });\n  }\n\n  // Emergency admin controls (require admin key)\n  async forceStartRound(adminKey) {\n    return this.fetchJson('/api/admin/force-start', {\n      method: 'POST',\n      body: JSON.stringify({\n        adminKey\n      })\n    });\n  }\n  async forceEndRound(adminKey) {\n    return this.fetchJson('/api/admin/force-end', {\n      method: 'POST',\n      body: JSON.stringify({\n        adminKey\n      })\n    });\n  }\n\n  // BETTOR API METHODS REMOVED - ALL DATA NOW COMES VIA SOCKET\n\n  // Bet notification\n  async notifyBetPlacement(betData) {\n    return this.fetchJson('/api/game/bet-notification', {\n      method: 'POST',\n      body: JSON.stringify(betData)\n    });\n  }\n\n  // Health check\n  async getHealth() {\n    return this.fetchJson('/api/health');\n  }\n\n  // Stats endpoints\n  async getStatsSummary() {\n    return this.fetchJson('/api/stats/summary');\n  }\n  async getLeaderboard({\n    by = 'prize',\n    limit = 10\n  } = {}) {\n    const params = new URLSearchParams({\n      by,\n      limit\n    });\n    return this.fetchJson(`/api/stats/leaderboard?${params.toString()}`);\n  }\n  async getRecentGames(limit = 10) {\n    const params = new URLSearchParams({\n      limit\n    });\n    return this.fetchJson(`/api/stats/recent-games?${params.toString()}`);\n  }\n}\n\n// Create singleton instance\nexport const backendApi = new BackendApiService();\nexport default BackendApiService;","map":{"version":3,"names":["BackendApiService","constructor","baseUrl","fetchJson","endpoint","options","response","fetch","headers","ok","Error","status","json","error","console","getAdminStatus","updateAdminSettings","settings","method","body","JSON","stringify","forceStartRound","adminKey","forceEndRound","notifyBetPlacement","betData","getHealth","getStatsSummary","getLeaderboard","by","limit","params","URLSearchParams","toString","getRecentGames","backendApi"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/backendApi.js"],"sourcesContent":["// Backend API service for frontend\nclass BackendApiService {\n  constructor() {\n    this.baseUrl = \"http://localhost:5002\";\n  }\n\n  async fetchJson(endpoint, options = {}) {\n    try {\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        ...options\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // CONTRACT API METHODS REMOVED - ALL DATA NOW COMES VIA SOCKET\n\n  // Admin automation status\n  async getAdminStatus() {\n    return this.fetchJson('/api/admin/status');\n  }\n\n  // Update admin settings\n  async updateAdminSettings(settings) {\n    return this.fetchJson('/api/admin/settings', {\n      method: 'POST',\n      body: JSON.stringify(settings)\n    });\n  }\n\n  // Emergency admin controls (require admin key)\n  async forceStartRound(adminKey) {\n    return this.fetchJson('/api/admin/force-start', {\n      method: 'POST',\n      body: JSON.stringify({ adminKey })\n    });\n  }\n\n  async forceEndRound(adminKey) {\n    return this.fetchJson('/api/admin/force-end', {\n      method: 'POST',\n      body: JSON.stringify({ adminKey })\n    });\n  }\n\n  // BETTOR API METHODS REMOVED - ALL DATA NOW COMES VIA SOCKET\n\n  // Bet notification\n  async notifyBetPlacement(betData) {\n    return this.fetchJson('/api/game/bet-notification', {\n      method: 'POST',\n      body: JSON.stringify(betData)\n    });\n  }\n\n  // Health check\n  async getHealth() {\n    return this.fetchJson('/api/health');\n  }\n\n  // Stats endpoints\n  async getStatsSummary() {\n    return this.fetchJson('/api/stats/summary');\n  }\n\n  async getLeaderboard({ by = 'prize', limit = 10 } = {}) {\n    const params = new URLSearchParams({ by, limit });\n    return this.fetchJson(`/api/stats/leaderboard?${params.toString()}`);\n  }\n\n  async getRecentGames(limit = 10) {\n    const params = new URLSearchParams({ limit });\n    return this.fetchJson(`/api/stats/recent-games?${params.toString()}`);\n  }\n}\n\n// Create singleton instance\nexport const backendApi = new BackendApiService();\n\nexport default BackendApiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}