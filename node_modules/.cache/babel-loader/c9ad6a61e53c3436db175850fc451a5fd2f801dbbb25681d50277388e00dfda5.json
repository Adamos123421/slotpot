{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport socketService from '../services/socketService';\nconst useOnlineCount = () => {\n  _s();\n  const [onlineCount, setOnlineCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    // Listen for user join/leave events to update count\n    const handleUserJoined = data => {\n      console.log('ðŸ‘¤ User joined, updating count:', data.totalUsers);\n      setOnlineCount(data.totalUsers || 0);\n    };\n    const handleUserLeft = data => {\n      console.log('ðŸ‘¤ User left, updating count:', data.totalUsers);\n      setOnlineCount(data.totalUsers || 0);\n    };\n\n    // Request current count when connected\n    const handleConnect = () => {\n      console.log('ðŸ”Œ Socket connected, requesting online count...');\n      if (socketService.socket) {\n        socketService.socket.emit('getOnlineCount');\n      }\n    };\n\n    // Set up event listeners\n    socketService.on('user:joined', handleUserJoined);\n    socketService.on('user:left', handleUserLeft);\n    socketService.on('connect', handleConnect);\n    socketService.on('onlineCount', data => {\n      console.log('ðŸ“Š Received online count:', data);\n      setOnlineCount(data.count || 0);\n    });\n\n    // Request initial count if already connected (with delay to avoid spam)\n    if (socketService.isConnected && socketService.socket) {\n      setTimeout(() => {\n        socketService.socket.emit('getOnlineCount');\n      }, 1000);\n    }\n    return () => {\n      socketService.off('user:joined', handleUserJoined);\n      socketService.off('user:left', handleUserLeft);\n      socketService.off('connect', handleConnect);\n      socketService.off('onlineCount');\n    };\n  }, []);\n  return {\n    onlineCount,\n    isLoading\n  };\n};\n_s(useOnlineCount, \"VaY0zL/3rhj8WbwXPO3Znu+G94s=\");\nexport default useOnlineCount;","map":{"version":3,"names":["useState","useEffect","socketService","useOnlineCount","_s","onlineCount","setOnlineCount","isLoading","setIsLoading","handleUserJoined","data","console","log","totalUsers","handleUserLeft","handleConnect","socket","emit","on","count","isConnected","setTimeout","off"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useOnlineCount.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport socketService from '../services/socketService';\n\nconst useOnlineCount = () => {\n  const [onlineCount, setOnlineCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    // Listen for user join/leave events to update count\n    const handleUserJoined = (data) => {\n      console.log('ðŸ‘¤ User joined, updating count:', data.totalUsers);\n      setOnlineCount(data.totalUsers || 0);\n    };\n\n    const handleUserLeft = (data) => {\n      console.log('ðŸ‘¤ User left, updating count:', data.totalUsers);\n      setOnlineCount(data.totalUsers || 0);\n    };\n\n    // Request current count when connected\n    const handleConnect = () => {\n      console.log('ðŸ”Œ Socket connected, requesting online count...');\n      if (socketService.socket) {\n        socketService.socket.emit('getOnlineCount');\n      }\n    };\n\n    // Set up event listeners\n    socketService.on('user:joined', handleUserJoined);\n    socketService.on('user:left', handleUserLeft);\n    socketService.on('connect', handleConnect);\n    socketService.on('onlineCount', (data) => {\n      console.log('ðŸ“Š Received online count:', data);\n      setOnlineCount(data.count || 0);\n    });\n\n    // Request initial count if already connected (with delay to avoid spam)\n    if (socketService.isConnected && socketService.socket) {\n      setTimeout(() => {\n        socketService.socket.emit('getOnlineCount');\n      }, 1000);\n    }\n\n    return () => {\n      socketService.off('user:joined', handleUserJoined);\n      socketService.off('user:left', handleUserLeft);\n      socketService.off('connect', handleConnect);\n      socketService.off('onlineCount');\n    };\n  }, []);\n\n  return { onlineCount, isLoading };\n};\n\nexport default useOnlineCount;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,2BAA2B;AAErD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,gBAAgB,GAAIC,IAAI,IAAK;MACjCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,IAAI,CAACG,UAAU,CAAC;MAC/DP,cAAc,CAACI,IAAI,CAACG,UAAU,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,MAAMC,cAAc,GAAIJ,IAAI,IAAK;MAC/BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,IAAI,CAACG,UAAU,CAAC;MAC7DP,cAAc,CAACI,IAAI,CAACG,UAAU,IAAI,CAAC,CAAC;IACtC,CAAC;;IAED;IACA,MAAME,aAAa,GAAGA,CAAA,KAAM;MAC1BJ,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAC9D,IAAIV,aAAa,CAACc,MAAM,EAAE;QACxBd,aAAa,CAACc,MAAM,CAACC,IAAI,CAAC,gBAAgB,CAAC;MAC7C;IACF,CAAC;;IAED;IACAf,aAAa,CAACgB,EAAE,CAAC,aAAa,EAAET,gBAAgB,CAAC;IACjDP,aAAa,CAACgB,EAAE,CAAC,WAAW,EAAEJ,cAAc,CAAC;IAC7CZ,aAAa,CAACgB,EAAE,CAAC,SAAS,EAAEH,aAAa,CAAC;IAC1Cb,aAAa,CAACgB,EAAE,CAAC,aAAa,EAAGR,IAAI,IAAK;MACxCC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,IAAI,CAAC;MAC9CJ,cAAc,CAACI,IAAI,CAACS,KAAK,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC;;IAEF;IACA,IAAIjB,aAAa,CAACkB,WAAW,IAAIlB,aAAa,CAACc,MAAM,EAAE;MACrDK,UAAU,CAAC,MAAM;QACfnB,aAAa,CAACc,MAAM,CAACC,IAAI,CAAC,gBAAgB,CAAC;MAC7C,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,OAAO,MAAM;MACXf,aAAa,CAACoB,GAAG,CAAC,aAAa,EAAEb,gBAAgB,CAAC;MAClDP,aAAa,CAACoB,GAAG,CAAC,WAAW,EAAER,cAAc,CAAC;MAC9CZ,aAAa,CAACoB,GAAG,CAAC,SAAS,EAAEP,aAAa,CAAC;MAC3Cb,aAAa,CAACoB,GAAG,CAAC,aAAa,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEjB,WAAW;IAAEE;EAAU,CAAC;AACnC,CAAC;AAACH,EAAA,CAjDID,cAAc;AAmDpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}