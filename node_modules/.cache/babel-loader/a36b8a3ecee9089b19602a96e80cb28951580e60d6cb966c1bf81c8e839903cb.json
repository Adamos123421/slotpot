{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ZodError_js_1 = require(\"../ZodError.js\");\nconst util_js_1 = require(\"../helpers/util.js\");\nconst errorMap = (issue, _ctx) => {\n  let message;\n  switch (issue.code) {\n    case ZodError_js_1.ZodIssueCode.invalid_type:\n      if (issue.received === util_js_1.ZodParsedType.undefined) {\n        message = \"Required\";\n      } else {\n        message = \"Expected \".concat(issue.expected, \", received \").concat(issue.received);\n      }\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_literal:\n      message = \"Invalid literal value, expected \".concat(JSON.stringify(issue.expected, util_js_1.util.jsonStringifyReplacer));\n      break;\n    case ZodError_js_1.ZodIssueCode.unrecognized_keys:\n      message = \"Unrecognized key(s) in object: \".concat(util_js_1.util.joinValues(issue.keys, \", \"));\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_union:\n      message = \"Invalid input\";\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_union_discriminator:\n      message = \"Invalid discriminator value. Expected \".concat(util_js_1.util.joinValues(issue.options));\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_enum_value:\n      message = \"Invalid enum value. Expected \".concat(util_js_1.util.joinValues(issue.options), \", received '\").concat(issue.received, \"'\");\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_arguments:\n      message = \"Invalid function arguments\";\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_return_type:\n      message = \"Invalid function return type\";\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_date:\n      message = \"Invalid date\";\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_string:\n      if (typeof issue.validation === \"object\") {\n        if (\"includes\" in issue.validation) {\n          message = \"Invalid input: must include \\\"\".concat(issue.validation.includes, \"\\\"\");\n          if (typeof issue.validation.position === \"number\") {\n            message = \"\".concat(message, \" at one or more positions greater than or equal to \").concat(issue.validation.position);\n          }\n        } else if (\"startsWith\" in issue.validation) {\n          message = \"Invalid input: must start with \\\"\".concat(issue.validation.startsWith, \"\\\"\");\n        } else if (\"endsWith\" in issue.validation) {\n          message = \"Invalid input: must end with \\\"\".concat(issue.validation.endsWith, \"\\\"\");\n        } else {\n          util_js_1.util.assertNever(issue.validation);\n        }\n      } else if (issue.validation !== \"regex\") {\n        message = \"Invalid \".concat(issue.validation);\n      } else {\n        message = \"Invalid\";\n      }\n      break;\n    case ZodError_js_1.ZodIssueCode.too_small:\n      if (issue.type === \"array\") message = \"Array must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at least\" : \"more than\", \" \").concat(issue.minimum, \" element(s)\");else if (issue.type === \"string\") message = \"String must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at least\" : \"over\", \" \").concat(issue.minimum, \" character(s)\");else if (issue.type === \"number\") message = \"Number must be \".concat(issue.exact ? \"exactly equal to \" : issue.inclusive ? \"greater than or equal to \" : \"greater than \").concat(issue.minimum);else if (issue.type === \"date\") message = \"Date must be \".concat(issue.exact ? \"exactly equal to \" : issue.inclusive ? \"greater than or equal to \" : \"greater than \").concat(new Date(Number(issue.minimum)));else message = \"Invalid input\";\n      break;\n    case ZodError_js_1.ZodIssueCode.too_big:\n      if (issue.type === \"array\") message = \"Array must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at most\" : \"less than\", \" \").concat(issue.maximum, \" element(s)\");else if (issue.type === \"string\") message = \"String must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at most\" : \"under\", \" \").concat(issue.maximum, \" character(s)\");else if (issue.type === \"number\") message = \"Number must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"less than or equal to\" : \"less than\", \" \").concat(issue.maximum);else if (issue.type === \"bigint\") message = \"BigInt must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"less than or equal to\" : \"less than\", \" \").concat(issue.maximum);else if (issue.type === \"date\") message = \"Date must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"smaller than or equal to\" : \"smaller than\", \" \").concat(new Date(Number(issue.maximum)));else message = \"Invalid input\";\n      break;\n    case ZodError_js_1.ZodIssueCode.custom:\n      message = \"Invalid input\";\n      break;\n    case ZodError_js_1.ZodIssueCode.invalid_intersection_types:\n      message = \"Intersection results could not be merged\";\n      break;\n    case ZodError_js_1.ZodIssueCode.not_multiple_of:\n      message = \"Number must be a multiple of \".concat(issue.multipleOf);\n      break;\n    case ZodError_js_1.ZodIssueCode.not_finite:\n      message = \"Number must be finite\";\n      break;\n    default:\n      message = _ctx.defaultError;\n      util_js_1.util.assertNever(issue);\n  }\n  return {\n    message\n  };\n};\nexports.default = errorMap;","map":{"version":3,"names":["Object","defineProperty","exports","value","ZodError_js_1","require","util_js_1","errorMap","issue","_ctx","message","code","ZodIssueCode","invalid_type","received","ZodParsedType","undefined","concat","expected","invalid_literal","JSON","stringify","util","jsonStringifyReplacer","unrecognized_keys","joinValues","keys","invalid_union","invalid_union_discriminator","options","invalid_enum_value","invalid_arguments","invalid_return_type","invalid_date","invalid_string","validation","includes","position","startsWith","endsWith","assertNever","too_small","type","exact","inclusive","minimum","Date","Number","too_big","maximum","custom","invalid_intersection_types","not_multiple_of","multipleOf","not_finite","defaultError","default"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/zod/dist/cjs/v3/locales/en.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ZodError_js_1 = require(\"../ZodError.js\");\nconst util_js_1 = require(\"../helpers/util.js\");\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodError_js_1.ZodIssueCode.invalid_type:\n            if (issue.received === util_js_1.ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_js_1.util.jsonStringifyReplacer)}`;\n            break;\n        case ZodError_js_1.ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util_js_1.util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util_js_1.util.joinValues(issue.options)}`;\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util_js_1.util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util_js_1.util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodError_js_1.ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodError_js_1.ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodError_js_1.ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodError_js_1.ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodError_js_1.ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodError_js_1.ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util_js_1.util.assertNever(issue);\n    }\n    return { message };\n};\nexports.default = errorMap;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,aAAa,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC/C,MAAMC,SAAS,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC/C,MAAME,QAAQ,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;EAC9B,IAAIC,OAAO;EACX,QAAQF,KAAK,CAACG,IAAI;IACd,KAAKP,aAAa,CAACQ,YAAY,CAACC,YAAY;MACxC,IAAIL,KAAK,CAACM,QAAQ,KAAKR,SAAS,CAACS,aAAa,CAACC,SAAS,EAAE;QACtDN,OAAO,GAAG,UAAU;MACxB,CAAC,MACI;QACDA,OAAO,eAAAO,MAAA,CAAeT,KAAK,CAACU,QAAQ,iBAAAD,MAAA,CAAcT,KAAK,CAACM,QAAQ,CAAE;MACtE;MACA;IACJ,KAAKV,aAAa,CAACQ,YAAY,CAACO,eAAe;MAC3CT,OAAO,sCAAAO,MAAA,CAAsCG,IAAI,CAACC,SAAS,CAACb,KAAK,CAACU,QAAQ,EAAEZ,SAAS,CAACgB,IAAI,CAACC,qBAAqB,CAAC,CAAE;MACnH;IACJ,KAAKnB,aAAa,CAACQ,YAAY,CAACY,iBAAiB;MAC7Cd,OAAO,qCAAAO,MAAA,CAAqCX,SAAS,CAACgB,IAAI,CAACG,UAAU,CAACjB,KAAK,CAACkB,IAAI,EAAE,IAAI,CAAC,CAAE;MACzF;IACJ,KAAKtB,aAAa,CAACQ,YAAY,CAACe,aAAa;MACzCjB,OAAO,kBAAkB;MACzB;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAACgB,2BAA2B;MACvDlB,OAAO,4CAAAO,MAAA,CAA4CX,SAAS,CAACgB,IAAI,CAACG,UAAU,CAACjB,KAAK,CAACqB,OAAO,CAAC,CAAE;MAC7F;IACJ,KAAKzB,aAAa,CAACQ,YAAY,CAACkB,kBAAkB;MAC9CpB,OAAO,mCAAAO,MAAA,CAAmCX,SAAS,CAACgB,IAAI,CAACG,UAAU,CAACjB,KAAK,CAACqB,OAAO,CAAC,kBAAAZ,MAAA,CAAeT,KAAK,CAACM,QAAQ,MAAG;MAClH;IACJ,KAAKV,aAAa,CAACQ,YAAY,CAACmB,iBAAiB;MAC7CrB,OAAO,+BAA+B;MACtC;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAACoB,mBAAmB;MAC/CtB,OAAO,iCAAiC;MACxC;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAACqB,YAAY;MACxCvB,OAAO,iBAAiB;MACxB;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAACsB,cAAc;MAC1C,IAAI,OAAO1B,KAAK,CAAC2B,UAAU,KAAK,QAAQ,EAAE;QACtC,IAAI,UAAU,IAAI3B,KAAK,CAAC2B,UAAU,EAAE;UAChCzB,OAAO,oCAAAO,MAAA,CAAmCT,KAAK,CAAC2B,UAAU,CAACC,QAAQ,OAAG;UACtE,IAAI,OAAO5B,KAAK,CAAC2B,UAAU,CAACE,QAAQ,KAAK,QAAQ,EAAE;YAC/C3B,OAAO,MAAAO,MAAA,CAAMP,OAAO,yDAAAO,MAAA,CAAsDT,KAAK,CAAC2B,UAAU,CAACE,QAAQ,CAAE;UACzG;QACJ,CAAC,MACI,IAAI,YAAY,IAAI7B,KAAK,CAAC2B,UAAU,EAAE;UACvCzB,OAAO,uCAAAO,MAAA,CAAsCT,KAAK,CAAC2B,UAAU,CAACG,UAAU,OAAG;QAC/E,CAAC,MACI,IAAI,UAAU,IAAI9B,KAAK,CAAC2B,UAAU,EAAE;UACrCzB,OAAO,qCAAAO,MAAA,CAAoCT,KAAK,CAAC2B,UAAU,CAACI,QAAQ,OAAG;QAC3E,CAAC,MACI;UACDjC,SAAS,CAACgB,IAAI,CAACkB,WAAW,CAAChC,KAAK,CAAC2B,UAAU,CAAC;QAChD;MACJ,CAAC,MACI,IAAI3B,KAAK,CAAC2B,UAAU,KAAK,OAAO,EAAE;QACnCzB,OAAO,cAAAO,MAAA,CAAcT,KAAK,CAAC2B,UAAU,CAAE;MAC3C,CAAC,MACI;QACDzB,OAAO,GAAG,SAAS;MACvB;MACA;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAAC6B,SAAS;MACrC,IAAIjC,KAAK,CAACkC,IAAI,KAAK,OAAO,EACtBhC,OAAO,yBAAAO,MAAA,CAAyBT,KAAK,CAACmC,KAAK,GAAG,SAAS,GAAGnC,KAAK,CAACoC,SAAS,2BAA2B,OAAA3B,MAAA,CAAIT,KAAK,CAACqC,OAAO,gBAAa,CAAC,KAClI,IAAIrC,KAAK,CAACkC,IAAI,KAAK,QAAQ,EAC5BhC,OAAO,0BAAAO,MAAA,CAA0BT,KAAK,CAACmC,KAAK,GAAG,SAAS,GAAGnC,KAAK,CAACoC,SAAS,sBAAsB,OAAA3B,MAAA,CAAIT,KAAK,CAACqC,OAAO,kBAAe,CAAC,KAChI,IAAIrC,KAAK,CAACkC,IAAI,KAAK,QAAQ,EAC5BhC,OAAO,qBAAAO,MAAA,CAAqBT,KAAK,CAACmC,KAAK,yBAAyBnC,KAAK,CAACoC,SAAS,gDAAgD,EAAA3B,MAAA,CAAGT,KAAK,CAACqC,OAAO,CAAE,CAAC,KACjJ,IAAIrC,KAAK,CAACkC,IAAI,KAAK,MAAM,EAC1BhC,OAAO,mBAAAO,MAAA,CAAmBT,KAAK,CAACmC,KAAK,yBAAyBnC,KAAK,CAACoC,SAAS,gDAAgD,EAAA3B,MAAA,CAAG,IAAI6B,IAAI,CAACC,MAAM,CAACvC,KAAK,CAACqC,OAAO,CAAC,CAAC,CAAE,CAAC,KAElKnC,OAAO,GAAG,eAAe;MAC7B;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAACoC,OAAO;MACnC,IAAIxC,KAAK,CAACkC,IAAI,KAAK,OAAO,EACtBhC,OAAO,yBAAAO,MAAA,CAAyBT,KAAK,CAACmC,KAAK,eAAenC,KAAK,CAACoC,SAAS,0BAA0B,OAAA3B,MAAA,CAAIT,KAAK,CAACyC,OAAO,gBAAa,CAAC,KACjI,IAAIzC,KAAK,CAACkC,IAAI,KAAK,QAAQ,EAC5BhC,OAAO,0BAAAO,MAAA,CAA0BT,KAAK,CAACmC,KAAK,eAAenC,KAAK,CAACoC,SAAS,sBAAsB,OAAA3B,MAAA,CAAIT,KAAK,CAACyC,OAAO,kBAAe,CAAC,KAChI,IAAIzC,KAAK,CAACkC,IAAI,KAAK,QAAQ,EAC5BhC,OAAO,qBAAAO,MAAA,CAAqBT,KAAK,CAACmC,KAAK,eAAenC,KAAK,CAACoC,SAAS,wCAAwC,OAAA3B,MAAA,CAAIT,KAAK,CAACyC,OAAO,CAAE,CAAC,KAChI,IAAIzC,KAAK,CAACkC,IAAI,KAAK,QAAQ,EAC5BhC,OAAO,qBAAAO,MAAA,CAAqBT,KAAK,CAACmC,KAAK,eAAenC,KAAK,CAACoC,SAAS,wCAAwC,OAAA3B,MAAA,CAAIT,KAAK,CAACyC,OAAO,CAAE,CAAC,KAChI,IAAIzC,KAAK,CAACkC,IAAI,KAAK,MAAM,EAC1BhC,OAAO,mBAAAO,MAAA,CAAmBT,KAAK,CAACmC,KAAK,eAAenC,KAAK,CAACoC,SAAS,8CAA8C,OAAA3B,MAAA,CAAI,IAAI6B,IAAI,CAACC,MAAM,CAACvC,KAAK,CAACyC,OAAO,CAAC,CAAC,CAAE,CAAC,KAEvJvC,OAAO,GAAG,eAAe;MAC7B;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAACsC,MAAM;MAClCxC,OAAO,kBAAkB;MACzB;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAACuC,0BAA0B;MACtDzC,OAAO,6CAA6C;MACpD;IACJ,KAAKN,aAAa,CAACQ,YAAY,CAACwC,eAAe;MAC3C1C,OAAO,mCAAAO,MAAA,CAAmCT,KAAK,CAAC6C,UAAU,CAAE;MAC5D;IACJ,KAAKjD,aAAa,CAACQ,YAAY,CAAC0C,UAAU;MACtC5C,OAAO,GAAG,uBAAuB;MACjC;IACJ;MACIA,OAAO,GAAGD,IAAI,CAAC8C,YAAY;MAC3BjD,SAAS,CAACgB,IAAI,CAACkB,WAAW,CAAChC,KAAK,CAAC;EACzC;EACA,OAAO;IAAEE;EAAQ,CAAC;AACtB,CAAC;AACDR,OAAO,CAACsD,OAAO,GAAGjD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}