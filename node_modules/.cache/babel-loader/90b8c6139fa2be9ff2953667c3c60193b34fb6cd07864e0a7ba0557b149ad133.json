{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [isCustomSpinning, setIsCustomSpinning] = useState(false);\n  const [spinSpeed, setSpinSpeed] = useState(50);\n  const [showingWinner, setShowingWinner] = useState(false);\n  const animationRef = useRef(null);\n  const targetIndexRef = useRef(null);\n  const spinPhaseRef = useRef('idle'); // 'idle', 'spinning', 'slowing', 'stopped', 'displaying_winner'\n  const winnerTimeoutRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Natural casino-style spin animation\n  const startCasinoSpin = useCallback(() => {\n    if (!swiperRef.current || isCustomSpinning) return;\n    console.log('🎰 Starting casino-style spin animation');\n    setIsCustomSpinning(true);\n    setShowingWinner(false);\n    spinPhaseRef.current = 'spinning';\n\n    // Stop any existing autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // Start fast spinning\n    let currentSpeed = 20; // Start very fast\n    setSpinSpeed(currentSpeed);\n    const spinInterval = setInterval(() => {\n      if (swiperRef.current && spinPhaseRef.current === 'spinning') {\n        // Get current slide index\n        const activeIndex = swiperRef.current.activeIndex;\n        // Move to next slide\n        swiperRef.current.slideNext(currentSpeed);\n      }\n    }, currentSpeed);\n\n    // Save interval reference for cleanup\n    animationRef.current = spinInterval;\n    return spinInterval;\n  }, [isCustomSpinning]);\n\n  // Natural deceleration to winner\n  const startSlowDownToWinner = useCallback(winnerIndex => {\n    if (!swiperRef.current || spinPhaseRef.current !== 'spinning') return;\n    console.log('🎯 Starting slow-down to winner at index:', winnerIndex);\n    spinPhaseRef.current = 'slowing';\n\n    // Clear fast spinning\n    if (animationRef.current) {\n      clearInterval(animationRef.current);\n    }\n\n    // Calculate how many slides to go past winner before slowing down\n    const currentIndex = swiperRef.current.activeIndex % players.length;\n    const overshoot = 8; // Go 8 slides past winner for natural feel\n    let targetSlide = winnerIndex + overshoot;\n\n    // If we need to loop around\n    if (targetSlide >= players.length) {\n      targetSlide = targetSlide % players.length;\n    }\n\n    // Start deceleration animation\n    let speed = 50; // Start medium speed\n    let currentPos = currentIndex;\n    const decelerateInterval = setInterval(() => {\n      if (!swiperRef.current) {\n        clearInterval(decelerateInterval);\n        return;\n      }\n\n      // Move to next slide\n      swiperRef.current.slideNext(speed);\n      currentPos = (currentPos + 1) % players.length;\n\n      // Check if we're getting close to target\n      const distanceToTarget = Math.abs(currentPos - winnerIndex);\n      const isClose = distanceToTarget <= 2 || distanceToTarget >= players.length - 2;\n      if (isClose && speed > 800) {\n        // We're close to winner and moving slowly enough - final positioning\n        clearInterval(decelerateInterval);\n\n        // Final slide to exact winner position\n        setTimeout(() => {\n          if (swiperRef.current) {\n            swiperRef.current.slideTo(winnerIndex, 1000); // Smooth final slide\n\n            // COMPLETELY STOP ALL MOVEMENT\n            setTimeout(() => {\n              if (swiperRef.current) {\n                // Stop autoplay completely\n                if (swiperRef.current.autoplay) {\n                  swiperRef.current.autoplay.stop();\n                  swiperRef.current.autoplay.pause();\n                }\n\n                // Disable autoplay entirely during winner display\n                swiperRef.current.autoplay.running = false;\n\n                // Force disable all CSS transitions and transforms\n                const swiperWrapper = swiperRef.current.wrapperEl;\n                const swiperSlides = swiperRef.current.slides;\n                if (swiperWrapper) {\n                  var _swiperWrapper$style$;\n                  swiperWrapper.style.transition = 'none';\n                  swiperWrapper.style.transitionDuration = '0ms';\n                  swiperWrapper.style.transform = `translate3d(${((_swiperWrapper$style$ = swiperWrapper.style.transform.match(/-?\\d+(\\.\\d+)?/g)) === null || _swiperWrapper$style$ === void 0 ? void 0 : _swiperWrapper$style$[0]) || 0}px, 0px, 0px)`;\n                }\n                if (swiperSlides) {\n                  swiperSlides.forEach(slide => {\n                    slide.style.transition = 'none';\n                    slide.style.transitionDuration = '0ms';\n                  });\n                }\n\n                // Disable Swiper's update mechanism\n                swiperRef.current.allowSlideNext = false;\n                swiperRef.current.allowSlidePrev = false;\n                swiperRef.current.allowTouchMove = false;\n                spinPhaseRef.current = 'displaying_winner';\n                setIsCustomSpinning(false);\n                setShowingWinner(true);\n                console.log('🏆 Winner display started - ALL MOVEMENT STOPPED');\n\n                // Trigger winner landed callback\n                setTimeout(() => {\n                  onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n                }, 500);\n\n                // Keep showing winner for 8 seconds before allowing normal operation\n                winnerTimeoutRef.current = setTimeout(() => {\n                  console.log('🔄 Winner display timeout - resuming normal operation');\n                  spinPhaseRef.current = 'idle';\n                  setShowingWinner(false);\n\n                  // Re-enable Swiper functionality\n                  if (swiperRef.current) {\n                    swiperRef.current.allowSlideNext = true;\n                    swiperRef.current.allowSlidePrev = true;\n                    swiperRef.current.allowTouchMove = false; // Keep touch disabled\n\n                    // Re-enable CSS transitions\n                    const swiperWrapper = swiperRef.current.wrapperEl;\n                    const swiperSlides = swiperRef.current.slides;\n                    if (swiperWrapper) {\n                      swiperWrapper.style.transition = '';\n                      swiperWrapper.style.transitionDuration = '';\n                    }\n                    if (swiperSlides) {\n                      swiperSlides.forEach(slide => {\n                        slide.style.transition = '';\n                        slide.style.transitionDuration = '';\n                      });\n                    }\n\n                    // Re-enable autoplay after winner display\n                    if (swiperRef.current.autoplay && !winner) {\n                      swiperRef.current.autoplay.running = true;\n                      swiperRef.current.autoplay.start();\n                    }\n                  }\n                }, 8000); // Show winner for 8 seconds\n              }\n            }, 1200); // Wait for final slide to complete\n          }\n        }, 200);\n      } else {\n        // Gradually slow down (realistic deceleration)\n        speed = Math.min(speed * 1.08, 800); // Exponential slowdown, max 800ms\n        setSpinSpeed(speed);\n      }\n    }, speed);\n    animationRef.current = decelerateInterval;\n  }, [players.length, onWinnerLand, winner]);\n\n  // Handle winner announcement with realistic spin\n  useEffect(() => {\n    if (winner && swiperRef.current && players && !isCustomSpinning && !showingWinner) {\n      const winnerIndex = players.findIndex(p => p && (p.address === winner.address || p.username === winner.username || p.address === winner.winner || p.address === winner.fullAddress || p.username === winner.displayName));\n      if (winnerIndex !== -1) {\n        targetIndexRef.current = winnerIndex;\n        console.log('🏆 Winner found at index:', winnerIndex, 'Starting casino spin...');\n\n        // Clear any existing winner timeout\n        if (winnerTimeoutRef.current) {\n          clearTimeout(winnerTimeoutRef.current);\n        }\n\n        // Start spinning, then slow down to winner after 2-3 seconds\n        const spinInterval = startCasinoSpin();\n        setTimeout(() => {\n          startSlowDownToWinner(winnerIndex);\n        }, 2500); // Spin for 2.5 seconds before starting to slow down\n      }\n    }\n  }, [winner, players, isCustomSpinning, showingWinner, startCasinoSpin, startSlowDownToWinner]);\n\n  // Handle regular spinning state (not winner selection)\n  useEffect(() => {\n    // Don't start autoplay if we're showing winner\n    if (showingWinner || spinPhaseRef.current === 'displaying_winner') {\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.stop();\n      }\n      return;\n    }\n    if (isSpinning && !winner && !isCustomSpinning && !showingWinner) {\n      // Regular fast spinning while waiting for winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    } else if (!isSpinning && !winner && !isCustomSpinning && !showingWinner && spinPhaseRef.current === 'idle') {\n      // Normal slow movement when not spinning and not showing winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    }\n  }, [isSpinning, winner, isCustomSpinning, showingWinner]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        clearInterval(animationRef.current);\n      }\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Prevent stopping when new players join during spin or winner display\n  useEffect(() => {\n    // Don't restart autoplay if we're in custom spinning mode or showing winner\n    if (isCustomSpinning || showingWinner || spinPhaseRef.current !== 'idle') {\n      // Force stop autoplay during winner display\n      if (showingWinner && swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.stop();\n        swiperRef.current.autoplay.running = false;\n      }\n      return;\n    }\n\n    // Only restart normal autoplay if we're not in winner selection mode\n    if (!winner && swiperRef.current && swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.running = true;\n      swiperRef.current.autoplay.start();\n    }\n  }, [players.length, isCustomSpinning, showingWinner, winner]);\n\n  // Reset states when winner prop is cleared (new round)\n  useEffect(() => {\n    if (!winner && showingWinner) {\n      console.log('🔄 Winner cleared - resetting carousel states');\n      setShowingWinner(false);\n      spinPhaseRef.current = 'idle';\n\n      // Clear any pending winner timeout\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n        winnerTimeoutRef.current = null;\n      }\n\n      // Resume normal autoplay\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.running = true;\n        swiperRef.current.autoplay.start();\n      }\n    }\n  }, [winner, showingWinner]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${isCustomSpinning && spinPhaseRef.current === 'slowing' ? 'winner-approaching' : spinPhaseRef.current === 'displaying_winner' || showingWinner ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: players.length * 6 // More slides for smoother infinite scroll\n      ,\n      autoplay: showingWinner || spinPhaseRef.current === 'displaying_winner' ? false : {\n        delay: isSpinning && !isCustomSpinning && !showingWinner ? 15 : 400,\n        // Very fast when spinning, normal otherwise\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: isCustomSpinning ? spinSpeed : isSpinning && !showingWinner ? 30 : 300,\n      className: `player-swiper ${(isSpinning || isCustomSpinning) && !showingWinner ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(6)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 19\n            }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"ZkHCKWpb2AaE4DDZUaDseRpqAuk=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","isCustomSpinning","setIsCustomSpinning","spinSpeed","setSpinSpeed","showingWinner","setShowingWinner","animationRef","targetIndexRef","spinPhaseRef","winnerTimeoutRef","handleSwiperInit","swiper","current","startCasinoSpin","console","log","autoplay","stop","currentSpeed","spinInterval","setInterval","activeIndex","slideNext","startSlowDownToWinner","winnerIndex","clearInterval","currentIndex","length","overshoot","targetSlide","speed","currentPos","decelerateInterval","distanceToTarget","Math","abs","isClose","setTimeout","slideTo","pause","running","swiperWrapper","wrapperEl","swiperSlides","slides","_swiperWrapper$style$","style","transition","transitionDuration","transform","match","forEach","slide","allowSlideNext","allowSlidePrev","allowTouchMove","start","min","findIndex","p","address","username","fullAddress","displayName","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","delay","disableOnInteraction","pauseOnMouseEnter","onSwiper","Array","map","_","setIndex","player","index","toUpperCase","amount","toFixed","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [isCustomSpinning, setIsCustomSpinning] = useState(false);\n  const [spinSpeed, setSpinSpeed] = useState(50);\n  const [showingWinner, setShowingWinner] = useState(false);\n  const animationRef = useRef(null);\n  const targetIndexRef = useRef(null);\n  const spinPhaseRef = useRef('idle'); // 'idle', 'spinning', 'slowing', 'stopped', 'displaying_winner'\n  const winnerTimeoutRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Natural casino-style spin animation\n  const startCasinoSpin = useCallback(() => {\n    if (!swiperRef.current || isCustomSpinning) return;\n    \n    console.log('🎰 Starting casino-style spin animation');\n    setIsCustomSpinning(true);\n    setShowingWinner(false);\n    spinPhaseRef.current = 'spinning';\n    \n    // Stop any existing autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // Start fast spinning\n    let currentSpeed = 20; // Start very fast\n    setSpinSpeed(currentSpeed);\n    \n    const spinInterval = setInterval(() => {\n      if (swiperRef.current && spinPhaseRef.current === 'spinning') {\n        // Get current slide index\n        const activeIndex = swiperRef.current.activeIndex;\n        // Move to next slide\n        swiperRef.current.slideNext(currentSpeed);\n      }\n    }, currentSpeed);\n    \n    // Save interval reference for cleanup\n    animationRef.current = spinInterval;\n    \n    return spinInterval;\n  }, [isCustomSpinning]);\n\n  // Natural deceleration to winner\n  const startSlowDownToWinner = useCallback((winnerIndex) => {\n    if (!swiperRef.current || spinPhaseRef.current !== 'spinning') return;\n    \n    console.log('🎯 Starting slow-down to winner at index:', winnerIndex);\n    spinPhaseRef.current = 'slowing';\n    \n    // Clear fast spinning\n    if (animationRef.current) {\n      clearInterval(animationRef.current);\n    }\n    \n    // Calculate how many slides to go past winner before slowing down\n    const currentIndex = swiperRef.current.activeIndex % players.length;\n    const overshoot = 8; // Go 8 slides past winner for natural feel\n    let targetSlide = winnerIndex + overshoot;\n    \n    // If we need to loop around\n    if (targetSlide >= players.length) {\n      targetSlide = targetSlide % players.length;\n    }\n    \n    // Start deceleration animation\n    let speed = 50; // Start medium speed\n    let currentPos = currentIndex;\n    \n    const decelerateInterval = setInterval(() => {\n      if (!swiperRef.current) {\n        clearInterval(decelerateInterval);\n        return;\n      }\n      \n      // Move to next slide\n      swiperRef.current.slideNext(speed);\n      currentPos = (currentPos + 1) % players.length;\n      \n      // Check if we're getting close to target\n      const distanceToTarget = Math.abs(currentPos - winnerIndex);\n      const isClose = distanceToTarget <= 2 || distanceToTarget >= players.length - 2;\n      \n      if (isClose && speed > 800) {\n        // We're close to winner and moving slowly enough - final positioning\n        clearInterval(decelerateInterval);\n        \n        // Final slide to exact winner position\n        setTimeout(() => {\n          if (swiperRef.current) {\n            swiperRef.current.slideTo(winnerIndex, 1000); // Smooth final slide\n            \n            // COMPLETELY STOP ALL MOVEMENT\n            setTimeout(() => {\n              if (swiperRef.current) {\n                // Stop autoplay completely\n                if (swiperRef.current.autoplay) {\n                  swiperRef.current.autoplay.stop();\n                  swiperRef.current.autoplay.pause();\n                }\n                \n                // Disable autoplay entirely during winner display\n                swiperRef.current.autoplay.running = false;\n                \n                // Force disable all CSS transitions and transforms\n                const swiperWrapper = swiperRef.current.wrapperEl;\n                const swiperSlides = swiperRef.current.slides;\n                \n                if (swiperWrapper) {\n                  swiperWrapper.style.transition = 'none';\n                  swiperWrapper.style.transitionDuration = '0ms';\n                  swiperWrapper.style.transform = `translate3d(${swiperWrapper.style.transform.match(/-?\\d+(\\.\\d+)?/g)?.[0] || 0}px, 0px, 0px)`;\n                }\n                \n                if (swiperSlides) {\n                  swiperSlides.forEach(slide => {\n                    slide.style.transition = 'none';\n                    slide.style.transitionDuration = '0ms';\n                  });\n                }\n                \n                // Disable Swiper's update mechanism\n                swiperRef.current.allowSlideNext = false;\n                swiperRef.current.allowSlidePrev = false;\n                swiperRef.current.allowTouchMove = false;\n                \n                spinPhaseRef.current = 'displaying_winner';\n                setIsCustomSpinning(false);\n                setShowingWinner(true);\n                \n                console.log('🏆 Winner display started - ALL MOVEMENT STOPPED');\n                \n                // Trigger winner landed callback\n                setTimeout(() => {\n                  onWinnerLand?.();\n                }, 500);\n                \n                // Keep showing winner for 8 seconds before allowing normal operation\n                winnerTimeoutRef.current = setTimeout(() => {\n                  console.log('🔄 Winner display timeout - resuming normal operation');\n                  spinPhaseRef.current = 'idle';\n                  setShowingWinner(false);\n                  \n                  // Re-enable Swiper functionality\n                  if (swiperRef.current) {\n                    swiperRef.current.allowSlideNext = true;\n                    swiperRef.current.allowSlidePrev = true;\n                    swiperRef.current.allowTouchMove = false; // Keep touch disabled\n                    \n                    // Re-enable CSS transitions\n                    const swiperWrapper = swiperRef.current.wrapperEl;\n                    const swiperSlides = swiperRef.current.slides;\n                    \n                    if (swiperWrapper) {\n                      swiperWrapper.style.transition = '';\n                      swiperWrapper.style.transitionDuration = '';\n                    }\n                    \n                    if (swiperSlides) {\n                      swiperSlides.forEach(slide => {\n                        slide.style.transition = '';\n                        slide.style.transitionDuration = '';\n                      });\n                    }\n                    \n                    // Re-enable autoplay after winner display\n                    if (swiperRef.current.autoplay && !winner) {\n                      swiperRef.current.autoplay.running = true;\n                      swiperRef.current.autoplay.start();\n                    }\n                  }\n                }, 8000); // Show winner for 8 seconds\n              }\n            }, 1200); // Wait for final slide to complete\n          }\n        }, 200);\n      } else {\n        // Gradually slow down (realistic deceleration)\n        speed = Math.min(speed * 1.08, 800); // Exponential slowdown, max 800ms\n        setSpinSpeed(speed);\n      }\n    }, speed);\n    \n    animationRef.current = decelerateInterval;\n  }, [players.length, onWinnerLand, winner]);\n\n  // Handle winner announcement with realistic spin\n  useEffect(() => {\n    if (winner && swiperRef.current && players && !isCustomSpinning && !showingWinner) {\n      const winnerIndex = players.findIndex(p => \n        p && (\n          p.address === winner.address || \n          p.username === winner.username ||\n          p.address === winner.winner ||\n          p.address === winner.fullAddress ||\n          p.username === winner.displayName\n        )\n      );\n      \n      if (winnerIndex !== -1) {\n        targetIndexRef.current = winnerIndex;\n        console.log('🏆 Winner found at index:', winnerIndex, 'Starting casino spin...');\n        \n        // Clear any existing winner timeout\n        if (winnerTimeoutRef.current) {\n          clearTimeout(winnerTimeoutRef.current);\n        }\n        \n        // Start spinning, then slow down to winner after 2-3 seconds\n        const spinInterval = startCasinoSpin();\n        \n        setTimeout(() => {\n          startSlowDownToWinner(winnerIndex);\n        }, 2500); // Spin for 2.5 seconds before starting to slow down\n      }\n    }\n  }, [winner, players, isCustomSpinning, showingWinner, startCasinoSpin, startSlowDownToWinner]);\n\n  // Handle regular spinning state (not winner selection)\n  useEffect(() => {\n    // Don't start autoplay if we're showing winner\n    if (showingWinner || spinPhaseRef.current === 'displaying_winner') {\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.stop();\n      }\n      return;\n    }\n\n    if (isSpinning && !winner && !isCustomSpinning && !showingWinner) {\n      // Regular fast spinning while waiting for winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    } else if (!isSpinning && !winner && !isCustomSpinning && !showingWinner && spinPhaseRef.current === 'idle') {\n      // Normal slow movement when not spinning and not showing winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    }\n  }, [isSpinning, winner, isCustomSpinning, showingWinner]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        clearInterval(animationRef.current);\n      }\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Prevent stopping when new players join during spin or winner display\n  useEffect(() => {\n    // Don't restart autoplay if we're in custom spinning mode or showing winner\n    if (isCustomSpinning || showingWinner || spinPhaseRef.current !== 'idle') {\n      // Force stop autoplay during winner display\n      if (showingWinner && swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.stop();\n        swiperRef.current.autoplay.running = false;\n      }\n      return;\n    }\n    \n    // Only restart normal autoplay if we're not in winner selection mode\n    if (!winner && swiperRef.current && swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.running = true;\n      swiperRef.current.autoplay.start();\n    }\n  }, [players.length, isCustomSpinning, showingWinner, winner]);\n\n  // Reset states when winner prop is cleared (new round)\n  useEffect(() => {\n    if (!winner && showingWinner) {\n      console.log('🔄 Winner cleared - resetting carousel states');\n      setShowingWinner(false);\n      spinPhaseRef.current = 'idle';\n      \n      // Clear any pending winner timeout\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n        winnerTimeoutRef.current = null;\n      }\n      \n      // Resume normal autoplay\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.running = true;\n        swiperRef.current.autoplay.start();\n      }\n    }\n  }, [winner, showingWinner]);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        isCustomSpinning && spinPhaseRef.current === 'slowing' ? 'winner-approaching' : \n        spinPhaseRef.current === 'displaying_winner' || showingWinner ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={players.length * 6} // More slides for smoother infinite scroll\n        autoplay={showingWinner || spinPhaseRef.current === 'displaying_winner' ? false : {\n          delay: isSpinning && !isCustomSpinning && !showingWinner ? 15 : 400, // Very fast when spinning, normal otherwise\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={isCustomSpinning ? spinSpeed : (isSpinning && !showingWinner ? 30 : 300)}\n        className={`player-swiper ${(isSpinning || isCustomSpinning) && !showingWinner ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Create 6 sets for much smoother infinite scroll */}\n        {[...Array(6)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}