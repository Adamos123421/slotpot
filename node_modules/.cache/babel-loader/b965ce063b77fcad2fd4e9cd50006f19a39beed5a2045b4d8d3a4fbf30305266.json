{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { backendApi } from '../services/backendApi';\nimport useTonConnect from './useTonConnect';\nimport useTelegramWebApp from './useTelegramWebApp';\nconst useReferralAutoRegistration = () => {\n  _s();\n  const {\n    address,\n    isConnected\n  } = useTonConnect();\n  const {\n    user\n  } = useTelegramWebApp();\n  const [referralCode, setReferralCode] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [hasRegistered, setHasRegistered] = useState(false);\n\n  // Check for referral code when user data loads\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.referralCode && !referralCode) {\n      //console.log('üéØ Global referral detection: Found referral code:', user.referralCode.slice(0, 8) + '...');\n      setReferralCode(user.referralCode);\n    }\n  }, [user, referralCode]);\n\n  // Auto-register referral when all conditions are met\n  useEffect(() => {\n    if (referralCode && address && isConnected && !hasRegistered && !isRegistering) {\n      //console.log('üéØ Global auto-registration: All conditions met');\n      //console.log('  - referralCode:', referralCode.slice(0, 8) + '...');\n      //console.log('  - address:', address.slice(0, 8) + '...');\n      //console.log('  - user:', user?.id || 'no telegram data');\n      //console.log('  - isConnected:', isConnected);\n\n      // Check if it's a self-referral\n      if (referralCode === address) {\n        //console.log('‚ùå Self-referral detected, skipping registration');\n        setHasRegistered(true);\n        return;\n      }\n      handleAutoRegistration();\n    }\n  }, [referralCode, address, user, isConnected, hasRegistered, isRegistering]);\n  const handleAutoRegistration = async () => {\n    if (!address || !referralCode) return;\n\n    //console.log('üéØ Global auto-registration: Starting registration...');\n    setIsRegistering(true);\n    try {\n      const response = await backendApi.fetchJson('/api/referral/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          address,\n          referrer: referralCode,\n          telegramId: (user === null || user === void 0 ? void 0 : user.id) || null,\n          username: (user === null || user === void 0 ? void 0 : user.username) || (user === null || user === void 0 ? void 0 : user.first_name) || `Player_${address.slice(-4)}`\n        })\n      });\n      if (response.success) {\n        //console.log('‚úÖ Global auto-registration: Success!');\n        alert(`üéØ Referral registered successfully! You: ${address.slice(0, 8)}... Referrer: ${referralCode.slice(0, 8)}...`);\n        setHasRegistered(true);\n      } else {\n        //console.log('‚ùå Global auto-registration: Failed -', response.error);\n        alert(`‚ùå Referral registration failed: ${response.error}`);\n        setHasRegistered(true); // Mark as attempted to prevent retries\n      }\n    } catch (error) {\n      console.error('‚ùå Global auto-registration: Error -', error);\n      alert('‚ùå Referral registration error. Please try again.');\n      setHasRegistered(true); // Mark as attempted to prevent retries\n    } finally {\n      setIsRegistering(false);\n    }\n  };\n  return {\n    referralCode,\n    isRegistering,\n    hasRegistered,\n    handleAutoRegistration\n  };\n};\n_s(useReferralAutoRegistration, \"cEJXqaeW7axcfa1Qo7wzB14Zu4c=\", false, function () {\n  return [useTonConnect, useTelegramWebApp];\n});\nexport default useReferralAutoRegistration;","map":{"version":3,"names":["useEffect","useState","backendApi","useTonConnect","useTelegramWebApp","useReferralAutoRegistration","_s","address","isConnected","user","referralCode","setReferralCode","isRegistering","setIsRegistering","hasRegistered","setHasRegistered","handleAutoRegistration","response","fetchJson","method","body","JSON","stringify","referrer","telegramId","id","username","first_name","slice","success","alert","error","console"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useReferralAutoRegistration.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { backendApi } from '../services/backendApi';\nimport useTonConnect from './useTonConnect';\nimport useTelegramWebApp from './useTelegramWebApp';\n\nconst useReferralAutoRegistration = () => {\n  const { address, isConnected } = useTonConnect();\n  const { user } = useTelegramWebApp();\n  const [referralCode, setReferralCode] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [hasRegistered, setHasRegistered] = useState(false);\n\n  // Check for referral code when user data loads\n  useEffect(() => {\n    if (user?.referralCode && !referralCode) {\n      //console.log('üéØ Global referral detection: Found referral code:', user.referralCode.slice(0, 8) + '...');\n      setReferralCode(user.referralCode);\n    }\n  }, [user, referralCode]);\n\n  // Auto-register referral when all conditions are met\n  useEffect(() => {\n    if (referralCode && address && isConnected && !hasRegistered && !isRegistering) {\n      //console.log('üéØ Global auto-registration: All conditions met');\n      //console.log('  - referralCode:', referralCode.slice(0, 8) + '...');\n      //console.log('  - address:', address.slice(0, 8) + '...');\n      //console.log('  - user:', user?.id || 'no telegram data');\n      //console.log('  - isConnected:', isConnected);\n      \n      // Check if it's a self-referral\n      if (referralCode === address) {\n        //console.log('‚ùå Self-referral detected, skipping registration');\n        setHasRegistered(true);\n        return;\n      }\n\n      handleAutoRegistration();\n    }\n  }, [referralCode, address, user, isConnected, hasRegistered, isRegistering]);\n\n  const handleAutoRegistration = async () => {\n    if (!address || !referralCode) return;\n\n    //console.log('üéØ Global auto-registration: Starting registration...');\n    setIsRegistering(true);\n\n    try {\n      const response = await backendApi.fetchJson('/api/referral/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          address,\n          referrer: referralCode,\n          telegramId: user?.id || null,\n          username: user?.username || user?.first_name || `Player_${address.slice(-4)}`\n        })\n      });\n\n      if (response.success) {\n        //console.log('‚úÖ Global auto-registration: Success!');\n        alert(`üéØ Referral registered successfully! You: ${address.slice(0, 8)}... Referrer: ${referralCode.slice(0, 8)}...`);\n        setHasRegistered(true);\n      } else {\n        //console.log('‚ùå Global auto-registration: Failed -', response.error);\n        alert(`‚ùå Referral registration failed: ${response.error}`);\n        setHasRegistered(true); // Mark as attempted to prevent retries\n      }\n    } catch (error) {\n      console.error('‚ùå Global auto-registration: Error -', error);\n      alert('‚ùå Referral registration error. Please try again.');\n      setHasRegistered(true); // Mark as attempted to prevent retries\n    } finally {\n      setIsRegistering(false);\n    }\n  };\n\n  return {\n    referralCode,\n    isRegistering,\n    hasRegistered,\n    handleAutoRegistration\n  };\n};\n\nexport default useReferralAutoRegistration;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}