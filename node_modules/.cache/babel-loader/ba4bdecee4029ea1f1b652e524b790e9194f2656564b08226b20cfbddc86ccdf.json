{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\nfunction AppContent() {\n  _s();\n  var _contractState$timer2, _contractState$timer3, _contractState$timer4, _contractState$timer5, _contractState$timer6, _contractState$timer7;\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n\n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n\n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n  }, [gameBettors]);\n  useEffect(() => {\n    contractWinnerRef.current = contractWinner;\n  }, [contractWinner]);\n  useEffect(() => {\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n  }, [showWinnerAnnouncement]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n\n    // Use coordinator to check if should block\n    if (winnerCoordinator.shouldBlock(winnerTimestamp)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n\n    // Set coordination flag via coordinator\n    winnerCoordinator.setActive(true, winnerTimestamp);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n\n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n\n    // Auto-clear everything after 6 seconds\n    setTimeout(() => {\n      setShowWinnerAnnouncement(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.setActive(false);\n    }, 6000);\n    return true;\n  }, []);\n\n  // Telegram integration\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n\n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    var _contractState$curren;\n    if (!contractState) return contractState;\n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' ? ((_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || 0 : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n\n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address || bettor.walletAddress === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || !jackpotValue || userBetTotal === 0) return 0;\n    return userBetTotal / jackpotValue * 100;\n  }, [userBetTotal, jackpotValue, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    var _contractState$timer;\n    // Always sync with backend timer when it changes\n    if (((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  const shouldRunCountdown = isLive && timeRemaining > 0; // Extract complex expression\n\n  useEffect(() => {\n    if (!shouldRunCountdown) return;\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        const newTime = Math.max(0, prev - 1);\n\n        // If we reach 0, just log - let backend handle the waiting state\n        if (newTime === 0 && prev > 0) {\n          console.log('⏰ Local timer reached 0, waiting for backend to handle round ending...');\n        }\n        return newTime;\n      });\n    }, 1000);\n    return () => clearInterval(countdown);\n  }, [shouldRunCountdown, timeRemaining]); // Use extracted variable and add missing dependency\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) return;\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n    let animationId;\n    let currentPosition = 0;\n    const cardWidth = 110 + 10; // card width + gap\n    const totalCards = Math.max(6, gameBettors.length || 0);\n    const resetPoint = cardWidth * totalCards; // Reset when we've moved one full set\n\n    console.log('🎠 Starting carousel animation:', {\n      totalCards,\n      resetPoint\n    });\n    const animate = () => {\n      // Skip animation during special states\n      if (contractWinner || waitingForWinner) {\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n      currentPosition += 3; // Faster movement speed\n\n      // Reset position seamlessly when reaching the end of first set\n      if (currentPosition >= resetPoint) {\n        currentPosition = 0;\n      }\n      carousel.style.transform = `translateX(-${currentPosition}px)`;\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n    };\n  }, [gameBettors.length, contractWinner, waitingForWinner, slotSpinning]);\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', timerData => {\n      console.log('⏰ App: Socket timer update:', timerData);\n\n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n\n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n\n        // Sync if: new round, big difference (>2s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 2 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : '(significant change)');\n          return newTimeRemaining;\n        }\n\n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', roundData => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', gameState => {\n      console.log('🎮 App: Game state update:', gameState);\n      if (gameState.timeRemaining !== undefined) {\n        setTimeRemaining(gameState.timeRemaining);\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n\n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n\n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n\n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        setGameBettors(gameState.bettors);\n      }\n\n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', gameData => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', data => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', data => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n\n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      setWaitingForWinner(isWaiting);\n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', winnerData => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', winnerData => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', resetData => {\n      console.log('🔄 App: Round reset detected:', resetData);\n\n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n\n      // Clear any winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n\n      // Clear bettors list since round was reset\n      setGameBettors([]);\n    });\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = e => {\n    const value = parseFloat(e.target.value) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n  const handleTabChange = tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    console.log(`🔥 BET BUTTON CLICKED - Amount: ${betAmount} TON`);\n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first');\n      return;\n    }\n    if (!contractState.isActive) {\n      showAlert('Jackpot is not currently active\\n\\n🤖 Automated system will start a new round soon...');\n      return;\n    }\n    try {\n      console.log(`🚀 Starting bet placement process...`);\n      hapticFeedback('medium');\n\n      // This will call the contract with opcode 0x03\n      const result = await placeBet(betAmount);\n      if (result.success) {\n        hapticFeedback('success');\n        showAlert(`✅ Bet placed successfully!\\n${betAmount} TON in round #${currentRound}\\nTransaction: ${result.txHash.slice(0, 8)}...`);\n        console.log('🎉 Bet placement completed:', result);\n      }\n    } catch (error) {\n      hapticFeedback('error');\n      showAlert(`❌ Bet failed: ${error.message}`);\n      console.error('💥 Bet error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logo-icon\",\n              children: \"\\uD83C\\uDFB0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"app-name\",\n              children: \"SlotPot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-icons\",\n            children: /*#__PURE__*/_jsxDEV(WalletConnection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-label\",\n            children: \"Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-amount\",\n            children: [isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000', /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"balance-symbol\",\n              children: \"TON\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-title\",\n            children: \"\\uD83D\\uDCB0 JACKPOT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-value-display\",\n            children: jackpotValue.toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-subtitle\",\n            children: \"Winner takes all...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-input-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"bet-amount-input\",\n              value: betAmount,\n              onChange: handleBetChange,\n              step: \"0.01\",\n              min: \"0.01\",\n              placeholder: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bet-increment-btn\",\n              onClick: () => setBetAmount(prev => prev + 0.1),\n              children: \"+0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-button\",\n            onClick: handlePlaceBet,\n            disabled: isPlacingBet || !isConnected,\n            children: isPlacingBet ? 'Betting...' : 'Bet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: userBetTotal.toFixed(3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Wager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card chance-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: [userWinChance.toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Chance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Time Remaining\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: [Math.floor((((_contractState$timer3 = contractState.timer) === null || _contractState$timer3 === void 0 ? void 0 : _contractState$timer3.timeRemaining) || 0) / 60), \":\", ((((_contractState$timer4 = contractState.timer) === null || _contractState$timer4 === void 0 ? void 0 : _contractState$timer4.timeRemaining) || 0) % 60).toString().padStart(2, '0')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-carousel-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `carousel-header ${(((_contractState$timer5 = contractState.timer) === null || _contractState$timer5 === void 0 ? void 0 : _contractState$timer5.timeRemaining) || 0) === 0 && waitingForWinner ? 'analyzing' : contractWinner ? 'winner' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: (((_contractState$timer6 = contractState.timer) === null || _contractState$timer6 === void 0 ? void 0 : _contractState$timer6.timeRemaining) || 0) === 0 && waitingForWinner ? \"🔍 Analyzing Bets...\" : contractWinner ? `🏆 Winner: ${contractWinner.username || 'Player'}` : `Players (${gameBettors.length})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"players-carousel\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: carouselRef,\n              className: `carousel-track ${(((_contractState$timer7 = contractState.timer) === null || _contractState$timer7 === void 0 ? void 0 : _contractState$timer7.timeRemaining) || 0) === 0 && waitingForWinner ? 'analyzing' : contractWinner ? 'winner-revealed' : slotSpinning ? 'sliding' : ''}`,\n              children: (() => {\n                // Use current bettors, or previous round bettors if current is empty (for winner matching)\n                const bettorsToShow = gameBettors.length > 0 ? gameBettors : previousRoundBettors;\n                console.log('🎠 Carousel: Using bettors:', bettorsToShow.length, 'from', gameBettors.length > 0 ? 'current' : 'previous round');\n\n                // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                const allItems = [...bettorsToShow, ...Array.from({\n                  length: Math.max(0, 6 - bettorsToShow.length)\n                }, () => null)];\n\n                // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                const infiniteItems = [...allItems, ...allItems, ...allItems];\n                return infiniteItems.map((bettor, index) => {\n                  const isWinner = contractWinner && bettor && ((_contractWinner$betto, _contractWinner$betto2, _contractWinner$betto3, _contractWinner$betto4) => {\n                    // Normalize addresses for comparison (remove any case sensitivity)\n                    const normalizeAddress = addr => addr ? addr.toLowerCase().trim() : '';\n\n                    // Get all possible identifiers from winner\n                    const winnerIds = [normalizeAddress(contractWinner.address), normalizeAddress(contractWinner.walletAddress), normalizeAddress((_contractWinner$betto = contractWinner.bettor) === null || _contractWinner$betto === void 0 ? void 0 : _contractWinner$betto.address), normalizeAddress((_contractWinner$betto2 = contractWinner.bettor) === null || _contractWinner$betto2 === void 0 ? void 0 : _contractWinner$betto2.walletAddress), contractWinner.username, (_contractWinner$betto3 = contractWinner.bettor) === null || _contractWinner$betto3 === void 0 ? void 0 : _contractWinner$betto3.username, contractWinner.displayName, (_contractWinner$betto4 = contractWinner.bettor) === null || _contractWinner$betto4 === void 0 ? void 0 : _contractWinner$betto4.displayName].filter(Boolean);\n\n                    // Get all possible identifiers from bettor\n                    const bettorIds = [normalizeAddress(bettor.address), normalizeAddress(bettor.walletAddress), bettor.username, bettor.displayName].filter(Boolean);\n\n                    // Check if any winner ID matches any bettor ID\n                    const isMatch = winnerIds.some(winnerId => bettorIds.includes(winnerId));\n                    console.log('🔍 Winner comparison:', {\n                      contractWinner,\n                      bettor,\n                      winnerIds,\n                      bettorIds,\n                      isMatch\n                    });\n                    return isMatch;\n                  })();\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `carousel-card ${isWinner ? 'winner' : bettor ? 'active' : 'waiting'}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-avatar\",\n                      children: bettor ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"generated-avatar\",\n                        children: bettor.username ? bettor.username[0].toUpperCase() : '?'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 642,\n                        columnNumber: 31\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"waiting-icon\",\n                        children: \"\\u2753\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 646,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 640,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-info\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-name\",\n                        children: bettor ? bettor.username || bettor.displayName || 'Player' : 'Waiting'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 650,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-bet\",\n                        children: bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 653,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 649,\n                      columnNumber: 27\n                    }, this), isWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"winner-crown\",\n                      children: \"\\uD83D\\uDC51\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 658,\n                      columnNumber: 29\n                    }, this)]\n                  }, `${index}-${(bettor === null || bettor === void 0 ? void 0 : bettor.address) || 'waiting'}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 636,\n                    columnNumber: 25\n                  }, this);\n                });\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83C\\uDFE0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\u26A1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 678,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD0D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"games-button\",\n          children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n            size: 14\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 15\n          }, this), \"Games\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 9\n    }, this), isLoadingContract && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"\\uD83D\\uDD04\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading contract data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinnerBroadcast, {\n      socketService: socketService\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 479,\n    columnNumber: 7\n  }, this);\n}\n\n// Main App component with TON Connect Provider\n_s(AppContent, \"J37VJHIJltBvshd/Rsg9YdjwodI=\", false, function () {\n  return [useTelegramWebApp, useJackpotContract];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(TonConnectUIProvider, {\n    manifestUrl: manifestUrl,\n    uiPreferences: uiOptions.uiPreferences,\n    language: uiOptions.language,\n    restoreConnection: uiOptions.restoreConnection,\n    actionsConfiguration: uiOptions.actionsConfiguration,\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 713,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","TonConnectUIProvider","Chat","GameArea","MobileChat","WalletConnection","WinnerBroadcast","useTelegramWebApp","useJackpotContract","socketService","winnerCoordinator","uiOptions","MessageCircle","Trophy","Users","DollarSign","jsxDEV","_jsxDEV","manifestUrl","AppContent","_s","_contractState$timer2","_contractState$timer3","_contractState$timer4","_contractState$timer5","_contractState$timer6","_contractState$timer7","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","carouselRef","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","current","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","shouldBlock","console","log","setActive","setTimeout","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","address","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","_contractState$curren","timer","isActive","timeElapsed","timerExpired","undefined","jackpotValue","totalJackpot","isLive","userBetTotal","length","filter","bettor","walletAddress","reduce","total","amount","userWinChance","_contractState$timer","shouldRunCountdown","countdown","setInterval","prev","newTime","Math","max","clearInterval","carousel","style","transition","animationId","currentPosition","cardWidth","totalCards","resetPoint","animate","requestAnimationFrame","transform","cancelAnimationFrame","connect","on","timerData","warn","newTimeRemaining","newRoundNumber","timeDiff","abs","isNewRound","roundData","reset","gameState","isWaitingForWinner","bettors","Array","isArray","winnerAnnouncement","gameData","data","isWaiting","message","resetData","off","disconnect","handleBetChange","e","value","parseFloat","target","min","handleTabChange","tab","handlePlaceBet","result","success","txHash","slice","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userBalance","toFixed","type","onChange","step","placeholder","onClick","disabled","floor","toString","padStart","username","ref","bettorsToShow","allItems","from","infiniteItems","map","index","isWinner","_contractWinner$betto","_contractWinner$betto2","_contractWinner$betto3","_contractWinner$betto4","normalizeAddress","addr","toLowerCase","trim","winnerIds","displayName","bettorIds","isMatch","some","winnerId","includes","toUpperCase","size","_c","App","uiPreferences","language","restoreConnection","actionsConfiguration","_c2","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  \n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { contractWinnerRef.current = contractWinner; }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Use coordinator to check if should block\n    if (winnerCoordinator.shouldBlock(winnerTimestamp)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    \n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n    \n    // Set coordination flag via coordinator\n    winnerCoordinator.setActive(true, winnerTimestamp);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Auto-clear everything after 6 seconds\n    setTimeout(() => {\n      setShowWinnerAnnouncement(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.setActive(false);\n    }, 6000);\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    \n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\n        : (Number(rawAdminInfo.currentRound) || 0)\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    if (!contractState) return contractState;\n    \n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' \n        ? (contractState.currentRound?.roundNumber || 0)\n        : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  \n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    \n    return gameBettors\n      .filter(bettor => \n        bettor.address === address || \n        bettor.walletAddress === address\n      )\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  \n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || !jackpotValue || userBetTotal === 0) return 0;\n    \n    return (userBetTotal / jackpotValue) * 100;\n  }, [userBetTotal, jackpotValue, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    // Always sync with backend timer when it changes\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  const shouldRunCountdown = isLive && timeRemaining > 0; // Extract complex expression\n  \n  useEffect(() => {\n    if (!shouldRunCountdown) return;\n\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        const newTime = Math.max(0, prev - 1);\n        \n        // If we reach 0, just log - let backend handle the waiting state\n        if (newTime === 0 && prev > 0) {\n          console.log('⏰ Local timer reached 0, waiting for backend to handle round ending...');\n        }\n        \n        return newTime;\n      });\n    }, 1000);\n\n    return () => clearInterval(countdown);\n  }, [shouldRunCountdown, timeRemaining]); // Use extracted variable and add missing dependency\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) return;\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n\n    let animationId;\n    let currentPosition = 0;\n    const cardWidth = 110 + 10; // card width + gap\n    const totalCards = Math.max(6, gameBettors.length || 0);\n    const resetPoint = cardWidth * totalCards; // Reset when we've moved one full set\n    \n    console.log('🎠 Starting carousel animation:', { totalCards, resetPoint });\n\n    const animate = () => {\n      // Skip animation during special states\n      if (contractWinner || waitingForWinner) {\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n\n      currentPosition += 3; // Faster movement speed\n      \n      // Reset position seamlessly when reaching the end of first set\n      if (currentPosition >= resetPoint) {\n        currentPosition = 0;\n      }\n      \n      carousel.style.transform = `translateX(-${currentPosition}px)`;\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n    };\n  }, [gameBettors.length, contractWinner, waitingForWinner, slotSpinning]);\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      console.log('⏰ App: Socket timer update:', timerData);\n      \n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      \n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      \n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n        \n        // Sync if: new round, big difference (>2s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 2 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : '(significant change)');\n          return newTimeRemaining;\n        }\n        \n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      \n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      console.log('🎮 App: Game state update:', gameState);\n      if (gameState.timeRemaining !== undefined) {\n        setTimeRemaining(gameState.timeRemaining);\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        \n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        \n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (data) => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n      \n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      \n      setWaitingForWinner(isWaiting);\n      \n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', (resetData) => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      \n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n      \n      // Clear any winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      \n      // Clear bettors list since round was reset\n      setGameBettors([]);\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    const value = parseFloat(e.target.value) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    console.log(`🔥 BET BUTTON CLICKED - Amount: ${betAmount} TON`);\n    \n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first');\n      return;\n    }\n\n    if (!contractState.isActive) {\n      showAlert('Jackpot is not currently active\\n\\n🤖 Automated system will start a new round soon...');\n      return;\n    }\n\n    try {\n      console.log(`🚀 Starting bet placement process...`);\n      hapticFeedback('medium');\n      \n      // This will call the contract with opcode 0x03\n      const result = await placeBet(betAmount);\n      \n      if (result.success) {\n        hapticFeedback('success');\n        showAlert(`✅ Bet placed successfully!\\n${betAmount} TON in round #${currentRound}\\nTransaction: ${result.txHash.slice(0, 8)}...`);\n        console.log('🎉 Bet placement completed:', result);\n      }\n    } catch (error) {\n      hapticFeedback('error');\n      showAlert(`❌ Bet failed: ${error.message}`);\n      console.error('💥 Bet error:', error);\n    }\n  };\n\n      return (\n      <div className=\"app\">\n        <div className=\"app-container\">\n          {/* Header Section */}\n          <div className=\"header-section\">\n            <div className=\"header-top\">\n              <div className=\"logo-section\">\n                <div className=\"logo-icon\">🎰</div>\n                <div className=\"app-name\">SlotPot</div>\n              </div>\n              <div className=\"header-icons\">\n                <WalletConnection />\n              </div>\n            </div>\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">\n                {isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000'}\n                <span className=\"balance-symbol\">TON</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"main-content\">\n            {/* Jackpot Display */}\n            <div className=\"jackpot-header\">\n              <div className=\"jackpot-title\">💰 JACKPOT</div>\n              <div className=\"jackpot-value-display\">{jackpotValue.toFixed(3)}</div>\n              <div className=\"jackpot-subtitle\">Winner takes all...</div>\n            </div>\n\n            {/* Betting Section */}\n            <div className=\"betting-section\">\n              <div className=\"bet-input-section\">\n                <input \n                  type=\"number\" \n                  className=\"bet-amount-input\" \n                  value={betAmount}\n                  onChange={handleBetChange}\n                  step=\"0.01\"\n                  min=\"0.01\"\n                  placeholder=\"0\"\n                />\n                <button className=\"bet-increment-btn\" onClick={() => setBetAmount(prev => prev + 0.1)}>\n                  +0.1\n                </button>\n              </div>\n              <button \n                className=\"bet-button\" \n                onClick={handlePlaceBet}\n                disabled={isPlacingBet || !isConnected}\n              >\n                {isPlacingBet ? 'Betting...' : 'Bet'}\n              </button>\n            </div>\n\n            {/* Stats Grid */}\n            <div className=\"stats-grid\">\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{userBetTotal.toFixed(3)}</div>\n                <div className=\"stat-label\">Your Wager</div>\n              </div>\n              <div className=\"stat-card chance-stat\">\n                <div className=\"stat-value\">{userWinChance.toFixed(2)}%</div>\n                <div className=\"stat-label\">Your Chance</div>\n              </div>\n            </div>\n\n            {/* Time Section */}\n            <div className=\"time-section\">\n              <div className=\"time-label\">Time Remaining</div>\n              <div className=\"time-value\">\n                {Math.floor((contractState.timer?.timeRemaining || 0) / 60)}:{((contractState.timer?.timeRemaining || 0) % 60).toString().padStart(2, '0')}\n              </div>\n            </div>\n\n            {/* Players Carousel Section */}\n            <div className=\"players-carousel-section\">\n              <div className={`carousel-header ${\n                (contractState.timer?.timeRemaining || 0) === 0 && waitingForWinner ? 'analyzing' : \n                contractWinner ? 'winner' : ''\n              }`}>\n                <h3>\n                  {(contractState.timer?.timeRemaining || 0) === 0 && waitingForWinner ? \n                    \"🔍 Analyzing Bets...\" : \n                    contractWinner ? \n                    `🏆 Winner: ${contractWinner.username || 'Player'}` :\n                    `Players (${gameBettors.length})`\n                  }\n                </h3>\n              </div>\n              <div className=\"players-carousel\">\n                <div \n                  ref={carouselRef}\n                  className={`carousel-track ${\n                    (contractState.timer?.timeRemaining || 0) === 0 && waitingForWinner ? 'analyzing' : \n                    contractWinner ? 'winner-revealed' : \n                    slotSpinning ? 'sliding' : ''\n                  }`}\n                >\n                  {/* Create infinite loop: duplicate all cards twice for seamless scrolling */}\n                  {(() => {\n                    // Use current bettors, or previous round bettors if current is empty (for winner matching)\n                    const bettorsToShow = gameBettors.length > 0 ? gameBettors : previousRoundBettors;\n                    console.log('🎠 Carousel: Using bettors:', bettorsToShow.length, 'from', gameBettors.length > 0 ? 'current' : 'previous round');\n                    \n                    // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                    const allItems = [\n                      ...bettorsToShow,\n                      ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n                    ];\n                    \n                    // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                    const infiniteItems = [...allItems, ...allItems, ...allItems];\n                    \n                    return infiniteItems.map((bettor, index) => {\n                                          const isWinner = contractWinner && bettor && (() => {\n                      // Normalize addresses for comparison (remove any case sensitivity)\n                      const normalizeAddress = (addr) => addr ? addr.toLowerCase().trim() : '';\n                      \n                      // Get all possible identifiers from winner\n                      const winnerIds = [\n                        normalizeAddress(contractWinner.address),\n                        normalizeAddress(contractWinner.walletAddress),\n                        normalizeAddress(contractWinner.bettor?.address),\n                        normalizeAddress(contractWinner.bettor?.walletAddress),\n                        contractWinner.username,\n                        contractWinner.bettor?.username,\n                        contractWinner.displayName,\n                        contractWinner.bettor?.displayName\n                      ].filter(Boolean);\n                      \n                      // Get all possible identifiers from bettor\n                      const bettorIds = [\n                        normalizeAddress(bettor.address),\n                        normalizeAddress(bettor.walletAddress),\n                        bettor.username,\n                        bettor.displayName\n                      ].filter(Boolean);\n                      \n                      // Check if any winner ID matches any bettor ID\n                      const isMatch = winnerIds.some(winnerId => \n                        bettorIds.includes(winnerId)\n                      );\n                      \n                      console.log('🔍 Winner comparison:', {\n                        contractWinner,\n                        bettor,\n                        winnerIds,\n                        bettorIds,\n                        isMatch\n                      });\n                      \n                      return isMatch;\n                    })();\n                      \n                      return (\n                        <div key={`${index}-${bettor?.address || 'waiting'}`} className={`carousel-card ${\n                          isWinner ? 'winner' : \n                          bettor ? 'active' : 'waiting'\n                        }`}>\n                          <div className=\"mobile-player-avatar\">\n                            {bettor ? (\n                              <div className=\"generated-avatar\">\n                                {bettor.username ? bettor.username[0].toUpperCase() : '?'}\n                              </div>\n                            ) : (\n                              <div className=\"waiting-icon\">❓</div>\n                            )}\n                          </div>\n                          <div className=\"mobile-player-info\">\n                            <div className=\"mobile-player-name\">\n                              {bettor ? (bettor.username || bettor.displayName || 'Player') : 'Waiting'}\n                            </div>\n                            <div className=\"mobile-player-bet\">\n                              {bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                            </div>\n                          </div>\n                          {isWinner && (\n                            <div className=\"winner-crown\">👑</div>\n                          )}\n                        </div>\n                      );\n                    });\n                  })()}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Mobile Footer */}\n          <div className=\"mobile-footer\">\n            <div className=\"footer-stats\">\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🏠</div>\n                <div className=\"footer-stat-value\">Home</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">⚡</div>\n                <div className=\"footer-stat-value\">Fast</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🕐</div>\n                <div className=\"footer-stat-value\">History</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🔍</div>\n                <div className=\"footer-stat-value\">Search</div>\n              </div>\n            </div>\n            <button className=\"games-button\">\n              <DollarSign size={14} />\n              Games\n            </button>\n          </div>\n        </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\">🔄</div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}