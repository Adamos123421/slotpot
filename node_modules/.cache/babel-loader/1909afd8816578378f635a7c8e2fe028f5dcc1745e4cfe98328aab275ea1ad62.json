{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Builder = exports.beginCell = void 0;\nconst BitBuilder_1 = require(\"./BitBuilder\");\nconst Cell_1 = require(\"./Cell\");\nconst strings_1 = require(\"./utils/strings\");\n/**\n * Start building a cell\n * @returns a new builder\n */\nfunction beginCell() {\n  return new Builder();\n}\nexports.beginCell = beginCell;\n/**\n * Builder for Cells\n */\nclass Builder {\n  constructor() {\n    this._bits = new BitBuilder_1.BitBuilder();\n    this._refs = [];\n  }\n  /**\n   * Bits written so far\n   */\n  get bits() {\n    return this._bits.length;\n  }\n  /**\n   * References written so far\n   */\n  get refs() {\n    return this._refs.length;\n  }\n  /**\n   * Available bits\n   */\n  get availableBits() {\n    return 1023 - this.bits;\n  }\n  /**\n   * Available references\n   */\n  get availableRefs() {\n    return 4 - this.refs;\n  }\n  /**\n   * Write a single bit\n   * @param value bit to write, true or positive number for 1, false or zero or negative for 0\n   * @returns this builder\n   */\n  storeBit(value) {\n    this._bits.writeBit(value);\n    return this;\n  }\n  /**\n   * Write bits from BitString\n   * @param src source bits\n   * @returns this builder\n   */\n  storeBits(src) {\n    this._bits.writeBits(src);\n    return this;\n  }\n  /**\n   * Store Buffer\n   * @param src source buffer\n   * @param bytes optional number of bytes to write\n   * @returns this builder\n   */\n  storeBuffer(src, bytes) {\n    if (bytes !== undefined && bytes !== null) {\n      if (src.length !== bytes) {\n        throw Error(`Buffer length ${src.length} is not equal to ${bytes}`);\n      }\n    }\n    this._bits.writeBuffer(src);\n    return this;\n  }\n  /**\n   * Store Maybe Buffer\n   * @param src source buffer or null\n   * @param bytes optional number of bytes to write\n   * @returns this builder\n   */\n  storeMaybeBuffer(src, bytes) {\n    if (src !== null) {\n      this.storeBit(1);\n      this.storeBuffer(src, bytes);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store uint value\n   * @param value value as bigint or number\n   * @param bits number of bits to write\n   * @returns this builder\n   */\n  storeUint(value, bits) {\n    this._bits.writeUint(value, bits);\n    return this;\n  }\n  /**\n   * Store maybe uint value\n   * @param value value as bigint or number, null or undefined\n   * @param bits number of bits to write\n   * @returns this builder\n   */\n  storeMaybeUint(value, bits) {\n    if (value !== null && value !== undefined) {\n      this.storeBit(1);\n      this.storeUint(value, bits);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store int value\n   * @param value value as bigint or number\n   * @param bits number of bits to write\n   * @returns this builder\n   */\n  storeInt(value, bits) {\n    this._bits.writeInt(value, bits);\n    return this;\n  }\n  /**\n   * Store maybe int value\n   * @param value value as bigint or number, null or undefined\n   * @param bits number of bits to write\n   * @returns this builder\n   */\n  storeMaybeInt(value, bits) {\n    if (value !== null && value !== undefined) {\n      this.storeBit(1);\n      this.storeInt(value, bits);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store varuint value\n   * @param value value as bigint or number\n   * @param bits number of bits to write to header\n   * @returns this builder\n   */\n  storeVarUint(value, bits) {\n    this._bits.writeVarUint(value, bits);\n    return this;\n  }\n  /**\n   * Store maybe varuint value\n   * @param value value as bigint or number, null or undefined\n   * @param bits number of bits to write to header\n   * @returns this builder\n   */\n  storeMaybeVarUint(value, bits) {\n    if (value !== null && value !== undefined) {\n      this.storeBit(1);\n      this.storeVarUint(value, bits);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store varint value\n   * @param value value as bigint or number\n   * @param bits number of bits to write to header\n   * @returns this builder\n   */\n  storeVarInt(value, bits) {\n    this._bits.writeVarInt(value, bits);\n    return this;\n  }\n  /**\n   * Store maybe varint value\n   * @param value value as bigint or number, null or undefined\n   * @param bits number of bits to write to header\n   * @returns this builder\n   */\n  storeMaybeVarInt(value, bits) {\n    if (value !== null && value !== undefined) {\n      this.storeBit(1);\n      this.storeVarInt(value, bits);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store coins value\n   * @param amount amount of coins\n   * @returns this builder\n   */\n  storeCoins(amount) {\n    this._bits.writeCoins(amount);\n    return this;\n  }\n  /**\n   * Store maybe coins value\n   * @param amount amount of coins, null or undefined\n   * @returns this builder\n   */\n  storeMaybeCoins(amount) {\n    if (amount !== null && amount !== undefined) {\n      this.storeBit(1);\n      this.storeCoins(amount);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store address\n   * @param addres address to store\n   * @returns this builder\n   */\n  storeAddress(address) {\n    this._bits.writeAddress(address);\n    return this;\n  }\n  /**\n   * Store reference\n   * @param cell cell or builder to store\n   * @returns this builder\n   */\n  storeRef(cell) {\n    // Check refs\n    if (this._refs.length >= 4) {\n      throw new Error(\"Too many references\");\n    }\n    // Store reference\n    if (cell instanceof Cell_1.Cell) {\n      this._refs.push(cell);\n    } else if (cell instanceof Builder) {\n      this._refs.push(cell.endCell());\n    } else {\n      throw new Error(\"Invalid argument\");\n    }\n    return this;\n  }\n  /**\n   * Store reference if not null\n   * @param cell cell or builder to store\n   * @returns this builder\n   */\n  storeMaybeRef(cell) {\n    if (cell) {\n      this.storeBit(1);\n      this.storeRef(cell);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store slice it in this builder\n   * @param src source slice\n   */\n  storeSlice(src) {\n    let c = src.clone();\n    if (c.remainingBits > 0) {\n      this.storeBits(c.loadBits(c.remainingBits));\n    }\n    while (c.remainingRefs > 0) {\n      this.storeRef(c.loadRef());\n    }\n    return this;\n  }\n  /**\n   * Store slice in this builder if not null\n   * @param src source slice\n   */\n  storeMaybeSlice(src) {\n    if (src) {\n      this.storeBit(1);\n      this.storeSlice(src);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store builder\n   * @param src builder to store\n   * @returns this builder\n   */\n  storeBuilder(src) {\n    return this.storeSlice(src.endCell().beginParse());\n  }\n  /**\n   * Store builder if not null\n   * @param src builder to store\n   * @returns this builder\n   */\n  storeMaybeBuilder(src) {\n    if (src) {\n      this.storeBit(1);\n      this.storeBuilder(src);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store writer or builder\n   * @param writer writer or builder to store\n   * @returns this builder\n   */\n  storeWritable(writer) {\n    if (typeof writer === 'object') {\n      writer.writeTo(this);\n    } else {\n      writer(this);\n    }\n    return this;\n  }\n  /**\n   * Store writer or builder if not null\n   * @param writer writer or builder to store\n   * @returns this builder\n   */\n  storeMaybeWritable(writer) {\n    if (writer) {\n      this.storeBit(1);\n      this.storeWritable(writer);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store object in this builder\n   * @param writer Writable or writer functuin\n   */\n  store(writer) {\n    this.storeWritable(writer);\n    return this;\n  }\n  /**\n   * Store string tail\n   * @param src source string\n   * @returns this builder\n   */\n  storeStringTail(src) {\n    (0, strings_1.writeString)(src, this);\n    return this;\n  }\n  /**\n   * Store string tail\n   * @param src source string\n   * @returns this builder\n   */\n  storeMaybeStringTail(src) {\n    if (src !== null && src !== undefined) {\n      this.storeBit(1);\n      (0, strings_1.writeString)(src, this);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store string tail in ref\n   * @param src source string\n   * @returns this builder\n   */\n  storeStringRefTail(src) {\n    this.storeRef(beginCell().storeStringTail(src));\n    return this;\n  }\n  /**\n   * Store maybe string tail in ref\n   * @param src source string\n   * @returns this builder\n   */\n  storeMaybeStringRefTail(src) {\n    if (src !== null && src !== undefined) {\n      this.storeBit(1);\n      this.storeStringRefTail(src);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store dictionary in this builder\n   * @param dict dictionary to store\n   * @returns this builder\n   */\n  storeDict(dict, key, value) {\n    if (dict) {\n      dict.store(this, key, value);\n    } else {\n      this.storeBit(0);\n    }\n    return this;\n  }\n  /**\n   * Store dictionary in this builder directly\n   * @param dict dictionary to store\n   * @returns this builder\n   */\n  storeDictDirect(dict, key, value) {\n    dict.storeDirect(this, key, value);\n    return this;\n  }\n  /**\n   * Complete cell\n   * @param opts options\n   * @returns cell\n   */\n  endCell(opts) {\n    return new Cell_1.Cell({\n      bits: this._bits.build(),\n      refs: this._refs,\n      exotic: opts?.exotic\n    });\n  }\n  /**\n   * Convert to cell\n   * @returns cell\n   */\n  asCell() {\n    return this.endCell();\n  }\n  /**\n   * Convert to slice\n   * @returns slice\n   */\n  asSlice() {\n    return this.endCell().beginParse();\n  }\n}\nexports.Builder = Builder;","map":{"version":3,"names":["Object","defineProperty","exports","value","Builder","beginCell","BitBuilder_1","require","Cell_1","strings_1","constructor","_bits","BitBuilder","_refs","bits","length","refs","availableBits","availableRefs","storeBit","writeBit","storeBits","src","writeBits","storeBuffer","bytes","undefined","Error","writeBuffer","storeMaybeBuffer","storeUint","writeUint","storeMaybeUint","storeInt","writeInt","storeMaybeInt","storeVarUint","writeVarUint","storeMaybeVarUint","storeVarInt","writeVarInt","storeMaybeVarInt","storeCoins","amount","writeCoins","storeMaybeCoins","storeAddress","address","writeAddress","storeRef","cell","Cell","push","endCell","storeMaybeRef","storeSlice","c","clone","remainingBits","loadBits","remainingRefs","loadRef","storeMaybeSlice","storeBuilder","beginParse","storeMaybeBuilder","storeWritable","writer","writeTo","storeMaybeWritable","store","storeStringTail","writeString","storeMaybeStringTail","storeStringRefTail","storeMaybeStringRefTail","storeDict","dict","key","storeDictDirect","storeDirect","opts","build","exotic","asCell","asSlice"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/core/dist/boc/Builder.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Builder = exports.beginCell = void 0;\nconst BitBuilder_1 = require(\"./BitBuilder\");\nconst Cell_1 = require(\"./Cell\");\nconst strings_1 = require(\"./utils/strings\");\n/**\n * Start building a cell\n * @returns a new builder\n */\nfunction beginCell() {\n    return new Builder();\n}\nexports.beginCell = beginCell;\n/**\n * Builder for Cells\n */\nclass Builder {\n    constructor() {\n        this._bits = new BitBuilder_1.BitBuilder();\n        this._refs = [];\n    }\n    /**\n     * Bits written so far\n     */\n    get bits() {\n        return this._bits.length;\n    }\n    /**\n     * References written so far\n     */\n    get refs() {\n        return this._refs.length;\n    }\n    /**\n     * Available bits\n     */\n    get availableBits() {\n        return 1023 - this.bits;\n    }\n    /**\n     * Available references\n     */\n    get availableRefs() {\n        return 4 - this.refs;\n    }\n    /**\n     * Write a single bit\n     * @param value bit to write, true or positive number for 1, false or zero or negative for 0\n     * @returns this builder\n     */\n    storeBit(value) {\n        this._bits.writeBit(value);\n        return this;\n    }\n    /**\n     * Write bits from BitString\n     * @param src source bits\n     * @returns this builder\n     */\n    storeBits(src) {\n        this._bits.writeBits(src);\n        return this;\n    }\n    /**\n     * Store Buffer\n     * @param src source buffer\n     * @param bytes optional number of bytes to write\n     * @returns this builder\n     */\n    storeBuffer(src, bytes) {\n        if (bytes !== undefined && bytes !== null) {\n            if (src.length !== bytes) {\n                throw Error(`Buffer length ${src.length} is not equal to ${bytes}`);\n            }\n        }\n        this._bits.writeBuffer(src);\n        return this;\n    }\n    /**\n     * Store Maybe Buffer\n     * @param src source buffer or null\n     * @param bytes optional number of bytes to write\n     * @returns this builder\n     */\n    storeMaybeBuffer(src, bytes) {\n        if (src !== null) {\n            this.storeBit(1);\n            this.storeBuffer(src, bytes);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store uint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     * @returns this builder\n     */\n    storeUint(value, bits) {\n        this._bits.writeUint(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe uint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write\n     * @returns this builder\n     */\n    storeMaybeUint(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeUint(value, bits);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store int value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     * @returns this builder\n     */\n    storeInt(value, bits) {\n        this._bits.writeInt(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe int value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write\n     * @returns this builder\n     */\n    storeMaybeInt(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeInt(value, bits);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store varuint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */\n    storeVarUint(value, bits) {\n        this._bits.writeVarUint(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe varuint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */\n    storeMaybeVarUint(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeVarUint(value, bits);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store varint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */\n    storeVarInt(value, bits) {\n        this._bits.writeVarInt(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe varint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */\n    storeMaybeVarInt(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeVarInt(value, bits);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store coins value\n     * @param amount amount of coins\n     * @returns this builder\n     */\n    storeCoins(amount) {\n        this._bits.writeCoins(amount);\n        return this;\n    }\n    /**\n     * Store maybe coins value\n     * @param amount amount of coins, null or undefined\n     * @returns this builder\n     */\n    storeMaybeCoins(amount) {\n        if (amount !== null && amount !== undefined) {\n            this.storeBit(1);\n            this.storeCoins(amount);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store address\n     * @param addres address to store\n     * @returns this builder\n     */\n    storeAddress(address) {\n        this._bits.writeAddress(address);\n        return this;\n    }\n    /**\n     * Store reference\n     * @param cell cell or builder to store\n     * @returns this builder\n     */\n    storeRef(cell) {\n        // Check refs\n        if (this._refs.length >= 4) {\n            throw new Error(\"Too many references\");\n        }\n        // Store reference\n        if (cell instanceof Cell_1.Cell) {\n            this._refs.push(cell);\n        }\n        else if (cell instanceof Builder) {\n            this._refs.push(cell.endCell());\n        }\n        else {\n            throw new Error(\"Invalid argument\");\n        }\n        return this;\n    }\n    /**\n     * Store reference if not null\n     * @param cell cell or builder to store\n     * @returns this builder\n     */\n    storeMaybeRef(cell) {\n        if (cell) {\n            this.storeBit(1);\n            this.storeRef(cell);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store slice it in this builder\n     * @param src source slice\n     */\n    storeSlice(src) {\n        let c = src.clone();\n        if (c.remainingBits > 0) {\n            this.storeBits(c.loadBits(c.remainingBits));\n        }\n        while (c.remainingRefs > 0) {\n            this.storeRef(c.loadRef());\n        }\n        return this;\n    }\n    /**\n     * Store slice in this builder if not null\n     * @param src source slice\n     */\n    storeMaybeSlice(src) {\n        if (src) {\n            this.storeBit(1);\n            this.storeSlice(src);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store builder\n     * @param src builder to store\n     * @returns this builder\n     */\n    storeBuilder(src) {\n        return this.storeSlice(src.endCell().beginParse());\n    }\n    /**\n     * Store builder if not null\n     * @param src builder to store\n     * @returns this builder\n     */\n    storeMaybeBuilder(src) {\n        if (src) {\n            this.storeBit(1);\n            this.storeBuilder(src);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store writer or builder\n     * @param writer writer or builder to store\n     * @returns this builder\n     */\n    storeWritable(writer) {\n        if (typeof writer === 'object') {\n            writer.writeTo(this);\n        }\n        else {\n            writer(this);\n        }\n        return this;\n    }\n    /**\n     * Store writer or builder if not null\n     * @param writer writer or builder to store\n     * @returns this builder\n     */\n    storeMaybeWritable(writer) {\n        if (writer) {\n            this.storeBit(1);\n            this.storeWritable(writer);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store object in this builder\n     * @param writer Writable or writer functuin\n     */\n    store(writer) {\n        this.storeWritable(writer);\n        return this;\n    }\n    /**\n     * Store string tail\n     * @param src source string\n     * @returns this builder\n     */\n    storeStringTail(src) {\n        (0, strings_1.writeString)(src, this);\n        return this;\n    }\n    /**\n     * Store string tail\n     * @param src source string\n     * @returns this builder\n     */\n    storeMaybeStringTail(src) {\n        if (src !== null && src !== undefined) {\n            this.storeBit(1);\n            (0, strings_1.writeString)(src, this);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store string tail in ref\n     * @param src source string\n     * @returns this builder\n     */\n    storeStringRefTail(src) {\n        this.storeRef(beginCell()\n            .storeStringTail(src));\n        return this;\n    }\n    /**\n     * Store maybe string tail in ref\n     * @param src source string\n     * @returns this builder\n     */\n    storeMaybeStringRefTail(src) {\n        if (src !== null && src !== undefined) {\n            this.storeBit(1);\n            this.storeStringRefTail(src);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store dictionary in this builder\n     * @param dict dictionary to store\n     * @returns this builder\n     */\n    storeDict(dict, key, value) {\n        if (dict) {\n            dict.store(this, key, value);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store dictionary in this builder directly\n     * @param dict dictionary to store\n     * @returns this builder\n     */\n    storeDictDirect(dict, key, value) {\n        dict.storeDirect(this, key, value);\n        return this;\n    }\n    /**\n     * Complete cell\n     * @param opts options\n     * @returns cell\n     */\n    endCell(opts) {\n        return new Cell_1.Cell({\n            bits: this._bits.build(),\n            refs: this._refs,\n            exotic: opts?.exotic\n        });\n    }\n    /**\n     * Convert to cell\n     * @returns cell\n     */\n    asCell() {\n        return this.endCell();\n    }\n    /**\n     * Convert to slice\n     * @returns slice\n     */\n    asSlice() {\n        return this.endCell().beginParse();\n    }\n}\nexports.Builder = Builder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}