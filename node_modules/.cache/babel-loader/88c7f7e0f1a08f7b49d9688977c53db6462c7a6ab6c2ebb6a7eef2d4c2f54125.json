{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadMasterchainStateExtra = void 0;\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nfunction loadMasterchainStateExtra(cs) {\n  // Check magic\n  if (cs.loadUint(16) !== 0xcc26) {\n    throw Error('Invalid data');\n  }\n  // Skip shard_hashes\n  if (cs.loadBit()) {\n    cs.loadRef();\n  }\n  // Read config\n  let configAddress = cs.loadUintBig(256);\n  let config = Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.Int(32), Dictionary_1.Dictionary.Values.Cell(), cs);\n  // Rad global balance\n  const globalBalance = (0, CurrencyCollection_1.loadCurrencyCollection)(cs);\n  return {\n    config,\n    configAddress,\n    globalBalance\n  };\n}\nexports.loadMasterchainStateExtra = loadMasterchainStateExtra;","map":{"version":3,"names":["Object","defineProperty","exports","value","loadMasterchainStateExtra","Dictionary_1","require","CurrencyCollection_1","cs","loadUint","Error","loadBit","loadRef","configAddress","loadUintBig","config","Dictionary","load","Keys","Int","Values","Cell","globalBalance","loadCurrencyCollection"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/core/dist/types/MasterchainStateExtra.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadMasterchainStateExtra = void 0;\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nfunction loadMasterchainStateExtra(cs) {\n    // Check magic\n    if (cs.loadUint(16) !== 0xcc26) {\n        throw Error('Invalid data');\n    }\n    // Skip shard_hashes\n    if (cs.loadBit()) {\n        cs.loadRef();\n    }\n    // Read config\n    let configAddress = cs.loadUintBig(256);\n    let config = Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.Int(32), Dictionary_1.Dictionary.Values.Cell(), cs);\n    // Rad global balance\n    const globalBalance = (0, CurrencyCollection_1.loadCurrencyCollection)(cs);\n    return {\n        config,\n        configAddress,\n        globalBalance\n    };\n}\nexports.loadMasterchainStateExtra = loadMasterchainStateExtra;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAG,KAAK,CAAC;AAC1C,MAAMC,YAAY,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAClD,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAC5D,SAASF,yBAAyBA,CAACI,EAAE,EAAE;EACnC;EACA,IAAIA,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,KAAK,MAAM,EAAE;IAC5B,MAAMC,KAAK,CAAC,cAAc,CAAC;EAC/B;EACA;EACA,IAAIF,EAAE,CAACG,OAAO,CAAC,CAAC,EAAE;IACdH,EAAE,CAACI,OAAO,CAAC,CAAC;EAChB;EACA;EACA,IAAIC,aAAa,GAAGL,EAAE,CAACM,WAAW,CAAC,GAAG,CAAC;EACvC,IAAIC,MAAM,GAAGV,YAAY,CAACW,UAAU,CAACC,IAAI,CAACZ,YAAY,CAACW,UAAU,CAACE,IAAI,CAACC,GAAG,CAAC,EAAE,CAAC,EAAEd,YAAY,CAACW,UAAU,CAACI,MAAM,CAACC,IAAI,CAAC,CAAC,EAAEb,EAAE,CAAC;EAC1H;EACA,MAAMc,aAAa,GAAG,CAAC,CAAC,EAAEf,oBAAoB,CAACgB,sBAAsB,EAAEf,EAAE,CAAC;EAC1E,OAAO;IACHO,MAAM;IACNF,aAAa;IACbS;EACJ,CAAC;AACL;AACApB,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}