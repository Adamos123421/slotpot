{"ast":null,"code":"import _objectSpread from\"C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback,useRef}from'react';import socketService from'../services/socketService';import apiService from'../services/apiService';import useTelegramWebApp from'./useTelegramWebApp';const useChat=()=>{const[messages,setMessages]=useState([]);const[isConnected,setIsConnected]=useState(false);const[isTyping,setIsTyping]=useState(false);const[typingUsers,setTypingUsers]=useState([]);const[connectionError,setConnectionError]=useState(null);const[serverStats,setServerStats]=useState({connectedUsers:0,totalMessages:0,serverStatus:'Unknown',lastUpdated:null});const[isLoadingStats,setIsLoadingStats]=useState(false);const{user,hasRealUserData}=useTelegramWebApp();const typingTimeoutRef=useRef(null);const unsubscribeFunctionsRef=useRef([]);const statsIntervalRef=useRef(null);// Fetch server stats from API\nconst fetchServerStats=useCallback(async()=>{setIsLoadingStats(true);try{const stats=await apiService.getServerStats();setServerStats(stats);// If we have recent messages from API and no socket messages yet, load them\nif(stats.recentMessages&&stats.recentMessages.length>0&&messages.length===0){setMessages(stats.recentMessages);}}catch(error){console.error('Failed to fetch server stats:',error);setServerStats(prev=>_objectSpread(_objectSpread({},prev),{},{serverStatus:'Error',error:error.message}));}finally{setIsLoadingStats(false);}},[messages.length]);// Initialize API data fetching\nuseEffect(()=>{// Fetch initial stats\nfetchServerStats();// Set up periodic stats updates every 30 seconds\nstatsIntervalRef.current=setInterval(fetchServerStats,30000);return()=>{if(statsIntervalRef.current){clearInterval(statsIntervalRef.current);}};},[fetchServerStats]);// Initialize socket listeners (connection handled by App.js)\nuseEffect(()=>{console.log('ğŸ”Œ Setting up chat listeners...');// Socket connection is handled by App.js - just set up listeners\n// Subscribe to messages\nsocketService.on('chat:message',message=>{setMessages(prev=>{// Prevent duplicate messages\nconst exists=prev.some(msg=>msg.id===message.id);if(exists)return prev;return[...prev,message].slice(-50);// Keep last 50 messages\n});// Update message count in stats\nsetServerStats(prev=>_objectSpread(_objectSpread({},prev),{},{totalMessages:prev.totalMessages+1,lastUpdated:new Date()}));});// Subscribe to connection status\nsocketService.on('connect',()=>{setIsConnected(true);setConnectionError(null);// Refresh stats when connected\nfetchServerStats();if(user){// Auto-join chat when connected\nsocketService.emit('user:join',{username:user.displayName,avatar:'ğŸ‘¤',isPremium:user.isPremium});}});socketService.on('disconnect',()=>{setIsConnected(false);});socketService.on('connect_error',error=>{setIsConnected(false);setConnectionError(error||new Error('Connection failed'));});// Subscribe to typing indicators\nsocketService.on('user:typing',data=>{setTypingUsers(prev=>{if(data.isTyping){// Add user to typing list\nif(!prev.includes(data.username)){return[...prev,data.username];}return prev;}else{// Remove user from typing list\nreturn prev.filter(username=>username!==data.username);}});// Auto-remove typing indicator after 3 seconds\nsetTimeout(()=>{setTypingUsers(prev=>prev.filter(username=>username!==data.username));},3000);});// Cleanup on unmount (don't disconnect - shared connection)\nreturn()=>{socketService.off('chat:message');socketService.off('connect');socketService.off('disconnect');socketService.off('connect_error');socketService.off('user:typing');// Don't disconnect here - App.js manages the connection\n};},[user,fetchServerStats]);// Send a message\nconst sendMessage=useCallback(messageText=>{if(!messageText.trim()||!isConnected){return false;}socketService.emit('chat:message',{message:messageText});// Stop typing indicator\nsetIsTyping(false);socketService.emit('user:typing',{isTyping:false});return true;},[isConnected]);// Handle typing indicators\nconst handleTyping=useCallback(typing=>{if(!isConnected)return;setIsTyping(typing);socketService.emit('user:typing',{isTyping:typing});// Clear previous timeout\nif(typingTimeoutRef.current){clearTimeout(typingTimeoutRef.current);}// Auto-stop typing after 3 seconds\nif(typing){typingTimeoutRef.current=setTimeout(()=>{setIsTyping(false);socketService.emit('user:typing',{isTyping:false});},3000);}},[isConnected]);// Send bet notification to chat\nconst sendBetNotification=useCallback(amount=>{if(!isConnected)return;socketService.emit('game:bet',{amount});},[isConnected]);// Reconnect to server (handled by App.js)\nconst reconnect=useCallback(()=>{setConnectionError(null);// App.js handles the actual reconnection\nfetchServerStats();// Just refresh API data\n},[fetchServerStats]);// Refresh server stats manually\nconst refreshStats=useCallback(()=>{fetchServerStats();},[fetchServerStats]);// Get chat statistics\nconst getChatStats=useCallback(()=>{return{totalMessages:Math.max(messages.length,serverStats.totalMessages),isConnected,hasError:!!connectionError,typingUsersCount:typingUsers.length,connectedUsers:serverStats.connectedUsers,serverStatus:serverStats.serverStatus,lastUpdated:serverStats.lastUpdated,isLoadingStats};},[messages.length,isConnected,connectionError,typingUsers.length,serverStats,isLoadingStats]);// Format message for display\nconst formatMessage=useCallback(message=>{return _objectSpread(_objectSpread({},message),{},{timestamp:new Date(message.timestamp),isOwnMessage:message.username===(user===null||user===void 0?void 0:user.displayName),formattedTime:new Date(message.timestamp).toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit'})});},[user===null||user===void 0?void 0:user.displayName]);return{// State\nmessages:messages.map(formatMessage),isConnected,isTyping,typingUsers,connectionError,serverStats,isLoadingStats,// Actions\nsendMessage,handleTyping,sendBetNotification,reconnect,refreshStats,// Utils\ngetChatStats,// Connection info\nserverUrl:'http://localhost:5002',userInfo:{username:(user===null||user===void 0?void 0:user.displayName)||'Anonymous',isRealUser:hasRealUserData,isPremium:(user===null||user===void 0?void 0:user.isPremium)||false}};};export default useChat;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","socketService","apiService","useTelegramWebApp","useChat","messages","setMessages","isConnected","setIsConnected","isTyping","setIsTyping","typingUsers","setTypingUsers","connectionError","setConnectionError","serverStats","setServerStats","connectedUsers","totalMessages","serverStatus","lastUpdated","isLoadingStats","setIsLoadingStats","user","hasRealUserData","typingTimeoutRef","unsubscribeFunctionsRef","statsIntervalRef","fetchServerStats","stats","getServerStats","recentMessages","length","error","console","prev","_objectSpread","message","current","setInterval","clearInterval","log","on","exists","some","msg","id","slice","Date","emit","username","displayName","avatar","isPremium","Error","data","includes","filter","setTimeout","off","sendMessage","messageText","trim","handleTyping","typing","clearTimeout","sendBetNotification","amount","reconnect","refreshStats","getChatStats","Math","max","hasError","typingUsersCount","formatMessage","timestamp","isOwnMessage","formattedTime","toLocaleTimeString","hour","minute","map","serverUrl","userInfo","isRealUser"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport socketService from '../services/socketService';\r\nimport apiService from '../services/apiService';\r\nimport useTelegramWebApp from './useTelegramWebApp';\r\n\r\nconst useChat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const [connectionError, setConnectionError] = useState(null);\r\n  const [serverStats, setServerStats] = useState({\r\n    connectedUsers: 0,\r\n    totalMessages: 0,\r\n    serverStatus: 'Unknown',\r\n    lastUpdated: null\r\n  });\r\n  const [isLoadingStats, setIsLoadingStats] = useState(false);\r\n  \r\n  const { user, hasRealUserData } = useTelegramWebApp();\r\n  const typingTimeoutRef = useRef(null);\r\n  const unsubscribeFunctionsRef = useRef([]);\r\n  const statsIntervalRef = useRef(null);\r\n\r\n  // Fetch server stats from API\r\n  const fetchServerStats = useCallback(async () => {\r\n    setIsLoadingStats(true);\r\n    try {\r\n      const stats = await apiService.getServerStats();\r\n      setServerStats(stats);\r\n      \r\n      // If we have recent messages from API and no socket messages yet, load them\r\n      if (stats.recentMessages && stats.recentMessages.length > 0 && messages.length === 0) {\r\n        setMessages(stats.recentMessages);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch server stats:', error);\r\n      setServerStats(prev => ({\r\n        ...prev,\r\n        serverStatus: 'Error',\r\n        error: error.message\r\n      }));\r\n    } finally {\r\n      setIsLoadingStats(false);\r\n    }\r\n  }, [messages.length]);\r\n\r\n  // Initialize API data fetching\r\n  useEffect(() => {\r\n    // Fetch initial stats\r\n    fetchServerStats();\r\n\r\n    // Set up periodic stats updates every 30 seconds\r\n    statsIntervalRef.current = setInterval(fetchServerStats, 30000);\r\n\r\n    return () => {\r\n      if (statsIntervalRef.current) {\r\n        clearInterval(statsIntervalRef.current);\r\n      }\r\n    };\r\n  }, [fetchServerStats]);\r\n\r\n  // Initialize socket listeners (connection handled by App.js)\r\n  useEffect(() => {\r\n    console.log('ğŸ”Œ Setting up chat listeners...');\r\n    \r\n    // Socket connection is handled by App.js - just set up listeners\r\n\r\n    // Subscribe to messages\r\n    socketService.on('chat:message', (message) => {\r\n      setMessages(prev => {\r\n        // Prevent duplicate messages\r\n        const exists = prev.some(msg => msg.id === message.id);\r\n        if (exists) return prev;\r\n        \r\n        return [...prev, message].slice(-50); // Keep last 50 messages\r\n      });\r\n      \r\n      // Update message count in stats\r\n      setServerStats(prev => ({\r\n        ...prev,\r\n        totalMessages: prev.totalMessages + 1,\r\n        lastUpdated: new Date()\r\n      }));\r\n    });\r\n\r\n    // Subscribe to connection status\r\n    socketService.on('connect', () => {\r\n      setIsConnected(true);\r\n      setConnectionError(null);\r\n      \r\n      // Refresh stats when connected\r\n      fetchServerStats();\r\n      \r\n      if (user) {\r\n        // Auto-join chat when connected\r\n        socketService.emit('user:join', {\r\n          username: user.displayName,\r\n          avatar: 'ğŸ‘¤',\r\n          isPremium: user.isPremium\r\n        });\r\n      }\r\n    });\r\n\r\n    socketService.on('disconnect', () => {\r\n      setIsConnected(false);\r\n    });\r\n\r\n    socketService.on('connect_error', (error) => {\r\n      setIsConnected(false);\r\n      setConnectionError(error || new Error('Connection failed'));\r\n    });\r\n\r\n    // Subscribe to typing indicators\r\n    socketService.on('user:typing', (data) => {\r\n      setTypingUsers(prev => {\r\n        if (data.isTyping) {\r\n          // Add user to typing list\r\n          if (!prev.includes(data.username)) {\r\n            return [...prev, data.username];\r\n          }\r\n          return prev;\r\n        } else {\r\n          // Remove user from typing list\r\n          return prev.filter(username => username !== data.username);\r\n        }\r\n      });\r\n\r\n      // Auto-remove typing indicator after 3 seconds\r\n      setTimeout(() => {\r\n        setTypingUsers(prev => prev.filter(username => username !== data.username));\r\n      }, 3000);\r\n    });\r\n\r\n    // Cleanup on unmount (don't disconnect - shared connection)\r\n    return () => {\r\n      socketService.off('chat:message');\r\n      socketService.off('connect');\r\n      socketService.off('disconnect');\r\n      socketService.off('connect_error');\r\n      socketService.off('user:typing');\r\n      // Don't disconnect here - App.js manages the connection\r\n    };\r\n  }, [user, fetchServerStats]);\r\n\r\n  // Send a message\r\n  const sendMessage = useCallback((messageText) => {\r\n    if (!messageText.trim() || !isConnected) {\r\n      return false;\r\n    }\r\n\r\n    socketService.emit('chat:message', { message: messageText });\r\n    \r\n    // Stop typing indicator\r\n    setIsTyping(false);\r\n    socketService.emit('user:typing', { isTyping: false });\r\n    \r\n    return true;\r\n  }, [isConnected]);\r\n\r\n  // Handle typing indicators\r\n  const handleTyping = useCallback((typing) => {\r\n    if (!isConnected) return;\r\n\r\n    setIsTyping(typing);\r\n    socketService.emit('user:typing', { isTyping: typing });\r\n\r\n    // Clear previous timeout\r\n    if (typingTimeoutRef.current) {\r\n      clearTimeout(typingTimeoutRef.current);\r\n    }\r\n\r\n    // Auto-stop typing after 3 seconds\r\n    if (typing) {\r\n      typingTimeoutRef.current = setTimeout(() => {\r\n        setIsTyping(false);\r\n        socketService.emit('user:typing', { isTyping: false });\r\n      }, 3000);\r\n    }\r\n  }, [isConnected]);\r\n\r\n  // Send bet notification to chat\r\n  const sendBetNotification = useCallback((amount) => {\r\n    if (!isConnected) return;\r\n    socketService.emit('game:bet', { amount });\r\n  }, [isConnected]);\r\n\r\n  // Reconnect to server (handled by App.js)\r\n  const reconnect = useCallback(() => {\r\n    setConnectionError(null);\r\n    // App.js handles the actual reconnection\r\n    fetchServerStats(); // Just refresh API data\r\n  }, [fetchServerStats]);\r\n\r\n  // Refresh server stats manually\r\n  const refreshStats = useCallback(() => {\r\n    fetchServerStats();\r\n  }, [fetchServerStats]);\r\n\r\n  // Get chat statistics\r\n  const getChatStats = useCallback(() => {\r\n    return {\r\n      totalMessages: Math.max(messages.length, serverStats.totalMessages),\r\n      isConnected,\r\n      hasError: !!connectionError,\r\n      typingUsersCount: typingUsers.length,\r\n      connectedUsers: serverStats.connectedUsers,\r\n      serverStatus: serverStats.serverStatus,\r\n      lastUpdated: serverStats.lastUpdated,\r\n      isLoadingStats\r\n    };\r\n  }, [messages.length, isConnected, connectionError, typingUsers.length, serverStats, isLoadingStats]);\r\n\r\n  // Format message for display\r\n  const formatMessage = useCallback((message) => {\r\n    return {\r\n      ...message,\r\n      timestamp: new Date(message.timestamp),\r\n      isOwnMessage: message.username === user?.displayName,\r\n      formattedTime: new Date(message.timestamp).toLocaleTimeString('en-US', {\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      })\r\n    };\r\n  }, [user?.displayName]);\r\n\r\n  return {\r\n    // State\r\n    messages: messages.map(formatMessage),\r\n    isConnected,\r\n    isTyping,\r\n    typingUsers,\r\n    connectionError,\r\n    serverStats,\r\n    isLoadingStats,\r\n    \r\n    // Actions\r\n    sendMessage,\r\n    handleTyping,\r\n    sendBetNotification,\r\n    reconnect,\r\n    refreshStats,\r\n    \r\n    // Utils\r\n    getChatStats,\r\n    \r\n    // Connection info\r\n            serverUrl: 'http://localhost:5002',\r\n    userInfo: {\r\n      username: user?.displayName || 'Anonymous',\r\n      isRealUser: hasRealUserData,\r\n      isPremium: user?.isPremium || false\r\n    }\r\n  };\r\n};\r\n\r\nexport default useChat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}