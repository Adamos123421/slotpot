{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const [showWinnerStyling, setShowWinnerStyling] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n  const storedWinnerRef = useRef(null); // Store winner during animation to prevent loss\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', {\n        hasSwiper: !!swiperRef.current,\n        hasWinner: !!winner,\n        isActive: winnerAnimationActive\n      });\n      return;\n    }\n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n\n    // Store winner locally to prevent loss during animation\n    storedWinnerRef.current = {\n      ...winner\n    };\n    console.log('💾 Winner stored for animation protection');\n    setWinnerAnimationActive(true);\n\n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // STEP 1: SIMPLE - Find winner in players array (no DOM searching needed!)\n    // Use stored winner if animation is active, otherwise use current winner\n    const currentWinner = storedWinnerRef.current || winner;\n    console.log('🔍 Finding winner in players array...');\n    console.log('🔍 Winner data:', {\n      username: currentWinner === null || currentWinner === void 0 ? void 0 : currentWinner.username,\n      address: currentWinner === null || currentWinner === void 0 ? void 0 : currentWinner.address\n    });\n    console.log('🔍 Players array:', players.map((p, i) => ({\n      index: i,\n      username: p === null || p === void 0 ? void 0 : p.username,\n      address: p === null || p === void 0 ? void 0 : p.address\n    })));\n\n    // Find winner position in players array directly\n    let realIndex = players.findIndex(player => {\n      if (!player) return false;\n\n      // Simple matching - check address first (most reliable), then username\n      return player.address === currentWinner.address || player.address === currentWinner.winner || player.username === currentWinner.username || player.username === currentWinner.displayName;\n    });\n    if (realIndex === -1) {\n      console.warn('⚠️ Winner not found in players array - using first player as fallback');\n      realIndex = players.findIndex(player => player !== null);\n      if (realIndex === -1) {\n        console.error('💥 No players found at all!');\n        setWinnerAnimationActive(false);\n        setShowWinnerStyling(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        return;\n      }\n    }\n    console.log('✅ Winner found at players array index:', realIndex);\n    console.log('🎯 Target position for animation:', realIndex);\n\n    // STEP 2: Simple but effective slot machine animation\n    console.log('🎰 Starting slot machine animation...');\n    let moveCount = 0;\n    const maxMoves = 10; // Fixed number for consistency\n    let isLanding = false; // Prevent multiple landings\n\n    const moveToNext = () => {\n      if (!swiperRef.current || isLanding) {\n        console.log('🚫 Animation stopped or already landing');\n        return;\n      }\n      moveCount++;\n      console.log(`🎰 Move ${moveCount}/${maxMoves}`);\n\n      // Calculate speed - gets slower over time\n      let speed = 150;\n      let delay = 200;\n      if (moveCount > 7) {\n        // Very slow in final moves\n        speed = 400 + moveCount * 100;\n        delay = 500 + moveCount * 150;\n        console.log(`🎯 Final moves - very slow (${speed}ms)`);\n      } else if (moveCount > 4) {\n        // Medium slow in middle\n        speed = 250 + moveCount * 50;\n        delay = 300 + moveCount * 50;\n        console.log(`🎰 Slowing down (${speed}ms)`);\n      }\n\n      // Move one step\n      swiperRef.current.slideNext(speed);\n\n      // Check if we should land\n      if (moveCount >= maxMoves) {\n        console.log('🏆 Time to land on winner!');\n        isLanding = true;\n\n        // NEW SIMPLE SYSTEM: Land on winner naturally without rollback\n        setTimeout(() => {\n          console.log('🎯 Landing on winner slide...');\n\n          // Get current position\n          const currentActive = swiperRef.current.activeIndex;\n          const slidesPerSet = players.length;\n          console.log(`🎯 Current position: ${currentActive}, Target real index: ${realIndex}`);\n\n          // Calculate how many steps forward to reach the winner position\n          // The slides layout is: [SET1: player0...playerN] + [SET2: player0...playerN] (DOUBLE ARRAY!)\n          // Total slides = slidesPerSet * 2, but we use modulo to map to correct position within each set\n          // So currentActive slide index directly corresponds to players array index within each set\n          let currentRealIndex = currentActive % slidesPerSet;\n          console.log(`🔍 Slide layout: currentActive=${currentActive}, slidesPerSet=${slidesPerSet} (×2 = ${slidesPerSet * 2} total slides)`);\n          console.log(`🔍 Current real position: ${currentRealIndex} (slide ${currentActive})`);\n          console.log(`🔍 Target real position: ${realIndex}`);\n\n          // Calculate forward distance to winner within the same set\n          let stepsToWinner = 0;\n          if (realIndex >= currentRealIndex) {\n            // Winner is ahead in same set\n            stepsToWinner = realIndex - currentRealIndex;\n          } else {\n            // Winner is behind in current set, go to next set\n            stepsToWinner = slidesPerSet - currentRealIndex + realIndex;\n          }\n\n          // Check if going backwards would be shorter\n          let backwardSteps = currentRealIndex - realIndex;\n          if (backwardSteps < 0) {\n            backwardSteps = currentRealIndex + (slidesPerSet - realIndex);\n          }\n          console.log(`🔍 Forward steps: ${stepsToWinner}, Backward steps: ${backwardSteps}`);\n\n          // Choose the shorter path\n          if (backwardSteps < stepsToWinner) {\n            stepsToWinner = -backwardSteps; // Negative means go backwards\n            console.log(`🎯 Going BACKWARD ${backwardSteps} steps (shorter path)`);\n          } else {\n            console.log(`🎯 Going FORWARD ${stepsToWinner} steps`);\n          }\n          console.log(`🎯 Final steps to winner: ${stepsToWinner} (from position ${currentRealIndex} to ${realIndex})`);\n\n          // Move step by step to winner for smooth natural landing\n          let currentStep = 0;\n          const landingSteps = Math.abs(stepsToWinner);\n          const stepToWinner = () => {\n            if (!swiperRef.current || currentStep >= landingSteps) {\n              // Reached winner - IMMEDIATE HARD LOCK\n              console.log('🏆 Landed on winner - HARD LOCKING!');\n              if (swiperRef.current) {\n                var _swiperRef$current$au;\n                // IMMEDIATELY stop everything\n                (_swiperRef$current$au = swiperRef.current.autoplay) === null || _swiperRef$current$au === void 0 ? void 0 : _swiperRef$current$au.stop();\n                swiperRef.current.allowSlideNext = false;\n                swiperRef.current.allowSlidePrev = false;\n                swiperRef.current.allowTouchMove = false;\n\n                // FORCE stop all transitions immediately\n                const wrapper = swiperRef.current.wrapperEl;\n                if (wrapper) {\n                  wrapper.style.transition = 'none !important';\n                  wrapper.style.transform = getComputedStyle(wrapper).transform;\n\n                  // Double-check - force stop any ongoing transitions\n                  setTimeout(() => {\n                    wrapper.style.transition = 'none';\n                    wrapper.style.transform = getComputedStyle(wrapper).transform;\n                  }, 50);\n                }\n\n                // Disable any swiper animations\n                swiperRef.current.params.speed = 0;\n\n                // Force destroy any pending animations\n                if (swiperRef.current.animating) {\n                  swiperRef.current.animating = false;\n                }\n              }\n              setWinnerLocked(true);\n              setWinnerAnimationActive(false);\n\n              // NOW show the winner styling (green highlight + crown + prize)\n              console.log('🎉 NOW showing winner in green!');\n              setShowWinnerStyling(true);\n              onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n              console.log('✅ Winner animation complete and LOCKED!');\n\n              // Schedule reset if no winner (delayed reset)\n              setTimeout(() => {\n                if (!winner) {\n                  console.log('🔄 Delayed reset after animation completion');\n                  resetToIdle();\n                }\n              }, 100);\n              return;\n            }\n            currentStep++;\n            console.log(`🎯 Landing step ${currentStep}/${landingSteps}`);\n\n            // Move one step toward winner\n            if (stepsToWinner > 0) {\n              swiperRef.current.slideNext(400);\n            } else if (stepsToWinner < 0) {\n              swiperRef.current.slidePrev(400);\n            }\n\n            // Continue to next step\n            setTimeout(() => {\n              stepToWinner();\n            }, 450);\n          };\n\n          // Start step-by-step landing\n          if (landingSteps > 0) {\n            stepToWinner();\n          } else {\n            // Already on winner position\n            console.log('🏆 Already on winner position - HARD LOCKING!');\n            if (swiperRef.current) {\n              var _swiperRef$current$au2;\n              // IMMEDIATELY stop everything\n              (_swiperRef$current$au2 = swiperRef.current.autoplay) === null || _swiperRef$current$au2 === void 0 ? void 0 : _swiperRef$current$au2.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              swiperRef.current.allowTouchMove = false;\n\n              // FORCE stop all transitions immediately\n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                wrapper.style.transition = 'none !important';\n                wrapper.style.transform = getComputedStyle(wrapper).transform;\n\n                // Double-check - force stop any ongoing transitions\n                setTimeout(() => {\n                  wrapper.style.transition = 'none';\n                  wrapper.style.transform = getComputedStyle(wrapper).transform;\n                }, 50);\n              }\n\n              // Disable any swiper animations\n              swiperRef.current.params.speed = 0;\n\n              // Force destroy any pending animations\n              if (swiperRef.current.animating) {\n                swiperRef.current.animating = false;\n              }\n            }\n            setWinnerLocked(true);\n            setWinnerAnimationActive(false);\n            setShowWinnerStyling(true);\n            onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n            console.log('✅ Winner animation complete and LOCKED!');\n\n            // Schedule reset if no winner (delayed reset)\n            setTimeout(() => {\n              if (!winner) {\n                console.log('🔄 Delayed reset after animation completion');\n                resetToIdle();\n              }\n            }, 100);\n          }\n        }, delay);\n        return;\n      }\n\n      // Continue moving\n      setTimeout(() => {\n        moveToNext();\n      }, delay);\n    };\n\n    // Start animation\n    setTimeout(() => {\n      moveToNext();\n    }, 300);\n  }, [winner, winnerAnimationActive, onWinnerLand, resetToIdle]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    console.log('🔒 Locking on winner...');\n\n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Looking for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon = playerNameEl.textContent) === null || _playerNameEl$textCon === void 0 ? void 0 : _playerNameEl$textCon.trim();\n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n\n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n\n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        }\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n      }\n\n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n\n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n\n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n\n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n\n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n\n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    // PROTECTION: Don't reset if animation is actively running\n    if (winnerAnimationActive) {\n      console.log('🛡️ Animation in progress - not resetting now');\n      return;\n    }\n    console.log('🔄 Resetting to idle state');\n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n\n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n\n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    setShowWinnerStyling(false); // Reset winner styling\n\n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner, winnerAnimationActive]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('🚫 No winner, skipping animation');\n      setShowWinnerStyling(false); // Hide winner styling when no winner\n      return;\n    }\n    if (winnerAnimationActive) {\n      console.log('🚫 Animation already active, skipping');\n      return;\n    }\n    if (winnerLocked) {\n      console.log('🚫 Winner already locked, skipping');\n      return;\n    }\n\n    // Reset winner styling for new animation\n    setShowWinnerStyling(false);\n    console.log('🎰 Starting animation - winner styling hidden until animation completes');\n\n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n\n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('🆕 New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n\n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('🎯 Forcing winner display without animation');\n\n      // Just show the winner without animation\n      setWinnerLocked(true);\n      setShowWinnerStyling(true); // Show styling immediately if no animation\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n      // NO AUTO-RESET - let game logic handle it\n      console.log('🎯 Winner locked without animation - waiting for new round');\n      return;\n    }\n    console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    animationAttemptsRef.current++;\n\n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${winnerAnimationActive && !winnerLocked ? 'winner-approaching' : winnerLocked ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: Math.max(players.length, 6),\n      autoplay: {\n        delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: 300,\n      className: `player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(2)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"bet-amount\",\n                children: [(player.amount || 0).toFixed(2), /*#__PURE__*/_jsxDEV(\"svg\", {\n                  className: \"ton-logo\",\n                  width: \"16\",\n                  height: \"16\",\n                  viewBox: \"0 0 56 56\",\n                  fill: \"currentColor\",\n                  children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M28 56C43.464 56 56 43.464 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56Z\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 673,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M37.5603 15.6277H18.4386C17.7996 15.6277 17.6276 16.0988 18.0345 16.4898L27.2064 25.1898C27.6278 25.5948 28.374 25.5948 28.7954 25.1898L37.9673 16.4898C38.3742 16.0988 38.2022 15.6277 37.5603 15.6277Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 674,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M15.875 19.25H40.125V22.75H15.875V19.25Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 675,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M21 26.25H35V40.25H21V26.25Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 676,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 672,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 670,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"bet-amount\",\n                children: [\"0.00\", /*#__PURE__*/_jsxDEV(\"svg\", {\n                  className: \"ton-logo\",\n                  width: \"16\",\n                  height: \"16\",\n                  viewBox: \"0 0 56 56\",\n                  fill: \"currentColor\",\n                  children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M28 56C43.464 56 56 43.464 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56Z\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 683,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M37.5603 15.6277H18.4386C17.7996 15.6277 17.6276 16.0988 18.0345 16.4898L27.2064 25.1898C27.6278 25.5948 28.374 25.5948 28.7954 25.1898L37.9673 16.4898C38.3742 16.0988 38.2022 15.6277 37.5603 15.6277Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 684,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M15.875 19.25H40.125V22.75H15.875V19.25Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 685,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M21 26.25H35V40.25H21V26.25Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 686,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 682,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 680,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 19\n            }, this), showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"prize-amount\",\n                children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), /*#__PURE__*/_jsxDEV(\"svg\", {\n                  className: \"ton-logo\",\n                  width: \"16\",\n                  height: \"16\",\n                  viewBox: \"0 0 56 56\",\n                  fill: \"currentColor\",\n                  children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M28 56C43.464 56 56 43.464 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56Z\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 702,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M37.5603 15.6277H18.4386C17.7996 15.6277 17.6276 16.0988 18.0345 16.4898L27.2064 25.1898C27.6278 25.5948 28.374 25.5948 28.7954 25.1898L37.9673 16.4898C38.3742 16.0988 38.2022 15.6277 37.5603 15.6277Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 703,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M15.875 19.25H40.125V22.75H15.875V19.25Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 704,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M21 26.25H35V40.25H21V26.25Z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 705,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 701,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 699,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 17\n          }, this), showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 617,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"d8u9PsN95ke7TyjB+3chCBzMWds=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","winnerAnimationActive","setWinnerAnimationActive","winnerLocked","setWinnerLocked","showWinnerStyling","setShowWinnerStyling","winnerTimeoutRef","animationAttemptsRef","lastWinnerRef","storedWinnerRef","handleSwiperInit","swiper","current","animateToWinner","console","log","hasSwiper","hasWinner","isActive","autoplay","stop","currentWinner","username","address","map","p","i","index","realIndex","findIndex","player","displayName","warn","error","moveCount","maxMoves","isLanding","moveToNext","speed","delay","slideNext","setTimeout","currentActive","activeIndex","slidesPerSet","length","currentRealIndex","stepsToWinner","backwardSteps","currentStep","landingSteps","Math","abs","stepToWinner","_swiperRef$current$au","allowSlideNext","allowSlidePrev","allowTouchMove","wrapper","wrapperEl","style","transition","transform","getComputedStyle","params","animating","resetToIdle","slidePrev","_swiperRef$current$au2","lockOnWinner","slides","winnerSlideIndex","winnerUsername","winnerAddress","fullAddress","closestToCenter","Infinity","containerCenter","el","clientWidth","_playerNameEl$textCon","slide","playerNameEl","querySelector","playerName","textContent","trim","isWinner","includes","slice","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","slideTo","fallbackIndex","start","clearTimeout","currentWinnerKey","lastWinnerKey","disableOnInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","max","pauseOnMouseEnter","onSwiper","Array","_","setIndex","toUpperCase","amount","toFixed","height","viewBox","fill","d","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const [showWinnerStyling, setShowWinnerStyling] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n  const storedWinnerRef = useRef(null); // Store winner during animation to prevent loss\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', { \n        hasSwiper: !!swiperRef.current, \n        hasWinner: !!winner, \n        isActive: winnerAnimationActive \n      });\n      return;\n    }\n    \n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    \n    // Store winner locally to prevent loss during animation\n    storedWinnerRef.current = { ...winner };\n    console.log('💾 Winner stored for animation protection');\n    \n    setWinnerAnimationActive(true);\n    \n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // STEP 1: SIMPLE - Find winner in players array (no DOM searching needed!)\n    // Use stored winner if animation is active, otherwise use current winner\n    const currentWinner = storedWinnerRef.current || winner;\n    console.log('🔍 Finding winner in players array...');\n    console.log('🔍 Winner data:', { username: currentWinner?.username, address: currentWinner?.address });\n    console.log('🔍 Players array:', players.map((p, i) => ({ index: i, username: p?.username, address: p?.address })));\n    \n    // Find winner position in players array directly\n    let realIndex = players.findIndex(player => {\n      if (!player) return false;\n      \n      // Simple matching - check address first (most reliable), then username\n      return player.address === currentWinner.address || \n             player.address === currentWinner.winner || \n             player.username === currentWinner.username ||\n             player.username === currentWinner.displayName;\n    });\n    \n    if (realIndex === -1) {\n      console.warn('⚠️ Winner not found in players array - using first player as fallback');\n      realIndex = players.findIndex(player => player !== null);\n      \n      if (realIndex === -1) {\n        console.error('💥 No players found at all!');\n        setWinnerAnimationActive(false);\n        setShowWinnerStyling(true);\n        onWinnerLand?.();\n        return;\n      }\n    }\n    \n    console.log('✅ Winner found at players array index:', realIndex);\n    console.log('🎯 Target position for animation:', realIndex);\n    \n    // STEP 2: Simple but effective slot machine animation\n    console.log('🎰 Starting slot machine animation...');\n    \n    let moveCount = 0;\n    const maxMoves = 10; // Fixed number for consistency\n    let isLanding = false; // Prevent multiple landings\n    \n    const moveToNext = () => {\n      if (!swiperRef.current || isLanding) {\n        console.log('🚫 Animation stopped or already landing');\n        return;\n      }\n      \n      moveCount++;\n      console.log(`🎰 Move ${moveCount}/${maxMoves}`);\n      \n      // Calculate speed - gets slower over time\n      let speed = 150;\n      let delay = 200;\n      \n      if (moveCount > 7) {\n        // Very slow in final moves\n        speed = 400 + (moveCount * 100);\n        delay = 500 + (moveCount * 150);\n        console.log(`🎯 Final moves - very slow (${speed}ms)`);\n      } else if (moveCount > 4) {\n        // Medium slow in middle\n        speed = 250 + (moveCount * 50);\n        delay = 300 + (moveCount * 50);\n        console.log(`🎰 Slowing down (${speed}ms)`);\n      }\n      \n      // Move one step\n      swiperRef.current.slideNext(speed);\n      \n      // Check if we should land\n      if (moveCount >= maxMoves) {\n        console.log('🏆 Time to land on winner!');\n        isLanding = true;\n        \n        // NEW SIMPLE SYSTEM: Land on winner naturally without rollback\n        setTimeout(() => {\n          console.log('🎯 Landing on winner slide...');\n          \n          // Get current position\n          const currentActive = swiperRef.current.activeIndex;\n          const slidesPerSet = players.length;\n          \n          console.log(`🎯 Current position: ${currentActive}, Target real index: ${realIndex}`);\n          \n          // Calculate how many steps forward to reach the winner position\n          // The slides layout is: [SET1: player0...playerN] + [SET2: player0...playerN] (DOUBLE ARRAY!)\n          // Total slides = slidesPerSet * 2, but we use modulo to map to correct position within each set\n          // So currentActive slide index directly corresponds to players array index within each set\n          let currentRealIndex = currentActive % slidesPerSet;\n          \n          console.log(`🔍 Slide layout: currentActive=${currentActive}, slidesPerSet=${slidesPerSet} (×2 = ${slidesPerSet * 2} total slides)`);\n          console.log(`🔍 Current real position: ${currentRealIndex} (slide ${currentActive})`);\n          console.log(`🔍 Target real position: ${realIndex}`);\n          \n          // Calculate forward distance to winner within the same set\n          let stepsToWinner = 0;\n          \n          if (realIndex >= currentRealIndex) {\n            // Winner is ahead in same set\n            stepsToWinner = realIndex - currentRealIndex;\n          } else {\n            // Winner is behind in current set, go to next set\n            stepsToWinner = (slidesPerSet - currentRealIndex) + realIndex;\n          }\n          \n          // Check if going backwards would be shorter\n          let backwardSteps = currentRealIndex - realIndex;\n          if (backwardSteps < 0) {\n            backwardSteps = currentRealIndex + (slidesPerSet - realIndex);\n          }\n          \n          console.log(`🔍 Forward steps: ${stepsToWinner}, Backward steps: ${backwardSteps}`);\n          \n          // Choose the shorter path\n          if (backwardSteps < stepsToWinner) {\n            stepsToWinner = -backwardSteps; // Negative means go backwards\n            console.log(`🎯 Going BACKWARD ${backwardSteps} steps (shorter path)`);\n          } else {\n            console.log(`🎯 Going FORWARD ${stepsToWinner} steps`);\n          }\n          \n          console.log(`🎯 Final steps to winner: ${stepsToWinner} (from position ${currentRealIndex} to ${realIndex})`);\n          \n          // Move step by step to winner for smooth natural landing\n          let currentStep = 0;\n          const landingSteps = Math.abs(stepsToWinner);\n          \n                     const stepToWinner = () => {\n             if (!swiperRef.current || currentStep >= landingSteps) {\n               // Reached winner - IMMEDIATE HARD LOCK\n               console.log('🏆 Landed on winner - HARD LOCKING!');\n               \n               if (swiperRef.current) {\n                 // IMMEDIATELY stop everything\n                 swiperRef.current.autoplay?.stop();\n                 swiperRef.current.allowSlideNext = false;\n                 swiperRef.current.allowSlidePrev = false;\n                 swiperRef.current.allowTouchMove = false;\n                 \n                 // FORCE stop all transitions immediately\n                 const wrapper = swiperRef.current.wrapperEl;\n                 if (wrapper) {\n                   wrapper.style.transition = 'none !important';\n                   wrapper.style.transform = getComputedStyle(wrapper).transform;\n                   \n                   // Double-check - force stop any ongoing transitions\n                   setTimeout(() => {\n                     wrapper.style.transition = 'none';\n                     wrapper.style.transform = getComputedStyle(wrapper).transform;\n                   }, 50);\n                 }\n                 \n                 // Disable any swiper animations\n                 swiperRef.current.params.speed = 0;\n                 \n                 // Force destroy any pending animations\n                 if (swiperRef.current.animating) {\n                   swiperRef.current.animating = false;\n                 }\n               }\n               \n               setWinnerLocked(true);\n               setWinnerAnimationActive(false);\n               \n               // NOW show the winner styling (green highlight + crown + prize)\n               console.log('🎉 NOW showing winner in green!');\n               setShowWinnerStyling(true);\n               \n               onWinnerLand?.();\n               \n               console.log('✅ Winner animation complete and LOCKED!');\n               \n               // Schedule reset if no winner (delayed reset)\n               setTimeout(() => {\n                 if (!winner) {\n                   console.log('🔄 Delayed reset after animation completion');\n                   resetToIdle();\n                 }\n               }, 100);\n               return;\n             }\n            \n            currentStep++;\n            console.log(`🎯 Landing step ${currentStep}/${landingSteps}`);\n            \n            // Move one step toward winner\n            if (stepsToWinner > 0) {\n              swiperRef.current.slideNext(400);\n            } else if (stepsToWinner < 0) {\n              swiperRef.current.slidePrev(400);\n            }\n            \n            // Continue to next step\n            setTimeout(() => {\n              stepToWinner();\n            }, 450);\n          };\n          \n          // Start step-by-step landing\n          if (landingSteps > 0) {\n            stepToWinner();\n                     } else {\n             // Already on winner position\n             console.log('🏆 Already on winner position - HARD LOCKING!');\n             \n             if (swiperRef.current) {\n               // IMMEDIATELY stop everything\n               swiperRef.current.autoplay?.stop();\n               swiperRef.current.allowSlideNext = false;\n               swiperRef.current.allowSlidePrev = false;\n               swiperRef.current.allowTouchMove = false;\n               \n               // FORCE stop all transitions immediately\n               const wrapper = swiperRef.current.wrapperEl;\n               if (wrapper) {\n                 wrapper.style.transition = 'none !important';\n                 wrapper.style.transform = getComputedStyle(wrapper).transform;\n                 \n                 // Double-check - force stop any ongoing transitions\n                 setTimeout(() => {\n                   wrapper.style.transition = 'none';\n                   wrapper.style.transform = getComputedStyle(wrapper).transform;\n                 }, 50);\n               }\n               \n               // Disable any swiper animations\n               swiperRef.current.params.speed = 0;\n               \n               // Force destroy any pending animations\n               if (swiperRef.current.animating) {\n                 swiperRef.current.animating = false;\n               }\n             }\n             \n             setWinnerLocked(true);\n             setWinnerAnimationActive(false);\n             setShowWinnerStyling(true);\n             onWinnerLand?.();\n             \n             console.log('✅ Winner animation complete and LOCKED!');\n             \n             // Schedule reset if no winner (delayed reset)\n             setTimeout(() => {\n               if (!winner) {\n                 console.log('🔄 Delayed reset after animation completion');\n                 resetToIdle();\n               }\n             }, 100);\n           }\n          \n        }, delay);\n        \n        return;\n      }\n      \n      // Continue moving\n      setTimeout(() => {\n        moveToNext();\n      }, delay);\n    };\n    \n\n    \n    // Start animation\n    setTimeout(() => {\n      moveToNext();\n    }, 300);\n  }, [winner, winnerAnimationActive, onWinnerLand, resetToIdle]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    \n    console.log('🔒 Locking on winner...');\n    \n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('🔍 Looking for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n      \n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n        \n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner?.displayName);\n        }\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || \n                   winnerAddress.includes(playerName);\n      }\n      \n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      \n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      \n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        \n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        \n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n      \n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n      \n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n        \n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n          \n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        \n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        \n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n      \n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      \n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        \n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand?.();\n          \n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    // PROTECTION: Don't reset if animation is actively running\n    if (winnerAnimationActive) {\n      console.log('🛡️ Animation in progress - not resetting now');\n      return;\n    }\n    \n    console.log('🔄 Resetting to idle state');\n    \n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n      \n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n      \n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    \n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    setShowWinnerStyling(false); // Reset winner styling\n    \n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    \n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner, winnerAnimationActive]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('🚫 No winner, skipping animation');\n      setShowWinnerStyling(false); // Hide winner styling when no winner\n      return;\n    }\n    \n    if (winnerAnimationActive) {\n      console.log('🚫 Animation already active, skipping');\n      return;\n    }\n    \n    if (winnerLocked) {\n      console.log('🚫 Winner already locked, skipping');\n      return;\n    }\n    \n    // Reset winner styling for new animation\n    setShowWinnerStyling(false);\n    console.log('🎰 Starting animation - winner styling hidden until animation completes');\n    \n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n    \n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('🆕 New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n    \n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('🎯 Forcing winner display without animation');\n      \n      // Just show the winner without animation\n      setWinnerLocked(true);\n      setShowWinnerStyling(true); // Show styling immediately if no animation\n      onWinnerLand?.();\n      \n      // NO AUTO-RESET - let game logic handle it\n      console.log('🎯 Winner locked without animation - waiting for new round');\n      \n      return;\n    }\n    \n    console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    \n    animationAttemptsRef.current++;\n    \n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n    \n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    \n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        winnerAnimationActive && !winnerLocked ? 'winner-approaching' : \n        winnerLocked ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={Math.max(players.length, 6)}\n        autoplay={{\n          delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={300}\n        className={`player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Only 2 sets to reduce complexity */}\n        {[...Array(2)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                showWinnerStyling && winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? (\n                      <span className=\"bet-amount\">\n                        {(player.amount || 0).toFixed(2)}\n                        <svg className=\"ton-logo\" width=\"16\" height=\"16\" viewBox=\"0 0 56 56\" fill=\"currentColor\">\n                          <path d=\"M28 56C43.464 56 56 43.464 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56Z\"/>\n                          <path d=\"M37.5603 15.6277H18.4386C17.7996 15.6277 17.6276 16.0988 18.0345 16.4898L27.2064 25.1898C27.6278 25.5948 28.374 25.5948 28.7954 25.1898L37.9673 16.4898C38.3742 16.0988 38.2022 15.6277 37.5603 15.6277Z\" fill=\"white\"/>\n                          <path d=\"M15.875 19.25H40.125V22.75H15.875V19.25Z\" fill=\"white\"/>\n                          <path d=\"M21 26.25H35V40.25H21V26.25Z\" fill=\"white\"/>\n                        </svg>\n                      </span>\n                    ) : (\n                      <span className=\"bet-amount\">\n                        0.00\n                        <svg className=\"ton-logo\" width=\"16\" height=\"16\" viewBox=\"0 0 56 56\" fill=\"currentColor\">\n                          <path d=\"M28 56C43.464 56 56 43.464 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56Z\"/>\n                          <path d=\"M37.5603 15.6277H18.4386C17.7996 15.6277 17.6276 16.0988 18.0345 16.4898L27.2064 25.1898C27.6278 25.5948 28.374 25.5948 28.7954 25.1898L37.9673 16.4898C38.3742 16.0988 38.2022 15.6277 37.5603 15.6277Z\" fill=\"white\"/>\n                          <path d=\"M15.875 19.25H40.125V22.75H15.875V19.25Z\" fill=\"white\"/>\n                          <path d=\"M21 26.25H35V40.25H21V26.25Z\" fill=\"white\"/>\n                        </svg>\n                      </span>\n                    )}\n                  </div>\n                  {showWinnerStyling && winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      <span className=\"prize-amount\">\n                        Won {parseFloat(winner.prize || 0).toFixed(3)}\n                        <svg className=\"ton-logo\" width=\"16\" height=\"16\" viewBox=\"0 0 56 56\" fill=\"currentColor\">\n                          <path d=\"M28 56C43.464 56 56 43.464 56 28C56 12.536 43.464 0 28 0C12.536 0 0 12.536 0 28C0 43.464 12.536 56 28 56Z\"/>\n                          <path d=\"M37.5603 15.6277H18.4386C17.7996 15.6277 17.6276 16.0988 18.0345 16.4898L27.2064 25.1898C27.6278 25.5948 28.374 25.5948 28.7954 25.1898L37.9673 16.4898C38.3742 16.0988 38.2022 15.6277 37.5603 15.6277Z\" fill=\"white\"/>\n                          <path d=\"M15.875 19.25H40.125V22.75H15.875V19.25Z\" fill=\"white\"/>\n                          <path d=\"M21 26.25H35V40.25H21V26.25Z\" fill=\"white\"/>\n                        </svg>\n                      </span>\n                    </div>\n                  )}\n                </div>\n                {showWinnerStyling && winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}