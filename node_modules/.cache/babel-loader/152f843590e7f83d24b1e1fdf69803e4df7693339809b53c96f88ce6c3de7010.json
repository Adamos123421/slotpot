{"ast":null,"code":"import apiService from './apiService';\nclass UserService {\n  constructor() {\n    this.registeredUsers = new Set(); // Track which addresses we've already registered\n  }\n\n  // Register user with backend when they connect wallet\n  async registerUser(address, userData, referralCode) {\n    try {\n      if (!address) {\n        console.error('‚ùå Cannot register user: no address provided');\n        return false;\n      }\n\n      // Don't register the same user multiple times in a session\n      if (this.registeredUsers.has(address)) {\n        console.log('üë§ User already registered in this session:', address.slice(0, 8) + '...');\n        return true;\n      }\n      console.log('üë§ Registering user with backend:', userData);\n      const response = await apiService.post('/user/register', {\n        address: address,\n        username: userData.username || userData.displayName || userData.shortName,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        telegramId: userData.id,\n        referrer: referralCode || userData.referrer\n      });\n      if (response.success) {\n        this.registeredUsers.add(address);\n        console.log('‚úÖ User registered successfully:', response.user.username);\n        return response.user;\n      } else {\n        console.error('‚ùå Failed to register user:', response.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('‚ùå Error registering user:', error);\n      return false;\n    }\n  }\n\n  // Update username for an address\n  async updateUsername(address, username) {\n    try {\n      if (!address || !username) {\n        console.error('‚ùå Cannot update username: missing address or username');\n        return false;\n      }\n      console.log('üë§ Updating username for:', address.slice(0, 8) + '...', '‚Üí', username);\n      const response = await apiService.post('/user/update-username', {\n        address: address,\n        username: username\n      });\n      if (response.success) {\n        console.log('‚úÖ Username updated successfully:', response.user.username);\n        return response.user;\n      } else {\n        console.error('‚ùå Failed to update username:', response.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('‚ùå Error updating username:', error);\n      return false;\n    }\n  }\n\n  // Get user info from backend\n  async getUserInfo(address) {\n    try {\n      if (!address) return null;\n      const response = await apiService.get(`/user/${address}`);\n      return response;\n    } catch (error) {\n      console.error('‚ùå Error getting user info:', error);\n      return null;\n    }\n  }\n\n  // Clear registration cache (for testing)\n  clearCache() {\n    this.registeredUsers.clear();\n    console.log('üóëÔ∏è User registration cache cleared');\n  }\n\n  // Check if user is registered in this session\n  isRegisteredInSession(address) {\n    return this.registeredUsers.has(address);\n  }\n}\n\n// Create singleton instance\nconst userService = new UserService();\nexport default userService;","map":{"version":3,"names":["apiService","UserService","constructor","registeredUsers","Set","registerUser","address","userData","referralCode","console","error","has","log","slice","response","post","username","displayName","shortName","firstName","lastName","telegramId","id","referrer","success","add","user","updateUsername","getUserInfo","get","clearCache","clear","isRegisteredInSession","userService"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/userService.js"],"sourcesContent":["import apiService from './apiService';\r\n\r\nclass UserService {\r\n  constructor() {\r\n    this.registeredUsers = new Set(); // Track which addresses we've already registered\r\n  }\r\n\r\n  // Register user with backend when they connect wallet\r\n  async registerUser(address, userData, referralCode) {\r\n    try {\r\n      if (!address) {\r\n        console.error('‚ùå Cannot register user: no address provided');\r\n        return false;\r\n      }\r\n\r\n      // Don't register the same user multiple times in a session\r\n      if (this.registeredUsers.has(address)) {\r\n        console.log('üë§ User already registered in this session:', address.slice(0, 8) + '...');\r\n        return true;\r\n      }\r\n\r\n      console.log('üë§ Registering user with backend:', userData);\r\n\r\n      const response = await apiService.post('/user/register', {\r\n        address: address,\r\n        username: userData.username || userData.displayName || userData.shortName,\r\n        firstName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        telegramId: userData.id,\r\n        referrer: referralCode || userData.referrer\r\n      });\r\n\r\n      if (response.success) {\r\n        this.registeredUsers.add(address);\r\n        console.log('‚úÖ User registered successfully:', response.user.username);\r\n        return response.user;\r\n      } else {\r\n        console.error('‚ùå Failed to register user:', response.error);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error registering user:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Update username for an address\r\n  async updateUsername(address, username) {\r\n    try {\r\n      if (!address || !username) {\r\n        console.error('‚ùå Cannot update username: missing address or username');\r\n        return false;\r\n      }\r\n\r\n      console.log('üë§ Updating username for:', address.slice(0, 8) + '...', '‚Üí', username);\r\n\r\n      const response = await apiService.post('/user/update-username', {\r\n        address: address,\r\n        username: username\r\n      });\r\n\r\n      if (response.success) {\r\n        console.log('‚úÖ Username updated successfully:', response.user.username);\r\n        return response.user;\r\n      } else {\r\n        console.error('‚ùå Failed to update username:', response.error);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error updating username:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get user info from backend\r\n  async getUserInfo(address) {\r\n    try {\r\n      if (!address) return null;\r\n\r\n      const response = await apiService.get(`/user/${address}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå Error getting user info:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Clear registration cache (for testing)\r\n  clearCache() {\r\n    this.registeredUsers.clear();\r\n    console.log('üóëÔ∏è User registration cache cleared');\r\n  }\r\n\r\n  // Check if user is registered in this session\r\n  isRegisteredInSession(address) {\r\n    return this.registeredUsers.has(address);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst userService = new UserService();\r\nexport default userService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}