{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nimport { jsx } from \"react/jsx-runtime\";\nimport { createContext, memo, useContext, useCallback, useEffect, useState, useMemo } from \"react\";\nimport { TonConnectUI, TonConnectUIError, toUserFriendlyAddress, CHAIN } from \"@tonconnect/ui\";\nexport * from \"@tonconnect/ui\";\nfunction isClientSide() {\n  return typeof window !== \"undefined\";\n}\nfunction isServerSide() {\n  return !isClientSide();\n}\nconst TonConnectUIContext = createContext(null);\nlet tonConnectUI = null;\nconst TonConnectUIProvider = _a => {\n  var _b = _a,\n    {\n      children\n    } = _b,\n    options = __objRest(_b, [\"children\"]);\n  if (isClientSide() && !tonConnectUI) {\n    tonConnectUI = new TonConnectUI(options);\n  }\n  return /* @__PURE__ */jsx(TonConnectUIContext.Provider, {\n    value: tonConnectUI,\n    children\n  });\n};\nconst TonConnectUIProvider$1 = memo(TonConnectUIProvider);\nclass TonConnectUIReactError extends TonConnectUIError {\n  constructor(...args) {\n    super(...args);\n    Object.setPrototypeOf(this, TonConnectUIReactError.prototype);\n  }\n}\nclass TonConnectProviderNotSetError extends TonConnectUIReactError {\n  constructor(...args) {\n    super(...args);\n    Object.setPrototypeOf(this, TonConnectProviderNotSetError.prototype);\n  }\n}\nfunction checkProvider(provider) {\n  if (!provider) {\n    throw new TonConnectProviderNotSetError(\"You should add <TonConnectUIProvider> on the top of the app to use TonConnect\");\n  }\n  return true;\n}\nfunction useTonConnectUI() {\n  const tonConnectUI2 = useContext(TonConnectUIContext);\n  const setOptions = useCallback(options => {\n    if (tonConnectUI2) {\n      tonConnectUI2.uiOptions = options;\n    }\n  }, [tonConnectUI2]);\n  if (isServerSide()) {\n    return [null, () => {}];\n  }\n  checkProvider(tonConnectUI2);\n  return [tonConnectUI2, setOptions];\n}\nconst buttonRootId = \"ton-connect-button\";\nconst TonConnectButton = ({\n  className,\n  style\n}) => {\n  const [_, setOptions] = useTonConnectUI();\n  useEffect(() => {\n    setOptions({\n      buttonRootId\n    });\n    return () => setOptions({\n      buttonRootId: null\n    });\n  }, [setOptions]);\n  return /* @__PURE__ */jsx(\"div\", {\n    id: buttonRootId,\n    className,\n    style: __spreadValues({\n      width: \"fit-content\"\n    }, style)\n  });\n};\nconst TonConnectButton$1 = memo(TonConnectButton);\nfunction useTonWallet() {\n  const [tonConnectUI2] = useTonConnectUI();\n  const [wallet, setWallet] = useState((tonConnectUI2 == null ? void 0 : tonConnectUI2.wallet) || null);\n  useEffect(() => {\n    if (tonConnectUI2) {\n      setWallet(tonConnectUI2.wallet);\n      return tonConnectUI2.onStatusChange(value => {\n        setWallet(value);\n      });\n    }\n  }, [tonConnectUI2]);\n  return wallet;\n}\nfunction useTonAddress(userFriendly = true) {\n  const wallet = useTonWallet();\n  return useMemo(() => {\n    if (wallet) {\n      return userFriendly ? toUserFriendlyAddress(wallet.account.address, wallet.account.chain === CHAIN.TESTNET) : wallet.account.address;\n    } else {\n      return \"\";\n    }\n  }, [wallet, userFriendly, wallet == null ? void 0 : wallet.account.address, wallet == null ? void 0 : wallet.account.chain]);\n}\nfunction useTonConnectModal() {\n  const [tonConnectUI2] = useTonConnectUI();\n  const [state, setState] = useState((tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.state) || null);\n  useEffect(() => {\n    if (tonConnectUI2) {\n      setState(tonConnectUI2.modal.state);\n      return tonConnectUI2.onModalStateChange(value => {\n        setState(value);\n      });\n    }\n  }, [tonConnectUI2]);\n  return {\n    state,\n    open: () => tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.open(),\n    close: () => tonConnectUI2 == null ? void 0 : tonConnectUI2.modal.close()\n  };\n}\nfunction useIsConnectionRestored() {\n  const [restored, setRestored] = useState(false);\n  const [tonConnectUI2] = useTonConnectUI();\n  useEffect(() => {\n    if (tonConnectUI2) {\n      tonConnectUI2.connectionRestored.then(() => setRestored(true));\n    }\n  }, [tonConnectUI2]);\n  return restored;\n}\nexport { TonConnectButton$1 as TonConnectButton, TonConnectProviderNotSetError, TonConnectUIContext, TonConnectUIProvider$1 as TonConnectUIProvider, TonConnectUIReactError, useIsConnectionRestored, useTonAddress, useTonConnectModal, useTonConnectUI, useTonWallet };","map":{"version":3,"names":["isClientSide","window","isServerSide","TonConnectUIContext","createContext","tonConnectUI","TonConnectUIProvider","_a","_b","children","options","__objRest","TonConnectUI","jsx","Provider","value","TonConnectUIProvider$1","memo","TonConnectUIReactError","TonConnectUIError","constructor","args","Object","setPrototypeOf","prototype","TonConnectProviderNotSetError","checkProvider","provider","useTonConnectUI","tonConnectUI2","useContext","setOptions","useCallback","uiOptions","buttonRootId","TonConnectButton","className","style","_","useEffect","id","__spreadValues","width","TonConnectButton$1","useTonWallet","wallet","setWallet","useState","onStatusChange","useTonAddress","userFriendly","useMemo","toUserFriendlyAddress","account","address","chain","CHAIN","TESTNET","useTonConnectModal","state","setState","modal","onModalStateChange","open","close","useIsConnectionRestored","restored","setRestored","connectionRestored","then"],"sources":["C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\utils\\web.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\components\\TonConnectUIProvider.tsx","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\errors\\ton-connect-ui-react.error.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\errors\\ton-connect-provider-not-set.error.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\utils\\errors.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\hooks\\useTonConnectUI.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\components\\TonConnectButton.tsx","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\hooks\\useTonWallet.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\hooks\\useTonAddress.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\hooks\\useTonConnectModal.ts","C:\\Users\\adams\\Downloads\\GLL\\slotpot\\node_modules\\@tonconnect\\ui-react\\src\\hooks\\useIsConnectionRestored.ts"],"sourcesContent":["export function isClientSide(): boolean {\n    return typeof window !== 'undefined';\n}\n\nexport function isServerSide(): boolean {\n    return !isClientSide();\n}\n","import { createContext, FunctionComponent, memo, ReactNode } from 'react';\nimport {\n    ActionConfiguration,\n    Locales,\n    TonConnectUI,\n    UIPreferences,\n    WalletsListConfiguration\n} from '@tonconnect/ui';\nimport type { ITonConnect, RequiredFeatures } from '@tonconnect/ui';\nimport { isClientSide } from '../utils/web';\n\nexport const TonConnectUIContext = createContext<TonConnectUI | null>(null);\n\nexport type TonConnectUIProviderProps = {\n    children: ReactNode;\n} & Partial<TonConnectUIProviderPropsBase> &\n    Partial<TonConnectUIProviderPropsWithManifest | TonConnectUIProviderPropsWithConnector>;\n\nexport interface TonConnectUIProviderPropsWithManifest {\n    /**\n     * Url to the [manifest]{@link https://github.com/ton-connect/docs/blob/main/requests-responses.md#app-manifest} with the Dapp metadata that will be displayed in the user's wallet.\n     * If not passed, manifest from `${window.location.origin}/tonconnect-manifest.json` will be taken.\n     */\n    manifestUrl: string;\n}\n\nexport interface TonConnectUIProviderPropsWithConnector {\n    /**\n     * TonConnect instance. Can be helpful if you use custom ITonConnect implementation, or use both of @tonconnect/sdk and @tonconnect/ui in your app.\n     */\n    connector: ITonConnect;\n}\n\nexport interface TonConnectUIProviderPropsBase {\n    /**\n     * Try to restore existing session and reconnect to the corresponding wallet.\n     * @default true.\n     */\n    restoreConnection: boolean;\n\n    /**\n     * Language for the phrases it the UI elements.\n     * @default system\n     */\n    language: Locales;\n\n    /**\n     * HTML element id to attach the modal window element. If not passed, `div#tc-widget-root` in the end of the <body> will be added and used.\n     * @default `div#tc-widget-root`.\n     */\n    widgetRootId: string;\n\n    /**\n     * UI elements configuration.\n     */\n    uiPreferences?: UIPreferences;\n\n    /**\n     * Configuration for the wallets list in the connect wallet modal.\n     */\n    walletsListConfiguration?: WalletsListConfiguration;\n\n    /**\n     * Required features for wallets to be displayed in the connect wallet modal.\n     */\n    walletsRequiredFeatures?: RequiredFeatures;\n\n    /**\n     * Configuration for action-period (e.g. sendTransaction) UI elements: modals and notifications and wallet behaviour (return strategy).\n     */\n    actionsConfiguration?: ActionConfiguration;\n\n    /**\n     * Specifies whether the Android back button should be used to close modals and notifications on Android devices.\n     * @default true\n     */\n    enableAndroidBackHandler?: boolean;\n}\n\nlet tonConnectUI: TonConnectUI | null = null;\n\n/**\n * Add TonConnectUIProvider to the root of the app. You can specify UI options using props.\n * All TonConnect UI hooks calls and `<TonConnectButton />` component must be placed inside `<TonConnectUIProvider>`.\n * @param children JSX to insert.\n * @param [options] additional options.\n * @constructor\n */\nconst TonConnectUIProvider: FunctionComponent<TonConnectUIProviderProps> = ({\n    children,\n    ...options\n}) => {\n    if (isClientSide() && !tonConnectUI) {\n        tonConnectUI = new TonConnectUI(options);\n    }\n\n    return (\n        <TonConnectUIContext.Provider value={tonConnectUI}>{children}</TonConnectUIContext.Provider>\n    );\n};\n\nexport default memo(TonConnectUIProvider);\n","import { TonConnectUIError } from '@tonconnect/ui';\n\n/**\n * Base class for TonConnectUIReact errors. You can check if the error was triggered by the @tonconnect/ui-react using `err instanceof TonConnectUIReactError`.\n */\nexport class TonConnectUIReactError extends TonConnectUIError {\n    constructor(...args: ConstructorParameters<typeof Error>) {\n        super(...args);\n\n        Object.setPrototypeOf(this, TonConnectUIReactError.prototype);\n    }\n}\n","import { TonConnectUIReactError } from './ton-connect-ui-react.error';\n\n/**\n * Thrown when either <TonConnectProvider> not added to the top of the tags tree,\n * either there is an attempt using TonConnect UI hook or <TonConnectButton> inside <TonConnectProvider>\n */\nexport class TonConnectProviderNotSetError extends TonConnectUIReactError {\n    constructor(...args: ConstructorParameters<typeof Error>) {\n        super(...args);\n\n        Object.setPrototypeOf(this, TonConnectProviderNotSetError.prototype);\n    }\n}\n","import { TonConnectUI } from '@tonconnect/ui';\nimport { TonConnectProviderNotSetError } from '../errors/ton-connect-provider-not-set.error';\n\nexport function checkProvider(provider: TonConnectUI | null): provider is TonConnectUI {\n    if (!provider) {\n        throw new TonConnectProviderNotSetError(\n            'You should add <TonConnectUIProvider> on the top of the app to use TonConnect'\n        );\n    }\n\n    return true;\n}\n","import { useCallback, useContext } from 'react';\nimport { TonConnectUIContext } from '../components/TonConnectUIProvider';\nimport { TonConnectUI, TonConnectUiOptions } from '@tonconnect/ui';\nimport { checkProvider } from '../utils/errors';\nimport { isServerSide } from '../utils/web';\n\n/**\n * Use it to get access to the `TonConnectUI` instance and UI options updating function.\n */\nexport function useTonConnectUI(): [TonConnectUI, (options: TonConnectUiOptions) => void] {\n    const tonConnectUI = useContext(TonConnectUIContext);\n    const setOptions = useCallback(\n        (options: TonConnectUiOptions) => {\n            if (tonConnectUI) {\n                tonConnectUI!.uiOptions = options;\n            }\n        },\n        [tonConnectUI]\n    );\n\n    if (isServerSide()) {\n        return [null as unknown as TonConnectUI, () => {}];\n    }\n\n    checkProvider(tonConnectUI);\n    return [tonConnectUI!, setOptions];\n}\n","import { CSSProperties, FunctionComponent, memo, useEffect } from 'react';\nimport { useTonConnectUI } from '../hooks/useTonConnectUI';\n\nconst buttonRootId = 'ton-connect-button';\n\nexport interface TonConnectButtonProps {\n    className?: string;\n\n    style?: CSSProperties;\n}\n\n/**\n * TonConnect Button is universal UI component for initializing connection. After wallet is connected it transforms to a wallet menu.\n * It is recommended to place it in the top right corner of your app.\n * @param [className] css class to add to the button container.\n * @param [style] style to add to the button container.\n * @constructor\n */\nconst TonConnectButton: FunctionComponent<TonConnectButtonProps> = ({ className, style }) => {\n    const [_, setOptions] = useTonConnectUI();\n\n    useEffect(() => {\n        setOptions({ buttonRootId });\n        return () => setOptions({ buttonRootId: null });\n    }, [setOptions]);\n\n    return (\n        <div\n            id={buttonRootId}\n            className={className}\n            style={{ width: 'fit-content', ...style }}\n        ></div>\n    );\n};\n\nexport default memo(TonConnectButton);\n","import { useEffect, useState } from 'react';\nimport { ConnectedWallet, Wallet, WalletInfoWithOpenMethod } from '@tonconnect/ui';\nimport { useTonConnectUI } from './useTonConnectUI';\n\n/**\n * Use it to get user's current ton wallet. If wallet is not connected hook will return null.\n */\nexport function useTonWallet(): Wallet | (Wallet & WalletInfoWithOpenMethod) | null {\n    const [tonConnectUI] = useTonConnectUI();\n    const [wallet, setWallet] = useState<Wallet | (Wallet & WalletInfoWithOpenMethod) | null>(\n        tonConnectUI?.wallet || null\n    );\n\n    useEffect(() => {\n        if (tonConnectUI) {\n            setWallet(tonConnectUI.wallet);\n            return tonConnectUI.onStatusChange((value: ConnectedWallet | null) => {\n                setWallet(value);\n            });\n        }\n    }, [tonConnectUI]);\n\n    return wallet;\n}\n","import { CHAIN, toUserFriendlyAddress } from '@tonconnect/ui';\nimport { useTonWallet } from './useTonWallet';\nimport { useMemo } from 'react';\n\n/**\n * Use it to get user's current ton wallet address. If wallet is not connected hook will return empty string.\n * @param [userFriendly=true] allows to choose format of the address.\n */\nexport function useTonAddress(userFriendly = true): string {\n    const wallet = useTonWallet();\n    return useMemo(() => {\n        if (wallet) {\n            return userFriendly\n                ? toUserFriendlyAddress(\n                      wallet.account.address,\n                      wallet.account.chain === CHAIN.TESTNET\n                  )\n                : wallet.account.address;\n        } else {\n            return '';\n        }\n    }, [wallet, userFriendly, wallet?.account.address, wallet?.account.chain]);\n}\n","import { WalletsModal, WalletsModalState } from '@tonconnect/ui';\nimport { useTonConnectUI } from './useTonConnectUI';\nimport { useEffect, useState } from 'react';\n\n/**\n * Use it to get access to the open/close modal functions.\n */\nexport function useTonConnectModal(): Omit<WalletsModal, 'onStateChange'> {\n    const [tonConnectUI] = useTonConnectUI();\n    const [state, setState] = useState(tonConnectUI?.modal.state || null);\n\n    useEffect(() => {\n        if (tonConnectUI) {\n            setState(tonConnectUI.modal.state);\n            return tonConnectUI.onModalStateChange((value: WalletsModalState) => {\n                setState(value);\n            });\n        }\n    }, [tonConnectUI]);\n\n    return {\n        state: state,\n        open: () => tonConnectUI?.modal.open(),\n        close: () => tonConnectUI?.modal.close()\n    };\n}\n","import { useEffect, useState } from 'react';\nimport { useTonConnectUI } from './useTonConnectUI';\n\n/**\n * Indicates current status of the connection restoring process.\n */\nexport function useIsConnectionRestored(): boolean {\n    const [restored, setRestored] = useState(false);\n    const [tonConnectUI] = useTonConnectUI();\n\n    useEffect(() => {\n        if (tonConnectUI) {\n            tonConnectUI.connectionRestored.then(() => setRestored(true));\n        }\n    }, [tonConnectUI]);\n\n    return restored;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}