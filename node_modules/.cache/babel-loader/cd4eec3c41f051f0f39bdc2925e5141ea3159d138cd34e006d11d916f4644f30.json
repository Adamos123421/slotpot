{"ast":null,"code":"import _objectSpread from\"C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef,useCallback}from'react';import{TonConnectUIProvider}from'@tonconnect/ui-react';import Chat from'./components/Chat';import GameArea from'./components/GameArea';import MobileChat from'./components/MobileChat';import WalletConnection from'./components/WalletConnection';import WinnerBroadcast from'./components/WinnerBroadcast';import useTelegramWebApp from'./hooks/useTelegramWebApp';import useJackpotContract from'./hooks/useJackpotContract';import socketService from'./services/socketService';import winnerCoordinator from'./services/winnerCoordinator';import{uiOptions}from'./config/tonconnect';import{MessageCircle,Trophy,Users,DollarSign}from'lucide-react';import'./App.css';import'./components/Header.css';// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const manifestUrl=\"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";function AppContent(){var _contractState$timer2;// Local UI state\nconst[currentRound,setCurrentRound]=useState(53408);const[timeRemaining,setTimeRemaining]=useState(30);const[activeTab,setActiveTab]=useState('jackpot');const[betAmount,setBetAmount]=useState(0.11);const[showWinnerAnnouncement,setShowWinnerAnnouncement]=useState(false);// Winner state management (moved from GameArea.js)\nconst[waitingForWinner,setWaitingForWinner]=useState(false);const[contractWinner,setContractWinner]=useState(null);const[postWinnerLoading,setPostWinnerLoading]=useState(false);const[,setIsAnyWinnerDisplayActive]=useState(false);// Bettors state (managed centrally to avoid duplicates)\nconst[gameBettors,setGameBettors]=useState([]);// Refs to avoid stale closures in socket handlers\nconst gameBettorsRef=useRef([]);const contractWinnerRef=useRef(null);const showWinnerAnnouncementRef=useRef(false);const lastWinnerTimestampRef=useRef(null);// Keep refs in sync with state\nuseEffect(()=>{gameBettorsRef.current=gameBettors;},[gameBettors]);useEffect(()=>{contractWinnerRef.current=contractWinner;},[contractWinner]);useEffect(()=>{showWinnerAnnouncementRef.current=showWinnerAnnouncement;},[showWinnerAnnouncement]);// Centralized winner announcement manager\nconst showWinnerAnnouncements=useCallback(function(winnerData){let source=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'unknown';const winnerTimestamp=winnerData.timestamp;// Use coordinator to check if should block\nif(winnerCoordinator.shouldBlock(winnerTimestamp)){console.log(\"\\uD83D\\uDD04 Winner announcement blocked by coordinator (\".concat(source,\")\"));return false;}console.log(\"\\uD83C\\uDF89 Showing winner announcements from \".concat(source,\":\"),winnerData);// Set coordination flag via coordinator\nwinnerCoordinator.setActive(true,winnerTimestamp);setIsAnyWinnerDisplayActive(true);lastWinnerTimestampRef.current=winnerTimestamp;// Show App.js winner notification\nsetContractWinner(winnerData);setShowWinnerAnnouncement(true);setWaitingForWinner(false);// Auto-clear everything after 6 seconds\nsetTimeout(()=>{setShowWinnerAnnouncement(false);setContractWinner(null);setPostWinnerLoading(false);setIsAnyWinnerDisplayActive(false);winnerCoordinator.setActive(false);},6000);return true;},[]);// Telegram integration\nconst{user,hapticFeedback,showAlert,hasRealUserData}=useTelegramWebApp();// Smart contract integration\nconst{contractState,userStats,adminInfo,isLoadingContract,isPlacingBet,placeBet,isConnected,address}=useJackpotContract();// Use real contract data or fallback to simulated data\nconst jackpotValue=contractState.totalJackpot;const isLive=contractState.isActive;const userWinChance=parseFloat(userStats.winChancePercentage)||0;const userBetTotal=userStats.betAmount||0;// Use automation timer or fallback to UI timer\nuseEffect(()=>{var _contractState$timer;// Always sync with backend timer when it changes\nif(((_contractState$timer=contractState.timer)===null||_contractState$timer===void 0?void 0:_contractState$timer.timeRemaining)!==undefined){setTimeRemaining(contractState.timer.timeRemaining);}else{setTimeRemaining(30);}},[(_contractState$timer2=contractState.timer)===null||_contractState$timer2===void 0?void 0:_contractState$timer2.timeRemaining]);// Local countdown timer (runs between backend updates)\nconst shouldRunCountdown=isLive&&timeRemaining>0;// Extract complex expression\nuseEffect(()=>{if(!shouldRunCountdown)return;const countdown=setInterval(()=>{setTimeRemaining(prev=>{const newTime=Math.max(0,prev-1);// If we reach 0, don't reset - let backend handle the transition\nif(newTime===0){console.log('⏰ Local timer reached 0, waiting for backend...');}return newTime;});},1000);return()=>clearInterval(countdown);},[shouldRunCountdown,timeRemaining]);// Use extracted variable and add missing dependency\n// Socket integration for immediate synchronization - SINGLE CONNECTION POINT\nuseEffect(()=>{console.log('🔌 App.js: Establishing single socket connection for entire app...');socketService.connect();// Listen for timer updates from socket\nsocketService.on('timer',timerData=>{console.log('⏰ App: Socket timer update:',timerData);// Only update timeRemaining if it's significantly different (>2 seconds) or new round\nsetTimeRemaining(prev=>{const timeDiff=Math.abs(prev-timerData.timeRemaining);const isNewRound=timerData.roundNumber!==currentRound;// Sync if: new round, big difference (>2s), or timer reset (server > client)\nif(isNewRound||timeDiff>2||timerData.timeRemaining>prev){console.log('⏰ Syncing timer:',prev,'→',timerData.timeRemaining,isNewRound?'(new round)':'(significant change)');return timerData.timeRemaining;}// Otherwise keep local countdown running smoothly\nreturn prev;});if(timerData.roundNumber){setCurrentRound(timerData.roundNumber);}// Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n});// Listen for new round events\nsocketService.on('newRound',roundData=>{console.log('🎰 App: New round detected via socket:',roundData);setTimeRemaining(roundData.timeRemaining);setCurrentRound(roundData.roundNumber);setIsAnyWinnerDisplayActive(false);winnerCoordinator.reset();lastWinnerTimestampRef.current=null;// Clear duplicate protection for new round\n});// Listen for game state updates\nsocketService.on('gameState',gameState=>{console.log('🎮 App: Game state update:',gameState);if(gameState.timeRemaining!==undefined){setTimeRemaining(gameState.timeRemaining);}if(gameState.currentRound){// Extract roundNumber if currentRound is an object, otherwise use the value directly\nconst roundNumber=typeof gameState.currentRound==='object'&&gameState.currentRound.roundNumber?gameState.currentRound.roundNumber:gameState.currentRound;setCurrentRound(roundNumber);}// Handle winner-related states\nif(gameState.isWaitingForWinner!==undefined){setWaitingForWinner(gameState.isWaitingForWinner);}// Update bettors data centrally (avoids duplicate processing)\nif(gameState.bettors&&Array.isArray(gameState.bettors)){// Only log if bettors count changed to reduce spam\nif(gameState.bettors.length!==gameBettorsRef.current.length){console.log('🎮 App: Updating bettors from gameState:',gameState.bettors.length,'bettors');}setGameBettors(gameState.bettors);}// Check for winner announcement in game state (prevent duplicates with stronger protection)\nif(gameState.winnerAnnouncement){showWinnerAnnouncements(gameState.winnerAnnouncement,'gameState');}});// Listen for comprehensive game data updates\nsocketService.on('fullGameUpdate',gameData=>{console.log('🎮 App: Full game update:',gameData);// These updates will trigger re-renders via useJackpotContract hook\n// The hook will detect the changes and update accordingly\n});// Listen for bettors updates\nsocketService.on('bettorsUpdate',data=>{console.log('💰 App: Bettors update:',data);// Force a refresh of contract state to sync with socket data\n// This ensures jackpot value and user stats stay in sync\n});// Listen for waiting for winner events\nsocketService.on('waitingForWinner',isWaiting=>{console.log('🎯 App: Waiting for winner state changed:',isWaiting);setWaitingForWinner(isWaiting);});// Listen for winner announcements (primary)\nsocketService.on('winner',winnerData=>{console.log('🏆 App: Winner announced:',winnerData);setWaitingForWinner(false);setPostWinnerLoading(true);// Use centralized manager\nshowWinnerAnnouncements(winnerData,'winner event');});// Listen for direct winner announcements (fallback/reliable delivery)\nsocketService.on('winnerAnnouncement',winnerData=>{console.log('🎯 App: Direct winner announcement:',winnerData);setWaitingForWinner(false);// Use centralized manager\nshowWinnerAnnouncements(winnerData,'direct announcement');});// Listen for round resets\nsocketService.on('roundReset',()=>{console.log('🔄 App: Round reset');setWaitingForWinner(false);setPostWinnerLoading(false);setShowWinnerAnnouncement(false);setContractWinner(null);setIsAnyWinnerDisplayActive(false);winnerCoordinator.reset();lastWinnerTimestampRef.current=null;// Clear duplicate protection for new round\n});return()=>{console.log('🔌 App.js: Cleaning up socket listeners...');socketService.off('timer');socketService.off('newRound');socketService.off('gameState');socketService.off('fullGameUpdate');socketService.off('bettorsUpdate');socketService.off('waitingForWinner');socketService.off('winner');socketService.off('winnerAnnouncement');socketService.off('roundReset');// Disconnect when app unmounts to prevent memory leaks\nsocketService.disconnect();};},[currentRound,showWinnerAnnouncements]);// Added missing dependencies\nconst handleBetChange=e=>{const value=parseFloat(e.target.value)||0;setBetAmount(Math.max(0,Math.min(value,10)));// Min 0, Max 10\n};const handleTabChange=tab=>{hapticFeedback('light');setActiveTab(tab);};// Enhanced bet placement with real smart contract\nconst handlePlaceBet=async()=>{console.log(\"\\uD83D\\uDD25 BET BUTTON CLICKED - Amount: \".concat(betAmount,\" TON\"));if(betAmount<=0){showAlert('Please enter a valid bet amount');return;}if(!isConnected){showAlert('Please connect your wallet first');return;}if(!contractState.isActive){showAlert('Jackpot is not currently active\\n\\n🤖 Automated system will start a new round soon...');return;}try{console.log(\"\\uD83D\\uDE80 Starting bet placement process...\");hapticFeedback('medium');// This will call the contract with opcode 0x03\nconst result=await placeBet(betAmount);if(result.success){hapticFeedback('success');showAlert(\"\\u2705 Bet placed successfully!\\n\".concat(betAmount,\" TON in round #\").concat(currentRound,\"\\nTransaction: \").concat(result.txHash.slice(0,8),\"...\"));console.log('🎉 Bet placement completed:',result);}}catch(error){hapticFeedback('error');showAlert(\"\\u274C Bet failed: \".concat(error.message));console.error('💥 Bet error:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"header\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"header-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-left\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"logo\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"logo-icon\",children:/*#__PURE__*/_jsx(\"div\",{className:\"logo-circle\"})}),/*#__PURE__*/_jsx(\"span\",{className:\"logo-text\",children:\"SLOTPOT\"})]}),/*#__PURE__*/_jsxs(\"nav\",{className:\"nav-tabs\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"nav-tab active\",children:[/*#__PURE__*/_jsx(Trophy,{size:20}),/*#__PURE__*/_jsx(\"span\",{children:\"Jackpot\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"nav-tab\",children:[/*#__PURE__*/_jsx(DollarSign,{size:20}),/*#__PURE__*/_jsx(\"span\",{children:\"Coinflip\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"nav-tab\",children:[/*#__PURE__*/_jsx(Users,{size:20}),/*#__PURE__*/_jsx(\"span\",{children:\"Affiliates\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-right\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"user-info\",children:[user&&/*#__PURE__*/_jsxs(\"span\",{className:\"user-greeting\",children:[hasRealUserData?'👋':'🤖',\" \",user.displayName]}),isConnected&&/*#__PURE__*/_jsx(\"div\",{className:\"wallet-info\",children:/*#__PURE__*/_jsx(\"span\",{className:\"wallet-address\",children:address})})]}),/*#__PURE__*/_jsx(WalletConnection,{})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-tab-nav\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"mobile-tab \".concat(activeTab==='jackpot'?'active':''),onClick:()=>handleTabChange('jackpot'),children:[/*#__PURE__*/_jsx(Trophy,{size:16}),\"Jackpot\"]}),/*#__PURE__*/_jsxs(\"button\",{className:\"mobile-tab \".concat(activeTab==='chat'?'active':''),onClick:()=>handleTabChange('chat'),children:[/*#__PURE__*/_jsx(MessageCircle,{size:16}),\"Chat\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mobile-content-section \".concat(activeTab==='jackpot'?'active':''),children:/*#__PURE__*/_jsx(\"div\",{className:\"main-content\",children:/*#__PURE__*/_jsx(GameArea,{jackpotValue:jackpotValue,currentRound:currentRound,timeRemaining:timeRemaining,isLive:isLive,showWinnerAnnouncement:showWinnerAnnouncement,betAmount:betAmount,onBetChange:handleBetChange,onPlaceBet:handlePlaceBet,isConnected:isConnected,isLoading:isPlacingBet,userWinChance:userWinChance,userBetTotal:userBetTotal,contractState:_objectSpread(_objectSpread({},contractState),{},{userAddress:address// Add user address for bet tracking\n}),isLoadingContract:isLoadingContract,adminInfo:adminInfo,currentBettors:gameBettors// Winner state props (moved from GameArea internal state)\n,waitingForWinner:waitingForWinner,contractWinner:contractWinner,postWinnerLoading:postWinnerLoading})})}),/*#__PURE__*/_jsx(\"div\",{className:\"mobile-content-section \".concat(activeTab==='chat'?'active':''),children:/*#__PURE__*/_jsx(\"div\",{className:\"mobile-chat-section\",children:/*#__PURE__*/_jsx(MobileChat,{})})}),/*#__PURE__*/_jsx(\"div\",{className:\"sidebar-left\",children:/*#__PURE__*/_jsx(Chat,{})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mobile-footer\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-footer-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"mobile-stat-value\",children:contractState.isActive!==false?contractState.betCount||0:0}),/*#__PURE__*/_jsx(\"div\",{className:\"mobile-stat-label\",children:\"Players\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-stat\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-stat-value\",children:[\"#\",currentRound]}),/*#__PURE__*/_jsx(\"div\",{className:\"mobile-stat-label\",children:\"Round\"})]}),isConnected&&contractState.isActive!==false&&userBetTotal>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-stat\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mobile-stat-value\",children:[userWinChance.toFixed(1),\"%\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"mobile-stat-label\",children:\"Win Chance\"})]})]}),/*#__PURE__*/_jsxs(\"button\",{className:\"mobile-games-btn\",children:[/*#__PURE__*/_jsx(Users,{size:14}),\"Games\"]})]})}),isLoadingContract&&/*#__PURE__*/_jsxs(\"div\",{className:\"loading-overlay\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\",children:\"\\uD83D\\uDD04\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Loading contract data...\"})]}),/*#__PURE__*/_jsx(WinnerBroadcast,{socketService:socketService})]});}// Main App component with TON Connect Provider\nfunction App(){return/*#__PURE__*/_jsx(TonConnectUIProvider,{manifestUrl:manifestUrl,uiPreferences:uiOptions.uiPreferences,language:uiOptions.language,restoreConnection:uiOptions.restoreConnection,actionsConfiguration:uiOptions.actionsConfiguration,children:/*#__PURE__*/_jsx(AppContent,{})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","TonConnectUIProvider","Chat","GameArea","MobileChat","WalletConnection","WinnerBroadcast","useTelegramWebApp","useJackpotContract","socketService","winnerCoordinator","uiOptions","MessageCircle","Trophy","Users","DollarSign","jsx","_jsx","jsxs","_jsxs","manifestUrl","AppContent","_contractState$timer2","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","gameBettors","setGameBettors","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","current","showWinnerAnnouncements","winnerData","source","arguments","length","undefined","winnerTimestamp","timestamp","shouldBlock","console","log","concat","setActive","setTimeout","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","address","jackpotValue","totalJackpot","isLive","isActive","userWinChance","parseFloat","winChancePercentage","userBetTotal","_contractState$timer","timer","shouldRunCountdown","countdown","setInterval","prev","newTime","Math","max","clearInterval","connect","on","timerData","timeDiff","abs","isNewRound","roundNumber","roundData","reset","gameState","isWaitingForWinner","bettors","Array","isArray","winnerAnnouncement","gameData","data","isWaiting","off","disconnect","handleBetChange","e","value","target","min","handleTabChange","tab","handlePlaceBet","result","success","txHash","slice","error","message","className","children","size","displayName","onClick","onBetChange","onPlaceBet","isLoading","_objectSpread","userAddress","currentBettors","betCount","toFixed","App","uiPreferences","language","restoreConnection","actionsConfiguration"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  \n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { contractWinnerRef.current = contractWinner; }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Use coordinator to check if should block\n    if (winnerCoordinator.shouldBlock(winnerTimestamp)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    \n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    \n    // Set coordination flag via coordinator\n    winnerCoordinator.setActive(true, winnerTimestamp);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Auto-clear everything after 6 seconds\n    setTimeout(() => {\n      setShowWinnerAnnouncement(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.setActive(false);\n    }, 6000);\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  const userWinChance = parseFloat(userStats.winChancePercentage) || 0;\n  const userBetTotal = userStats.betAmount || 0;\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    // Always sync with backend timer when it changes\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  const shouldRunCountdown = isLive && timeRemaining > 0; // Extract complex expression\n  \n  useEffect(() => {\n    if (!shouldRunCountdown) return;\n\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        const newTime = Math.max(0, prev - 1);\n        \n        // If we reach 0, don't reset - let backend handle the transition\n        if (newTime === 0) {\n          console.log('⏰ Local timer reached 0, waiting for backend...');\n        }\n        \n        return newTime;\n      });\n    }, 1000);\n\n    return () => clearInterval(countdown);\n  }, [shouldRunCountdown, timeRemaining]); // Use extracted variable and add missing dependency\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      console.log('⏰ App: Socket timer update:', timerData);\n      \n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - timerData.timeRemaining);\n        const isNewRound = timerData.roundNumber !== currentRound;\n        \n        // Sync if: new round, big difference (>2s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 2 || timerData.timeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', timerData.timeRemaining, isNewRound ? '(new round)' : '(significant change)');\n          return timerData.timeRemaining;\n        }\n        \n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      \n      if (timerData.roundNumber) {\n        setCurrentRound(timerData.roundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      console.log('🎮 App: Game state update:', gameState);\n      if (gameState.timeRemaining !== undefined) {\n        setTimeRemaining(gameState.timeRemaining);\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n        }\n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      console.log('💰 App: Bettors update:', data);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (isWaiting) => {\n      console.log('🎯 App: Waiting for winner state changed:', isWaiting);\n      setWaitingForWinner(isWaiting);\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round resets\n    socketService.on('roundReset', () => {\n      console.log('🔄 App: Round reset');\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n      setShowWinnerAnnouncement(false);\n      setContractWinner(null);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      socketService.off('roundReset');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    const value = parseFloat(e.target.value) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    console.log(`🔥 BET BUTTON CLICKED - Amount: ${betAmount} TON`);\n    \n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first');\n      return;\n    }\n\n    if (!contractState.isActive) {\n      showAlert('Jackpot is not currently active\\n\\n🤖 Automated system will start a new round soon...');\n      return;\n    }\n\n    try {\n      console.log(`🚀 Starting bet placement process...`);\n      hapticFeedback('medium');\n      \n      // This will call the contract with opcode 0x03\n      const result = await placeBet(betAmount);\n      \n      if (result.success) {\n        hapticFeedback('success');\n        showAlert(`✅ Bet placed successfully!\\n${betAmount} TON in round #${currentRound}\\nTransaction: ${result.txHash.slice(0, 8)}...`);\n        console.log('🎉 Bet placement completed:', result);\n      }\n    } catch (error) {\n      hapticFeedback('error');\n      showAlert(`❌ Bet failed: ${error.message}`);\n      console.error('💥 Bet error:', error);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {/* Header */}\n      <header className=\"header\">\n        <div className=\"header-container\">\n          <div className=\"header-left\">\n            <div className=\"logo\">\n              <div className=\"logo-icon\">\n                <div className=\"logo-circle\"></div>\n              </div>\n              <span className=\"logo-text\">SLOTPOT</span>\n            </div>\n            \n            <nav className=\"nav-tabs\">\n              <div className=\"nav-tab active\">\n                <Trophy size={20} />\n                <span>Jackpot</span>\n              </div>\n              <div className=\"nav-tab\">\n                <DollarSign size={20} />\n                <span>Coinflip</span>\n              </div>\n              <div className=\"nav-tab\">\n                <Users size={20} />\n                <span>Affiliates</span>\n              </div>\n            </nav>\n          </div>\n          \n          <div className=\"header-right\">\n            <div className=\"user-info\">\n              {user && (\n                <span className=\"user-greeting\">\n                  {hasRealUserData ? '👋' : '🤖'} {user.displayName}\n                </span>\n              )}\n              {isConnected && (\n                <div className=\"wallet-info\">\n                  <span className=\"wallet-address\">{address}</span>\n                </div>\n              )}\n            </div>\n            <WalletConnection />\n          </div>\n        </div>\n      </header>\n      \n      <div className=\"app-container\">\n        {/* Mobile Tab Navigation */}\n        <div className=\"mobile-tab-nav\">\n          <button \n            className={`mobile-tab ${activeTab === 'jackpot' ? 'active' : ''}`}\n            onClick={() => handleTabChange('jackpot')}\n          >\n            <Trophy size={16} />\n            Jackpot\n          </button>\n          <button \n            className={`mobile-tab ${activeTab === 'chat' ? 'active' : ''}`}\n            onClick={() => handleTabChange('chat')}\n          >\n            <MessageCircle size={16} />\n            Chat\n          </button>\n        </div>\n\n        {/* Content Sections */}\n        <div className={`mobile-content-section ${activeTab === 'jackpot' ? 'active' : ''}`}>\n          <div className=\"main-content\">\n            <GameArea \n              jackpotValue={jackpotValue}\n              currentRound={currentRound}\n              timeRemaining={timeRemaining}\n              isLive={isLive}\n              showWinnerAnnouncement={showWinnerAnnouncement}\n              betAmount={betAmount}\n              onBetChange={handleBetChange}\n              onPlaceBet={handlePlaceBet}\n              isConnected={isConnected}\n              isLoading={isPlacingBet}\n              userWinChance={userWinChance}\n              userBetTotal={userBetTotal}\n              contractState={{\n                ...contractState,\n                userAddress: address // Add user address for bet tracking\n              }}\n              isLoadingContract={isLoadingContract}\n              adminInfo={adminInfo}\n              currentBettors={gameBettors}\n              // Winner state props (moved from GameArea internal state)\n              waitingForWinner={waitingForWinner}\n              contractWinner={contractWinner}\n              postWinnerLoading={postWinnerLoading}\n            />\n          </div>\n        </div>\n\n        <div className={`mobile-content-section ${activeTab === 'chat' ? 'active' : ''}`}>\n          <div className=\"mobile-chat-section\">\n            <MobileChat />\n          </div>\n        </div>\n\n        {/* Hidden desktop sidebars */}\n        <div className=\"sidebar-left\">\n          <Chat />\n        </div>\n      </div>\n\n      {/* Mobile Footer */}\n      <div className=\"mobile-footer\">\n        <div className=\"mobile-footer-content\">\n          <div className=\"mobile-stats\">\n            <div className=\"mobile-stat\">\n              <div className=\"mobile-stat-value\">{contractState.isActive !== false ? (contractState.betCount || 0) : 0}</div>\n              <div className=\"mobile-stat-label\">Players</div>\n            </div>\n            <div className=\"mobile-stat\">\n              <div className=\"mobile-stat-value\">#{currentRound}</div>\n              <div className=\"mobile-stat-label\">Round</div>\n            </div>\n            {isConnected && contractState.isActive !== false && userBetTotal > 0 && (\n              <div className=\"mobile-stat\">\n                <div className=\"mobile-stat-value\">{userWinChance.toFixed(1)}%</div>\n                <div className=\"mobile-stat-label\">Win Chance</div>\n              </div>\n            )}\n          </div>\n          <button className=\"mobile-games-btn\">\n            <Users size={14} />\n            Games\n          </button>\n        </div>\n      </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\">🔄</div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}