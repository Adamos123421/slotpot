{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) return;\n    console.log('🎰 Starting winner animation');\n    console.log('🔍 Winner data:', winner);\n    console.log('🔍 Available players:', players.length);\n\n    // Validate we have players to animate\n    if (!players || players.length === 0) {\n      console.warn('⚠️ No players available for animation');\n      // Skip animation and just lock the winner\n      setWinnerLocked(true);\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n      winnerTimeoutRef.current = setTimeout(() => {\n        resetToIdle();\n      }, 7000);\n      return;\n    }\n    setWinnerAnimationActive(true);\n\n    // Stop current autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // Find the winner slide index BEFORE animating\n    const slides = swiperRef.current.slides;\n    let targetSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Pre-animation search for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the winner slide\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon = playerNameEl.textContent) === null || _playerNameEl$textCon === void 0 ? void 0 : _playerNameEl$textCon.trim();\n      console.log(`🔍 Slide ${i}: found name=\"${playerName}\", element:`, playerNameEl);\n\n      // Check if this is the winner\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        isWinner = playerName === winnerUsername || playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        console.log(`🔍 Username match check: \"${playerName}\" === \"${winnerUsername}\" or \"${winner === null || winner === void 0 ? void 0 : winner.displayName}\" = ${isWinner}`);\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        const addressMatch = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n        console.log(`🔍 Address match check: \"${playerName}\" vs \"${winnerAddress}\" = ${addressMatch}`);\n        isWinner = addressMatch;\n      }\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        const playerMatch = playerName === 'Player';\n        console.log(`🔍 Player fallback match: \"${playerName}\" === \"Player\" = ${playerMatch}`);\n        isWinner = playerMatch;\n      }\n\n      // Also check if this slide has winner class\n      const hasWinnerClass = slide.querySelector('.player-card.winner') !== null;\n      console.log(`🔍 Slide ${i} has winner class: ${hasWinnerClass}`);\n      if (isWinner) {\n        targetSlideIndex = i;\n        console.log('🎯 Found winner at slide index:', i, 'Player name:', playerName);\n        break;\n      }\n    }\n    if (targetSlideIndex === -1) {\n      console.warn('⚠️ Could not find winner slide before animation, using fallback');\n      // Fallback: look for slide with winner class\n      for (let i = 0; i < slides.length; i++) {\n        if (slides[i].querySelector('.player-card.winner')) {\n          targetSlideIndex = i;\n          console.log('🎯 Found winner by class at slide index:', i);\n          break;\n        }\n      }\n    }\n    if (targetSlideIndex === -1) {\n      console.error('❌ Cannot find winner slide, skipping animation');\n      setWinnerLocked(true);\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n      winnerTimeoutRef.current = setTimeout(() => {\n        resetToIdle();\n      }, 7000);\n      return;\n    }\n\n    // Phase 1: Fast spin for 1.5 seconds (reduced time)\n    console.log('⚡ Phase 1: Fast spinning...');\n    let spinSpeed = 20;\n    const fastSpinInterval = setInterval(() => {\n      if (swiperRef.current) {\n        swiperRef.current.slideNext(spinSpeed);\n      }\n    }, spinSpeed);\n\n    // Phase 2: Slow down and position for winner landing\n    setTimeout(() => {\n      clearInterval(fastSpinInterval);\n      console.log('🎯 Phase 2: Positioning for winner landing...');\n\n      // Calculate how many slides to move to get close to winner\n      const currentSlide = swiperRef.current.activeIndex;\n      let slidesToWinner = targetSlideIndex - currentSlide;\n\n      // Handle looping (if winner is behind us, go forward through the loop)\n      if (slidesToWinner < 0) {\n        slidesToWinner += slides.length;\n      }\n\n      // Position just before the winner for dramatic effect\n      const positionSlides = Math.max(0, slidesToWinner - 2);\n      console.log(`🎯 Current slide: ${currentSlide}, Target: ${targetSlideIndex}, Moving ${positionSlides} slides`);\n      if (positionSlides > 0) {\n        // Quick movement to get close to winner\n        let remainingSlides = positionSlides;\n        const quickPositionInterval = setInterval(() => {\n          if (swiperRef.current && remainingSlides > 0) {\n            swiperRef.current.slideNext(100);\n            remainingSlides--;\n          } else {\n            clearInterval(quickPositionInterval);\n\n            // Phase 3: Slow final approach to winner\n            setTimeout(() => {\n              console.log('🏆 Phase 3: Final approach to winner...');\n\n              // Slow slide directly to winner\n              swiperRef.current.slideTo(targetSlideIndex, 1500, false);\n\n              // Lock after animation completes\n              setTimeout(() => {\n                console.log('🎯 Winner locked in position!');\n                if (swiperRef.current) {\n                  swiperRef.current.autoplay.stop();\n                  swiperRef.current.allowSlideNext = false;\n                  swiperRef.current.allowSlidePrev = false;\n\n                  // Force stop transitions\n                  const wrapper = swiperRef.current.wrapperEl;\n                  if (wrapper) {\n                    setTimeout(() => {\n                      wrapper.style.transition = 'none';\n                      const transform = getComputedStyle(wrapper).transform;\n                      wrapper.style.transform = transform;\n                    }, 100);\n                  }\n                }\n                setWinnerLocked(true);\n                onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n                // Show winner for 7 seconds\n                winnerTimeoutRef.current = setTimeout(() => {\n                  resetToIdle();\n                }, 7000);\n              }, 1600); // Wait for slideTo animation to complete\n            }, 300);\n          }\n        }, 100);\n      } else {\n        // Winner is very close, just slide to it slowly\n        console.log('🏆 Winner is close, sliding directly...');\n        swiperRef.current.slideTo(targetSlideIndex, 1500, false);\n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1600);\n      }\n    }, 1500); // Reduced from 2000ms\n  }, [winner, winnerAnimationActive, players, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    console.log('🔒 Locking on winner...');\n\n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Looking for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon2;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon2 = playerNameEl.textContent) === null || _playerNameEl$textCon2 === void 0 ? void 0 : _playerNameEl$textCon2.trim();\n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n\n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n\n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        }\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n      }\n\n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n\n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n\n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n\n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n\n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n\n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    if (swiperRef.current) {\n      // Re-enable swiper\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n\n      // Reset wrapper\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n\n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n\n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    if (winner && !winnerAnimationActive && !winnerLocked) {\n      // Check if this is the same winner we already tried\n      const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n      const lastWinnerKey = lastWinnerRef.current;\n\n      // Reset attempts if this is a new winner\n      if (currentWinnerKey !== lastWinnerKey) {\n        animationAttemptsRef.current = 0;\n        lastWinnerRef.current = currentWinnerKey;\n      }\n\n      // Prevent infinite loops - max 3 attempts\n      if (animationAttemptsRef.current >= 3) {\n        console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n        console.log('🎯 Forcing winner display without animation');\n\n        // Just show the winner without animation\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        return;\n      }\n      console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n      console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/3`);\n      animationAttemptsRef.current++;\n      animateToWinner();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${winnerAnimationActive && !winnerLocked ? 'winner-approaching' : winnerLocked ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: Math.max(players.length, 6),\n      autoplay: {\n        delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: 300,\n      className: `player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(2)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 19\n            }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 17\n          }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 485,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"+lturoi5MGn+/8Zh6H9qMrupE2I=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","winnerAnimationActive","setWinnerAnimationActive","winnerLocked","setWinnerLocked","winnerTimeoutRef","animationAttemptsRef","lastWinnerRef","handleSwiperInit","swiper","current","animateToWinner","console","log","length","warn","setTimeout","resetToIdle","autoplay","stop","slides","targetSlideIndex","winnerUsername","username","displayName","winnerAddress","address","fullAddress","i","_playerNameEl$textCon","slide","playerNameEl","querySelector","playerName","textContent","trim","isWinner","addressMatch","includes","slice","playerMatch","hasWinnerClass","error","spinSpeed","fastSpinInterval","setInterval","slideNext","clearInterval","currentSlide","activeIndex","slidesToWinner","positionSlides","Math","max","remainingSlides","quickPositionInterval","slideTo","allowSlideNext","allowSlidePrev","wrapper","wrapperEl","style","transition","transform","getComputedStyle","lockOnWinner","winnerSlideIndex","closestToCenter","Infinity","containerCenter","el","clientWidth","_playerNameEl$textCon2","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","abs","fallbackIndex","start","clearTimeout","currentWinnerKey","lastWinnerKey","params","delay","disableOnInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","pauseOnMouseEnter","speed","allowTouchMove","onSwiper","Array","map","_","setIndex","player","index","toUpperCase","amount","toFixed","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) return;\n    \n    console.log('🎰 Starting winner animation');\n    console.log('🔍 Winner data:', winner);\n    console.log('🔍 Available players:', players.length);\n    \n    // Validate we have players to animate\n    if (!players || players.length === 0) {\n      console.warn('⚠️ No players available for animation');\n      // Skip animation and just lock the winner\n      setWinnerLocked(true);\n      onWinnerLand?.();\n      \n      winnerTimeoutRef.current = setTimeout(() => {\n        resetToIdle();\n      }, 7000);\n      return;\n    }\n    \n    setWinnerAnimationActive(true);\n    \n    // Stop current autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // Find the winner slide index BEFORE animating\n    const slides = swiperRef.current.slides;\n    let targetSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('🔍 Pre-animation search for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the winner slide\n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`🔍 Slide ${i}: found name=\"${playerName}\", element:`, playerNameEl);\n      \n      // Check if this is the winner\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        isWinner = playerName === winnerUsername || playerName === winner?.displayName;\n        console.log(`🔍 Username match check: \"${playerName}\" === \"${winnerUsername}\" or \"${winner?.displayName}\" = ${isWinner}`);\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        const addressMatch = playerName.includes(winnerAddress.slice(0, 6)) || \n                             winnerAddress.includes(playerName);\n        console.log(`🔍 Address match check: \"${playerName}\" vs \"${winnerAddress}\" = ${addressMatch}`);\n        isWinner = addressMatch;\n      }\n      \n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        const playerMatch = playerName === 'Player';\n        console.log(`🔍 Player fallback match: \"${playerName}\" === \"Player\" = ${playerMatch}`);\n        isWinner = playerMatch;\n      }\n      \n      // Also check if this slide has winner class\n      const hasWinnerClass = slide.querySelector('.player-card.winner') !== null;\n      console.log(`🔍 Slide ${i} has winner class: ${hasWinnerClass}`);\n      \n      if (isWinner) {\n        targetSlideIndex = i;\n        console.log('🎯 Found winner at slide index:', i, 'Player name:', playerName);\n        break;\n      }\n    }\n    \n    if (targetSlideIndex === -1) {\n      console.warn('⚠️ Could not find winner slide before animation, using fallback');\n      // Fallback: look for slide with winner class\n      for (let i = 0; i < slides.length; i++) {\n        if (slides[i].querySelector('.player-card.winner')) {\n          targetSlideIndex = i;\n          console.log('🎯 Found winner by class at slide index:', i);\n          break;\n        }\n      }\n    }\n    \n    if (targetSlideIndex === -1) {\n      console.error('❌ Cannot find winner slide, skipping animation');\n      setWinnerLocked(true);\n      onWinnerLand?.();\n      winnerTimeoutRef.current = setTimeout(() => {\n        resetToIdle();\n      }, 7000);\n      return;\n    }\n    \n    // Phase 1: Fast spin for 1.5 seconds (reduced time)\n    console.log('⚡ Phase 1: Fast spinning...');\n    let spinSpeed = 20;\n    const fastSpinInterval = setInterval(() => {\n      if (swiperRef.current) {\n        swiperRef.current.slideNext(spinSpeed);\n      }\n    }, spinSpeed);\n    \n    // Phase 2: Slow down and position for winner landing\n    setTimeout(() => {\n      clearInterval(fastSpinInterval);\n      console.log('🎯 Phase 2: Positioning for winner landing...');\n      \n      // Calculate how many slides to move to get close to winner\n      const currentSlide = swiperRef.current.activeIndex;\n      let slidesToWinner = targetSlideIndex - currentSlide;\n      \n      // Handle looping (if winner is behind us, go forward through the loop)\n      if (slidesToWinner < 0) {\n        slidesToWinner += slides.length;\n      }\n      \n      // Position just before the winner for dramatic effect\n      const positionSlides = Math.max(0, slidesToWinner - 2);\n      \n      console.log(`🎯 Current slide: ${currentSlide}, Target: ${targetSlideIndex}, Moving ${positionSlides} slides`);\n      \n      if (positionSlides > 0) {\n        // Quick movement to get close to winner\n        let remainingSlides = positionSlides;\n        const quickPositionInterval = setInterval(() => {\n          if (swiperRef.current && remainingSlides > 0) {\n            swiperRef.current.slideNext(100);\n            remainingSlides--;\n          } else {\n            clearInterval(quickPositionInterval);\n            \n            // Phase 3: Slow final approach to winner\n            setTimeout(() => {\n              console.log('🏆 Phase 3: Final approach to winner...');\n              \n              // Slow slide directly to winner\n              swiperRef.current.slideTo(targetSlideIndex, 1500, false);\n              \n              // Lock after animation completes\n              setTimeout(() => {\n                console.log('🎯 Winner locked in position!');\n                \n                if (swiperRef.current) {\n                  swiperRef.current.autoplay.stop();\n                  swiperRef.current.allowSlideNext = false;\n                  swiperRef.current.allowSlidePrev = false;\n                  \n                  // Force stop transitions\n                  const wrapper = swiperRef.current.wrapperEl;\n                  if (wrapper) {\n                    setTimeout(() => {\n                      wrapper.style.transition = 'none';\n                      const transform = getComputedStyle(wrapper).transform;\n                      wrapper.style.transform = transform;\n                    }, 100);\n                  }\n                }\n                \n                setWinnerLocked(true);\n                onWinnerLand?.();\n                \n                // Show winner for 7 seconds\n                winnerTimeoutRef.current = setTimeout(() => {\n                  resetToIdle();\n                }, 7000);\n                \n              }, 1600); // Wait for slideTo animation to complete\n            }, 300);\n          }\n        }, 100);\n      } else {\n        // Winner is very close, just slide to it slowly\n        console.log('🏆 Winner is close, sliding directly...');\n        swiperRef.current.slideTo(targetSlideIndex, 1500, false);\n        \n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand?.();\n          \n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1600);\n      }\n      \n    }, 1500); // Reduced from 2000ms\n    \n  }, [winner, winnerAnimationActive, players, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    \n    console.log('🔒 Locking on winner...');\n    \n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('🔍 Looking for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n      \n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n        \n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner?.displayName);\n        }\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || \n                   winnerAddress.includes(playerName);\n      }\n      \n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      \n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      \n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        \n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        \n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n      \n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n      \n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n        \n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n          \n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        \n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        \n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n      \n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      \n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        \n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand?.();\n          \n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    \n    if (swiperRef.current) {\n      // Re-enable swiper\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      \n      // Reset wrapper\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n      \n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    \n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    \n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    \n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    if (winner && !winnerAnimationActive && !winnerLocked) {\n      // Check if this is the same winner we already tried\n      const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n      const lastWinnerKey = lastWinnerRef.current;\n      \n      // Reset attempts if this is a new winner\n      if (currentWinnerKey !== lastWinnerKey) {\n        animationAttemptsRef.current = 0;\n        lastWinnerRef.current = currentWinnerKey;\n      }\n      \n      // Prevent infinite loops - max 3 attempts\n      if (animationAttemptsRef.current >= 3) {\n        console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n        console.log('🎯 Forcing winner display without animation');\n        \n        // Just show the winner without animation\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        \n        return;\n      }\n      \n      console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n      console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/3`);\n      \n      animationAttemptsRef.current++;\n      animateToWinner();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    \n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        winnerAnimationActive && !winnerLocked ? 'winner-approaching' : \n        winnerLocked ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={Math.max(players.length, 6)}\n        autoplay={{\n          delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={300}\n        className={`player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Only 2 sets to reduce complexity */}\n        {[...Array(2)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}