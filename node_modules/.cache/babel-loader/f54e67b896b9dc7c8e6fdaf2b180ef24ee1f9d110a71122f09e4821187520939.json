{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SmoothWheel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport './SmoothWheel.css';\nimport { TonIcon } from './IconComponents';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SmoothWheel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const wheelRef = useRef(null);\n  const [spinState, setSpinState] = useState('idle'); // idle, spinning, landing, finished\n  const [finalRotation, setFinalRotation] = useState(0);\n  const [winnerIndex, setWinnerIndex] = useState(-1);\n  const animationTimeoutRef = useRef(null);\n\n  // Create an extended array of players for seamless looping\n  const extendedPlayers = React.useMemo(() => {\n    // If no players, create default waiting cards\n    let playersToUse = players;\n    if (!players || players.length === 0) {\n      playersToUse = Array.from({\n        length: 8\n      }, (_, i) => ({\n        id: `waiting-${i}`,\n        username: 'Waiting',\n        isRealPlayer: false,\n        bet: 0\n      }));\n    }\n\n    // Create 5 full sets of players for smooth infinite scroll effect\n    const sets = 5;\n    const extended = [];\n    for (let i = 0; i < sets; i++) {\n      extended.push(...playersToUse);\n    }\n    return extended;\n  }, [players]);\n\n  // Calculate the target position when winner is determined\n  const calculateWinnerPosition = useCallback(() => {\n    if (!winner || !players || players.length === 0) return -1;\n\n    // Find winner in original players array\n    let winnerPos = -1;\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName) || (winner === null || winner === void 0 ? void 0 : winner.name);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n      if (!player || !player.isRealPlayer) continue;\n      const isMatch = player.address === winnerAddress || player.username === winnerUsername || player.displayName === winnerUsername || winnerAddress && player.address === winnerAddress;\n      if (isMatch) {\n        winnerPos = i;\n        console.log('🎯 Found winner in players array at position:', i, 'Player:', player.username || player.displayName);\n        break;\n      }\n    }\n    return winnerPos;\n  }, [winner, players]);\n\n  // Start spinning animation\n  const startSpin = useCallback(() => {\n    if (!wheelRef.current || spinState !== 'idle') return;\n    console.log('🎰 Starting smooth wheel spin...');\n    console.log('🎰 Players data:', players);\n    console.log('🎰 Extended players:', extendedPlayers.length);\n    setSpinState('spinning');\n\n    // Add spinning class for continuous rotation\n    wheelRef.current.classList.add('wheel-spinning');\n  }, [spinState, players, extendedPlayers]);\n\n  // Land on winner with smooth deceleration\n  const landOnWinner = useCallback(() => {\n    if (!wheelRef.current || !winner) return;\n    const targetIndex = calculateWinnerPosition();\n    if (targetIndex === -1) {\n      console.error('❌ Could not find winner position');\n      return;\n    }\n    console.log('🎯 Landing on winner at position:', targetIndex);\n    setWinnerIndex(targetIndex);\n    setSpinState('landing');\n\n    // Remove spinning class\n    wheelRef.current.classList.remove('wheel-spinning');\n\n    // Calculate final rotation to land on winner\n    // Each player card is 120px wide + 8px gap = 128px\n    const cardWidth = 128;\n    const centerOffset = wheelRef.current.offsetWidth / 2 - 60; // Center the winner card\n    const targetPosition = -(targetIndex * cardWidth) + centerOffset;\n\n    // Add multiple full rotations for dramatic effect (3-5 full spins)\n    const fullRotations = 3 + Math.random() * 2; // 3-5 rotations\n    const fullRotationDistance = players.length * cardWidth * fullRotations;\n    const finalPos = targetPosition - fullRotationDistance;\n    setFinalRotation(finalPos);\n\n    // Apply the landing animation\n    wheelRef.current.style.transition = 'transform 3.5s cubic-bezier(0.25, 0.1, 0.25, 1)';\n    wheelRef.current.style.transform = `translateX(${finalPos}px)`;\n\n    // Mark as finished after animation completes\n    animationTimeoutRef.current = setTimeout(() => {\n      setSpinState('finished');\n      wheelRef.current.classList.add('wheel-finished');\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n      console.log('✅ Wheel animation complete! Winner landed.');\n    }, 3500);\n  }, [winner, calculateWinnerPosition, players, onWinnerLand]);\n\n  // Effect to handle spinning state changes\n  useEffect(() => {\n    if (isSpinning && spinState === 'idle') {\n      startSpin();\n    } else if (!isSpinning && spinState === 'spinning' && winner) {\n      // Delay the landing slightly for better UX\n      setTimeout(() => {\n        landOnWinner();\n      }, 1000);\n    }\n  }, [isSpinning, winner, spinState, startSpin, landOnWinner]);\n\n  // Cleanup timeouts\n  useEffect(() => {\n    return () => {\n      if (animationTimeoutRef.current) {\n        clearTimeout(animationTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Reset wheel when new round starts\n  useEffect(() => {\n    if (!isSpinning && !winner && spinState !== 'idle') {\n      console.log('🔄 Resetting wheel for new round');\n      setSpinState('idle');\n      setWinnerIndex(-1);\n      setFinalRotation(0);\n      if (wheelRef.current) {\n        wheelRef.current.classList.remove('wheel-spinning', 'wheel-finished');\n        wheelRef.current.style.transition = 'transform 0.5s ease';\n        wheelRef.current.style.transform = 'translateX(0px)';\n      }\n    }\n  }, [isSpinning, winner, spinState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"smooth-wheel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `wheel-arrow ${spinState === 'finished' ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel-viewport\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: wheelRef,\n        className: `wheel-track ${spinState}`,\n        children: extendedPlayers.map((player, index) => {\n          var _player$username, _player$username$char, _player$displayName, _player$displayName$c, _player$bet;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `wheel-card ${!(player !== null && player !== void 0 && player.isRealPlayer) ? 'waiting' : ''} ${winnerIndex !== -1 && index % players.length === winnerIndex ? 'winner' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wheel-player-avatar\",\n              children: player !== null && player !== void 0 && player.isRealPlayer ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"telegram-avatar\",\n                children: ((_player$username = player.username) === null || _player$username === void 0 ? void 0 : (_player$username$char = _player$username.charAt(0)) === null || _player$username$char === void 0 ? void 0 : _player$username$char.toUpperCase()) || ((_player$displayName = player.displayName) === null || _player$displayName === void 0 ? void 0 : (_player$displayName$c = _player$displayName.charAt(0)) === null || _player$displayName$c === void 0 ? void 0 : _player$displayName$c.toUpperCase()) || '👤'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"waiting-icon\",\n                children: \"\\u2753\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wheel-player-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"wheel-player-name\",\n                children: player !== null && player !== void 0 && player.isRealPlayer ? player.username || player.displayName || 'Player' : 'Waiting'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"wheel-player-bet\",\n                children: player !== null && player !== void 0 && player.isRealPlayer ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(TonIcon, {\n                    className: \"wheel-ton-icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 23\n                  }, this), ((_player$bet = player.bet) === null || _player$bet === void 0 ? void 0 : _player$bet.toFixed(3)) || '0.000']\n                }, void 0, true) : '---'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this), winnerIndex !== -1 && index % players.length === winnerIndex && spinState === 'finished' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-crown\",\n              children: \"\\uD83D\\uDC51\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this)]\n          }, `${index}-${(player === null || player === void 0 ? void 0 : player.address) || index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel-fade-left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel-fade-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(SmoothWheel, \"vDgkP+0EMXc07IATHPEoAW7iLRg=\");\n_c = SmoothWheel;\nexport default SmoothWheel;\nvar _c;\n$RefreshReg$(_c, \"SmoothWheel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","TonIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","SmoothWheel","players","winner","isSpinning","onWinnerLand","_s","wheelRef","spinState","setSpinState","finalRotation","setFinalRotation","winnerIndex","setWinnerIndex","animationTimeoutRef","extendedPlayers","useMemo","playersToUse","length","Array","from","_","i","id","username","isRealPlayer","bet","sets","extended","push","calculateWinnerPosition","winnerPos","winnerUsername","displayName","name","winnerAddress","address","fullAddress","player","isMatch","console","log","startSpin","current","classList","add","landOnWinner","targetIndex","error","remove","cardWidth","centerOffset","offsetWidth","targetPosition","fullRotations","Math","random","fullRotationDistance","finalPos","style","transition","transform","setTimeout","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","_player$username","_player$username$char","_player$displayName","_player$displayName$c","_player$bet","charAt","toUpperCase","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SmoothWheel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport './SmoothWheel.css';\r\nimport { TonIcon } from './IconComponents';\r\n\r\nconst SmoothWheel = ({ \r\n  players, \r\n  winner, \r\n  isSpinning, \r\n  onWinnerLand \r\n}) => {\r\n  const wheelRef = useRef(null);\r\n  const [spinState, setSpinState] = useState('idle'); // idle, spinning, landing, finished\r\n  const [finalRotation, setFinalRotation] = useState(0);\r\n  const [winnerIndex, setWinnerIndex] = useState(-1);\r\n  const animationTimeoutRef = useRef(null);\r\n\r\n  // Create an extended array of players for seamless looping\r\n  const extendedPlayers = React.useMemo(() => {\r\n    // If no players, create default waiting cards\r\n    let playersToUse = players;\r\n    if (!players || players.length === 0) {\r\n      playersToUse = Array.from({ length: 8 }, (_, i) => ({\r\n        id: `waiting-${i}`,\r\n        username: 'Waiting',\r\n        isRealPlayer: false,\r\n        bet: 0\r\n      }));\r\n    }\r\n    \r\n    // Create 5 full sets of players for smooth infinite scroll effect\r\n    const sets = 5;\r\n    const extended = [];\r\n    for (let i = 0; i < sets; i++) {\r\n      extended.push(...playersToUse);\r\n    }\r\n    return extended;\r\n  }, [players]);\r\n\r\n  // Calculate the target position when winner is determined\r\n  const calculateWinnerPosition = useCallback(() => {\r\n    if (!winner || !players || players.length === 0) return -1;\r\n    \r\n    // Find winner in original players array\r\n    let winnerPos = -1;\r\n    const winnerUsername = winner?.username || winner?.displayName || winner?.name;\r\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\r\n    \r\n    for (let i = 0; i < players.length; i++) {\r\n      const player = players[i];\r\n      if (!player || !player.isRealPlayer) continue;\r\n      \r\n      const isMatch = (player.address === winnerAddress) ||\r\n                     (player.username === winnerUsername) ||\r\n                     (player.displayName === winnerUsername) ||\r\n                     (winnerAddress && player.address === winnerAddress);\r\n      \r\n      if (isMatch) {\r\n        winnerPos = i;\r\n        console.log('🎯 Found winner in players array at position:', i, 'Player:', player.username || player.displayName);\r\n        break;\r\n      }\r\n    }\r\n    \r\n    return winnerPos;\r\n  }, [winner, players]);\r\n\r\n  // Start spinning animation\r\n  const startSpin = useCallback(() => {\r\n    if (!wheelRef.current || spinState !== 'idle') return;\r\n    \r\n    console.log('🎰 Starting smooth wheel spin...');\r\n    console.log('🎰 Players data:', players);\r\n    console.log('🎰 Extended players:', extendedPlayers.length);\r\n    setSpinState('spinning');\r\n    \r\n    // Add spinning class for continuous rotation\r\n    wheelRef.current.classList.add('wheel-spinning');\r\n    \r\n  }, [spinState, players, extendedPlayers]);\r\n\r\n  // Land on winner with smooth deceleration\r\n  const landOnWinner = useCallback(() => {\r\n    if (!wheelRef.current || !winner) return;\r\n    \r\n    const targetIndex = calculateWinnerPosition();\r\n    if (targetIndex === -1) {\r\n      console.error('❌ Could not find winner position');\r\n      return;\r\n    }\r\n    \r\n    console.log('🎯 Landing on winner at position:', targetIndex);\r\n    setWinnerIndex(targetIndex);\r\n    setSpinState('landing');\r\n    \r\n    // Remove spinning class\r\n    wheelRef.current.classList.remove('wheel-spinning');\r\n    \r\n    // Calculate final rotation to land on winner\r\n    // Each player card is 120px wide + 8px gap = 128px\r\n    const cardWidth = 128;\r\n    const centerOffset = wheelRef.current.offsetWidth / 2 - 60; // Center the winner card\r\n    const targetPosition = -(targetIndex * cardWidth) + centerOffset;\r\n    \r\n    // Add multiple full rotations for dramatic effect (3-5 full spins)\r\n    const fullRotations = 3 + Math.random() * 2; // 3-5 rotations\r\n    const fullRotationDistance = players.length * cardWidth * fullRotations;\r\n    const finalPos = targetPosition - fullRotationDistance;\r\n    \r\n    setFinalRotation(finalPos);\r\n    \r\n    // Apply the landing animation\r\n    wheelRef.current.style.transition = 'transform 3.5s cubic-bezier(0.25, 0.1, 0.25, 1)';\r\n    wheelRef.current.style.transform = `translateX(${finalPos}px)`;\r\n    \r\n    // Mark as finished after animation completes\r\n    animationTimeoutRef.current = setTimeout(() => {\r\n      setSpinState('finished');\r\n      wheelRef.current.classList.add('wheel-finished');\r\n      onWinnerLand?.();\r\n      console.log('✅ Wheel animation complete! Winner landed.');\r\n    }, 3500);\r\n    \r\n  }, [winner, calculateWinnerPosition, players, onWinnerLand]);\r\n\r\n  // Effect to handle spinning state changes\r\n  useEffect(() => {\r\n    if (isSpinning && spinState === 'idle') {\r\n      startSpin();\r\n    } else if (!isSpinning && spinState === 'spinning' && winner) {\r\n      // Delay the landing slightly for better UX\r\n      setTimeout(() => {\r\n        landOnWinner();\r\n      }, 1000);\r\n    }\r\n  }, [isSpinning, winner, spinState, startSpin, landOnWinner]);\r\n\r\n  // Cleanup timeouts\r\n  useEffect(() => {\r\n    return () => {\r\n      if (animationTimeoutRef.current) {\r\n        clearTimeout(animationTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Reset wheel when new round starts\r\n  useEffect(() => {\r\n    if (!isSpinning && !winner && spinState !== 'idle') {\r\n      console.log('🔄 Resetting wheel for new round');\r\n      setSpinState('idle');\r\n      setWinnerIndex(-1);\r\n      setFinalRotation(0);\r\n      \r\n      if (wheelRef.current) {\r\n        wheelRef.current.classList.remove('wheel-spinning', 'wheel-finished');\r\n        wheelRef.current.style.transition = 'transform 0.5s ease';\r\n        wheelRef.current.style.transform = 'translateX(0px)';\r\n      }\r\n    }\r\n  }, [isSpinning, winner, spinState]);\r\n\r\n  return (\r\n    <div className=\"smooth-wheel-container\">\r\n      {/* Target Arrow */}\r\n      <div className={`wheel-arrow ${spinState === 'finished' ? 'winner-landed' : ''}`}>\r\n        ⬇️\r\n      </div>\r\n      \r\n      {/* Spinning Wheel */}\r\n      <div className=\"wheel-viewport\">\r\n        <div \r\n          ref={wheelRef}\r\n          className={`wheel-track ${spinState}`}\r\n        >\r\n          {extendedPlayers.map((player, index) => (\r\n            <div\r\n              key={`${index}-${player?.address || index}`}\r\n              className={`wheel-card ${\r\n                !player?.isRealPlayer ? 'waiting' : ''\r\n              } ${\r\n                winnerIndex !== -1 && (index % players.length) === winnerIndex ? 'winner' : ''\r\n              }`}\r\n            >\r\n              <div className=\"wheel-player-avatar\">\r\n                {player?.isRealPlayer ? (\r\n                  <div className=\"telegram-avatar\">\r\n                    {player.username?.charAt(0)?.toUpperCase() || player.displayName?.charAt(0)?.toUpperCase() || '👤'}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"waiting-icon\">❓</div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"wheel-player-info\">\r\n                <div className=\"wheel-player-name\">\r\n                  {player?.isRealPlayer ? (player.username || player.displayName || 'Player') : 'Waiting'}\r\n                </div>\r\n                <div className=\"wheel-player-bet\">\r\n                  {player?.isRealPlayer ? (\r\n                    <>\r\n                      <TonIcon className=\"wheel-ton-icon\" />\r\n                      {player.bet?.toFixed(3) || '0.000'}\r\n                    </>\r\n                  ) : (\r\n                    '---'\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Winner Crown */}\r\n              {winnerIndex !== -1 && (index % players.length) === winnerIndex && spinState === 'finished' && (\r\n                <div className=\"winner-crown\">👑</div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Gradient Fade Edges */}\r\n      <div className=\"wheel-fade-left\"></div>\r\n      <div className=\"wheel-fade-right\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmoothWheel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}