{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { TonIcon } from './IconComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  isSpinning,\n  onSpinComplete,\n  contractWinner,\n  totalJackpotValue\n}) => {\n  _s();\n  const [wheelState, setWheelState] = useState('idle'); // 'idle', 'waiting', 'spinning', 'winner', 'finished'\n  const [lockedPlayers, setLockedPlayers] = useState([]); // Lock players during animation\n  const wheelRef = useRef();\n  const idleAnimationRef = useRef();\n  const currentPosition = useRef(0);\n  const winnerShowcaseTimeoutRef = useRef();\n\n  // Card dimensions (matching CSS)\n  const CARD_WIDTH = 105; // Card width from CSS\n  const CARD_MARGIN = 6; // Card margin from CSS\n  const TOTAL_CARD_SPACING = CARD_WIDTH + CARD_MARGIN * 2; // Total space per card\n\n  // Lock players when spinning starts to prevent them from changing during animation\n  useEffect(() => {\n    if (isSpinning && contractWinner && players.length > 0) {\n      // Locking players for animation\n      setLockedPlayers([...players]);\n    }\n  }, [isSpinning, contractWinner, players]);\n\n  // Use locked players during animation, regular players otherwise\n  const effectivePlayers = wheelState === 'spinning' || wheelState === 'winner' ? lockedPlayers : players;\n\n  // Render individual player card HTML\n  const renderPlayerCard = useCallback((player, key) => {\n    if (!player) {\n      return `\n        <div class=\"waiting-card\">\n          <div class=\"avatar-container\">\n            ?\n          </div>\n          <div class=\"waiting-text\">Waiting</div>\n          <div class=\"waiting-amount\">0.000</div>\n        </div>\n      `;\n    }\n\n    // Always show the amount if it exists, regardless of isRealPlayer\n    const amount = player.bet || player.amount || 0;\n    const isActive = amount > 0;\n    const avatar = player.avatar && player.avatar !== '‚ùì' && player.avatar !== 'üë§' ? player.avatar : `https://robohash.org/${player.address || player.name}.png?size=100x100`;\n    const username = player.username || player.displayName || player.name || 'Player';\n    const bet = amount.toFixed(3);\n    return `\n      <div class=\"player-card ${isActive ? 'active' : 'inactive'}\" data-key=\"${key}\">\n        <div class=\"card-content\">\n          <div class=\"avatar-container\">\n            <img src=\"${avatar}\" alt=\"${username}\" class=\"player-avatar\" />\n          </div>\n          <div class=\"player-info\">\n            <p class=\"player-name\">${username}</p>\n            <div class=\"bet-info\">\n              <div class=\"coin-icon ${!isActive ? 'grayscale' : ''}\"></div>\n              <span class=\"bet-amount\">${bet}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }, []);\n\n  // Initialize wheel with player rows for infinite scrolling\n  const initWheel = useCallback(() => {\n    if (!wheelRef.current || !effectivePlayers.length) return;\n    const wheel = wheelRef.current;\n    wheel.innerHTML = ''; // Clear existing content\n\n    // Create one continuous row with multiple player cycles for smooth infinite scroll\n    const row = document.createElement('div');\n    row.className = 'roulette-row';\n\n    // Create enough copies to ensure smooth infinite scrolling (50 copies)\n    for (let copyIndex = 0; copyIndex < 50; copyIndex++) {\n      effectivePlayers.forEach((player, playerIndex) => {\n        const card = document.createElement('div');\n        card.className = 'roulette-card';\n        card.innerHTML = renderPlayerCard(player, `${copyIndex}-${playerIndex}`);\n        row.appendChild(card);\n      });\n    }\n    wheel.appendChild(row);\n  }, [effectivePlayers, renderPlayerCard]);\n\n  // Idle movement - constant speed with true infinite scroll\n  const startIdleMovement = useCallback(() => {\n    if (!wheelRef.current || wheelState !== 'idle') return;\n    const animate = () => {\n      if (wheelState !== 'idle') return;\n      currentPosition.current -= 0.5; // Slower, smoother movement (0.5px per frame)\n\n      // True infinite scroll - reset when we've scrolled through several player cycles\n      // Use correct card spacing from CSS\n      const totalCardSpacing = TOTAL_CARD_SPACING;\n      const cycleWidth = effectivePlayers.length * totalCardSpacing;\n      const resetPoint = -(cycleWidth * 10); // Reset after 10 cycles\n\n      if (currentPosition.current <= resetPoint) {\n        // Reset to a position that maintains visual continuity\n        currentPosition.current = -(cycleWidth * 5); // Reset to middle area\n      }\n      if (wheelRef.current) {\n        wheelRef.current.style.transform = `translate3d(${currentPosition.current}px, 0px, 0px)`;\n      }\n      idleAnimationRef.current = requestAnimationFrame(animate);\n    };\n    idleAnimationRef.current = requestAnimationFrame(animate);\n  }, [wheelState, effectivePlayers.length, CARD_WIDTH]);\n\n  // Stop idle movement\n  const stopIdleMovement = useCallback(() => {\n    if (idleAnimationRef.current) {\n      cancelAnimationFrame(idleAnimationRef.current);\n      idleAnimationRef.current = null;\n    }\n  }, []);\n\n  // Find winner position in player array\n  const findWinnerPosition = useCallback(winner => {\n    if (!winner || !effectivePlayers.length) return -1;\n\n    // Looking for winner\n\n    for (let i = 0; i < effectivePlayers.length; i++) {\n      const player = effectivePlayers[i];\n      if (player && player.address && (player.address === winner.winner || player.address === winner.fullAddress) || player && player.fullAddress && (player.fullAddress === winner.winner || player.fullAddress === winner.fullAddress) || player && player.username && player.username === winner.username || player && player.displayName && player.displayName === winner.displayName) {\n        console.log(`Found winner at position ${i}:`, player);\n        return i;\n      }\n    }\n    console.warn('Winner not found in player list');\n    return -1;\n  }, [effectivePlayers]);\n\n  // Spin wheel function with improved accuracy\n  const spinWheel = useCallback(targetWinner => {\n    if (wheelState === 'spinning' || !wheelRef.current) return;\n    console.log('Starting spin with winner:', targetWinner);\n\n    // Play launch sound when spin starts\n    // Launch sound removed for performance\n\n    setWheelState('spinning');\n    stopIdleMovement();\n    const winnerPosition = findWinnerPosition(targetWinner);\n    if (winnerPosition === -1) {\n      console.warn('Winner not found in player list, spinning randomly');\n      // If winner not found, still spin but land on first player\n      const fallbackPosition = 0;\n      performSpin(fallbackPosition, targetWinner);\n      return;\n    }\n    performSpin(winnerPosition, targetWinner);\n  }, [wheelState, stopIdleMovement, findWinnerPosition, effectivePlayers.length, onSpinComplete, CARD_WIDTH]);\n\n  // Separate function to perform the actual spin animation\n  const performSpin = useCallback((winnerPosition, targetWinner) => {\n    const wheel = wheelRef.current;\n    if (!wheel) return;\n\n    // Calculate precise landing position\n    const wheelWidth = wheel.offsetWidth;\n    const centerOffset = wheelWidth / 2;\n\n    // Use the correct card spacing from CSS\n    const totalCardSpacing = TOTAL_CARD_SPACING; // 105px + 12px = 117px\n\n    console.log(`üìè Card measurements: width=${CARD_WIDTH}px, margin=${CARD_MARGIN * 2}px, total=${totalCardSpacing}px`);\n    console.log(`üéØ Winner found at array position: ${winnerPosition}`);\n\n    // CLASSIC SLOT MACHINE ANIMATION: Fast slide then slow down to winner\n    const cycleLength = effectivePlayers.length * totalCardSpacing;\n    const currentAbsolutePosition = Math.abs(currentPosition.current);\n\n    // Calculate how far we need to slide to get the winner centered\n    // We want to slide fast past the winner, then slow down and land on it\n    const winnerOffset = winnerPosition * totalCardSpacing;\n\n    // Slide at least 3 full cycles to create that \"fast spinning\" effect\n    // Then land precisely on the winner in the next visible cycle\n    const minimumSpinDistance = cycleLength * 3; // At least 3 full cycles\n    const targetCycle = Math.ceil((currentAbsolutePosition + minimumSpinDistance) / cycleLength);\n    const finalWinnerPosition = targetCycle * cycleLength + winnerOffset;\n\n    // Center the winner card in the viewport\n    const finalPosition = -(finalWinnerPosition + CARD_WIDTH / 2 - centerOffset);\n    console.log(`üé∞ Classic slot machine calculation:`);\n    console.log(`   - Current position: ${currentPosition.current}px`);\n    console.log(`   - Winner position in array: ${winnerPosition}`);\n    console.log(`   - Winner offset: ${winnerOffset}px`);\n    console.log(`   - Minimum spin distance: ${minimumSpinDistance}px`);\n    console.log(`   - Target cycle: ${targetCycle}`);\n    console.log(`   - Final winner position: ${finalWinnerPosition}px`);\n    console.log(`   - Final position: ${finalPosition}px`);\n    console.log(`   - Total slide distance: ${Math.abs(finalPosition - currentPosition.current)}px`);\n\n    // Start ticking sound for the spinning effect\n    let tickInterval = setInterval(() => {\n      // Spin sound removed for performance\n    }, 100); // Fast ticking initially\n\n    // STAGE 1: Fast spinning for 2 seconds\n    wheel.style.transitionTimingFunction = 'linear';\n    wheel.style.transitionDuration = '2000ms';\n\n    // Slide 80% of the way during fast phase\n    const fastPhasePosition = currentPosition.current + (finalPosition - currentPosition.current) * 0.8;\n    wheel.style.transform = `translate3d(${fastPhasePosition}px, 0px, 0px)`;\n    currentPosition.current = fastPhasePosition;\n\n    // STAGE 2: Slow down dramatically for final 20% over 3 seconds\n    setTimeout(() => {\n      // Slower ticking sound\n      clearInterval(tickInterval);\n      tickInterval = setInterval(() => {\n        // Spin sound removed for performance\n      }, 300); // Much slower ticking\n\n      wheel.style.transitionTimingFunction = 'cubic-bezier(0.05, 0.1, 0.05, 1)';\n      wheel.style.transitionDuration = '3000ms';\n      wheel.style.transform = `translate3d(${finalPosition}px, 0px, 0px)`;\n      currentPosition.current = finalPosition;\n\n      // Stop ticking after slowdown completes\n      setTimeout(() => {\n        clearInterval(tickInterval);\n      }, 3000);\n    }, 2000); // Wait 2 seconds for fast phase\n\n    // After total animation (2s + 3s = 5s), show winner\n    setTimeout(() => {\n      console.log('Classic slot machine animation completed, showing winner');\n      setWheelState('winner');\n\n      // Highlight the winner card\n      const allCards = wheel.querySelectorAll('.roulette-card');\n      console.log(`üéØ Highlighting winner at position ${winnerPosition} out of ${effectivePlayers.length} players`);\n      allCards.forEach((card, index) => {\n        const cardPlayerIndex = index % effectivePlayers.length;\n        if (cardPlayerIndex === winnerPosition) {\n          card.classList.add('winner-highlight');\n          console.log(`‚ú® Highlighted card at index ${index} (player ${cardPlayerIndex})`);\n        }\n      });\n\n      // After showcasing winner for 4 seconds, go to finished state\n      winnerShowcaseTimeoutRef.current = setTimeout(() => {\n        console.log('Winner showcase complete, entering finished state');\n\n        // Remove winner highlights\n        const highlightedCards = wheel.querySelectorAll('.winner-highlight');\n        highlightedCards.forEach(card => {\n          card.classList.remove('winner-highlight');\n        });\n\n        // Reset transition styles\n        wheel.style.transitionTimingFunction = '';\n        wheel.style.transitionDuration = '';\n\n        // Clear locked players\n        setLockedPlayers([]);\n        setWheelState('finished');\n        onSpinComplete === null || onSpinComplete === void 0 ? void 0 : onSpinComplete(targetWinner);\n      }, 4000); // Show winner for 4 seconds\n    }, 5000); // Wait 5 seconds for both phases (2s fast + 3s slow)\n  }, [effectivePlayers.length, CARD_WIDTH, onSpinComplete]);\n\n  // Handle state changes\n  useEffect(() => {\n    if (isSpinning && contractWinner && wheelState === 'waiting') {\n      // Backend responded with winner, start spinning\n      console.log('Starting roulette spin with winner:', contractWinner);\n      spinWheel(contractWinner);\n    } else if (isSpinning && !contractWinner && wheelState === 'idle') {\n      // Bet placed, stop and wait for backend\n      console.log('Stopping wheel, waiting for winner...');\n      setWheelState('waiting');\n      stopIdleMovement();\n    } else if (!isSpinning && wheelState !== 'idle' && wheelState !== 'winner' && wheelState !== 'finished') {\n      // Reset to idle state (but don't interrupt winner showcase or finished state)\n      console.log('Resetting to idle state');\n      setWheelState('idle');\n    }\n  }, [isSpinning, contractWinner, wheelState, spinWheel, stopIdleMovement]);\n\n  // Detect new game start and reset from finished state to idle\n  useEffect(() => {\n    // If we're in finished state and there's no winner (new game starting), reset to idle\n    if (wheelState === 'finished' && !contractWinner && !isSpinning) {\n      console.log('New game detected - resetting from finished to idle');\n      setWheelState('idle');\n    }\n  }, [wheelState, contractWinner, isSpinning]);\n\n  // Start/stop idle movement based on state\n  useEffect(() => {\n    if (wheelState === 'idle') {\n      startIdleMovement();\n    } else {\n      stopIdleMovement();\n    }\n    return () => stopIdleMovement();\n  }, [wheelState, startIdleMovement, stopIdleMovement]);\n\n  // Initialize wheel when effective players change (but not during winner showcase)\n  useEffect(() => {\n    // Don't reinitialize during winner showcase or finished state to preserve highlighting\n    if (wheelState !== 'winner' && wheelState !== 'finished') {\n      initWheel();\n    }\n  }, [initWheel, wheelState]);\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (winnerShowcaseTimeoutRef.current) {\n        clearTimeout(winnerShowcaseTimeoutRef.current);\n      }\n    };\n  }, []);\n  if (!effectivePlayers || effectivePlayers.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simple-carousel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carousel-message\",\n        children: \"Waiting for players to join...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roulette-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roulette-selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wheelRef,\n      className: \"roulette-wheel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel-state-indicator\",\n      children: [wheelState === 'idle' && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83C\\uDFB0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 35\n      }, this), wheelState === 'waiting' && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u23F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 38\n      }, this), wheelState === 'spinning' && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83C\\uDFAF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 39\n      }, this), wheelState === 'winner' && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 37\n      }, this), wheelState === 'finished' && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\uD83C\\uDFC1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute -top-1/4 -right-1/3 h-full opacity-75 will-change-transform z-[3] pointer-events-none\",\n      style: {\n        maskImage: 'linear-gradient(black, transparent 50%)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/img/glare.webp\",\n        className: \"w-full object-cover object-center\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"VIxi7lGLuxZ4CmPOzTtmWajujkE=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","TonIcon","jsxDEV","_jsxDEV","SimpleCarousel","players","isSpinning","onSpinComplete","contractWinner","totalJackpotValue","_s","wheelState","setWheelState","lockedPlayers","setLockedPlayers","wheelRef","idleAnimationRef","currentPosition","winnerShowcaseTimeoutRef","CARD_WIDTH","CARD_MARGIN","TOTAL_CARD_SPACING","length","effectivePlayers","renderPlayerCard","player","key","amount","bet","isActive","avatar","address","name","username","displayName","toFixed","initWheel","current","wheel","innerHTML","row","document","createElement","className","copyIndex","forEach","playerIndex","card","appendChild","startIdleMovement","animate","totalCardSpacing","cycleWidth","resetPoint","style","transform","requestAnimationFrame","stopIdleMovement","cancelAnimationFrame","findWinnerPosition","winner","i","fullAddress","console","log","warn","spinWheel","targetWinner","winnerPosition","fallbackPosition","performSpin","wheelWidth","offsetWidth","centerOffset","cycleLength","currentAbsolutePosition","Math","abs","winnerOffset","minimumSpinDistance","targetCycle","ceil","finalWinnerPosition","finalPosition","tickInterval","setInterval","transitionTimingFunction","transitionDuration","fastPhasePosition","setTimeout","clearInterval","allCards","querySelectorAll","index","cardPlayerIndex","classList","add","highlightedCards","remove","clearTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","maskImage","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { TonIcon } from './IconComponents';\n\n\nconst SimpleCarousel = ({ \n  players, \n  isSpinning, \n  onSpinComplete, \n  contractWinner,\n  totalJackpotValue \n}) => {\n  const [wheelState, setWheelState] = useState('idle'); // 'idle', 'waiting', 'spinning', 'winner', 'finished'\n  const [lockedPlayers, setLockedPlayers] = useState([]); // Lock players during animation\n  const wheelRef = useRef();\n  const idleAnimationRef = useRef();\n  const currentPosition = useRef(0);\n  const winnerShowcaseTimeoutRef = useRef();\n  \n  // Card dimensions (matching CSS)\n  const CARD_WIDTH = 105; // Card width from CSS\n  const CARD_MARGIN = 6; // Card margin from CSS\n  const TOTAL_CARD_SPACING = CARD_WIDTH + (CARD_MARGIN * 2); // Total space per card\n  \n  // Lock players when spinning starts to prevent them from changing during animation\n  useEffect(() => {\n    if (isSpinning && contractWinner && players.length > 0) {\n      // Locking players for animation\n      setLockedPlayers([...players]);\n    }\n  }, [isSpinning, contractWinner, players]);\n  \n  // Use locked players during animation, regular players otherwise\n  const effectivePlayers = wheelState === 'spinning' || wheelState === 'winner' ? lockedPlayers : players;\n  \n  // Render individual player card HTML\n  const renderPlayerCard = useCallback((player, key) => {\n    if (!player) {\n      return `\n        <div class=\"waiting-card\">\n          <div class=\"avatar-container\">\n            ?\n          </div>\n          <div class=\"waiting-text\">Waiting</div>\n          <div class=\"waiting-amount\">0.000</div>\n        </div>\n      `;\n    }\n    \n    // Always show the amount if it exists, regardless of isRealPlayer\n    const amount = player.bet || player.amount || 0;\n    const isActive = amount > 0;\n    const avatar = player.avatar && player.avatar !== '‚ùì' && player.avatar !== 'üë§' ? \n      player.avatar : \n      `https://robohash.org/${player.address || player.name}.png?size=100x100`;\n    const username = player.username || player.displayName || player.name || 'Player';\n    const bet = amount.toFixed(3);\n    \n    return `\n      <div class=\"player-card ${isActive ? 'active' : 'inactive'}\" data-key=\"${key}\">\n        <div class=\"card-content\">\n          <div class=\"avatar-container\">\n            <img src=\"${avatar}\" alt=\"${username}\" class=\"player-avatar\" />\n          </div>\n          <div class=\"player-info\">\n            <p class=\"player-name\">${username}</p>\n            <div class=\"bet-info\">\n              <div class=\"coin-icon ${!isActive ? 'grayscale' : ''}\"></div>\n              <span class=\"bet-amount\">${bet}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }, []);\n\n  // Initialize wheel with player rows for infinite scrolling\n  const initWheel = useCallback(() => {\n    if (!wheelRef.current || !effectivePlayers.length) return;\n    \n    const wheel = wheelRef.current;\n    wheel.innerHTML = ''; // Clear existing content\n    \n    // Create one continuous row with multiple player cycles for smooth infinite scroll\n    const row = document.createElement('div');\n    row.className = 'roulette-row';\n    \n    // Create enough copies to ensure smooth infinite scrolling (50 copies)\n    for (let copyIndex = 0; copyIndex < 50; copyIndex++) {\n      effectivePlayers.forEach((player, playerIndex) => {\n        const card = document.createElement('div');\n        card.className = 'roulette-card';\n        card.innerHTML = renderPlayerCard(player, `${copyIndex}-${playerIndex}`);\n        row.appendChild(card);\n      });\n    }\n    \n    wheel.appendChild(row);\n  }, [effectivePlayers, renderPlayerCard]);\n\n  // Idle movement - constant speed with true infinite scroll\n  const startIdleMovement = useCallback(() => {\n    if (!wheelRef.current || wheelState !== 'idle') return;\n    \n    const animate = () => {\n      if (wheelState !== 'idle') return;\n      \n      currentPosition.current -= 0.5; // Slower, smoother movement (0.5px per frame)\n      \n      // True infinite scroll - reset when we've scrolled through several player cycles\n      // Use correct card spacing from CSS\n      const totalCardSpacing = TOTAL_CARD_SPACING;\n      \n      const cycleWidth = effectivePlayers.length * totalCardSpacing;\n      const resetPoint = -(cycleWidth * 10); // Reset after 10 cycles\n      \n      if (currentPosition.current <= resetPoint) {\n        // Reset to a position that maintains visual continuity\n        currentPosition.current = -(cycleWidth * 5); // Reset to middle area\n      }\n      \n      if (wheelRef.current) {\n        wheelRef.current.style.transform = `translate3d(${currentPosition.current}px, 0px, 0px)`;\n      }\n      \n      idleAnimationRef.current = requestAnimationFrame(animate);\n    };\n    \n    idleAnimationRef.current = requestAnimationFrame(animate);\n  }, [wheelState, effectivePlayers.length, CARD_WIDTH]);\n\n  // Stop idle movement\n  const stopIdleMovement = useCallback(() => {\n    if (idleAnimationRef.current) {\n      cancelAnimationFrame(idleAnimationRef.current);\n      idleAnimationRef.current = null;\n    }\n  }, []);\n\n  // Find winner position in player array\n  const findWinnerPosition = useCallback((winner) => {\n    if (!winner || !effectivePlayers.length) return -1;\n    \n    // Looking for winner\n    \n    for (let i = 0; i < effectivePlayers.length; i++) {\n      const player = effectivePlayers[i];\n      if (\n        (player && player.address && (player.address === winner.winner || player.address === winner.fullAddress)) ||\n        (player && player.fullAddress && (player.fullAddress === winner.winner || player.fullAddress === winner.fullAddress)) ||\n        (player && player.username && player.username === winner.username) ||\n        (player && player.displayName && player.displayName === winner.displayName)\n      ) {\n        console.log(`Found winner at position ${i}:`, player);\n        return i;\n      }\n    }\n    console.warn('Winner not found in player list');\n    return -1;\n  }, [effectivePlayers]);\n\n  // Spin wheel function with improved accuracy\n  const spinWheel = useCallback((targetWinner) => {\n    if (wheelState === 'spinning' || !wheelRef.current) return;\n    \n    console.log('Starting spin with winner:', targetWinner);\n    \n    // Play launch sound when spin starts\n            // Launch sound removed for performance\n    \n    setWheelState('spinning');\n    stopIdleMovement();\n    \n    const winnerPosition = findWinnerPosition(targetWinner);\n    if (winnerPosition === -1) {\n      console.warn('Winner not found in player list, spinning randomly');\n      // If winner not found, still spin but land on first player\n      const fallbackPosition = 0;\n      performSpin(fallbackPosition, targetWinner);\n            return;\n          }\n          \n    performSpin(winnerPosition, targetWinner);\n    \n  }, [wheelState, stopIdleMovement, findWinnerPosition, effectivePlayers.length, onSpinComplete, CARD_WIDTH]);\n\n  // Separate function to perform the actual spin animation\n  const performSpin = useCallback((winnerPosition, targetWinner) => {\n    const wheel = wheelRef.current;\n    if (!wheel) return;\n\n    // Calculate precise landing position\n    const wheelWidth = wheel.offsetWidth;\n    const centerOffset = wheelWidth / 2;\n    \n    // Use the correct card spacing from CSS\n    const totalCardSpacing = TOTAL_CARD_SPACING; // 105px + 12px = 117px\n    \n    console.log(`üìè Card measurements: width=${CARD_WIDTH}px, margin=${CARD_MARGIN * 2}px, total=${totalCardSpacing}px`);\n    console.log(`üéØ Winner found at array position: ${winnerPosition}`);\n    \n    // CLASSIC SLOT MACHINE ANIMATION: Fast slide then slow down to winner\n    const cycleLength = effectivePlayers.length * totalCardSpacing;\n    const currentAbsolutePosition = Math.abs(currentPosition.current);\n    \n    // Calculate how far we need to slide to get the winner centered\n    // We want to slide fast past the winner, then slow down and land on it\n    const winnerOffset = winnerPosition * totalCardSpacing;\n    \n    // Slide at least 3 full cycles to create that \"fast spinning\" effect\n    // Then land precisely on the winner in the next visible cycle\n    const minimumSpinDistance = cycleLength * 3; // At least 3 full cycles\n    const targetCycle = Math.ceil((currentAbsolutePosition + minimumSpinDistance) / cycleLength);\n    const finalWinnerPosition = (targetCycle * cycleLength) + winnerOffset;\n    \n    // Center the winner card in the viewport\n    const finalPosition = -(finalWinnerPosition + (CARD_WIDTH / 2) - centerOffset);\n    \n    console.log(`üé∞ Classic slot machine calculation:`);\n    console.log(`   - Current position: ${currentPosition.current}px`);\n    console.log(`   - Winner position in array: ${winnerPosition}`);\n    console.log(`   - Winner offset: ${winnerOffset}px`);\n    console.log(`   - Minimum spin distance: ${minimumSpinDistance}px`);\n    console.log(`   - Target cycle: ${targetCycle}`);\n    console.log(`   - Final winner position: ${finalWinnerPosition}px`);\n    console.log(`   - Final position: ${finalPosition}px`);\n    console.log(`   - Total slide distance: ${Math.abs(finalPosition - currentPosition.current)}px`);\n    \n    // Start ticking sound for the spinning effect\n    let tickInterval = setInterval(() => {\n              // Spin sound removed for performance\n    }, 100); // Fast ticking initially\n    \n    // STAGE 1: Fast spinning for 2 seconds\n    wheel.style.transitionTimingFunction = 'linear';\n    wheel.style.transitionDuration = '2000ms';\n    \n    // Slide 80% of the way during fast phase\n    const fastPhasePosition = currentPosition.current + ((finalPosition - currentPosition.current) * 0.8);\n    wheel.style.transform = `translate3d(${fastPhasePosition}px, 0px, 0px)`;\n    currentPosition.current = fastPhasePosition;\n    \n    // STAGE 2: Slow down dramatically for final 20% over 3 seconds\n    setTimeout(() => {\n      // Slower ticking sound\n      clearInterval(tickInterval);\n      tickInterval = setInterval(() => {\n        // Spin sound removed for performance\n      }, 300); // Much slower ticking\n      \n      wheel.style.transitionTimingFunction = 'cubic-bezier(0.05, 0.1, 0.05, 1)';\n      wheel.style.transitionDuration = '3000ms';\n      wheel.style.transform = `translate3d(${finalPosition}px, 0px, 0px)`;\n      currentPosition.current = finalPosition;\n      \n      // Stop ticking after slowdown completes\n      setTimeout(() => {\n        clearInterval(tickInterval);\n      }, 3000);\n      \n    }, 2000); // Wait 2 seconds for fast phase\n    \n    // After total animation (2s + 3s = 5s), show winner\n    setTimeout(() => {\n      console.log('Classic slot machine animation completed, showing winner');\n      setWheelState('winner');\n      \n      // Highlight the winner card\n      const allCards = wheel.querySelectorAll('.roulette-card');\n      console.log(`üéØ Highlighting winner at position ${winnerPosition} out of ${effectivePlayers.length} players`);\n      \n      allCards.forEach((card, index) => {\n        const cardPlayerIndex = index % effectivePlayers.length;\n        if (cardPlayerIndex === winnerPosition) {\n          card.classList.add('winner-highlight');\n          console.log(`‚ú® Highlighted card at index ${index} (player ${cardPlayerIndex})`);\n        }\n      });\n      \n      // After showcasing winner for 4 seconds, go to finished state\n      winnerShowcaseTimeoutRef.current = setTimeout(() => {\n        console.log('Winner showcase complete, entering finished state');\n        \n        // Remove winner highlights\n        const highlightedCards = wheel.querySelectorAll('.winner-highlight');\n        highlightedCards.forEach(card => {\n          card.classList.remove('winner-highlight');\n        });\n        \n        // Reset transition styles\n        wheel.style.transitionTimingFunction = '';\n        wheel.style.transitionDuration = '';\n        \n        // Clear locked players\n        setLockedPlayers([]);\n        \n        setWheelState('finished');\n        onSpinComplete?.(targetWinner);\n      }, 4000); // Show winner for 4 seconds\n      \n    }, 5000); // Wait 5 seconds for both phases (2s fast + 3s slow)\n    \n  }, [effectivePlayers.length, CARD_WIDTH, onSpinComplete]);\n\n  // Handle state changes\n  useEffect(() => {\n    if (isSpinning && contractWinner && wheelState === 'waiting') {\n      // Backend responded with winner, start spinning\n      console.log('Starting roulette spin with winner:', contractWinner);\n      spinWheel(contractWinner);\n    } else if (isSpinning && !contractWinner && wheelState === 'idle') {\n      // Bet placed, stop and wait for backend\n      console.log('Stopping wheel, waiting for winner...');\n      setWheelState('waiting');\n      stopIdleMovement();\n    } else if (!isSpinning && wheelState !== 'idle' && wheelState !== 'winner' && wheelState !== 'finished') {\n      // Reset to idle state (but don't interrupt winner showcase or finished state)\n      console.log('Resetting to idle state');\n      setWheelState('idle');\n    }\n  }, [isSpinning, contractWinner, wheelState, spinWheel, stopIdleMovement]);\n\n  // Detect new game start and reset from finished state to idle\n  useEffect(() => {\n    // If we're in finished state and there's no winner (new game starting), reset to idle\n    if (wheelState === 'finished' && !contractWinner && !isSpinning) {\n      console.log('New game detected - resetting from finished to idle');\n      setWheelState('idle');\n    }\n  }, [wheelState, contractWinner, isSpinning]);\n\n  // Start/stop idle movement based on state\n  useEffect(() => {\n    if (wheelState === 'idle') {\n      startIdleMovement();\n    } else {\n      stopIdleMovement();\n    }\n    \n    return () => stopIdleMovement();\n  }, [wheelState, startIdleMovement, stopIdleMovement]);\n\n  // Initialize wheel when effective players change (but not during winner showcase)\n  useEffect(() => {\n    // Don't reinitialize during winner showcase or finished state to preserve highlighting\n    if (wheelState !== 'winner' && wheelState !== 'finished') {\n      initWheel();\n    }\n  }, [initWheel, wheelState]);\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (winnerShowcaseTimeoutRef.current) {\n        clearTimeout(winnerShowcaseTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  if (!effectivePlayers || effectivePlayers.length === 0) {\n    return (\n      <div className=\"simple-carousel\">\n        <div className=\"carousel-message\">\n          Waiting for players to join...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"roulette-wrapper\">\n      {/* Center selector line */}\n      <div className=\"roulette-selector\"></div>\n      \n      {/* Spinning wheel */}\n      <div ref={wheelRef} className=\"roulette-wheel\"></div>\n      \n      {/* State indicator */}\n      <div className=\"wheel-state-indicator\">\n        {wheelState === 'idle' && <span>üé∞</span>}\n        {wheelState === 'waiting' && <span>‚è≥</span>}\n        {wheelState === 'spinning' && <span>üéØ</span>}\n        {wheelState === 'winner' && <span>üéâ</span>}\n        {wheelState === 'finished' && <span>üèÅ</span>}\n      </div>\n      \n      {/* Glare Effect */}\n      <div \n        className=\"absolute -top-1/4 -right-1/3 h-full opacity-75 will-change-transform z-[3] pointer-events-none\"\n        style={{ maskImage: 'linear-gradient(black, transparent 50%)' }}\n      >\n        <img src=\"/img/glare.webp\" className=\"w-full object-cover object-center\" alt=\"\" />\n              </div>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}