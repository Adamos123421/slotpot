{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\nfunction AppContent() {\n  _s();\n  var _contractState$timer2;\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n\n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n\n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n  const isShowingWinnerAnimationRef = useRef(false); // Block multiple winner animations\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n  }, [gameBettors]);\n  useEffect(() => {\n    contractWinnerRef.current = contractWinner;\n\n    // Log winner detection only once when contractWinner changes\n    if (contractWinner) {\n      console.log('🏆 WINNER DETECTED FROM BACKEND!', {\n        winnerAddress: contractWinner.winner || contractWinner.fullAddress,\n        winnerName: contractWinner.username || contractWinner.displayName || 'Player',\n        prize: contractWinner.prize,\n        contractWinner\n      });\n      console.log('🎬 ANIMATION SHOULD START NOW - waiting for carousel to detect winner');\n    } else {\n      console.log('❌ WINNER CLEARED - contractWinner set to null');\n    }\n  }, [contractWinner]);\n  useEffect(() => {\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n  }, [showWinnerAnnouncement]);\n  useEffect(() => {\n    waitingForWinnerRef.current = waitingForWinner;\n  }, [waitingForWinner]);\n  useEffect(() => {\n    previousRoundBettorsRef.current = previousRoundBettors;\n  }, [previousRoundBettors]);\n  useEffect(() => {\n    timeRemainingRef.current = timeRemaining;\n  }, [timeRemaining]);\n  useEffect(() => {\n    showWinnerVisuallyRef.current = showWinnerVisually;\n  }, [showWinnerVisually]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n\n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n\n    // EMERGENCY FALLBACK: If no bettor data available, create a minimal bettor from winner data\n    if (gameBettors.length === 0 && previousRoundBettors.length === 0 && winnerData) {\n      const emergencyBettor = {\n        address: winnerData.winner || winnerData.fullAddress,\n        username: winnerData.username || winnerData.displayName || 'Winner',\n        amount: winnerData.betAmount || parseFloat(winnerData.prize) || 0.1,\n        timestamp: Date.now()\n      };\n      console.log('🚨 CREATING EMERGENCY BETTOR DATA for animation:', emergencyBettor);\n      setPreviousRoundBettors([emergencyBettor]);\n    }\n\n    // IMMEDIATELY block animation when winner is detected (before any other events can interfere)\n    if (!isShowingWinnerAnimationRef.current) {\n      isShowingWinnerAnimationRef.current = true;\n      console.log('🔒 IMMEDIATE BLOCK: Winner detected, blocking animation system');\n    }\n\n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n\n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n\n    // Fallback timeout to ensure winner display clears after exactly 10 seconds\n    const winnerId = winnerTimestamp;\n    setTimeout(() => {\n      // Only clear if this is still the same winner (prevent clearing new winners)\n      if (lastWinnerTimestampRef.current === winnerId) {\n        console.log('⏰ 10-second timeout - clearing winner display and resetting animation');\n        setShowWinnerAnnouncement(false);\n        setPostWinnerLoading(false);\n        setIsAnyWinnerDisplayActive(false);\n        setContractWinner(null); // Clear winner display after 10 seconds\n        setShowWinnerVisually(false); // Reset visual winner state\n        winnerCoordinator.setActive(false);\n\n        // UNBLOCK winner animations now that display is complete\n        isShowingWinnerAnimationRef.current = false;\n        console.log('🔓 UNBLOCKED winner animations after 10-second timeout');\n\n        // NOW it's safe to reset the animation for next round\n        if (window.resetCarouselAnimation) {\n          window.resetCarouselAnimation();\n          console.log('🔄 Winner timeout complete - now resetting animation for next round');\n        }\n      }\n    }, 10000); // Exactly 10 seconds\n\n    return true;\n  }, []);\n\n  // Telegram integration\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n\n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    var _contractState$curren;\n    if (!contractState) return contractState;\n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' ? ((_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || 0 : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n\n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address || bettor.walletAddress === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n\n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n\n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    if (!liveJackpotValue) return 0;\n    return userBetTotal / liveJackpotValue * 100;\n  }, [userBetTotal, jackpotValue, gameBettors, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    var _contractState$timer;\n    // Always sync with backend timer when it changes\n    if (((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n    console.log('⏰ Starting local countdown timer...');\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n\n          // When we reach 0, trigger \"analyzing bets\" state locally\n          if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n          }\n          return newTime;\n        }\n\n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) {\n      console.log('⚠️ CAROUSEL REF NOT READY - animation cannot start');\n      return;\n    }\n    console.log('🎠 CAROUSEL ANIMATION STARTING with ref:', carousel);\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    let winnerCardVisible = false;\n    let targetPosition = null; // For dramatic slow-down effect\n    let animationPhase = 'normal'; // 'normal', 'fast-spin', 'slow-reveal'\n    let lastProcessedWinnerTimestamp = null; // Track which winner we've processed\n    const cardWidth = 110 + 10; // card width + gap\n\n    // Use refs to get current values without causing re-renders\n    const getCurrentBettors = () => gameBettorsRef.current;\n    const getPreviousBettors = () => previousRoundBettorsRef.current;\n    const getContractWinner = () => contractWinnerRef.current;\n    const getWaitingForWinner = () => waitingForWinnerRef.current;\n    const getTimeRemaining = () => timeRemainingRef.current;\n    const getShowWinnerVisually = () => showWinnerVisuallyRef.current;\n    const getBettorsForAnimation = () => {\n      const currentBettors = getCurrentBettors();\n      const prevBettors = getPreviousBettors();\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const showingWinner = getShowWinnerVisually();\n\n      // Use same logic as carousel rendering: prefer previous bettors when displaying winner or waiting\n      const bettors = currentBettors.length > 0 ? currentBettors : showingWinner || isWaiting || currentWinner ? prevBettors : [];\n      console.log('🎠 getBettorsForAnimation - Current:', currentBettors.length, 'Previous:', prevBettors.length, 'Using:', bettors.length, 'bettors');\n      console.log('🎠 getBettorsForAnimation - States: waiting:', isWaiting, 'winner:', !!currentWinner, 'showing:', showingWinner);\n      return bettors;\n    };\n    const totalCards = 6; // Fixed to prevent recalculation\n    const resetPoint = cardWidth * totalCards;\n    console.log('🎠 Starting carousel animation with fixed parameters');\n    const animate = () => {\n      // Get current values using refs\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const timeLeft = getTimeRemaining();\n\n      // PHASE 1: Normal scrolling or waiting phase\n      if (!currentWinner) {\n        if (isWaiting && timeLeft === 0) {\n          // Fast spin while waiting for winner announcement\n          if (animationPhase !== 'fast-spin') {\n            animationPhase = 'fast-spin';\n            console.log('🎰 PHASE 1: Fast spinning while waiting for winner...');\n          }\n          currentPosition += 12; // Fast spin\n          if (currentPosition >= resetPoint) {\n            currentPosition = 0;\n          }\n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          animationId = requestAnimationFrame(animate);\n          return;\n        } else {\n          // Normal carousel movement when not waiting\n          if (animationPhase !== 'normal') {\n            animationPhase = 'normal';\n            console.log('🎠 PHASE: Normal carousel movement');\n          }\n          currentPosition += 2;\n          if (currentPosition >= resetPoint) {\n            currentPosition = 0;\n          }\n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          animationId = requestAnimationFrame(animate);\n          return;\n        }\n      }\n\n      // DEBUG: Log when we have a winner but are not in reveal phase yet\n      if (currentWinner && animationPhase !== 'slow-reveal') {\n        console.log('🔄 TRANSITIONING: Winner detected, switching to slow-reveal phase');\n      }\n\n      // PHASE 2: Winner announced - start dramatic reveal animation\n      if (currentWinner && animationPhase !== 'slow-reveal' && !winnerPositionFound) {\n        // BLOCK: If already showing winner animation, ignore all new winner requests\n        if (isShowingWinnerAnimationRef.current) {\n          console.log('🚫 BLOCKED: Winner animation already in progress, ignoring duplicate');\n          animationId = requestAnimationFrame(animate);\n          return;\n        }\n\n        // Start the winner animation and block future attempts\n        animationPhase = 'slow-reveal';\n        isShowingWinnerAnimationRef.current = true; // Block future winner animations\n        lastProcessedWinnerTimestamp = currentWinner.timestamp;\n        console.log('🎯 PHASE 2: Winner announced! Starting dramatic reveal animation...');\n        console.log('🔒 BLOCKING future winner animations until new round');\n\n        // Calculate target position immediately when winner is announced\n        const bettorsForAnimation = getBettorsForAnimation();\n        const allItems = [...bettorsForAnimation, ...Array.from({\n          length: Math.max(0, 6 - bettorsForAnimation.length)\n        }, () => null)];\n        const winnerIndex = allItems.findIndex(item => {\n          if (!item || !currentWinner) return false;\n          return item.address === currentWinner.winner || item.address === currentWinner.fullAddress || item.username === currentWinner.username;\n        });\n        if (winnerIndex !== -1) {\n          // Go through players once (one full cycle) then land on winner\n          const oneCycleDistance = cardWidth * totalCards; // One full cycle through all cards\n\n          // Get precise measurements for mobile layout\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          const carouselContainer = document.querySelector('.players-carousel');\n          const carouselTrack = document.querySelector('.carousel-track');\n          let arrowCenterOffset = 240; // Default fallback\n          if (targetArrow && carouselContainer && carouselTrack) {\n            // Get the arrow position relative to the track (not the container)\n            const arrowRect = targetArrow.getBoundingClientRect();\n            const trackRect = carouselTrack.getBoundingClientRect();\n            arrowCenterOffset = arrowRect.left - trackRect.left + arrowRect.width / 2;\n            console.log('🎯 PRECISE ARROW POSITION: Arrow center is at', arrowCenterOffset, 'px from track left');\n          }\n\n          // Mobile layout calculations:\n          // - .players-carousel has margin: 0 16px\n          // - .carousel-track has padding: 12px\n          // - Arrow is centered in the container, so for mobile (448px container width):\n          //   Arrow center = (448px - 32px margin) / 2 = 208px from container left\n          //   But relative to track = 208px - 12px padding = 196px from track left\n\n          // Calculate where the winner card should be positioned\n          const cardCenterOffset = cardWidth / 2; // Half card width (60px if cardWidth = 120px)\n          const winnerCardLeftPosition = winnerIndex * cardWidth; // Left edge of winner card\n          const winnerCardCenterPosition = winnerCardLeftPosition + cardCenterOffset; // Center of winner card\n\n          // Calculate how much we need to move the track to align winner card center with arrow center\n          const requiredOffset = winnerCardCenterPosition - arrowCenterOffset;\n\n          // Target position = current position + one full cycle + required offset\n          targetPosition = currentPosition + oneCycleDistance + requiredOffset;\n          console.log('🎯 MOBILE POSITIONING CALCULATION:');\n          console.log('  - Winner index:', winnerIndex);\n          console.log('  - Card width:', cardWidth, 'px (110px + 10px gap)');\n          console.log('  - Winner card left edge would be at:', winnerCardLeftPosition, 'px');\n          console.log('  - Winner card center would be at:', winnerCardCenterPosition, 'px');\n          console.log('  - Arrow center is at:', arrowCenterOffset, 'px (from track left)');\n          console.log('  - Required offset to center winner under arrow:', requiredOffset, 'px');\n          console.log('  - Current carousel position:', currentPosition, 'px');\n          console.log('  - One cycle distance:', oneCycleDistance, 'px');\n          console.log('  - Final target position:', targetPosition, 'px');\n          console.log('  - This should land winner card center exactly under arrow!');\n        }\n      }\n\n      // PHASE 3: Execute dramatic slowdown to winner position\n      if (currentWinner && animationPhase === 'slow-reveal' && targetPosition !== null && !winnerPositionFound) {\n        // Calculate distance to target\n        const distanceToTarget = Math.abs(targetPosition - currentPosition);\n        let speed;\n\n        // DEBUG: Log progress every 60 frames (about once per second)\n        if (Math.floor(currentPosition) % 60 === 0) {\n          console.log(`🎯 Animation progress: Current: ${currentPosition.toFixed(1)}, Target: ${targetPosition.toFixed(1)}, Distance: ${distanceToTarget.toFixed(1)}`);\n        }\n\n        // Update arrow visual state based on distance\n        const targetArrow = document.querySelector('.carousel-target-arrow');\n        if (targetArrow) {\n          if (distanceToTarget < 200) {\n            targetArrow.classList.add('winner-approaching');\n          } else {\n            targetArrow.classList.remove('winner-approaching');\n          }\n        }\n\n        // ENHANCED SUSPENSE ALGORITHM: Go through one cycle then dramatic slowdown\n        if (distanceToTarget > 800) {\n          speed = 20; // Very fast for going through the cycle\n        } else if (distanceToTarget > 600) {\n          speed = 15; // Fast approach during cycle\n        } else if (distanceToTarget > 400) {\n          speed = 12; // Medium speed during cycle\n        } else if (distanceToTarget > 300) {\n          speed = 8; // Starting to slow down as we approach final position\n        } else if (distanceToTarget > 200) {\n          speed = 5; // Noticeable slowdown\n        } else if (distanceToTarget > 100) {\n          speed = 2.5; // Slowing down dramatically...\n        } else if (distanceToTarget > 50) {\n          speed = 1.2; // Very slow...\n        } else if (distanceToTarget > 25) {\n          speed = 0.6; // Crawling...\n        } else if (distanceToTarget > 10) {\n          speed = 0.2; // Almost stopping...\n        } else {\n          speed = 0.05; // Final crawl to target\n        }\n\n        // Move towards target with calculated speed\n        if (currentPosition < targetPosition) {\n          currentPosition += speed;\n          if (currentPosition >= targetPosition) {\n            currentPosition = targetPosition;\n            winnerPositionFound = true;\n          }\n        } else if (currentPosition > targetPosition) {\n          currentPosition -= speed;\n          if (currentPosition <= targetPosition) {\n            currentPosition = targetPosition;\n            winnerPositionFound = true;\n          }\n        } else {\n          winnerPositionFound = true;\n        }\n\n        // Check if we've reached the target\n        if (winnerPositionFound) {\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          if (targetArrow) {\n            targetArrow.classList.remove('winner-approaching');\n            targetArrow.classList.add('winner-landed');\n          }\n          console.log('🎯 ANIMATION COMPLETE! Winner landed perfectly on target!');\n          console.log('🎯 Final position:', currentPosition, 'px');\n          console.log('🎯 NOW REVEALING WINNER VISUALLY!');\n\n          // NOW reveal the winner visually (CSS animation disabled to keep position)\n          setShowWinnerVisually(true);\n          console.log('🎯 Winner revealed! Position should remain locked.');\n\n          // Log final positioning for debugging\n          setTimeout(() => {\n            const targetArrow = document.querySelector('.carousel-target-arrow');\n            const winnerCard = document.querySelector('.carousel-card.winner');\n            if (targetArrow && winnerCard) {\n              const arrowRect = targetArrow.getBoundingClientRect();\n              const cardRect = winnerCard.getBoundingClientRect();\n              const arrowCenter = arrowRect.left + arrowRect.width / 2;\n              const cardCenter = cardRect.left + cardRect.width / 2;\n              console.log('🎯 FINAL VERIFICATION:');\n              console.log('  - Arrow center at:', arrowCenter, 'px from screen left');\n              console.log('  - Winner card center at:', cardCenter, 'px from screen left');\n              console.log('  - Alignment difference:', Math.abs(arrowCenter - cardCenter), 'px');\n            }\n          }, 100);\n          animationPhase = 'stopped';\n          // Stop the animation\n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          return;\n        }\n        carousel.style.transform = `translateX(-${currentPosition}px)`;\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n\n      // PHASE 4: Animation stopped (winner landed)\n      if (animationPhase === 'stopped') {\n        return; // Do nothing, winner is positioned\n      }\n\n      // If we reach here, something unexpected happened - continue animation\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n\n    // Reset animation when new round starts\n    const resetAnimation = () => {\n      animationPhase = 'normal';\n      winnerPositionFound = false;\n      winnerCardVisible = false;\n      targetPosition = null;\n      lastProcessedWinnerTimestamp = null; // Clear processed winner\n      isShowingWinnerAnimationRef.current = false; // UNBLOCK winner animations for new round\n      setShowWinnerVisually(false); // Hide winner visually for new round\n      const targetArrow = document.querySelector('.carousel-target-arrow');\n      if (targetArrow) {\n        targetArrow.classList.remove('winner-approaching', 'winner-landed');\n      }\n\n      // Restart animation if it was stopped\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      animationId = requestAnimationFrame(animate);\n      console.log('🔄 Animation restarted for new round');\n      console.log('🔓 UNBLOCKED winner animations for new round');\n    };\n\n    // Expose reset function for external use\n    window.resetCarouselAnimation = resetAnimation;\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n      // Clean up global reference\n      delete window.resetCarouselAnimation;\n    };\n  }, []); // EMPTY dependency array to prevent re-initialization\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', timerData => {\n      console.log('⏰ App: Socket timer update:', timerData);\n\n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n\n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n\n        // Clear winner state when new round detected\n        if (isNewRound && contractWinner) {\n          console.log('🔄 Timer update detected new round - clearing winner state');\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n        }\n\n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n\n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', roundData => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n\n      // Check if we're in the middle of a winner display (don't clear for 10 seconds)\n      const isWinnerDisplayActive = contractWinnerRef.current && winnerCoordinator.isActive();\n      const isShowingAnimation = isShowingWinnerAnimationRef.current;\n      if (isWinnerDisplayActive || isShowingAnimation) {\n        console.log('🔄 New round - DELAYING reset because winner display/animation is active');\n        console.log('🔄 Winner display will auto-clear after 10 seconds');\n        // Still update timer and round, but don't clear winner states or unblock animations\n        setTimeRemaining(roundData.timeRemaining);\n        setCurrentRound(roundData.roundNumber);\n        return;\n      }\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n\n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n\n      // UNBLOCK winner animations for new round (only if not currently showing animation)\n      if (!isShowingWinnerAnimationRef.current) {\n        isShowingWinnerAnimationRef.current = false;\n        console.log('🔓 UNBLOCKED winner animations for new round');\n      } else {\n        console.log('⏳ NOT unblocking - winner animation still in progress');\n      }\n\n      // Reset animation phases and arrow state\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n      console.log('🔄 New round - cleared all winner states and reset animation');\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', gameState => {\n      var _gameState$timer;\n      console.log('🎮 App: Game state update:', gameState);\n\n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = (_gameState$timer = gameState.timer) === null || _gameState$timer === void 0 ? void 0 : _gameState$timer.timeRemaining;\n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n\n          // Only sync if there's a significant difference (>10s) or if backend is ahead\n          if (timeDiff > 10 || backendTimeRemaining > prev) {\n            console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n\n          // Keep local countdown running if difference is small\n          console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n\n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n\n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n\n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        setGameBettors(gameState.bettors);\n      }\n\n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', gameData => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', data => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', data => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n\n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      setWaitingForWinner(isWaiting);\n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', winnerData => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n\n      // EMERGENCY: Store current bettors as previous if previous is empty but current has data\n      if (previousRoundBettors.length === 0 && gameBettors.length > 0) {\n        console.log('🚨 EMERGENCY: Storing current bettors as previous for winner animation:', gameBettors);\n        setPreviousRoundBettors([...gameBettors]);\n      }\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', winnerData => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n\n      // EMERGENCY: Store current bettors as previous if previous is empty but current has data\n      if (previousRoundBettors.length === 0 && gameBettors.length > 0) {\n        console.log('🚨 EMERGENCY: Storing current bettors as previous for winner animation:', gameBettors);\n        setPreviousRoundBettors([...gameBettors]);\n      }\n      setWaitingForWinner(false);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', resetData => {\n      console.log('🔄 App: Round reset detected:', resetData);\n\n      // Check if we're in the middle of a winner display (don't clear for 10 seconds)\n      const isWinnerDisplayActive = contractWinnerRef.current && winnerCoordinator.isActive();\n      const isShowingAnimation = isShowingWinnerAnimationRef.current;\n      if (isWinnerDisplayActive || isShowingAnimation) {\n        console.log('🔄 Round reset - DELAYING reset because winner display/animation is active');\n        console.log('🔄 Winner display will auto-clear after 10 seconds');\n        // Still update timer and round, but don't clear winner states or unblock animations\n        setTimeRemaining(resetData.timeRemaining);\n        setCurrentRound(resetData.roundNumber);\n        return;\n      }\n\n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n\n      // Clear ALL winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n\n      // UNBLOCK winner animations for fresh timer (only if not currently showing animation)\n      if (!isShowingWinnerAnimationRef.current) {\n        isShowingWinnerAnimationRef.current = false;\n        console.log('🔓 UNBLOCKED winner animations for round reset');\n      } else {\n        console.log('⏳ NOT unblocking - winner animation still in progress');\n      }\n\n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n\n      // Reset animation phases and arrow state\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n      console.log('🔄 Round reset - cleared all winner and bettor states and reset animation');\n    });\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = e => {\n    // Allow both comma (,) and period (.) as decimal separators\n    const inputValue = e.target.value.replace(',', '.'); // Convert comma to period for parsing\n    const value = parseFloat(inputValue) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n  const handleTabChange = tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n    try {\n      hapticFeedback('medium');\n      await placeBet(betAmount);\n\n      // Reset bet amount after successful bet\n      setBetAmount(0.11);\n      hapticFeedback('success');\n      showAlert('✅ Bet placed successfully!');\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logo-icon\",\n              children: \"\\uD83C\\uDFB0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 961,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"app-name\",\n              children: \"SlotPot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 962,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 960,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-icons\",\n            children: /*#__PURE__*/_jsxDEV(WalletConnection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 965,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 964,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 959,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-label\",\n            children: \"Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-amount\",\n            children: [isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000', /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"balance-symbol\",\n              children: \"TON\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 972,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 970,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 968,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-title\",\n            children: \"\\uD83D\\uDCB0 JACKPOT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 981,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-value-display\",\n            children: jackpotValue.toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 982,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-subtitle\",\n            children: \"Winner takes all...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 983,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-input-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"bet-amount-input\",\n              value: betAmount,\n              onChange: handleBetChange,\n              step: \"0.01\",\n              min: \"0.01\",\n              placeholder: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 989,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bet-increment-btn\",\n              onClick: () => setBetAmount(prev => prev + 0.1),\n              children: \"+0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 998,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 988,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-button\",\n            onClick: handlePlaceBet,\n            disabled: isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement,\n            children: contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' : isPlacingBet ? 'Betting...' : 'Bet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: userBetTotal.toFixed(3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1015,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Wager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1016,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1014,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card chance-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: [userWinChance.toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1019,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Chance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1018,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Time Remaining \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: [Math.floor((timeRemaining || 0) / 60), \":\", ((timeRemaining || 0) % 60).toString().padStart(2, '0')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1027,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1025,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-carousel-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `carousel-header ${timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? 'analyzing' : showWinnerVisually ? 'winner' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? \"🔍 Analyzing Bets...\" : showWinnerVisually && contractWinner ? `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` : `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1038,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1034,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"players-carousel\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"carousel-target-arrow\",\n              children: \"\\u2B07\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1049,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: carouselRef,\n              className: `carousel-track ${timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? 'analyzing' : showWinnerVisually ? 'winner-revealed' : slotSpinning ? 'sliding' : ''}`,\n              style: {\n                transition: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually || showWinnerVisually ? 'none' : ''\n              },\n              children: (() => {\n                // For a fresh round, prefer empty display over old data\n                // Only use previousRoundBettors if we're in winner display mode\n                const bettorsToShow = gameBettors.length > 0 ? gameBettors : showWinnerVisually || waitingForWinner ? previousRoundBettors : [];\n                console.log('🎠 Using bettors:', bettorsToShow.length, 'total bettors');\n                console.log('🎠 ContractWinner from backend:', contractWinner);\n\n                // Check if we're showing waiting cards due to empty data\n                if (bettorsToShow.length === 0) {\n                  console.log('⚠️ SHOWING WAITING CARDS - No bettor data available');\n                }\n\n                // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                const allItems = [...bettorsToShow, ...Array.from({\n                  length: Math.max(0, 6 - bettorsToShow.length)\n                }, () => null)];\n\n                // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                const infiniteItems = [...allItems, ...allItems, ...allItems];\n                return infiniteItems.map((bettor, index) => {\n                  // Winner highlighting - only show AFTER animation completes (showWinnerVisually)\n                  const isWinner = showWinnerVisually && contractWinner && bettor && (bettor.address === contractWinner.winner || bettor.address === contractWinner.fullAddress || bettor.username === contractWinner.username);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `carousel-card ${isWinner ? 'winner' : bettor ? 'active' : 'waiting'}`,\n                    \"data-debug\": `winner: ${isWinner}, address: ${bettor === null || bettor === void 0 ? void 0 : bettor.address}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-avatar\",\n                      children: bettor ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"generated-avatar\",\n                        children: bettor.username ? bettor.username[0].toUpperCase() : '?'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1100,\n                        columnNumber: 33\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"waiting-icon\",\n                        children: \"\\u2753\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1104,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1098,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-info\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-name\",\n                        children: bettor ? bettor.username || bettor.displayName || 'Player' : 'Waiting'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1108,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-bet\",\n                        children: bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1111,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1107,\n                      columnNumber: 29\n                    }, this), isWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"winner-crown\",\n                      children: \"\\uD83D\\uDC51\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1116,\n                      columnNumber: 31\n                    }, this)]\n                  }, `${index}-${(bettor === null || bettor === void 0 ? void 0 : bettor.address) || 'waiting'}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1094,\n                    columnNumber: 27\n                  }, this);\n                });\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1051,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1047,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83C\\uDFE0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1132,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\u26A1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1136,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD0D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1144,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1142,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"games-button\",\n          children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n            size: 14\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1148,\n            columnNumber: 15\n          }, this), \"Games\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1128,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 956,\n      columnNumber: 9\n    }, this), isLoadingContract && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"\\uD83D\\uDD04\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading contract data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1156,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinnerBroadcast, {\n      socketService: socketService\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 955,\n    columnNumber: 5\n  }, this);\n}\n\n// Main App component with TON Connect Provider\n_s(AppContent, \"UmKGcibwy9vnP3g1ufj/4BarH1E=\", false, function () {\n  return [useTelegramWebApp, useJackpotContract];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(TonConnectUIProvider, {\n    manifestUrl: manifestUrl,\n    uiPreferences: uiOptions.uiPreferences,\n    language: uiOptions.language,\n    restoreConnection: uiOptions.restoreConnection,\n    actionsConfiguration: uiOptions.actionsConfiguration,\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1171,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","TonConnectUIProvider","Chat","GameArea","MobileChat","WalletConnection","WinnerBroadcast","useTelegramWebApp","useJackpotContract","socketService","winnerCoordinator","uiOptions","MessageCircle","Trophy","Users","DollarSign","jsxDEV","_jsxDEV","manifestUrl","AppContent","_s","_contractState$timer2","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","showWinnerVisually","setShowWinnerVisually","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","carouselRef","isShowingWinnerAnimationRef","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","waitingForWinnerRef","previousRoundBettorsRef","timeRemainingRef","showWinnerVisuallyRef","current","console","log","winnerAddress","winner","fullAddress","winnerName","username","displayName","prize","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","shouldBlock","length","emergencyBettor","address","amount","parseFloat","Date","now","setActive","winnerId","setTimeout","window","resetCarouselAnimation","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","_contractState$curren","timer","isActive","timeElapsed","timerExpired","undefined","jackpotValue","totalJackpot","isLive","userBetTotal","filter","bettor","walletAddress","reduce","total","userWinChance","currentRoundTotal","liveJackpotValue","_contractState$timer","countdown","setInterval","prev","newTime","clearInterval","carousel","style","transition","animationId","currentPosition","winnerPositionFound","winnerCardVisible","targetPosition","animationPhase","lastProcessedWinnerTimestamp","cardWidth","getCurrentBettors","getPreviousBettors","getContractWinner","getWaitingForWinner","getTimeRemaining","getShowWinnerVisually","getBettorsForAnimation","currentBettors","prevBettors","currentWinner","isWaiting","showingWinner","bettors","totalCards","resetPoint","animate","timeLeft","transform","requestAnimationFrame","bettorsForAnimation","allItems","Array","from","Math","max","winnerIndex","findIndex","item","oneCycleDistance","targetArrow","document","querySelector","carouselContainer","carouselTrack","arrowCenterOffset","arrowRect","getBoundingClientRect","trackRect","left","width","cardCenterOffset","winnerCardLeftPosition","winnerCardCenterPosition","requiredOffset","distanceToTarget","abs","speed","floor","toFixed","classList","add","remove","winnerCard","cardRect","arrowCenter","cardCenter","resetAnimation","cancelAnimationFrame","connect","on","timerData","warn","newTimeRemaining","newRoundNumber","timeDiff","isNewRound","roundData","isWinnerDisplayActive","isShowingAnimation","reset","gameState","_gameState$timer","backendTimeRemaining","isWaitingForWinner","isArray","winnerAnnouncement","gameData","data","message","resetData","off","disconnect","handleBetChange","e","inputValue","target","value","replace","min","handleTabChange","tab","handlePlaceBet","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userBalance","type","onChange","step","placeholder","onClick","disabled","toString","padStart","ref","bettorsToShow","infiniteItems","map","index","isWinner","toUpperCase","size","_c","App","uiPreferences","language","restoreConnection","actionsConfiguration","_c2","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n  const isShowingWinnerAnimationRef = useRef(false); // Block multiple winner animations\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  \n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { \n    contractWinnerRef.current = contractWinner; \n    \n    // Log winner detection only once when contractWinner changes\n    if (contractWinner) {\n      console.log('🏆 WINNER DETECTED FROM BACKEND!', { \n        winnerAddress: contractWinner.winner || contractWinner.fullAddress,\n        winnerName: contractWinner.username || contractWinner.displayName || 'Player',\n        prize: contractWinner.prize,\n        contractWinner\n      });\n      console.log('🎬 ANIMATION SHOULD START NOW - waiting for carousel to detect winner');\n    } else {\n      console.log('❌ WINNER CLEARED - contractWinner set to null');\n    }\n  }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n  useEffect(() => { waitingForWinnerRef.current = waitingForWinner; }, [waitingForWinner]);\n  useEffect(() => { previousRoundBettorsRef.current = previousRoundBettors; }, [previousRoundBettors]);\n  useEffect(() => { timeRemainingRef.current = timeRemaining; }, [timeRemaining]);\n  useEffect(() => { showWinnerVisuallyRef.current = showWinnerVisually; }, [showWinnerVisually]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    \n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n    \n    // EMERGENCY FALLBACK: If no bettor data available, create a minimal bettor from winner data\n    if (gameBettors.length === 0 && previousRoundBettors.length === 0 && winnerData) {\n      const emergencyBettor = {\n        address: winnerData.winner || winnerData.fullAddress,\n        username: winnerData.username || winnerData.displayName || 'Winner',\n        amount: winnerData.betAmount || parseFloat(winnerData.prize) || 0.1,\n        timestamp: Date.now()\n      };\n      console.log('🚨 CREATING EMERGENCY BETTOR DATA for animation:', emergencyBettor);\n      setPreviousRoundBettors([emergencyBettor]);\n    }\n    \n    // IMMEDIATELY block animation when winner is detected (before any other events can interfere)\n    if (!isShowingWinnerAnimationRef.current) {\n      isShowingWinnerAnimationRef.current = true;\n      console.log('🔒 IMMEDIATE BLOCK: Winner detected, blocking animation system');\n    }\n    \n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Fallback timeout to ensure winner display clears after exactly 10 seconds\n    const winnerId = winnerTimestamp;\n    setTimeout(() => {\n        // Only clear if this is still the same winner (prevent clearing new winners)\n        if (lastWinnerTimestampRef.current === winnerId) {\n          console.log('⏰ 10-second timeout - clearing winner display and resetting animation');\n      setShowWinnerAnnouncement(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n          setContractWinner(null); // Clear winner display after 10 seconds\n          setShowWinnerVisually(false); // Reset visual winner state\n      winnerCoordinator.setActive(false);\n          \n          // UNBLOCK winner animations now that display is complete\n          isShowingWinnerAnimationRef.current = false;\n          console.log('🔓 UNBLOCKED winner animations after 10-second timeout');\n          \n          // NOW it's safe to reset the animation for next round\n          if (window.resetCarouselAnimation) {\n            window.resetCarouselAnimation();\n            console.log('🔄 Winner timeout complete - now resetting animation for next round');\n          }\n        }\n      }, 10000); // Exactly 10 seconds\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    \n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\n        : (Number(rawAdminInfo.currentRound) || 0)\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    if (!contractState) return contractState;\n    \n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' \n        ? (contractState.currentRound?.roundNumber || 0)\n        : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  \n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    \n    return gameBettors\n      .filter(bettor => \n        bettor.address === address || \n        bettor.walletAddress === address\n      )\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  \n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n    \n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n    \n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    \n    if (!liveJackpotValue) return 0;\n    \n    return (userBetTotal / liveJackpotValue) * 100;\n  }, [userBetTotal, jackpotValue, gameBettors, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    // Always sync with backend timer when it changes\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n\n    console.log('⏰ Starting local countdown timer...');\n\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n        \n          // When we reach 0, trigger \"analyzing bets\" state locally\n        if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n        }\n        \n        return newTime;\n        }\n        \n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) {\n      console.log('⚠️ CAROUSEL REF NOT READY - animation cannot start');\n      return;\n    }\n\n    console.log('🎠 CAROUSEL ANIMATION STARTING with ref:', carousel);\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    let winnerCardVisible = false;\n    let targetPosition = null; // For dramatic slow-down effect\n    let animationPhase = 'normal'; // 'normal', 'fast-spin', 'slow-reveal'\n    let lastProcessedWinnerTimestamp = null; // Track which winner we've processed\n    const cardWidth = 110 + 10; // card width + gap\n    \n    // Use refs to get current values without causing re-renders\n    const getCurrentBettors = () => gameBettorsRef.current;\n    const getPreviousBettors = () => previousRoundBettorsRef.current;\n    const getContractWinner = () => contractWinnerRef.current;\n    const getWaitingForWinner = () => waitingForWinnerRef.current;\n    const getTimeRemaining = () => timeRemainingRef.current;\n    const getShowWinnerVisually = () => showWinnerVisuallyRef.current;\n    \n    const getBettorsForAnimation = () => {\n      const currentBettors = getCurrentBettors();\n      const prevBettors = getPreviousBettors();\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const showingWinner = getShowWinnerVisually();\n      \n      // Use same logic as carousel rendering: prefer previous bettors when displaying winner or waiting\n      const bettors = currentBettors.length > 0 ? currentBettors : \n                      (showingWinner || isWaiting || currentWinner) ? prevBettors : [];\n      \n      console.log('🎠 getBettorsForAnimation - Current:', currentBettors.length, 'Previous:', prevBettors.length, 'Using:', bettors.length, 'bettors');\n      console.log('🎠 getBettorsForAnimation - States: waiting:', isWaiting, 'winner:', !!currentWinner, 'showing:', showingWinner);\n      \n      return bettors;\n    };\n    \n    const totalCards = 6; // Fixed to prevent recalculation\n    const resetPoint = cardWidth * totalCards;\n    \n    console.log('🎠 Starting carousel animation with fixed parameters');\n\n    const animate = () => {\n      // Get current values using refs\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const timeLeft = getTimeRemaining();\n      \n      // PHASE 1: Normal scrolling or waiting phase\n      if (!currentWinner) {\n        if (isWaiting && timeLeft === 0) {\n          // Fast spin while waiting for winner announcement\n          if (animationPhase !== 'fast-spin') {\n            animationPhase = 'fast-spin';\n            console.log('🎰 PHASE 1: Fast spinning while waiting for winner...');\n          }\n          \n          currentPosition += 12; // Fast spin\n          if (currentPosition >= resetPoint) {\n            currentPosition = 0;\n          }\n          \n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          animationId = requestAnimationFrame(animate);\n          return;\n        } else {\n          // Normal carousel movement when not waiting\n          if (animationPhase !== 'normal') {\n            animationPhase = 'normal';\n            console.log('🎠 PHASE: Normal carousel movement');\n          }\n          \n          currentPosition += 2;\n          if (currentPosition >= resetPoint) {\n            currentPosition = 0;\n          }\n          \n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          animationId = requestAnimationFrame(animate);\n          return;\n        }\n      }\n      \n      // DEBUG: Log when we have a winner but are not in reveal phase yet\n      if (currentWinner && animationPhase !== 'slow-reveal') {\n        console.log('🔄 TRANSITIONING: Winner detected, switching to slow-reveal phase');\n      }\n      \n      // PHASE 2: Winner announced - start dramatic reveal animation\n      if (currentWinner && animationPhase !== 'slow-reveal' && !winnerPositionFound) {\n        // BLOCK: If already showing winner animation, ignore all new winner requests\n        if (isShowingWinnerAnimationRef.current) {\n          console.log('🚫 BLOCKED: Winner animation already in progress, ignoring duplicate');\n          animationId = requestAnimationFrame(animate);\n          return;\n        }\n        \n        // Start the winner animation and block future attempts\n        animationPhase = 'slow-reveal';\n        isShowingWinnerAnimationRef.current = true; // Block future winner animations\n        lastProcessedWinnerTimestamp = currentWinner.timestamp;\n        console.log('🎯 PHASE 2: Winner announced! Starting dramatic reveal animation...');\n        console.log('🔒 BLOCKING future winner animations until new round');\n        \n        // Calculate target position immediately when winner is announced\n        const bettorsForAnimation = getBettorsForAnimation();\n        const allItems = [\n          ...bettorsForAnimation,\n          ...Array.from({ length: Math.max(0, 6 - bettorsForAnimation.length) }, () => null)\n        ];\n        \n        const winnerIndex = allItems.findIndex(item => {\n          if (!item || !currentWinner) return false;\n          return (\n            item.address === currentWinner.winner ||\n            item.address === currentWinner.fullAddress ||\n            item.username === currentWinner.username\n          );\n        });\n        \n        if (winnerIndex !== -1) {\n          // Go through players once (one full cycle) then land on winner\n          const oneCycleDistance = cardWidth * totalCards; // One full cycle through all cards\n          \n          // Get precise measurements for mobile layout\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          const carouselContainer = document.querySelector('.players-carousel');\n          const carouselTrack = document.querySelector('.carousel-track');\n          \n          let arrowCenterOffset = 240; // Default fallback\n          if (targetArrow && carouselContainer && carouselTrack) {\n            // Get the arrow position relative to the track (not the container)\n            const arrowRect = targetArrow.getBoundingClientRect();\n            const trackRect = carouselTrack.getBoundingClientRect();\n            arrowCenterOffset = arrowRect.left - trackRect.left + (arrowRect.width / 2);\n            console.log('🎯 PRECISE ARROW POSITION: Arrow center is at', arrowCenterOffset, 'px from track left');\n          }\n          \n          // Mobile layout calculations:\n          // - .players-carousel has margin: 0 16px\n          // - .carousel-track has padding: 12px\n          // - Arrow is centered in the container, so for mobile (448px container width):\n          //   Arrow center = (448px - 32px margin) / 2 = 208px from container left\n          //   But relative to track = 208px - 12px padding = 196px from track left\n          \n          // Calculate where the winner card should be positioned\n          const cardCenterOffset = cardWidth / 2; // Half card width (60px if cardWidth = 120px)\n          const winnerCardLeftPosition = winnerIndex * cardWidth; // Left edge of winner card\n          const winnerCardCenterPosition = winnerCardLeftPosition + cardCenterOffset; // Center of winner card\n          \n          // Calculate how much we need to move the track to align winner card center with arrow center\n          const requiredOffset = winnerCardCenterPosition - arrowCenterOffset;\n          \n          // Target position = current position + one full cycle + required offset\n          targetPosition = currentPosition + oneCycleDistance + requiredOffset;\n          \n          console.log('🎯 MOBILE POSITIONING CALCULATION:');\n          console.log('  - Winner index:', winnerIndex);\n          console.log('  - Card width:', cardWidth, 'px (110px + 10px gap)');\n          console.log('  - Winner card left edge would be at:', winnerCardLeftPosition, 'px');\n          console.log('  - Winner card center would be at:', winnerCardCenterPosition, 'px');\n          console.log('  - Arrow center is at:', arrowCenterOffset, 'px (from track left)');\n          console.log('  - Required offset to center winner under arrow:', requiredOffset, 'px');\n          console.log('  - Current carousel position:', currentPosition, 'px');\n          console.log('  - One cycle distance:', oneCycleDistance, 'px');\n          console.log('  - Final target position:', targetPosition, 'px');\n          console.log('  - This should land winner card center exactly under arrow!');\n        }\n      }\n      \n      // PHASE 3: Execute dramatic slowdown to winner position\n      if (currentWinner && animationPhase === 'slow-reveal' && targetPosition !== null && !winnerPositionFound) {\n        // Calculate distance to target\n        const distanceToTarget = Math.abs(targetPosition - currentPosition);\n        let speed;\n        \n        // DEBUG: Log progress every 60 frames (about once per second)\n        if (Math.floor(currentPosition) % 60 === 0) {\n          console.log(`🎯 Animation progress: Current: ${currentPosition.toFixed(1)}, Target: ${targetPosition.toFixed(1)}, Distance: ${distanceToTarget.toFixed(1)}`);\n        }\n        \n        // Update arrow visual state based on distance\n        const targetArrow = document.querySelector('.carousel-target-arrow');\n        if (targetArrow) {\n          if (distanceToTarget < 200) {\n            targetArrow.classList.add('winner-approaching');\n          } else {\n            targetArrow.classList.remove('winner-approaching');\n          }\n        }\n        \n        // ENHANCED SUSPENSE ALGORITHM: Go through one cycle then dramatic slowdown\n        if (distanceToTarget > 800) {\n          speed = 20; // Very fast for going through the cycle\n        } else if (distanceToTarget > 600) {\n          speed = 15; // Fast approach during cycle\n        } else if (distanceToTarget > 400) {\n          speed = 12; // Medium speed during cycle\n        } else if (distanceToTarget > 300) {\n          speed = 8; // Starting to slow down as we approach final position\n        } else if (distanceToTarget > 200) {\n          speed = 5; // Noticeable slowdown\n        } else if (distanceToTarget > 100) {\n          speed = 2.5; // Slowing down dramatically...\n        } else if (distanceToTarget > 50) {\n          speed = 1.2; // Very slow...\n        } else if (distanceToTarget > 25) {\n          speed = 0.6; // Crawling...\n        } else if (distanceToTarget > 10) {\n          speed = 0.2; // Almost stopping...\n        } else {\n          speed = 0.05; // Final crawl to target\n        }\n        \n        // Move towards target with calculated speed\n        if (currentPosition < targetPosition) {\n          currentPosition += speed;\n          if (currentPosition >= targetPosition) {\n            currentPosition = targetPosition;\n            winnerPositionFound = true;\n          }\n        } else if (currentPosition > targetPosition) {\n          currentPosition -= speed;\n          if (currentPosition <= targetPosition) {\n            currentPosition = targetPosition;\n            winnerPositionFound = true;\n          }\n        } else {\n          winnerPositionFound = true;\n        }\n        \n        // Check if we've reached the target\n        if (winnerPositionFound) {\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          if (targetArrow) {\n            targetArrow.classList.remove('winner-approaching');\n            targetArrow.classList.add('winner-landed');\n          }\n          console.log('🎯 ANIMATION COMPLETE! Winner landed perfectly on target!');\n          console.log('🎯 Final position:', currentPosition, 'px');\n          console.log('🎯 NOW REVEALING WINNER VISUALLY!');\n          \n          // NOW reveal the winner visually (CSS animation disabled to keep position)\n          setShowWinnerVisually(true);\n          console.log('🎯 Winner revealed! Position should remain locked.');\n          \n          // Log final positioning for debugging\n          setTimeout(() => {\n            const targetArrow = document.querySelector('.carousel-target-arrow');\n            const winnerCard = document.querySelector('.carousel-card.winner');\n            if (targetArrow && winnerCard) {\n              const arrowRect = targetArrow.getBoundingClientRect();\n              const cardRect = winnerCard.getBoundingClientRect();\n              const arrowCenter = arrowRect.left + (arrowRect.width / 2);\n              const cardCenter = cardRect.left + (cardRect.width / 2);\n              console.log('🎯 FINAL VERIFICATION:');\n              console.log('  - Arrow center at:', arrowCenter, 'px from screen left');\n              console.log('  - Winner card center at:', cardCenter, 'px from screen left');\n              console.log('  - Alignment difference:', Math.abs(arrowCenter - cardCenter), 'px');\n            }\n          }, 100);\n          \n          animationPhase = 'stopped';\n          // Stop the animation\n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          return;\n        }\n        \n        carousel.style.transform = `translateX(-${currentPosition}px)`;\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n      \n      // PHASE 4: Animation stopped (winner landed)\n      if (animationPhase === 'stopped') {\n        return; // Do nothing, winner is positioned\n      }\n\n      // If we reach here, something unexpected happened - continue animation\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n\n    // Reset animation when new round starts\n    const resetAnimation = () => {\n      animationPhase = 'normal';\n      winnerPositionFound = false;\n      winnerCardVisible = false;\n      targetPosition = null;\n      lastProcessedWinnerTimestamp = null; // Clear processed winner\n      isShowingWinnerAnimationRef.current = false; // UNBLOCK winner animations for new round\n      setShowWinnerVisually(false); // Hide winner visually for new round\n      const targetArrow = document.querySelector('.carousel-target-arrow');\n      if (targetArrow) {\n        targetArrow.classList.remove('winner-approaching', 'winner-landed');\n      }\n      \n      // Restart animation if it was stopped\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      animationId = requestAnimationFrame(animate);\n      console.log('🔄 Animation restarted for new round');\n      console.log('🔓 UNBLOCKED winner animations for new round');\n    };\n    \n    // Expose reset function for external use\n    window.resetCarouselAnimation = resetAnimation;\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n      // Clean up global reference\n      delete window.resetCarouselAnimation;\n    };\n  }, []); // EMPTY dependency array to prevent re-initialization\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      console.log('⏰ App: Socket timer update:', timerData);\n      \n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      \n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      \n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n        \n        // Clear winner state when new round detected\n        if (isNewRound && contractWinner) {\n          console.log('🔄 Timer update detected new round - clearing winner state');\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n        }\n        \n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n        \n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      \n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      \n      // Check if we're in the middle of a winner display (don't clear for 10 seconds)\n      const isWinnerDisplayActive = contractWinnerRef.current && winnerCoordinator.isActive();\n      const isShowingAnimation = isShowingWinnerAnimationRef.current;\n      \n      if (isWinnerDisplayActive || isShowingAnimation) {\n        console.log('🔄 New round - DELAYING reset because winner display/animation is active');\n        console.log('🔄 Winner display will auto-clear after 10 seconds');\n        // Still update timer and round, but don't clear winner states or unblock animations\n        setTimeRemaining(roundData.timeRemaining);\n        setCurrentRound(roundData.roundNumber);\n        return; \n      }\n      \n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n      \n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n      \n      // UNBLOCK winner animations for new round (only if not currently showing animation)\n      if (!isShowingWinnerAnimationRef.current) {\n        isShowingWinnerAnimationRef.current = false;\n        console.log('🔓 UNBLOCKED winner animations for new round');\n      } else {\n        console.log('⏳ NOT unblocking - winner animation still in progress');\n      }\n      \n      // Reset animation phases and arrow state\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n      \n      console.log('🔄 New round - cleared all winner states and reset animation');\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      console.log('🎮 App: Game state update:', gameState);\n      \n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = gameState.timer?.timeRemaining;\n      \n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n          \n          // Only sync if there's a significant difference (>10s) or if backend is ahead\n          if (timeDiff > 10 || backendTimeRemaining > prev) {\n            console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n          \n          // Keep local countdown running if difference is small\n          console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        \n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        \n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        \n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (data) => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n      \n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      \n      setWaitingForWinner(isWaiting);\n      \n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      \n      // EMERGENCY: Store current bettors as previous if previous is empty but current has data\n      if (previousRoundBettors.length === 0 && gameBettors.length > 0) {\n        console.log('🚨 EMERGENCY: Storing current bettors as previous for winner animation:', gameBettors);\n        setPreviousRoundBettors([...gameBettors]);\n      }\n      \n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      \n      // EMERGENCY: Store current bettors as previous if previous is empty but current has data\n      if (previousRoundBettors.length === 0 && gameBettors.length > 0) {\n        console.log('🚨 EMERGENCY: Storing current bettors as previous for winner animation:', gameBettors);\n        setPreviousRoundBettors([...gameBettors]);\n      }\n      \n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', (resetData) => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      \n      // Check if we're in the middle of a winner display (don't clear for 10 seconds)\n      const isWinnerDisplayActive = contractWinnerRef.current && winnerCoordinator.isActive();\n      const isShowingAnimation = isShowingWinnerAnimationRef.current;\n      \n      if (isWinnerDisplayActive || isShowingAnimation) {\n        console.log('🔄 Round reset - DELAYING reset because winner display/animation is active');\n        console.log('🔄 Winner display will auto-clear after 10 seconds');\n        // Still update timer and round, but don't clear winner states or unblock animations\n        setTimeRemaining(resetData.timeRemaining);\n        setCurrentRound(resetData.roundNumber);\n        return;\n      }\n      \n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n      \n      // Clear ALL winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      \n      // UNBLOCK winner animations for fresh timer (only if not currently showing animation)\n      if (!isShowingWinnerAnimationRef.current) {\n        isShowingWinnerAnimationRef.current = false;\n        console.log('🔓 UNBLOCKED winner animations for round reset');\n      } else {\n        console.log('⏳ NOT unblocking - winner animation still in progress');\n      }\n      \n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n      \n      // Reset animation phases and arrow state\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n      \n      console.log('🔄 Round reset - cleared all winner and bettor states and reset animation');\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    // Allow both comma (,) and period (.) as decimal separators\n    const inputValue = e.target.value.replace(',', '.'); // Convert comma to period for parsing\n    const value = parseFloat(inputValue) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n\n    try {\n      hapticFeedback('medium');\n      await placeBet(betAmount);\n      \n      // Reset bet amount after successful bet\n      setBetAmount(0.11);\n      \n        hapticFeedback('success');\n      showAlert('✅ Bet placed successfully!');\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n        <div className=\"app-container\">\n          {/* Header Section */}\n          <div className=\"header-section\">\n            <div className=\"header-top\">\n              <div className=\"logo-section\">\n                <div className=\"logo-icon\">🎰</div>\n                <div className=\"app-name\">SlotPot</div>\n              </div>\n              <div className=\"header-icons\">\n                <WalletConnection />\n              </div>\n            </div>\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">\n                {isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000'}\n                <span className=\"balance-symbol\">TON</span>\n              </div>\n              </div>\n          </div>\n          \n          {/* Main Content */}\n          <div className=\"main-content\">\n            {/* Jackpot Display */}\n            <div className=\"jackpot-header\">\n              <div className=\"jackpot-title\">💰 JACKPOT</div>\n              <div className=\"jackpot-value-display\">{jackpotValue.toFixed(3)}</div>\n              <div className=\"jackpot-subtitle\">Winner takes all...</div>\n            </div>\n\n            {/* Betting Section */}\n            <div className=\"betting-section\">\n              <div className=\"bet-input-section\">\n                <input \n                  type=\"number\" \n                  className=\"bet-amount-input\" \n                  value={betAmount}\n                  onChange={handleBetChange}\n                  step=\"0.01\"\n                  min=\"0.01\"\n                  placeholder=\"0\"\n                />\n                <button className=\"bet-increment-btn\" onClick={() => setBetAmount(prev => prev + 0.1)}>\n                  +0.1\n          </button>\n              </div>\n          <button \n                className=\"bet-button\" \n                onClick={handlePlaceBet}\n                disabled={isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement}\n          >\n                {contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' :\n                 isPlacingBet ? 'Betting...' : 'Bet'}\n          </button>\n        </div>\n\n            {/* Stats Grid */}\n            <div className=\"stats-grid\">\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{userBetTotal.toFixed(3)}</div>\n                <div className=\"stat-label\">Your Wager</div>\n              </div>\n              <div className=\"stat-card chance-stat\">\n                <div className=\"stat-value\">{userWinChance.toFixed(2)}%</div>\n                <div className=\"stat-label\">Your Chance</div>\n          </div>\n        </div>\n\n            {/* Time Section */}\n            <div className=\"time-section\">\n              <div className=\"time-label\">Time Remaining </div>\n              <div className=\"time-value\">\n                {Math.floor((timeRemaining || 0) / 60)}:{((timeRemaining || 0) % 60).toString().padStart(2, '0')}\n          </div>\n        </div>\n\n            {/* Players Carousel Section */}\n            <div className=\"players-carousel-section\">\n              <div className={`carousel-header ${\n                (timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? 'analyzing' : \n                showWinnerVisually ? 'winner' : ''\n              }`}>\n                <h3>\n                  {(timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? \n                    \"🔍 Analyzing Bets...\" : \n                    showWinnerVisually && contractWinner ? \n                    `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` :\n                    `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                  }\n                </h3>\n              </div>\n              <div className=\"players-carousel\">\n                {/* TARGET ARROW - Cards must land here! */}\n                <div className=\"carousel-target-arrow\">⬇️</div>\n                \n                <div \n                  ref={carouselRef}\n                  className={`carousel-track ${\n                    (timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? 'analyzing' : \n                    showWinnerVisually ? 'winner-revealed' : \n                    slotSpinning ? 'sliding' : ''\n                  }`}\n                  style={{\n                    transition: ((timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually)) || showWinnerVisually ? 'none' : ''\n                  }}\n                >\n                  {(() => {\n                    // For a fresh round, prefer empty display over old data\n                    // Only use previousRoundBettors if we're in winner display mode\n                    const bettorsToShow = gameBettors.length > 0 ? gameBettors : \n                                         (showWinnerVisually || waitingForWinner) ? previousRoundBettors : [];\n                    \n                    console.log('🎠 Using bettors:', bettorsToShow.length, 'total bettors');\n                    console.log('🎠 ContractWinner from backend:', contractWinner);\n                    \n                    // Check if we're showing waiting cards due to empty data\n                    if (bettorsToShow.length === 0) {\n                      console.log('⚠️ SHOWING WAITING CARDS - No bettor data available');\n                    }\n                    \n                    // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                    const allItems = [\n                      ...bettorsToShow,\n                      ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n                    ];\n                    \n                    // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                    const infiniteItems = [...allItems, ...allItems, ...allItems];\n                    \n                    return infiniteItems.map((bettor, index) => {\n                      // Winner highlighting - only show AFTER animation completes (showWinnerVisually)\n                      const isWinner = showWinnerVisually && contractWinner && bettor && (\n                        bettor.address === contractWinner.winner ||\n                        bettor.address === contractWinner.fullAddress ||\n                        bettor.username === contractWinner.username\n                      );\n                        \n                        return (\n                          <div key={`${index}-${bettor?.address || 'waiting'}`} className={`carousel-card ${\n                            isWinner ? 'winner' : \n                            bettor ? 'active' : 'waiting'\n                          }`} data-debug={`winner: ${isWinner}, address: ${bettor?.address}`}>\n                            <div className=\"mobile-player-avatar\">\n                              {bettor ? (\n                                <div className=\"generated-avatar\">\n                                  {bettor.username ? bettor.username[0].toUpperCase() : '?'}\n                                </div>\n                              ) : (\n                                <div className=\"waiting-icon\">❓</div>\n                              )}\n                            </div>\n                            <div className=\"mobile-player-info\">\n                              <div className=\"mobile-player-name\">\n                                {bettor ? (bettor.username || bettor.displayName || 'Player') : 'Waiting'}\n                              </div>\n                              <div className=\"mobile-player-bet\">\n                                {bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                              </div>\n                            </div>\n                            {isWinner && (\n                              <div className=\"winner-crown\">👑</div>\n                            )}\n                          </div>\n                        );\n                      });\n                  })()}\n                </div>\n              </div>\n        </div>\n      </div>\n\n      {/* Mobile Footer */}\n      <div className=\"mobile-footer\">\n            <div className=\"footer-stats\">\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🏠</div>\n                <div className=\"footer-stat-value\">Home</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">⚡</div>\n                <div className=\"footer-stat-value\">Fast</div>\n            </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🕐</div>\n                <div className=\"footer-stat-value\">History</div>\n            </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🔍</div>\n                <div className=\"footer-stat-value\">Search</div>\n              </div>\n          </div>\n            <button className=\"games-button\">\n              <DollarSign size={14} />\n            Games\n          </button>\n        </div>\n      </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\">🔄</div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}