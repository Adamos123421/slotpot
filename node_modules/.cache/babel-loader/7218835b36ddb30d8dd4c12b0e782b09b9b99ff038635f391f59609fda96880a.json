{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\nimport { motion, useAnimation, useMotionValue } from 'framer-motion';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\nfunction AppContent() {\n  _s();\n  var _contractState$timer2;\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n\n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  const [isInWinnerState, setIsInWinnerState] = useState(false); // Blocks new winner broadcasts\n\n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n  }, [gameBettors]);\n  useEffect(() => {\n    contractWinnerRef.current = contractWinner;\n\n    // Log winner detection only once when contractWinner changes\n    if (contractWinner) {\n      console.log('🏆 WINNER DETECTED FROM BACKEND!', {\n        winnerAddress: contractWinner.winner || contractWinner.fullAddress,\n        winnerName: contractWinner.username || contractWinner.displayName || 'Player',\n        prize: contractWinner.prize,\n        contractWinner\n      });\n      console.log('🎬 ANIMATION SHOULD START NOW - waiting for carousel to detect winner');\n    } else {\n      console.log('❌ WINNER CLEARED - contractWinner set to null');\n    }\n  }, [contractWinner]);\n  useEffect(() => {\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n  }, [showWinnerAnnouncement]);\n  useEffect(() => {\n    waitingForWinnerRef.current = waitingForWinner;\n  }, [waitingForWinner]);\n  useEffect(() => {\n    previousRoundBettorsRef.current = previousRoundBettors;\n  }, [previousRoundBettors]);\n  useEffect(() => {\n    timeRemainingRef.current = timeRemaining;\n  }, [timeRemaining]);\n  useEffect(() => {\n    showWinnerVisuallyRef.current = showWinnerVisually;\n  }, [showWinnerVisually]);\n  useEffect(() => {\n    isInWinnerStateRef.current = isInWinnerState;\n  }, [isInWinnerState]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n\n    // Block winner broadcasts if already in winner state\n    if (isInWinnerStateRef.current) {\n      console.log(`🚫 BLOCKED - Already in winner state, ignoring winner broadcast from ${source}`);\n      return false;\n    }\n\n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎯 Entering winner state - blocking future winner broadcasts`);\n\n    // Enter winner state to block future broadcasts\n    setIsInWinnerState(true);\n\n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n\n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n\n    // Start animation - winner visual will appear after animation lands on winner\n    setTimeout(() => {\n      console.log('🎬 Animation should have landed on winner - showing winner visually');\n      setShowWinnerVisually(true);\n    }, 3000); // Give animation time to land properly\n\n    // Winner will stay visible until new round starts (no automatic timeout)\n    console.log('🏆 Winner display will persist until new round is declared by backend');\n    return true;\n  }, []);\n\n  // Telegram integration\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n\n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    var _contractState$curren;\n    if (!contractState) return contractState;\n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' ? ((_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || 0 : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n\n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address || bettor.walletAddress === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n\n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n\n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    if (!liveJackpotValue) return 0;\n    return userBetTotal / liveJackpotValue * 100;\n  }, [userBetTotal, jackpotValue, gameBettors, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    var _contractState$timer;\n    // Always sync with backend timer when it changes\n    if (((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n    console.log('⏰ Starting local countdown timer...');\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n\n          // When we reach 0, trigger \"analyzing bets\" state locally\n          if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n          }\n          return newTime;\n        }\n\n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Framer Motion animation controls\n  const carouselAnimation = useAnimation();\n  const carouselX = useMotionValue(0);\n\n  // Smooth infinite carousel effect with Framer Motion\n  useEffect(() => {\n    var _window$Telegram3;\n    const carousel = carouselRef.current;\n    if (!carousel) {\n      console.log('⚠️ CAROUSEL REF NOT READY - animation cannot start');\n      return;\n    }\n    console.log('🎠 FRAMER MOTION CAROUSEL ANIMATION STARTING with ref:', carousel);\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    let winnerCardVisible = false;\n    let targetPosition = null; // For dramatic slow-down effect\n    let animationPhase = 'normal'; // 'normal', 'fast-spin', 'slow-reveal'\n    // FIXED: Dynamic card width calculation to match carousel rendering\n    // This must match the card width used in the actual carousel\n    const getDynamicCardWidth = () => {\n      var _window$Telegram;\n      const isInTelegram = (_window$Telegram = window.Telegram) === null || _window$Telegram === void 0 ? void 0 : _window$Telegram.WebApp;\n      const screenWidth = isInTelegram ? window.Telegram.WebApp.viewportWidth || window.innerWidth : window.innerWidth;\n\n      // Match the logic from GameArea.js carousel rendering\n      const baseCardWidth = screenWidth <= 480 ? 120 : 150;\n      const gap = screenWidth <= 480 ? 15 : 20;\n      const cardPlusGap = baseCardWidth + gap;\n\n      // Only log on first calculation or significant changes\n      if (process.env.NODE_ENV === 'development') {\n        console.log('📐 Card width:', cardPlusGap, 'px', isInTelegram ? '(Telegram)' : '(Web)');\n      }\n      return cardPlusGap;\n    };\n    const cardWidth = getDynamicCardWidth();\n\n    // OPTIMIZED: Cache DOM elements to avoid repeated queries\n    let cachedTargetArrow = null;\n\n    // Use refs to get current values without causing re-renders\n    const getCurrentBettors = () => gameBettorsRef.current;\n    const getPreviousBettors = () => previousRoundBettorsRef.current;\n    const getContractWinner = () => contractWinnerRef.current;\n    const getWaitingForWinner = () => waitingForWinnerRef.current;\n    const getTimeRemaining = () => timeRemainingRef.current;\n    const getShowWinnerVisually = () => showWinnerVisuallyRef.current;\n    const getBettorsForAnimation = () => {\n      const currentBettors = getCurrentBettors();\n      const prevBettors = getPreviousBettors();\n\n      // Use the EXACT SAME logic as the carousel rendering\n      const bettorsToShow = currentBettors.length > 0 ? currentBettors : showWinnerVisuallyRef.current || waitingForWinnerRef.current ? prevBettors : [];\n      console.log('🎠 getBettorsForAnimation - bettorsToShow:', bettorsToShow.length, 'bettors');\n\n      // Ensure we have at least 6 items to show (fill with waiting slots if needed) - SAME AS CAROUSEL\n      const allItems = [...bettorsToShow, ...Array.from({\n        length: Math.max(0, 6 - bettorsToShow.length)\n      }, () => null)];\n      console.log('🎠 getBettorsForAnimation - Created array with:', allItems.length, 'items total');\n      console.log('🎠 Real players:', allItems.filter(item => item !== null).length);\n      console.log('🎠 Waiting slots:', allItems.filter(item => item === null).length);\n      return allItems;\n    };\n\n    // FIX: Infinite scroll reset logic with dynamic recalculation\n    // The carousel renders 3 identical sets of cards for seamless infinite scroll\n    const singleSetLength = 6; // Fixed to match carousel rendering (6 items minimum)\n\n    // Function to recalculate scroll parameters (for viewport changes)\n    const calculateScrollParameters = () => {\n      const currentCardWidth = getDynamicCardWidth();\n      const singleSetWidth = currentCardWidth * singleSetLength;\n      const resetTriggerPoint = singleSetWidth * 2; // After 2 complete sets (12 cards)\n      const resetToPosition = singleSetWidth; // Reset back to start of second set\n\n      return {\n        cardWidth: currentCardWidth,\n        singleSetWidth,\n        resetTriggerPoint,\n        resetToPosition\n      };\n    };\n\n    // Initial calculation\n    let scrollParams = calculateScrollParameters();\n    if (process.env.NODE_ENV === 'development') {\n      console.log('🎠 Carousel animation started - Card width:', scrollParams.cardWidth, 'px');\n    }\n\n    // Start normal carousel motion with Framer Motion\n    const startNormalAnimation = () => {\n      const currentX = carouselX.get();\n      const singleSetWidth = scrollParams.singleSetWidth;\n\n      // Calculate how far we need to go to complete the current loop\n      const distanceToLoop = singleSetWidth - Math.abs(currentX) % singleSetWidth;\n      carouselAnimation.start({\n        x: [currentX, currentX - distanceToLoop - singleSetWidth],\n        transition: {\n          duration: (distanceToLoop + singleSetWidth) / 2,\n          // 2px per frame at 60fps\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"loop\",\n          repeatDelay: 0\n        }\n      });\n    };\n\n    // Start fast spin animation\n    const startFastSpinAnimation = () => {\n      const currentX = carouselX.get();\n      const singleSetWidth = scrollParams.singleSetWidth;\n\n      // Calculate how far we need to go to complete the current loop\n      const distanceToLoop = singleSetWidth - Math.abs(currentX) % singleSetWidth;\n      carouselAnimation.start({\n        x: [currentX, currentX - distanceToLoop - singleSetWidth],\n        transition: {\n          duration: (distanceToLoop + singleSetWidth) / 12,\n          // 12px per frame at 60fps\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"loop\",\n          repeatDelay: 0\n        }\n      });\n    };\n    const animate = () => {\n      // Get current values using refs\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const timeLeft = getTimeRemaining();\n\n      // PHASE 1: Normal scrolling or waiting phase\n      if (!currentWinner) {\n        if (isWaiting && timeLeft === 0) {\n          // Fast spin while waiting for winner announcement\n          if (animationPhase !== 'fast-spin') {\n            animationPhase = 'fast-spin';\n            carouselAnimation.stop();\n            startFastSpinAnimation();\n          }\n          return;\n        } else {\n          // Normal carousel movement when not waiting\n          if (animationPhase !== 'normal') {\n            animationPhase = 'normal';\n            carouselAnimation.stop();\n            startNormalAnimation();\n          }\n          return;\n        }\n      }\n\n      // Transition to slow-reveal when winner detected\n      if (currentWinner && animationPhase !== 'slow-reveal') {\n        if (process.env.NODE_ENV === 'development') {\n          console.log('🔄 Winner detected, calculating position...');\n        }\n      }\n\n      // PHASE 2: When winner is announced, calculate precise target position\n      if (currentWinner && animationPhase !== 'slow-reveal' && targetPosition === null) {\n        // CRITICAL: Recalculate scroll parameters for current viewport before positioning\n        scrollParams = calculateScrollParameters();\n        animationPhase = 'slow-reveal';\n\n        // Get current bettors for animation (must match carousel rendering exactly)\n        const currentBettors = getCurrentBettors();\n        const prevBettors = getPreviousBettors();\n        const showWinnerVisuallyNow = getShowWinnerVisually();\n\n        // FIXED: When winner is announced, current bettors are often reset/cleared\n        // So we should prioritize previousRoundBettors which contains the actual winner data\n        const bettorsToShow = prevBettors.length > 0 ? prevBettors : currentBettors.length > 0 ? currentBettors : [];\n        console.log('🎯 BETTOR DATA DEBUG:');\n        console.log('  - currentBettors:', currentBettors.length, currentBettors);\n        console.log('  - prevBettors:', prevBettors.length, prevBettors);\n        console.log('  - using bettorsToShow:', bettorsToShow.length, bettorsToShow);\n\n        // Ensure we have at least 6 items (same as carousel rendering)\n        const allItems = [...bettorsToShow, ...Array.from({\n          length: Math.max(0, 6 - bettorsToShow.length)\n        }, () => null)];\n\n        // Create infinite items EXACTLY like the carousel does\n        const infiniteItems = [...allItems, ...allItems, ...allItems];\n        console.log('🎯 DEBUG CAROUSEL STRUCTURE:');\n        console.log('  - bettorsToShow:', bettorsToShow.length);\n        console.log('  - allItems:', allItems.length);\n        console.log('  - infiniteItems:', infiniteItems.length);\n        console.log('  - currentPosition:', currentPosition);\n        console.log('  - cardWidth:', scrollParams.cardWidth);\n\n        // Find winner in the INFINITE items array (this is what's actually rendered)\n        let winnerIndex = -1;\n        console.log('🎯 WINNER SEARCH RESULTS:');\n        console.log('  - Looking for winner:', {\n          winner: currentWinner.winner,\n          fullAddress: currentWinner.fullAddress,\n          address: currentWinner.address,\n          username: currentWinner.username,\n          displayName: currentWinner.displayName\n        });\n        console.log('  - Available infiniteItems:', infiniteItems.map((item, i) => ({\n          index: i,\n          address: item === null || item === void 0 ? void 0 : item.address,\n          username: item === null || item === void 0 ? void 0 : item.username,\n          displayName: item === null || item === void 0 ? void 0 : item.displayName,\n          amount: item === null || item === void 0 ? void 0 : item.amount\n        })));\n\n        // ENHANCED WINNER MATCHING - Try more combinations\n        for (let i = 0; i < infiniteItems.length; i++) {\n          const bettor = infiniteItems[i];\n          if (!bettor) continue;\n          console.log(`🔍 Checking item ${i}:`, {\n            bettor_address: bettor.address,\n            bettor_username: bettor.username,\n            bettor_displayName: bettor.displayName,\n            winner_winner: currentWinner.winner,\n            winner_fullAddress: currentWinner.fullAddress,\n            winner_address: currentWinner.address,\n            winner_username: currentWinner.username,\n            winner_displayName: currentWinner.displayName\n          });\n          const isMatch =\n          // Address matching\n          bettor.address && currentWinner.winner && bettor.address === currentWinner.winner || bettor.address && currentWinner.fullAddress && bettor.address === currentWinner.fullAddress || bettor.address && currentWinner.address && bettor.address === currentWinner.address ||\n          // Username matching\n          bettor.username && currentWinner.username && bettor.username === currentWinner.username || bettor.username && currentWinner.displayName && bettor.username === currentWinner.displayName || bettor.displayName && currentWinner.username && bettor.displayName === currentWinner.username || bettor.displayName && currentWinner.displayName && bettor.displayName === currentWinner.displayName;\n          if (isMatch) {\n            winnerIndex = i;\n            console.log('🎯 WINNER FOUND at infiniteItems index:', winnerIndex, 'bettor:', bettor);\n            console.log('🎯 Match reason:', {\n              addressMatch: bettor.address === currentWinner.winner || bettor.address === currentWinner.fullAddress,\n              usernameMatch: bettor.username === currentWinner.username || bettor.displayName === currentWinner.username\n            });\n            break;\n          }\n        }\n        console.log('  - Winner found at index:', winnerIndex);\n        if (winnerIndex === -1) {\n          console.log('⚠️ Winner not found in infiniteItems, using fallback positioning');\n\n          // ENHANCED FALLBACK: Actually inject the winner into the first set\n          const firstEmptyIndex = allItems.findIndex(item => item === null);\n          if (firstEmptyIndex !== -1) {\n            // Inject winner data into the empty slot\n            const winnerData = {\n              address: currentWinner.winner || currentWinner.fullAddress || currentWinner.address,\n              username: currentWinner.username || currentWinner.displayName || 'Winner',\n              displayName: currentWinner.displayName || currentWinner.username || 'Winner',\n              amount: currentWinner.prize || 0,\n              isWinner: true\n            };\n\n            // Update all three sets in infiniteItems\n            infiniteItems[firstEmptyIndex] = winnerData;\n            infiniteItems[firstEmptyIndex + allItems.length] = winnerData;\n            infiniteItems[firstEmptyIndex + allItems.length * 2] = winnerData;\n            winnerIndex = firstEmptyIndex;\n            console.log('✅ Injected winner at index:', winnerIndex, 'data:', winnerData);\n          } else {\n            // Find first real bettor as fallback\n            winnerIndex = allItems.findIndex(item => item !== null);\n            if (winnerIndex === -1) winnerIndex = 0;\n            console.log('✅ Using fallback winner position at index:', winnerIndex);\n          }\n        }\n        if (winnerIndex !== -1) {\n          // DEBUGGING: Check current DOM state\n          const carousel = document.querySelector('.carousel-track');\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          const carouselContainer = document.querySelector('.players-carousel');\n          if (carousel && targetArrow && carouselContainer) {\n            const carouselRect = carousel.getBoundingClientRect();\n            const arrowRect = targetArrow.getBoundingClientRect();\n            const containerRect = carouselContainer.getBoundingClientRect();\n            console.log('🎯 DOM DEBUG:');\n            console.log('  - Carousel rect:', carouselRect);\n            console.log('  - Arrow rect:', arrowRect);\n            console.log('  - Container rect:', containerRect);\n            console.log('  - Current transform:', carousel.style.transform);\n          }\n\n          // Calculate arrow center position relative to the track\n          let arrowCenterOffset = 200; // Default fallback\n\n          if (targetArrow && carouselContainer) {\n            var _window$Telegram2;\n            const containerRect = carouselContainer.getBoundingClientRect();\n            const arrowRect = targetArrow.getBoundingClientRect();\n\n            // Arrow center relative to container\n            const arrowCenterInContainer = arrowRect.left - containerRect.left + arrowRect.width / 2;\n            // Track padding shifts everything right by 12px\n            arrowCenterOffset = arrowCenterInContainer - 12;\n\n            // TELEGRAM MINIAPP FIX: Adjust for \"off by one card\" issue\n            const isInTelegram = (_window$Telegram2 = window.Telegram) === null || _window$Telegram2 === void 0 ? void 0 : _window$Telegram2.WebApp;\n            if (isInTelegram) {\n              // Telegram has slightly different layout - fine-tune based on testing\n              arrowCenterOffset -= 40; // Fine-tuned adjustment for Telegram\n              console.log('🎯 TELEGRAM ADJUSTMENT: Applied -40px offset for Telegram WebApp');\n            }\n            console.log('🎯 ARROW POSITIONING:');\n            console.log('  - Container rect:', containerRect);\n            console.log('  - Arrow rect:', arrowRect);\n            console.log('  - Arrow center in container:', arrowCenterInContainer);\n            console.log('  - Raw arrow center offset:', arrowCenterInContainer - 12);\n            console.log('  - Final arrow center offset (with Telegram adjustment):', arrowCenterOffset);\n            console.log('  - Environment:', isInTelegram ? 'Telegram WebApp' : 'Web Browser');\n          }\n\n          // FIXED: Calculate the correct target position in the infinite scroll\n          // We want the winner to appear under the arrow, regardless of where it was found\n\n          // Find which \"set\" of the infinite scroll we should target\n          // We want to go through at least one full cycle for drama, then land on winner\n          const singleSetLength = allItems.length;\n          const currentPositionInCards = currentPosition / scrollParams.cardWidth;\n\n          // Calculate which set we should target (aim for 2nd or 3rd set for drama)\n          let targetSetIndex = 1; // Default to second set\n          if (currentPositionInCards < singleSetLength) {\n            targetSetIndex = 1; // We're in first set, go to second\n          } else if (currentPositionInCards < singleSetLength * 2) {\n            targetSetIndex = 2; // We're in second set, go to third\n          } else {\n            targetSetIndex = 2; // We're in third set, stay in third or go to second\n          }\n\n          // The actual index in infiniteItems where we want the winner to appear\n          const targetWinnerIndex = targetSetIndex * singleSetLength + winnerIndex % singleSetLength;\n          console.log('🎯 TARGET CALCULATION:');\n          console.log('  - Single set length:', singleSetLength);\n          console.log('  - Current position in cards:', currentPositionInCards);\n          console.log('  - Target set index:', targetSetIndex);\n          console.log('  - Original winner index:', winnerIndex);\n          console.log('  - Target winner index in infinite array:', targetWinnerIndex);\n\n          // Calculate target position\n          const cardCenterOffset = scrollParams.cardWidth / 2;\n          const targetWinnerCardLeftPosition = targetWinnerIndex * scrollParams.cardWidth;\n          const targetWinnerCardCenterPosition = targetWinnerCardLeftPosition + cardCenterOffset;\n\n          // How much do we need to move the track LEFT to center the winner under the arrow\n          const requiredOffset = targetWinnerCardCenterPosition - arrowCenterOffset;\n\n          // Target position = required offset (absolute position)\n          targetPosition = requiredOffset;\n          console.log('🎯 FINAL CALCULATION:');\n          console.log('  - Target winner index in infiniteItems:', targetWinnerIndex);\n          console.log('  - Card width:', scrollParams.cardWidth);\n          console.log('  - Target winner card left edge:', targetWinnerCardLeftPosition);\n          console.log('  - Target winner card center:', targetWinnerCardCenterPosition);\n          console.log('  - Arrow center offset:', arrowCenterOffset);\n          console.log('  - Required track movement LEFT:', requiredOffset);\n          console.log('  - Current position:', currentPosition);\n          console.log('  - Target position:', targetPosition);\n          console.log('  - Movement needed:', targetPosition - currentPosition);\n\n          // Start precise winner landing animation with Framer Motion\n          carouselAnimation.stop();\n\n          // First do a dramatic spin to build suspense\n          const dramaticSpinDistance = scrollParams.resetTriggerPoint * 2; // 2 full cycles\n          const finalPosition = -targetPosition;\n          console.log('🎬 FRAMER MOTION: Starting winner landing animation');\n          console.log('  - Dramatic spin distance:', dramaticSpinDistance);\n          console.log('  - Final landing position:', finalPosition);\n          carouselAnimation.start({\n            x: [carouselX.get(), carouselX.get() - dramaticSpinDistance, finalPosition],\n            transition: {\n              duration: 3.5,\n              times: [0, 0.7, 1],\n              ease: [\"linear\", \"linear\", \"easeOut\"],\n              type: \"tween\"\n            }\n          }).then(() => {\n            console.log('🎯 FRAMER MOTION: Winner animation complete! Winner landed at position:', finalPosition);\n            winnerPositionFound = true;\n\n            // Show winner visually after animation completes\n            setTimeout(() => {\n              setShowWinnerVisually(true);\n              console.log('🎬 Winner revealed visually after perfect landing');\n            }, 500);\n          });\n\n          // Update motion value for future animations\n          carouselX.set(finalPosition);\n        }\n      }\n\n      // Winner animation is now handled by Framer Motion above\n      // No need for manual animation frames when winner is being animated\n      if (currentWinner && animationPhase === 'slow-reveal') {\n        return; // Let Framer Motion handle the winner animation\n      }\n    };\n\n    // Start with normal animation\n    animate();\n    startNormalAnimation();\n\n    // Reset animation when new round starts\n    const resetAnimation = () => {\n      console.log('🔄 Resetting Framer Motion animation for new round');\n      animationPhase = 'normal';\n      winnerPositionFound = false;\n      winnerCardVisible = false;\n      targetPosition = null;\n      cachedTargetArrow = null;\n      setShowWinnerVisually(false);\n\n      // Reset arrow states\n      if (cachedTargetArrow) {\n        cachedTargetArrow.classList.remove('winner-approaching', 'winner-landed');\n      }\n\n      // Stop any running animations and reset position\n      carouselAnimation.stop();\n      carouselX.set(-scrollParams.resetToPosition);\n\n      // Restart normal animation\n      startNormalAnimation();\n    };\n\n    // Expose reset function for external use - Enhanced for Telegram\n    window.resetCarouselAnimation = resetAnimation;\n\n    // OPTIMIZED: Minimal Telegram event listeners with throttling\n    if ((_window$Telegram3 = window.Telegram) !== null && _window$Telegram3 !== void 0 && _window$Telegram3.WebApp) {\n      let throttleTimeout = null;\n\n      // Throttled viewport change handler\n      const handleTelegramViewportChange = () => {\n        if (throttleTimeout) return; // Throttle to prevent spam\n        throttleTimeout = setTimeout(() => {\n          throttleTimeout = null;\n\n          // CRITICAL: Recalculate scroll parameters for new viewport\n          const oldCardWidth = scrollParams.cardWidth;\n          scrollParams = calculateScrollParameters();\n          console.log('📱 TELEGRAM VIEWPORT CHANGE:');\n          console.log('  - Old card width:', oldCardWidth, 'px');\n          console.log('  - New card width:', scrollParams.cardWidth, 'px');\n\n          // Only reset if card width actually changed\n          if (Math.abs(oldCardWidth - scrollParams.cardWidth) > 5) {\n            console.log('🔄 Card width changed significantly - resetting animation');\n            if (window.resetCarouselAnimation && animationPhase === 'normal') {\n              window.resetCarouselAnimation();\n            }\n          }\n        }, 300); // Increased delay to reduce CPU usage\n      };\n\n      // Listen for Telegram WebApp events (only essential ones)\n      if (window.Telegram.WebApp.onEvent) {\n        window.Telegram.WebApp.onEvent('viewportChanged', handleTelegramViewportChange);\n      }\n    }\n    return () => {\n      var _window$Telegram4;\n      // Stop Framer Motion animations\n      carouselAnimation.stop();\n\n      // Clean up global reference\n      delete window.resetCarouselAnimation;\n\n      // Clean up Telegram-specific event listeners\n      if ((_window$Telegram4 = window.Telegram) !== null && _window$Telegram4 !== void 0 && _window$Telegram4.WebApp) {\n        console.log('🎯 Cleaning up Telegram WebApp event listeners');\n        // Remove Telegram WebApp event listeners\n        if (window.Telegram.WebApp.offEvent) {\n          window.Telegram.WebApp.offEvent('viewportChanged');\n        }\n      }\n    };\n  }, []); // EMPTY dependency array to prevent re-initialization\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', timerData => {\n      console.log('⏰ App: Socket timer update:', timerData);\n\n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n\n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n\n        // Only clear winner state when new round detected AND timer is significantly higher (real new round)\n        if (isNewRound && contractWinner && newTimeRemaining > 200) {\n          console.log('🔄 Timer update detected REAL new round with fresh timer - clearing winner state');\n          console.log('🔓 Exiting winner state - new round detected');\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n        }\n\n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n\n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', roundData => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      console.log('🔓 Exiting winner state - new round started');\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsInWinnerState(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n\n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n\n      // OPTIMIZED: Simple animation reset\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', gameState => {\n      var _gameState$timer;\n      console.log('🎮 App: Game state update:', gameState);\n\n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = (_gameState$timer = gameState.timer) === null || _gameState$timer === void 0 ? void 0 : _gameState$timer.timeRemaining;\n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n\n          // Only sync if there's a significant difference (>10s) or if backend is ahead\n          if (timeDiff > 10 || backendTimeRemaining > prev) {\n            console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n\n          // Keep local countdown running if difference is small\n          console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        var _gameState$timer2, _gameState$timer3;\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n\n        // Check if this is a new round with active timer - this means new round started\n        const isNewRound = roundNumber !== currentRound;\n        const hasActiveTimer = ((_gameState$timer2 = gameState.timer) === null || _gameState$timer2 === void 0 ? void 0 : _gameState$timer2.isActive) || ((_gameState$timer3 = gameState.timer) === null || _gameState$timer3 === void 0 ? void 0 : _gameState$timer3.timeRemaining) > 60;\n        if (isNewRound && hasActiveTimer && isInWinnerStateRef.current) {\n          console.log('🔄 GameState detected NEW ROUND with active timer - clearing winner state');\n          console.log('🔓 Exiting winner state - new round started via gameState');\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n          winnerCoordinator.reset();\n        }\n        setCurrentRound(roundNumber);\n      }\n\n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        setWaitingForWinner(gameState.isWaitingForWinner);\n\n        // If waitingForWinner becomes false AND we have a new round with active timer, reset winner state\n        if (!gameState.isWaitingForWinner && isInWinnerStateRef.current) {\n          var _gameState$timer4, _gameState$timer5;\n          const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n          const isNewRound = roundNumber && roundNumber !== currentRound;\n          const hasActiveTimer = ((_gameState$timer4 = gameState.timer) === null || _gameState$timer4 === void 0 ? void 0 : _gameState$timer4.isActive) || ((_gameState$timer5 = gameState.timer) === null || _gameState$timer5 === void 0 ? void 0 : _gameState$timer5.timeRemaining) > 60;\n          if (isNewRound && hasActiveTimer) {\n            console.log('🔄 waitingForWinner false + new round + active timer = new round started - clearing winner state');\n            console.log('🔓 Exiting winner state - new round confirmed');\n            setIsInWinnerState(false);\n            setContractWinner(null);\n            setShowWinnerAnnouncement(false);\n            setShowWinnerVisually(false);\n            setPostWinnerLoading(false);\n            setIsAnyWinnerDisplayActive(false);\n            setPreviousRoundBettors([]);\n            winnerCoordinator.reset();\n          } else {\n            console.log('⏳ waitingForWinner became false, but keeping winner state (no new round detected)');\n          }\n        }\n      }\n\n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n\n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        setGameBettors(gameState.bettors);\n      }\n\n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', gameData => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', data => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', data => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n\n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n\n      // Don't reset winner state just because waitingForWinner changed\n      // Only reset when we get explicit newRound/roundReset events\n      setWaitingForWinner(isWaiting);\n\n      // Log but don't auto-reset winner state\n      if (!isWaiting && isInWinnerStateRef.current) {\n        console.log('⏳ waitingForWinner event became false, but keeping winner state until explicit new round');\n      }\n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', winnerData => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', winnerData => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', resetData => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      console.log('🔓 Exiting winner state - round reset');\n\n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n\n      // Clear ALL winner states since this is a fresh timer\n      setIsInWinnerState(false);\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n\n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n\n      // OPTIMIZED: Simple animation reset\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n    });\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = e => {\n    const inputValue = e.target.value;\n\n    // Allow empty input or numbers with decimal points (both . and ,)\n    if (inputValue === '' || inputValue === '.' || inputValue === ',' || /^\\d*[.,]?\\d*$/.test(inputValue)) {\n      // Convert comma to period for consistency\n      const normalizedValue = inputValue.replace(',', '.');\n\n      // For empty or just \".\" input, keep the raw value but show comma if user typed comma\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(inputValue); // Keep original input (might be comma)\n        return;\n      }\n\n      // For valid numbers, check limits but preserve decimal typing\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(inputValue); // Keep the original input format (comma or period)\n      }\n    }\n  };\n  const handleTabChange = tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    // Convert comma to period before parsing for validation\n    const normalizedBetAmount = betAmount.toString().replace(',', '.');\n    const numericBetAmount = parseFloat(normalizedBetAmount);\n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n    try {\n      hapticFeedback('medium');\n      await placeBet(numericBetAmount);\n\n      // Reset bet amount after successful bet\n      setBetAmount(0.11);\n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logo-icon\",\n              children: \"\\uD83C\\uDFB0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"app-name\",\n              children: \"SlotPot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1148,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"balance-label\",\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1152,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"balance-amount\",\n              children: [isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000', /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"balance-symbol\",\n                children: \"TON\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1155,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1153,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-icons\",\n            children: /*#__PURE__*/_jsxDEV(WalletConnection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1160,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1159,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-title\",\n            children: \"\\uD83D\\uDCB0 JACKPOT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-value-display\",\n            children: jackpotValue.toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-subtitle\",\n            children: \"Winner takes all...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1171,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-input-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"bet-amount-input\",\n              value: betAmount,\n              onChange: handleBetChange,\n              placeholder: \"0.000\",\n              inputMode: \"decimal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1177,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bet-increment-btn\",\n              onClick: () => setBetAmount(prev => {\n                const currentValue = parseFloat(prev) || 0;\n                return Math.min(currentValue + 0.1, 10).toFixed(1);\n              }),\n              children: \"+0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1185,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-button\",\n            onClick: handlePlaceBet,\n            disabled: isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement,\n            children: contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' : isPlacingBet ? 'Betting...' : 'Bet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1192,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: userBetTotal.toFixed(3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Wager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1206,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1204,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card chance-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: [userWinChance.toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1209,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Chance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1210,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1208,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Time Remaining \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: [Math.floor((timeRemaining || 0) / 60), \":\", ((timeRemaining || 0) % 60).toString().padStart(2, '0')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-carousel-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `carousel-header ${timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? 'analyzing' : showWinnerVisually ? 'winner' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? \"🔍 Analyzing Bets...\" : showWinnerVisually && contractWinner ? `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` : `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1228,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"players-carousel\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"carousel-target-arrow\",\n              children: \"\\u2B07\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1239,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n              ref: carouselRef,\n              className: `carousel-track ${timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? 'analyzing' : showWinnerVisually ? 'winner-revealed' : slotSpinning ? 'sliding' : ''}`,\n              animate: carouselAnimation,\n              style: {\n                x: carouselX\n              },\n              children: (() => {\n                // For a fresh round, prefer empty display over old data\n                // Only use previousRoundBettors if we're in winner display mode\n                const bettorsToShow = gameBettors.length > 0 ? gameBettors : showWinnerVisually || waitingForWinner ? previousRoundBettors : [];\n                console.log('🎠 Using bettors:', bettorsToShow.length, 'total bettors');\n                console.log('🎠 ContractWinner from backend:', contractWinner);\n\n                // Check if we're showing waiting cards due to empty data\n                if (bettorsToShow.length === 0) {\n                  console.log('⚠️ SHOWING WAITING CARDS - No bettor data available');\n                }\n\n                // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                const allItems = [...bettorsToShow, ...Array.from({\n                  length: Math.max(0, 6 - bettorsToShow.length)\n                }, () => null)];\n\n                // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                const infiniteItems = [...allItems, ...allItems, ...allItems];\n                return infiniteItems.map((bettor, index) => {\n                  // Winner highlighting - only show AFTER animation completes (showWinnerVisually)\n                  const isWinner = showWinnerVisually && contractWinner && bettor && (bettor.address === contractWinner.winner || bettor.address === contractWinner.fullAddress || bettor.username === contractWinner.username);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `carousel-card ${isWinner ? 'winner' : bettor ? 'active' : 'waiting'}`,\n                    \"data-debug\": `winner: ${isWinner}, address: ${bettor === null || bettor === void 0 ? void 0 : bettor.address}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-avatar\",\n                      children: bettor ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"generated-avatar\",\n                        children: bettor.username ? bettor.username[0].toUpperCase() : '?'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1291,\n                        columnNumber: 33\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"waiting-icon\",\n                        children: \"\\u2753\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1295,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1289,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-info\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-name\",\n                        children: bettor ? bettor.username || bettor.displayName || 'Player' : 'Waiting'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1299,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-bet\",\n                        children: bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1302,\n                        columnNumber: 31\n                      }, this), isWinner && contractWinner && contractWinner.prize && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"winner-prize\",\n                        children: [\"Won \", parseFloat(contractWinner.prize).toFixed(3), \" TON\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1306,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1298,\n                      columnNumber: 29\n                    }, this), isWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"winner-crown\",\n                      children: \"\\uD83D\\uDC51\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1310,\n                      columnNumber: 31\n                    }, this)]\n                  }, `${index}-${(bettor === null || bettor === void 0 ? void 0 : bettor.address) || 'waiting'}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1285,\n                    columnNumber: 27\n                  }, this);\n                });\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1241,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1237,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1223,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83C\\uDFE0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1325,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1326,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1324,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\u26A1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1329,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1330,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1328,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1333,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1334,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1332,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD0D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1337,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1338,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1336,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"games-button\",\n          children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n            size: 14\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1342,\n            columnNumber: 15\n          }, this), \"Games\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1341,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1322,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1142,\n      columnNumber: 9\n    }, this), isLoadingContract && !contractWinner && !showWinnerAnnouncement && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"\\uD83D\\uDD04\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1351,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading contract data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1352,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1350,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinnerBroadcast, {\n      socketService: socketService\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1141,\n    columnNumber: 5\n  }, this);\n}\n\n// Main App component with TON Connect Provider\n_s(AppContent, \"6a/9mdDPYwf2a3KD/5nZhZFoaX8=\", false, function () {\n  return [useTelegramWebApp, useJackpotContract, useAnimation, useMotionValue];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(TonConnectUIProvider, {\n    manifestUrl: manifestUrl,\n    uiPreferences: uiOptions.uiPreferences,\n    language: uiOptions.language,\n    restoreConnection: uiOptions.restoreConnection,\n    actionsConfiguration: uiOptions.actionsConfiguration,\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1372,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1365,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","TonConnectUIProvider","Chat","GameArea","MobileChat","WalletConnection","WinnerBroadcast","useTelegramWebApp","useJackpotContract","socketService","winnerCoordinator","uiOptions","MessageCircle","Trophy","Users","DollarSign","motion","useAnimation","useMotionValue","jsxDEV","_jsxDEV","manifestUrl","AppContent","_s","_contractState$timer2","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","showWinnerVisually","setShowWinnerVisually","isInWinnerState","setIsInWinnerState","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","carouselRef","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","waitingForWinnerRef","previousRoundBettorsRef","timeRemainingRef","showWinnerVisuallyRef","isInWinnerStateRef","current","console","log","winnerAddress","winner","fullAddress","winnerName","username","displayName","prize","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","shouldBlock","setActive","setTimeout","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","address","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","_contractState$curren","timer","isActive","timeElapsed","timerExpired","undefined","jackpotValue","totalJackpot","isLive","userBetTotal","length","filter","bettor","walletAddress","reduce","total","amount","userWinChance","currentRoundTotal","liveJackpotValue","_contractState$timer","countdown","setInterval","prev","newTime","clearInterval","carouselAnimation","carouselX","_window$Telegram3","carousel","animationId","currentPosition","winnerPositionFound","winnerCardVisible","targetPosition","animationPhase","getDynamicCardWidth","_window$Telegram","isInTelegram","window","Telegram","WebApp","screenWidth","viewportWidth","innerWidth","baseCardWidth","gap","cardPlusGap","process","env","NODE_ENV","cardWidth","cachedTargetArrow","getCurrentBettors","getPreviousBettors","getContractWinner","getWaitingForWinner","getTimeRemaining","getShowWinnerVisually","getBettorsForAnimation","currentBettors","prevBettors","bettorsToShow","allItems","Array","from","Math","max","item","singleSetLength","calculateScrollParameters","currentCardWidth","singleSetWidth","resetTriggerPoint","resetToPosition","scrollParams","startNormalAnimation","currentX","get","distanceToLoop","abs","start","x","transition","duration","ease","repeat","Infinity","repeatType","repeatDelay","startFastSpinAnimation","animate","currentWinner","isWaiting","timeLeft","stop","showWinnerVisuallyNow","infiniteItems","winnerIndex","map","i","index","bettor_address","bettor_username","bettor_displayName","winner_winner","winner_fullAddress","winner_address","winner_username","winner_displayName","isMatch","addressMatch","usernameMatch","firstEmptyIndex","findIndex","isWinner","document","querySelector","targetArrow","carouselContainer","carouselRect","getBoundingClientRect","arrowRect","containerRect","style","transform","arrowCenterOffset","_window$Telegram2","arrowCenterInContainer","left","width","currentPositionInCards","targetSetIndex","targetWinnerIndex","cardCenterOffset","targetWinnerCardLeftPosition","targetWinnerCardCenterPosition","requiredOffset","dramaticSpinDistance","finalPosition","times","type","then","set","resetAnimation","classList","remove","resetCarouselAnimation","throttleTimeout","handleTelegramViewportChange","oldCardWidth","onEvent","_window$Telegram4","offEvent","connect","on","timerData","warn","newTimeRemaining","newRoundNumber","timeDiff","isNewRound","roundData","reset","gameState","_gameState$timer","backendTimeRemaining","_gameState$timer2","_gameState$timer3","hasActiveTimer","isWaitingForWinner","_gameState$timer4","_gameState$timer5","bettors","isArray","winnerAnnouncement","gameData","data","message","resetData","off","disconnect","handleBetChange","e","inputValue","target","value","test","normalizedValue","replace","numericValue","parseFloat","isNaN","handleTabChange","tab","handlePlaceBet","normalizedBetAmount","toString","numericBetAmount","toFixed","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userBalance","onChange","placeholder","inputMode","onClick","currentValue","min","disabled","floor","padStart","div","ref","toUpperCase","size","_c","App","uiPreferences","language","restoreConnection","actionsConfiguration","_c2","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\nimport { motion, useAnimation, useMotionValue } from 'framer-motion';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  const [isInWinnerState, setIsInWinnerState] = useState(false); // Blocks new winner broadcasts\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n  \n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { \n    contractWinnerRef.current = contractWinner; \n    \n    // Log winner detection only once when contractWinner changes\n    if (contractWinner) {\n      console.log('🏆 WINNER DETECTED FROM BACKEND!', { \n        winnerAddress: contractWinner.winner || contractWinner.fullAddress,\n        winnerName: contractWinner.username || contractWinner.displayName || 'Player',\n        prize: contractWinner.prize,\n        contractWinner\n      });\n      console.log('🎬 ANIMATION SHOULD START NOW - waiting for carousel to detect winner');\n    } else {\n      console.log('❌ WINNER CLEARED - contractWinner set to null');\n    }\n  }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n  useEffect(() => { waitingForWinnerRef.current = waitingForWinner; }, [waitingForWinner]);\n  useEffect(() => { previousRoundBettorsRef.current = previousRoundBettors; }, [previousRoundBettors]);\n  useEffect(() => { timeRemainingRef.current = timeRemaining; }, [timeRemaining]);\n  useEffect(() => { showWinnerVisuallyRef.current = showWinnerVisually; }, [showWinnerVisually]);\n  useEffect(() => { isInWinnerStateRef.current = isInWinnerState; }, [isInWinnerState]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Block winner broadcasts if already in winner state\n    if (isInWinnerStateRef.current) {\n      console.log(`🚫 BLOCKED - Already in winner state, ignoring winner broadcast from ${source}`);\n      return false;\n    }\n    \n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    \n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎯 Entering winner state - blocking future winner broadcasts`);\n    \n    // Enter winner state to block future broadcasts\n    setIsInWinnerState(true);\n    \n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Start animation - winner visual will appear after animation lands on winner\n    setTimeout(() => {\n      console.log('🎬 Animation should have landed on winner - showing winner visually');\n      setShowWinnerVisually(true);\n    }, 3000); // Give animation time to land properly\n    \n    // Winner will stay visible until new round starts (no automatic timeout)\n    console.log('🏆 Winner display will persist until new round is declared by backend');\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    \n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\n        : (Number(rawAdminInfo.currentRound) || 0)\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    if (!contractState) return contractState;\n    \n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' \n        ? (contractState.currentRound?.roundNumber || 0)\n        : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  \n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    \n    return gameBettors\n      .filter(bettor => \n        bettor.address === address || \n        bettor.walletAddress === address\n      )\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  \n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n    \n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n    \n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    \n    if (!liveJackpotValue) return 0;\n    \n    return (userBetTotal / liveJackpotValue) * 100;\n  }, [userBetTotal, jackpotValue, gameBettors, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    // Always sync with backend timer when it changes\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n\n    console.log('⏰ Starting local countdown timer...');\n\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n        \n          // When we reach 0, trigger \"analyzing bets\" state locally\n        if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n        }\n        \n        return newTime;\n        }\n        \n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Framer Motion animation controls\n  const carouselAnimation = useAnimation();\n  const carouselX = useMotionValue(0);\n\n  // Smooth infinite carousel effect with Framer Motion\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) {\n      console.log('⚠️ CAROUSEL REF NOT READY - animation cannot start');\n      return;\n    }\n\n    console.log('🎠 FRAMER MOTION CAROUSEL ANIMATION STARTING with ref:', carousel);\n\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    let winnerCardVisible = false;\n    let targetPosition = null; // For dramatic slow-down effect\n    let animationPhase = 'normal'; // 'normal', 'fast-spin', 'slow-reveal'\n    // FIXED: Dynamic card width calculation to match carousel rendering\n    // This must match the card width used in the actual carousel\n    const getDynamicCardWidth = () => {\n      const isInTelegram = window.Telegram?.WebApp;\n      const screenWidth = isInTelegram ? (window.Telegram.WebApp.viewportWidth || window.innerWidth) : window.innerWidth;\n      \n      // Match the logic from GameArea.js carousel rendering\n      const baseCardWidth = screenWidth <= 480 ? 120 : 150;\n      const gap = screenWidth <= 480 ? 15 : 20;\n      const cardPlusGap = baseCardWidth + gap;\n      \n             // Only log on first calculation or significant changes\n       if (process.env.NODE_ENV === 'development') {\n         console.log('📐 Card width:', cardPlusGap, 'px', isInTelegram ? '(Telegram)' : '(Web)');\n       }\n      \n      return cardPlusGap;\n    };\n    \n    const cardWidth = getDynamicCardWidth();\n    \n    // OPTIMIZED: Cache DOM elements to avoid repeated queries\n    let cachedTargetArrow = null;\n    \n    // Use refs to get current values without causing re-renders\n    const getCurrentBettors = () => gameBettorsRef.current;\n    const getPreviousBettors = () => previousRoundBettorsRef.current;\n    const getContractWinner = () => contractWinnerRef.current;\n    const getWaitingForWinner = () => waitingForWinnerRef.current;\n    const getTimeRemaining = () => timeRemainingRef.current;\n    const getShowWinnerVisually = () => showWinnerVisuallyRef.current;\n    \n    const getBettorsForAnimation = () => {\n      const currentBettors = getCurrentBettors();\n      const prevBettors = getPreviousBettors();\n      \n      // Use the EXACT SAME logic as the carousel rendering\n      const bettorsToShow = currentBettors.length > 0 ? currentBettors : \n                           (showWinnerVisuallyRef.current || waitingForWinnerRef.current) ? prevBettors : [];\n      \n      console.log('🎠 getBettorsForAnimation - bettorsToShow:', bettorsToShow.length, 'bettors');\n      \n      // Ensure we have at least 6 items to show (fill with waiting slots if needed) - SAME AS CAROUSEL\n      const allItems = [\n        ...bettorsToShow,\n        ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n      ];\n      \n      console.log('🎠 getBettorsForAnimation - Created array with:', allItems.length, 'items total');\n      console.log('🎠 Real players:', allItems.filter(item => item !== null).length);\n      console.log('🎠 Waiting slots:', allItems.filter(item => item === null).length);\n      \n      return allItems;\n    };\n    \n    // FIX: Infinite scroll reset logic with dynamic recalculation\n    // The carousel renders 3 identical sets of cards for seamless infinite scroll\n    const singleSetLength = 6; // Fixed to match carousel rendering (6 items minimum)\n    \n    // Function to recalculate scroll parameters (for viewport changes)\n    const calculateScrollParameters = () => {\n      const currentCardWidth = getDynamicCardWidth();\n      const singleSetWidth = currentCardWidth * singleSetLength;\n      const resetTriggerPoint = singleSetWidth * 2; // After 2 complete sets (12 cards)\n      const resetToPosition = singleSetWidth; // Reset back to start of second set\n      \n      return {\n        cardWidth: currentCardWidth,\n        singleSetWidth,\n        resetTriggerPoint,\n        resetToPosition\n      };\n    };\n    \n    // Initial calculation\n    let scrollParams = calculateScrollParameters();\n    \n    if (process.env.NODE_ENV === 'development') {\n      console.log('🎠 Carousel animation started - Card width:', scrollParams.cardWidth, 'px');\n    }\n\n    // Start normal carousel motion with Framer Motion\n    const startNormalAnimation = () => {\n      const currentX = carouselX.get();\n      const singleSetWidth = scrollParams.singleSetWidth;\n      \n      // Calculate how far we need to go to complete the current loop\n      const distanceToLoop = singleSetWidth - (Math.abs(currentX) % singleSetWidth);\n      \n      carouselAnimation.start({\n        x: [currentX, currentX - distanceToLoop - singleSetWidth],\n        transition: {\n          duration: (distanceToLoop + singleSetWidth) / 2, // 2px per frame at 60fps\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"loop\",\n          repeatDelay: 0\n        }\n      });\n    };\n\n    // Start fast spin animation\n    const startFastSpinAnimation = () => {\n      const currentX = carouselX.get();\n      const singleSetWidth = scrollParams.singleSetWidth;\n      \n      // Calculate how far we need to go to complete the current loop\n      const distanceToLoop = singleSetWidth - (Math.abs(currentX) % singleSetWidth);\n      \n      carouselAnimation.start({\n        x: [currentX, currentX - distanceToLoop - singleSetWidth],\n        transition: {\n          duration: (distanceToLoop + singleSetWidth) / 12, // 12px per frame at 60fps\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"loop\",\n          repeatDelay: 0\n        }\n      });\n    };\n\n    const animate = () => {\n      // Get current values using refs\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const timeLeft = getTimeRemaining();\n      \n      // PHASE 1: Normal scrolling or waiting phase\n      if (!currentWinner) {\n        if (isWaiting && timeLeft === 0) {\n          // Fast spin while waiting for winner announcement\n          if (animationPhase !== 'fast-spin') {\n            animationPhase = 'fast-spin';\n            carouselAnimation.stop();\n            startFastSpinAnimation();\n          }\n          return;\n        } else {\n          // Normal carousel movement when not waiting\n          if (animationPhase !== 'normal') {\n            animationPhase = 'normal';\n            carouselAnimation.stop();\n            startNormalAnimation();\n          }\n          return;\n        }\n      }\n      \n      // Transition to slow-reveal when winner detected\n      if (currentWinner && animationPhase !== 'slow-reveal') {\n        if (process.env.NODE_ENV === 'development') {\n          console.log('🔄 Winner detected, calculating position...');\n        }\n      }\n      \n      // PHASE 2: When winner is announced, calculate precise target position\n      if (currentWinner && animationPhase !== 'slow-reveal' && targetPosition === null) {\n        // CRITICAL: Recalculate scroll parameters for current viewport before positioning\n        scrollParams = calculateScrollParameters();\n        \n        animationPhase = 'slow-reveal';\n        \n        // Get current bettors for animation (must match carousel rendering exactly)\n        const currentBettors = getCurrentBettors();\n        const prevBettors = getPreviousBettors();\n        const showWinnerVisuallyNow = getShowWinnerVisually();\n        \n        // FIXED: When winner is announced, current bettors are often reset/cleared\n        // So we should prioritize previousRoundBettors which contains the actual winner data\n        const bettorsToShow = prevBettors.length > 0 ? prevBettors : \n                             currentBettors.length > 0 ? currentBettors : [];\n        \n        console.log('🎯 BETTOR DATA DEBUG:');\n        console.log('  - currentBettors:', currentBettors.length, currentBettors);\n        console.log('  - prevBettors:', prevBettors.length, prevBettors);\n        console.log('  - using bettorsToShow:', bettorsToShow.length, bettorsToShow);\n        \n        // Ensure we have at least 6 items (same as carousel rendering)\n        const allItems = [\n          ...bettorsToShow,\n          ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n        ];\n        \n        // Create infinite items EXACTLY like the carousel does\n        const infiniteItems = [...allItems, ...allItems, ...allItems];\n        \n        console.log('🎯 DEBUG CAROUSEL STRUCTURE:');\n        console.log('  - bettorsToShow:', bettorsToShow.length);\n        console.log('  - allItems:', allItems.length);\n        console.log('  - infiniteItems:', infiniteItems.length);\n        console.log('  - currentPosition:', currentPosition);\n        console.log('  - cardWidth:', scrollParams.cardWidth);\n        \n        // Find winner in the INFINITE items array (this is what's actually rendered)\n        let winnerIndex = -1;\n        \n        console.log('🎯 WINNER SEARCH RESULTS:');\n        console.log('  - Looking for winner:', {\n          winner: currentWinner.winner,\n          fullAddress: currentWinner.fullAddress,\n          address: currentWinner.address,\n          username: currentWinner.username,\n          displayName: currentWinner.displayName\n        });\n        console.log('  - Available infiniteItems:', infiniteItems.map((item, i) => ({ \n          index: i, \n          address: item?.address, \n          username: item?.username,\n          displayName: item?.displayName,\n          amount: item?.amount\n        })));\n        \n        // ENHANCED WINNER MATCHING - Try more combinations\n        for (let i = 0; i < infiniteItems.length; i++) {\n          const bettor = infiniteItems[i];\n          if (!bettor) continue;\n          \n          console.log(`🔍 Checking item ${i}:`, {\n            bettor_address: bettor.address,\n            bettor_username: bettor.username,\n            bettor_displayName: bettor.displayName,\n            winner_winner: currentWinner.winner,\n            winner_fullAddress: currentWinner.fullAddress,\n            winner_address: currentWinner.address,\n            winner_username: currentWinner.username,\n            winner_displayName: currentWinner.displayName\n          });\n          \n          const isMatch = (\n            // Address matching\n            (bettor.address && currentWinner.winner && bettor.address === currentWinner.winner) ||\n            (bettor.address && currentWinner.fullAddress && bettor.address === currentWinner.fullAddress) ||\n            (bettor.address && currentWinner.address && bettor.address === currentWinner.address) ||\n            // Username matching\n            (bettor.username && currentWinner.username && bettor.username === currentWinner.username) ||\n            (bettor.username && currentWinner.displayName && bettor.username === currentWinner.displayName) ||\n            (bettor.displayName && currentWinner.username && bettor.displayName === currentWinner.username) ||\n            (bettor.displayName && currentWinner.displayName && bettor.displayName === currentWinner.displayName)\n          );\n          \n          if (isMatch) {\n            winnerIndex = i;\n            console.log('🎯 WINNER FOUND at infiniteItems index:', winnerIndex, 'bettor:', bettor);\n            console.log('🎯 Match reason:', {\n              addressMatch: bettor.address === currentWinner.winner || bettor.address === currentWinner.fullAddress,\n              usernameMatch: bettor.username === currentWinner.username || bettor.displayName === currentWinner.username\n            });\n            break;\n          }\n        }\n        \n        console.log('  - Winner found at index:', winnerIndex);\n        \n        if (winnerIndex === -1) {\n          console.log('⚠️ Winner not found in infiniteItems, using fallback positioning');\n          \n          // ENHANCED FALLBACK: Actually inject the winner into the first set\n          const firstEmptyIndex = allItems.findIndex(item => item === null);\n          if (firstEmptyIndex !== -1) {\n            // Inject winner data into the empty slot\n            const winnerData = {\n              address: currentWinner.winner || currentWinner.fullAddress || currentWinner.address,\n              username: currentWinner.username || currentWinner.displayName || 'Winner',\n              displayName: currentWinner.displayName || currentWinner.username || 'Winner',\n              amount: currentWinner.prize || 0,\n              isWinner: true\n            };\n            \n            // Update all three sets in infiniteItems\n            infiniteItems[firstEmptyIndex] = winnerData;\n            infiniteItems[firstEmptyIndex + allItems.length] = winnerData;\n            infiniteItems[firstEmptyIndex + (allItems.length * 2)] = winnerData;\n            \n            winnerIndex = firstEmptyIndex;\n            console.log('✅ Injected winner at index:', winnerIndex, 'data:', winnerData);\n          } else {\n            // Find first real bettor as fallback\n            winnerIndex = allItems.findIndex(item => item !== null);\n            if (winnerIndex === -1) winnerIndex = 0;\n            console.log('✅ Using fallback winner position at index:', winnerIndex);\n          }\n        }\n        \n        if (winnerIndex !== -1) {\n          // DEBUGGING: Check current DOM state\n          const carousel = document.querySelector('.carousel-track');\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          const carouselContainer = document.querySelector('.players-carousel');\n          \n          if (carousel && targetArrow && carouselContainer) {\n            const carouselRect = carousel.getBoundingClientRect();\n            const arrowRect = targetArrow.getBoundingClientRect();\n            const containerRect = carouselContainer.getBoundingClientRect();\n            \n            console.log('🎯 DOM DEBUG:');\n            console.log('  - Carousel rect:', carouselRect);\n            console.log('  - Arrow rect:', arrowRect);\n            console.log('  - Container rect:', containerRect);\n            console.log('  - Current transform:', carousel.style.transform);\n          }\n          \n          // Calculate arrow center position relative to the track\n          let arrowCenterOffset = 200; // Default fallback\n          \n          if (targetArrow && carouselContainer) {\n            const containerRect = carouselContainer.getBoundingClientRect();\n            const arrowRect = targetArrow.getBoundingClientRect();\n            \n            // Arrow center relative to container\n            const arrowCenterInContainer = arrowRect.left - containerRect.left + (arrowRect.width / 2);\n            // Track padding shifts everything right by 12px\n            arrowCenterOffset = arrowCenterInContainer - 12;\n            \n            // TELEGRAM MINIAPP FIX: Adjust for \"off by one card\" issue\n            const isInTelegram = window.Telegram?.WebApp;\n            if (isInTelegram) {\n              // Telegram has slightly different layout - fine-tune based on testing\n              arrowCenterOffset -= 40; // Fine-tuned adjustment for Telegram\n              console.log('🎯 TELEGRAM ADJUSTMENT: Applied -40px offset for Telegram WebApp');\n            }\n            \n            console.log('🎯 ARROW POSITIONING:');\n            console.log('  - Container rect:', containerRect);\n            console.log('  - Arrow rect:', arrowRect);\n            console.log('  - Arrow center in container:', arrowCenterInContainer);\n            console.log('  - Raw arrow center offset:', arrowCenterInContainer - 12);\n            console.log('  - Final arrow center offset (with Telegram adjustment):', arrowCenterOffset);\n            console.log('  - Environment:', isInTelegram ? 'Telegram WebApp' : 'Web Browser');\n          }\n          \n          // FIXED: Calculate the correct target position in the infinite scroll\n          // We want the winner to appear under the arrow, regardless of where it was found\n          \n          // Find which \"set\" of the infinite scroll we should target\n          // We want to go through at least one full cycle for drama, then land on winner\n          const singleSetLength = allItems.length;\n          const currentPositionInCards = currentPosition / scrollParams.cardWidth;\n          \n          // Calculate which set we should target (aim for 2nd or 3rd set for drama)\n          let targetSetIndex = 1; // Default to second set\n          if (currentPositionInCards < singleSetLength) {\n            targetSetIndex = 1; // We're in first set, go to second\n          } else if (currentPositionInCards < singleSetLength * 2) {\n            targetSetIndex = 2; // We're in second set, go to third\n          } else {\n            targetSetIndex = 2; // We're in third set, stay in third or go to second\n          }\n          \n          // The actual index in infiniteItems where we want the winner to appear\n          const targetWinnerIndex = (targetSetIndex * singleSetLength) + (winnerIndex % singleSetLength);\n          \n          console.log('🎯 TARGET CALCULATION:');\n          console.log('  - Single set length:', singleSetLength);\n          console.log('  - Current position in cards:', currentPositionInCards);\n          console.log('  - Target set index:', targetSetIndex);\n          console.log('  - Original winner index:', winnerIndex);\n          console.log('  - Target winner index in infinite array:', targetWinnerIndex);\n          \n          // Calculate target position\n          const cardCenterOffset = scrollParams.cardWidth / 2;\n          const targetWinnerCardLeftPosition = targetWinnerIndex * scrollParams.cardWidth;\n          const targetWinnerCardCenterPosition = targetWinnerCardLeftPosition + cardCenterOffset;\n          \n          // How much do we need to move the track LEFT to center the winner under the arrow\n          const requiredOffset = targetWinnerCardCenterPosition - arrowCenterOffset;\n          \n          // Target position = required offset (absolute position)\n          targetPosition = requiredOffset;\n          \n          console.log('🎯 FINAL CALCULATION:');\n          console.log('  - Target winner index in infiniteItems:', targetWinnerIndex);\n          console.log('  - Card width:', scrollParams.cardWidth);\n          console.log('  - Target winner card left edge:', targetWinnerCardLeftPosition);\n          console.log('  - Target winner card center:', targetWinnerCardCenterPosition);\n          console.log('  - Arrow center offset:', arrowCenterOffset);\n          console.log('  - Required track movement LEFT:', requiredOffset);\n          console.log('  - Current position:', currentPosition);\n          console.log('  - Target position:', targetPosition);\n          console.log('  - Movement needed:', targetPosition - currentPosition);\n          \n          // Start precise winner landing animation with Framer Motion\n          carouselAnimation.stop();\n          \n          // First do a dramatic spin to build suspense\n          const dramaticSpinDistance = scrollParams.resetTriggerPoint * 2; // 2 full cycles\n          const finalPosition = -targetPosition;\n          \n          console.log('🎬 FRAMER MOTION: Starting winner landing animation');\n          console.log('  - Dramatic spin distance:', dramaticSpinDistance);\n          console.log('  - Final landing position:', finalPosition);\n          \n          carouselAnimation.start({\n            x: [carouselX.get(), carouselX.get() - dramaticSpinDistance, finalPosition],\n            transition: {\n              duration: 3.5,\n              times: [0, 0.7, 1],\n              ease: [\"linear\", \"linear\", \"easeOut\"],\n              type: \"tween\"\n            }\n          }).then(() => {\n            console.log('🎯 FRAMER MOTION: Winner animation complete! Winner landed at position:', finalPosition);\n            winnerPositionFound = true;\n            \n            // Show winner visually after animation completes\n            setTimeout(() => {\n              setShowWinnerVisually(true);\n              console.log('🎬 Winner revealed visually after perfect landing');\n            }, 500);\n          });\n          \n          // Update motion value for future animations\n          carouselX.set(finalPosition);\n        }\n      }\n      \n      // Winner animation is now handled by Framer Motion above\n      // No need for manual animation frames when winner is being animated\n      if (currentWinner && animationPhase === 'slow-reveal') {\n        return; // Let Framer Motion handle the winner animation\n      }\n    };\n\n    // Start with normal animation\n    animate();\n    startNormalAnimation();\n\n    // Reset animation when new round starts\n    const resetAnimation = () => {\n      console.log('🔄 Resetting Framer Motion animation for new round');\n      \n      animationPhase = 'normal';\n      winnerPositionFound = false;\n      winnerCardVisible = false;\n      targetPosition = null;\n      cachedTargetArrow = null;\n      setShowWinnerVisually(false);\n      \n      // Reset arrow states\n      if (cachedTargetArrow) {\n        cachedTargetArrow.classList.remove('winner-approaching', 'winner-landed');\n      }\n      \n      // Stop any running animations and reset position\n      carouselAnimation.stop();\n      carouselX.set(-scrollParams.resetToPosition);\n      \n      // Restart normal animation\n      startNormalAnimation();\n    };\n    \n    // Expose reset function for external use - Enhanced for Telegram\n    window.resetCarouselAnimation = resetAnimation;\n    \n    // OPTIMIZED: Minimal Telegram event listeners with throttling\n    if (window.Telegram?.WebApp) {\n      let throttleTimeout = null;\n      \n      // Throttled viewport change handler\n      const handleTelegramViewportChange = () => {\n        if (throttleTimeout) return; // Throttle to prevent spam\n        throttleTimeout = setTimeout(() => {\n          throttleTimeout = null;\n          \n          // CRITICAL: Recalculate scroll parameters for new viewport\n          const oldCardWidth = scrollParams.cardWidth;\n          scrollParams = calculateScrollParameters();\n          \n          console.log('📱 TELEGRAM VIEWPORT CHANGE:');\n          console.log('  - Old card width:', oldCardWidth, 'px');\n          console.log('  - New card width:', scrollParams.cardWidth, 'px');\n          \n          // Only reset if card width actually changed\n          if (Math.abs(oldCardWidth - scrollParams.cardWidth) > 5) {\n            console.log('🔄 Card width changed significantly - resetting animation');\n            if (window.resetCarouselAnimation && animationPhase === 'normal') {\n              window.resetCarouselAnimation();\n            }\n          }\n        }, 300); // Increased delay to reduce CPU usage\n      };\n      \n      // Listen for Telegram WebApp events (only essential ones)\n      if (window.Telegram.WebApp.onEvent) {\n        window.Telegram.WebApp.onEvent('viewportChanged', handleTelegramViewportChange);\n      }\n    }\n\n    return () => {\n      // Stop Framer Motion animations\n      carouselAnimation.stop();\n      \n      // Clean up global reference\n      delete window.resetCarouselAnimation;\n      \n      // Clean up Telegram-specific event listeners\n      if (window.Telegram?.WebApp) {\n        console.log('🎯 Cleaning up Telegram WebApp event listeners');\n        // Remove Telegram WebApp event listeners\n        if (window.Telegram.WebApp.offEvent) {\n          window.Telegram.WebApp.offEvent('viewportChanged');\n        }\n      }\n    };\n  }, []); // EMPTY dependency array to prevent re-initialization\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      console.log('⏰ App: Socket timer update:', timerData);\n      \n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      \n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      \n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n        \n        // Only clear winner state when new round detected AND timer is significantly higher (real new round)\n        if (isNewRound && contractWinner && newTimeRemaining > 200) {\n          console.log('🔄 Timer update detected REAL new round with fresh timer - clearing winner state');\n          console.log('🔓 Exiting winner state - new round detected');\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n        }\n        \n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n        \n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      \n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      console.log('🔓 Exiting winner state - new round started');\n      \n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsInWinnerState(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n      \n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n      \n      // OPTIMIZED: Simple animation reset\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      console.log('🎮 App: Game state update:', gameState);\n      \n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = gameState.timer?.timeRemaining;\n      \n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n          \n          // Only sync if there's a significant difference (>10s) or if backend is ahead\n          if (timeDiff > 10 || backendTimeRemaining > prev) {\n            console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n          \n          // Keep local countdown running if difference is small\n          console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        \n        // Check if this is a new round with active timer - this means new round started\n        const isNewRound = roundNumber !== currentRound;\n        const hasActiveTimer = gameState.timer?.isActive || gameState.timer?.timeRemaining > 60;\n        \n        if (isNewRound && hasActiveTimer && isInWinnerStateRef.current) {\n          console.log('🔄 GameState detected NEW ROUND with active timer - clearing winner state');\n          console.log('🔓 Exiting winner state - new round started via gameState');\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n          winnerCoordinator.reset();\n        }\n        \n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        \n        setWaitingForWinner(gameState.isWaitingForWinner);\n        \n        // If waitingForWinner becomes false AND we have a new round with active timer, reset winner state\n        if (!gameState.isWaitingForWinner && isInWinnerStateRef.current) {\n          const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n            ? gameState.currentRound.roundNumber \n            : gameState.currentRound;\n          const isNewRound = roundNumber && roundNumber !== currentRound;\n          const hasActiveTimer = gameState.timer?.isActive || gameState.timer?.timeRemaining > 60;\n          \n          if (isNewRound && hasActiveTimer) {\n            console.log('🔄 waitingForWinner false + new round + active timer = new round started - clearing winner state');\n            console.log('🔓 Exiting winner state - new round confirmed');\n            setIsInWinnerState(false);\n            setContractWinner(null);\n            setShowWinnerAnnouncement(false);\n            setShowWinnerVisually(false);\n            setPostWinnerLoading(false);\n            setIsAnyWinnerDisplayActive(false);\n            setPreviousRoundBettors([]);\n            winnerCoordinator.reset();\n          } else {\n            console.log('⏳ waitingForWinner became false, but keeping winner state (no new round detected)');\n          }\n        }\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        \n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        \n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (data) => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n      \n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      \n      // Don't reset winner state just because waitingForWinner changed\n      // Only reset when we get explicit newRound/roundReset events\n      setWaitingForWinner(isWaiting);\n      \n      // Log but don't auto-reset winner state\n      if (!isWaiting && isInWinnerStateRef.current) {\n        console.log('⏳ waitingForWinner event became false, but keeping winner state until explicit new round');\n      }\n      \n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', (resetData) => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      console.log('🔓 Exiting winner state - round reset');\n      \n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n      \n      // Clear ALL winner states since this is a fresh timer\n      setIsInWinnerState(false);\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      \n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n      \n      // OPTIMIZED: Simple animation reset\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    const inputValue = e.target.value;\n    \n    // Allow empty input or numbers with decimal points (both . and ,)\n    if (inputValue === '' || inputValue === '.' || inputValue === ',' || /^\\d*[.,]?\\d*$/.test(inputValue)) {\n      // Convert comma to period for consistency\n      const normalizedValue = inputValue.replace(',', '.');\n      \n      // For empty or just \".\" input, keep the raw value but show comma if user typed comma\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(inputValue); // Keep original input (might be comma)\n        return;\n      }\n      \n      // For valid numbers, check limits but preserve decimal typing\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(inputValue); // Keep the original input format (comma or period)\n      }\n    }\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    // Convert comma to period before parsing for validation\n    const normalizedBetAmount = betAmount.toString().replace(',', '.');\n    const numericBetAmount = parseFloat(normalizedBetAmount);\n    \n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n\n    try {\n      hapticFeedback('medium');\n      await placeBet(numericBetAmount);\n      \n      // Reset bet amount after successful bet\n      setBetAmount(0.11);\n      \n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n        <div className=\"app-container\">\n          {/* Header Section */}\n          <div className=\"header-section\">\n            <div className=\"header-top\">\n              <div className=\"logo-section\">\n                <div className=\"logo-icon\">🎰</div>\n                <div className=\"app-name\">SlotPot</div>\n              </div>\n              \n              <div className=\"balance-section\">\n                <div className=\"balance-label\">Balance</div>\n                <div className=\"balance-amount\">\n                  {isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000'}\n                  <span className=\"balance-symbol\">TON</span>\n                </div>\n              </div>\n              \n              <div className=\"header-icons\">\n                <WalletConnection />\n              </div>\n            </div>\n          </div>\n          \n          {/* Main Content */}\n          <div className=\"main-content\">\n            {/* Jackpot Display */}\n            <div className=\"jackpot-header\">\n              <div className=\"jackpot-title\">💰 JACKPOT</div>\n              <div className=\"jackpot-value-display\">{jackpotValue.toFixed(3)}</div>\n              <div className=\"jackpot-subtitle\">Winner takes all...</div>\n            </div>\n\n            {/* Betting Section */}\n            <div className=\"betting-section\">\n              <div className=\"bet-input-section\">\n                <input \n                  type=\"text\" \n                  className=\"bet-amount-input\" \n                  value={betAmount}\n                  onChange={handleBetChange}\n                  placeholder=\"0.000\"\n                  inputMode=\"decimal\"\n                />\n                <button className=\"bet-increment-btn\" onClick={() => setBetAmount(prev => {\n                  const currentValue = parseFloat(prev) || 0;\n                  return Math.min(currentValue + 0.1, 10).toFixed(1);\n                })}>\n                  +0.1\n          </button>\n              </div>\n          <button \n                className=\"bet-button\" \n                onClick={handlePlaceBet}\n                disabled={isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement}\n          >\n                {contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' :\n                 isPlacingBet ? 'Betting...' : 'Bet'}\n          </button>\n        </div>\n\n            {/* Stats Grid */}\n            <div className=\"stats-grid\">\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{userBetTotal.toFixed(3)}</div>\n                <div className=\"stat-label\">Your Wager</div>\n              </div>\n              <div className=\"stat-card chance-stat\">\n                <div className=\"stat-value\">{userWinChance.toFixed(2)}%</div>\n                <div className=\"stat-label\">Your Chance</div>\n          </div>\n        </div>\n\n            {/* Time Section */}\n            <div className=\"time-section\">\n              <div className=\"time-label\">Time Remaining </div>\n              <div className=\"time-value\">\n                {Math.floor((timeRemaining || 0) / 60)}:{((timeRemaining || 0) % 60).toString().padStart(2, '0')}\n          </div>\n        </div>\n\n            {/* Players Carousel Section */}\n            <div className=\"players-carousel-section\">\n              <div className={`carousel-header ${\n                (timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? 'analyzing' : \n                showWinnerVisually ? 'winner' : ''\n              }`}>\n                <h3>\n                  {(timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? \n                    \"🔍 Analyzing Bets...\" : \n                    showWinnerVisually && contractWinner ? \n                    `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` :\n                    `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                  }\n                </h3>\n              </div>\n              <div className=\"players-carousel\">\n                {/* TARGET ARROW - Cards must land here! */}\n                <div className=\"carousel-target-arrow\">⬇️</div>\n                \n                <motion.div \n                  ref={carouselRef}\n                  className={`carousel-track ${\n                    (timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? 'analyzing' : \n                    showWinnerVisually ? 'winner-revealed' : \n                    slotSpinning ? 'sliding' : ''\n                  }`}\n                  animate={carouselAnimation}\n                  style={{\n                    x: carouselX\n                  }}\n                >\n                  {(() => {\n                    // For a fresh round, prefer empty display over old data\n                    // Only use previousRoundBettors if we're in winner display mode\n                    const bettorsToShow = gameBettors.length > 0 ? gameBettors : \n                                         (showWinnerVisually || waitingForWinner) ? previousRoundBettors : [];\n                    \n                    console.log('🎠 Using bettors:', bettorsToShow.length, 'total bettors');\n                    console.log('🎠 ContractWinner from backend:', contractWinner);\n                    \n                    // Check if we're showing waiting cards due to empty data\n                    if (bettorsToShow.length === 0) {\n                      console.log('⚠️ SHOWING WAITING CARDS - No bettor data available');\n                    }\n                    \n                    // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                    const allItems = [\n                      ...bettorsToShow,\n                      ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n                    ];\n                    \n                    // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                    const infiniteItems = [...allItems, ...allItems, ...allItems];\n                    \n                    return infiniteItems.map((bettor, index) => {\n                      // Winner highlighting - only show AFTER animation completes (showWinnerVisually)\n                      const isWinner = showWinnerVisually && contractWinner && bettor && (\n                        bettor.address === contractWinner.winner ||\n                        bettor.address === contractWinner.fullAddress ||\n                        bettor.username === contractWinner.username\n                      );\n                        \n                        return (\n                          <div key={`${index}-${bettor?.address || 'waiting'}`} className={`carousel-card ${\n                            isWinner ? 'winner' : \n                            bettor ? 'active' : 'waiting'\n                          }`} data-debug={`winner: ${isWinner}, address: ${bettor?.address}`}>\n                            <div className=\"mobile-player-avatar\">\n                              {bettor ? (\n                                <div className=\"generated-avatar\">\n                                  {bettor.username ? bettor.username[0].toUpperCase() : '?'}\n                                </div>\n                              ) : (\n                                <div className=\"waiting-icon\">❓</div>\n                              )}\n                            </div>\n                            <div className=\"mobile-player-info\">\n                              <div className=\"mobile-player-name\">\n                                {bettor ? (bettor.username || bettor.displayName || 'Player') : 'Waiting'}\n                              </div>\n                              <div className=\"mobile-player-bet\">\n                                {bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                              </div>\n                              {isWinner && contractWinner && contractWinner.prize && (\n                                <div className=\"winner-prize\">Won {parseFloat(contractWinner.prize).toFixed(3)} TON</div>\n                              )}\n                            </div>\n                            {isWinner && (\n                              <div className=\"winner-crown\">👑</div>\n                            )}\n                          </div>\n                        );\n                      });\n                  })()}\n                </motion.div>\n              </div>\n        </div>\n      </div>\n\n      {/* Mobile Footer */}\n      <div className=\"mobile-footer\">\n            <div className=\"footer-stats\">\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🏠</div>\n                <div className=\"footer-stat-value\">Home</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">⚡</div>\n                <div className=\"footer-stat-value\">Fast</div>\n            </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🕐</div>\n                <div className=\"footer-stat-value\">History</div>\n            </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🔍</div>\n                <div className=\"footer-stat-value\">Search</div>\n              </div>\n          </div>\n            <button className=\"games-button\">\n              <DollarSign size={14} />\n            Games\n          </button>\n        </div>\n      </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && !contractWinner && !showWinnerAnnouncement && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\">🔄</div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}