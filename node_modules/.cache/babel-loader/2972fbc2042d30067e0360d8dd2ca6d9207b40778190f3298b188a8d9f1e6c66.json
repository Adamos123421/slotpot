{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', {\n        hasSwiper: !!swiperRef.current,\n        hasWinner: !!winner,\n        isActive: winnerAnimationActive\n      });\n      return;\n    }\n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    setWinnerAnimationActive(true);\n\n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // STEP 1: Find winner slide index by checking CSS classes (most reliable)\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    console.log('🔍 Searching through', slides.length, 'slides for winner...');\n\n    // Primary method: Find slide with winner CSS class\n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const winnerCard = slide.querySelector('.player-card.winner');\n      if (winnerCard) {\n        winnerSlideIndex = i;\n        console.log('✅ Found winner slide at index:', i);\n        break;\n      }\n    }\n\n    // Backup method: Find by player name\n    if (winnerSlideIndex === -1) {\n      const winnerName = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName) || 'Player';\n      console.log('🔍 Searching by name:', winnerName);\n      for (let i = 0; i < slides.length; i++) {\n        var _nameEl$textContent;\n        const slide = slides[i];\n        const nameEl = slide.querySelector('.player-name');\n        const playerName = nameEl === null || nameEl === void 0 ? void 0 : (_nameEl$textContent = nameEl.textContent) === null || _nameEl$textContent === void 0 ? void 0 : _nameEl$textContent.trim();\n        if (playerName && (playerName === winnerName || playerName.includes(winnerName))) {\n          winnerSlideIndex = i;\n          console.log('✅ Found winner by name at index:', i);\n          break;\n        }\n      }\n    }\n    if (winnerSlideIndex === -1) {\n      console.error('❌ Could not find winner slide at all!');\n      setWinnerAnimationActive(false);\n      // Don't set locked here, let it try again\n      return;\n    }\n    console.log('🎯 Target winner slide index:', winnerSlideIndex);\n\n    // STEP 2: Do a simple exciting spin for 1.5 seconds (shorter)\n    console.log('⚡ Starting exciting spin...');\n    let spinCount = 0;\n    const maxSpins = 30; // About 1.5 seconds at 50ms intervals\n\n    const spinInterval = setInterval(() => {\n      if (swiperRef.current && spinCount < maxSpins) {\n        swiperRef.current.slideNext(50); // Fast slide\n        spinCount++;\n      } else {\n        clearInterval(spinInterval);\n\n        // STEP 3: Slide directly to winner with smooth animation and FORCE CENTER\n        console.log('🏆 Sliding to winner at index:', winnerSlideIndex);\n        setTimeout(() => {\n          if (swiperRef.current) {\n            // FORCE the slide to be perfectly centered\n            console.log('🎯 Forcing center position for winner');\n\n            // Use slideTo with runCallbacks false to prevent issues\n            swiperRef.current.slideTo(winnerSlideIndex, 1500, false);\n\n            // STEP 4: Lock the carousel after animation completes\n            setTimeout(() => {\n              console.log('🔒 Locking winner in position');\n              if (swiperRef.current) {\n                // Completely disable movement\n                swiperRef.current.autoplay.stop();\n                swiperRef.current.allowSlideNext = false;\n                swiperRef.current.allowSlidePrev = false;\n                swiperRef.current.allowTouchMove = false;\n\n                // Force center the winner slide\n                const realIndex = swiperRef.current.realIndex;\n                console.log('🎯 Final check - Active index:', swiperRef.current.activeIndex, 'Real index:', realIndex);\n\n                // Double-check we're on the right slide\n                if (swiperRef.current.activeIndex !== winnerSlideIndex) {\n                  console.log('🔧 Correcting position...');\n                  swiperRef.current.slideTo(winnerSlideIndex, 0, false);\n                }\n\n                // Force stop any transitions\n                const wrapper = swiperRef.current.wrapperEl;\n                if (wrapper) {\n                  wrapper.style.transition = 'none';\n                }\n              }\n              setWinnerLocked(true);\n              setWinnerAnimationActive(false);\n              onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n              console.log('✅ Winner animation complete and LOCKED!');\n\n              // Auto-reset after 7 seconds\n              winnerTimeoutRef.current = setTimeout(() => {\n                console.log('🔄 Auto-resetting carousel');\n                resetToIdle();\n              }, 7000);\n            }, 1600); // Wait for slideTo animation\n          }\n        }, 300); // Shorter delay before sliding to winner\n      }\n    }, 50);\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    console.log('🔒 Locking on winner...');\n\n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Looking for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon = playerNameEl.textContent) === null || _playerNameEl$textCon === void 0 ? void 0 : _playerNameEl$textCon.trim();\n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n\n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n\n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        }\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n      }\n\n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n\n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n\n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n\n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n\n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n\n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n\n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n\n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n\n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    if (winner && !winnerAnimationActive && !winnerLocked) {\n      // Check if this is the same winner we already tried\n      const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n      const lastWinnerKey = lastWinnerRef.current;\n\n      // Reset attempts if this is a new winner\n      if (currentWinnerKey !== lastWinnerKey) {\n        animationAttemptsRef.current = 0;\n        lastWinnerRef.current = currentWinnerKey;\n      }\n\n      // Prevent infinite loops - max 3 attempts\n      if (animationAttemptsRef.current >= 3) {\n        console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n        console.log('🎯 Forcing winner display without animation');\n\n        // Just show the winner without animation\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        return;\n      }\n      console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n      console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/3`);\n      animationAttemptsRef.current++;\n      animateToWinner();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${winnerAnimationActive && !winnerLocked ? 'winner-approaching' : winnerLocked ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: Math.max(players.length, 6),\n      autoplay: {\n        delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: 300,\n      className: `player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(2)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 19\n            }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 17\n          }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"+lturoi5MGn+/8Zh6H9qMrupE2I=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","winnerAnimationActive","setWinnerAnimationActive","winnerLocked","setWinnerLocked","winnerTimeoutRef","animationAttemptsRef","lastWinnerRef","handleSwiperInit","swiper","current","animateToWinner","console","log","hasSwiper","hasWinner","isActive","autoplay","stop","slides","winnerSlideIndex","length","i","slide","winnerCard","querySelector","winnerName","username","displayName","_nameEl$textContent","nameEl","playerName","textContent","trim","includes","error","spinCount","maxSpins","spinInterval","setInterval","slideNext","clearInterval","setTimeout","slideTo","allowSlideNext","allowSlidePrev","allowTouchMove","realIndex","activeIndex","wrapper","wrapperEl","style","transition","resetToIdle","lockOnWinner","winnerUsername","winnerAddress","address","fullAddress","closestToCenter","Infinity","containerCenter","el","clientWidth","_playerNameEl$textCon","playerNameEl","isWinner","slice","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","Math","abs","transform","getComputedStyle","warn","fallbackIndex","start","clearTimeout","currentWinnerKey","lastWinnerKey","params","delay","disableOnInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","max","pauseOnMouseEnter","speed","onSwiper","Array","map","_","setIndex","player","index","toUpperCase","amount","toFixed","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', { \n        hasSwiper: !!swiperRef.current, \n        hasWinner: !!winner, \n        isActive: winnerAnimationActive \n      });\n      return;\n    }\n    \n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    \n    setWinnerAnimationActive(true);\n    \n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // STEP 1: Find winner slide index by checking CSS classes (most reliable)\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    console.log('🔍 Searching through', slides.length, 'slides for winner...');\n    \n    // Primary method: Find slide with winner CSS class\n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const winnerCard = slide.querySelector('.player-card.winner');\n      if (winnerCard) {\n        winnerSlideIndex = i;\n        console.log('✅ Found winner slide at index:', i);\n        break;\n      }\n    }\n    \n    // Backup method: Find by player name\n    if (winnerSlideIndex === -1) {\n      const winnerName = winner?.username || winner?.displayName || 'Player';\n      console.log('🔍 Searching by name:', winnerName);\n      \n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        const nameEl = slide.querySelector('.player-name');\n        const playerName = nameEl?.textContent?.trim();\n        \n        if (playerName && (playerName === winnerName || playerName.includes(winnerName))) {\n          winnerSlideIndex = i;\n          console.log('✅ Found winner by name at index:', i);\n          break;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex === -1) {\n      console.error('❌ Could not find winner slide at all!');\n      setWinnerAnimationActive(false);\n      // Don't set locked here, let it try again\n      return;\n    }\n    \n    console.log('🎯 Target winner slide index:', winnerSlideIndex);\n    \n    // STEP 2: Do a simple exciting spin for 1.5 seconds (shorter)\n    console.log('⚡ Starting exciting spin...');\n    \n    let spinCount = 0;\n    const maxSpins = 30; // About 1.5 seconds at 50ms intervals\n    \n    const spinInterval = setInterval(() => {\n      if (swiperRef.current && spinCount < maxSpins) {\n        swiperRef.current.slideNext(50); // Fast slide\n        spinCount++;\n      } else {\n        clearInterval(spinInterval);\n        \n        // STEP 3: Slide directly to winner with smooth animation and FORCE CENTER\n        console.log('🏆 Sliding to winner at index:', winnerSlideIndex);\n        \n        setTimeout(() => {\n          if (swiperRef.current) {\n            // FORCE the slide to be perfectly centered\n            console.log('🎯 Forcing center position for winner');\n            \n            // Use slideTo with runCallbacks false to prevent issues\n            swiperRef.current.slideTo(winnerSlideIndex, 1500, false);\n            \n            // STEP 4: Lock the carousel after animation completes\n            setTimeout(() => {\n              console.log('🔒 Locking winner in position');\n              \n              if (swiperRef.current) {\n                // Completely disable movement\n                swiperRef.current.autoplay.stop();\n                swiperRef.current.allowSlideNext = false;\n                swiperRef.current.allowSlidePrev = false;\n                swiperRef.current.allowTouchMove = false;\n                \n                // Force center the winner slide\n                const realIndex = swiperRef.current.realIndex;\n                console.log('🎯 Final check - Active index:', swiperRef.current.activeIndex, 'Real index:', realIndex);\n                \n                // Double-check we're on the right slide\n                if (swiperRef.current.activeIndex !== winnerSlideIndex) {\n                  console.log('🔧 Correcting position...');\n                  swiperRef.current.slideTo(winnerSlideIndex, 0, false);\n                }\n                \n                // Force stop any transitions\n                const wrapper = swiperRef.current.wrapperEl;\n                if (wrapper) {\n                  wrapper.style.transition = 'none';\n                }\n              }\n              \n              setWinnerLocked(true);\n              setWinnerAnimationActive(false);\n              onWinnerLand?.();\n              \n              console.log('✅ Winner animation complete and LOCKED!');\n              \n              // Auto-reset after 7 seconds\n              winnerTimeoutRef.current = setTimeout(() => {\n                console.log('🔄 Auto-resetting carousel');\n                resetToIdle();\n              }, 7000);\n              \n            }, 1600); // Wait for slideTo animation\n          }\n        }, 300); // Shorter delay before sliding to winner\n      }\n    }, 50);\n    \n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    \n    console.log('🔒 Locking on winner...');\n    \n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('🔍 Looking for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n      \n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n        \n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner?.displayName);\n        }\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || \n                   winnerAddress.includes(playerName);\n      }\n      \n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      \n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      \n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        \n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        \n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n      \n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n      \n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n        \n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n          \n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        \n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        \n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n      \n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      \n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        \n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand?.();\n          \n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    \n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n      \n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n      \n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    \n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    \n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    \n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    if (winner && !winnerAnimationActive && !winnerLocked) {\n      // Check if this is the same winner we already tried\n      const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n      const lastWinnerKey = lastWinnerRef.current;\n      \n      // Reset attempts if this is a new winner\n      if (currentWinnerKey !== lastWinnerKey) {\n        animationAttemptsRef.current = 0;\n        lastWinnerRef.current = currentWinnerKey;\n      }\n      \n      // Prevent infinite loops - max 3 attempts\n      if (animationAttemptsRef.current >= 3) {\n        console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n        console.log('🎯 Forcing winner display without animation');\n        \n        // Just show the winner without animation\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        \n        return;\n      }\n      \n      console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n      console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/3`);\n      \n      animationAttemptsRef.current++;\n      animateToWinner();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    \n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        winnerAnimationActive && !winnerLocked ? 'winner-approaching' : \n        winnerLocked ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={Math.max(players.length, 6)}\n        autoplay={{\n          delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={300}\n        className={`player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Only 2 sets to reduce complexity */}\n        {[...Array(2)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}