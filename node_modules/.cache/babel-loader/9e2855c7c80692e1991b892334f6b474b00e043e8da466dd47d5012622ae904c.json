{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst useTelegramWebApp = () => {\n  _s();\n  var _window$Telegram2, _webApp$initDataUnsaf;\n  const [webApp, setWebApp] = useState(null);\n  const [user, setUser] = useState(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [initData, setInitData] = useState(null);\n  // Full-screen mode state\n  const [isFullScreen, setIsFullScreen] = useState(false);\n  const [orientation, setOrientation] = useState('portrait');\n  const [viewportDimensions, setViewportDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  useEffect(() => {\n    var _window$Telegram;\n    const app = (_window$Telegram = window.Telegram) === null || _window$Telegram === void 0 ? void 0 : _window$Telegram.WebApp;\n    if (app) {\n      var _app$initDataUnsafe, _app$initDataUnsafe2, _app$initDataUnsafe3;\n      // Mark body as Telegram environment for CSS targeting\n      document.body.setAttribute('data-telegram', 'true');\n      console.log('ðŸ“± Telegram WebApp detected - marked body with data-telegram attribute');\n      app.ready();\n\n      // Enable full screen mode aggressively\n      app.expand();\n      app.enableClosingConfirmation();\n\n      // Prevent scroll-to-close gestures\n      app.disableVerticalSwipes();\n      if (app.setHeaderColor) {\n        app.setHeaderColor('#0a0a0f');\n      }\n\n      // Prevent pull-to-refresh and document scroll\n      document.addEventListener('touchmove', e => {\n        // Only prevent scrolling on body/html level, allow within containers\n        if (e.target === document.body || e.target === document.documentElement) {\n          e.preventDefault();\n        }\n      }, {\n        passive: false\n      });\n\n      // Request new full-screen mode if available\n      if (app.requestFullscreen) {\n        try {\n          app.requestFullscreen();\n          setIsFullScreen(true);\n          console.log('ðŸ“± Telegram full-screen mode requested');\n        } catch (error) {\n          console.log('ðŸ“± Full-screen mode not available:', error);\n        }\n      }\n\n      // Request full screen viewport\n      if (app.viewportHeight && app.viewportStableHeight) {\n        console.log('ðŸ“± Telegram viewport:', {\n          height: app.viewportHeight,\n          stableHeight: app.viewportStableHeight,\n          isExpanded: app.isExpanded,\n          isFullScreen: app.isFullscreen || false\n        });\n      }\n\n      // Set CSS custom properties for dynamic viewport\n      document.documentElement.style.setProperty('--tg-viewport-height', `${app.viewportHeight || window.innerHeight}px`);\n      document.documentElement.style.setProperty('--tg-viewport-stable-height', `${app.viewportStableHeight || window.innerHeight}px`);\n      document.documentElement.style.setProperty('--tg-viewport-width', `${app.viewportWidth || window.innerWidth}px`);\n\n      // Detect orientation\n      const currentOrientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';\n      setOrientation(currentOrientation);\n      setViewportDimensions({\n        width: app.viewportWidth || window.innerWidth,\n        height: app.viewportHeight || window.innerHeight\n      });\n\n      // Set theme colors to match our design\n      app.setHeaderColor('#0a0a0f');\n      app.setBackgroundColor('#0a0a0f');\n\n      // Hide Telegram header if possible\n      if (app.setHeaderColor) {\n        app.setHeaderColor('#0a0a0f');\n      }\n      setWebApp(app);\n\n      // Get real user data\n      const userData = (_app$initDataUnsafe = app.initDataUnsafe) === null || _app$initDataUnsafe === void 0 ? void 0 : _app$initDataUnsafe.user;\n      const rawInitData = app.initData;\n\n      // Extract start parameter from URL hash\n      const hash = window.location.hash.slice(1);\n      const hashParams = new URLSearchParams(hash);\n      const startParam = hashParams.get('tgWebAppStartParam') || ((_app$initDataUnsafe2 = app.initDataUnsafe) === null || _app$initDataUnsafe2 === void 0 ? void 0 : _app$initDataUnsafe2.start_param) || null;\n      console.log('ðŸ“± URL hash:', hash);\n      console.log('ðŸ“± tgWebAppStartParam from hash:', hashParams.get('tgWebAppStartParam'));\n      console.log('ðŸ“± start_param from initDataUnsafe:', (_app$initDataUnsafe3 = app.initDataUnsafe) === null || _app$initDataUnsafe3 === void 0 ? void 0 : _app$initDataUnsafe3.start_param);\n      console.log('ðŸ“± Final startParam:', startParam);\n      if (userData) {\n        setUser({\n          id: userData.id,\n          firstName: userData.first_name,\n          lastName: userData.last_name,\n          username: userData.username,\n          languageCode: userData.language_code,\n          isPremium: userData.is_premium || false,\n          photoUrl: userData.photo_url,\n          // Formatted display name\n          displayName: userData.first_name + (userData.last_name ? ` ${userData.last_name}` : ''),\n          // Short name for UI\n          shortName: userData.first_name || userData.username || 'User',\n          // Referral start param if present\n          referralCode: startParam || null\n        });\n        setInitData(rawInitData);\n        console.log('ðŸ“± Real Telegram user data loaded:', userData);\n      } else {\n        // Fallback to mock data for testing\n        console.log('ðŸ“± No Telegram user data - using mock');\n        setUser({\n          id: 123456789,\n          firstName: \"Test\",\n          lastName: \"User\",\n          username: \"testuser\",\n          languageCode: \"en\",\n          isPremium: false,\n          displayName: \"Test User\",\n          shortName: \"Test\",\n          photoUrl: null,\n          referralCode: new URLSearchParams(window.location.search).get('startapp') || null\n        });\n      }\n      setIsExpanded(true);\n\n      // Handle viewport changes (keyboard, orientation, etc.)\n      const handleViewportChange = () => {\n        if (app.viewportHeight) {\n          document.documentElement.style.setProperty('--tg-viewport-height', `${app.viewportHeight}px`);\n          document.documentElement.style.setProperty('--tg-viewport-stable-height', `${app.viewportStableHeight}px`);\n          document.documentElement.style.setProperty('--tg-viewport-width', `${app.viewportWidth}px`);\n          const newOrientation = app.viewportWidth > app.viewportHeight ? 'landscape' : 'portrait';\n          setOrientation(newOrientation);\n          setViewportDimensions({\n            width: app.viewportWidth,\n            height: app.viewportHeight\n          });\n          console.log('ðŸ“± Viewport changed:', {\n            height: app.viewportHeight,\n            stableHeight: app.viewportStableHeight,\n            width: app.viewportWidth,\n            orientation: newOrientation,\n            isFullScreen: app.isFullscreen || false\n          });\n        }\n      };\n\n      // Handle full-screen mode changes\n      const handleFullScreenChange = () => {\n        const isCurrentlyFullScreen = app.isFullscreen || false;\n        setIsFullScreen(isCurrentlyFullScreen);\n        console.log('ðŸ“± Full-screen mode changed:', isCurrentlyFullScreen);\n\n        // Add CSS class for full-screen styling\n        if (isCurrentlyFullScreen) {\n          document.documentElement.classList.add('telegram-fullscreen');\n        } else {\n          document.documentElement.classList.remove('telegram-fullscreen');\n        }\n      };\n\n      // Listen for viewport changes\n      if (app.onEvent) {\n        app.onEvent('viewportChanged', handleViewportChange);\n        app.onEvent('fullscreenChanged', handleFullScreenChange);\n        app.onEvent('fullscreenFailed', () => {\n          console.log('ðŸ“± Full-screen request failed');\n          setIsFullScreen(false);\n        });\n      }\n\n      // Handle back button\n      app.BackButton.onClick(() => {\n        app.close();\n      });\n\n      // Handle orientation changes\n      const handleOrientationChange = () => {\n        setTimeout(() => {\n          const newOrientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';\n          setOrientation(newOrientation);\n          setViewportDimensions({\n            width: window.innerWidth,\n            height: window.innerHeight\n          });\n          console.log('ðŸ“± Orientation changed to:', newOrientation);\n        }, 100); // Small delay to ensure dimensions are updated\n      };\n      window.addEventListener('orientationchange', handleOrientationChange);\n      window.addEventListener('resize', handleOrientationChange);\n\n      // Cleanup\n      return () => {\n        window.removeEventListener('orientationchange', handleOrientationChange);\n        window.removeEventListener('resize', handleOrientationChange);\n        // Clean up Telegram body attribute\n        document.body.removeAttribute('data-telegram');\n        console.log('ðŸ“± Cleaned up Telegram WebApp body attribute');\n      };\n    } else {\n      console.log('Telegram WebApp not available - running in browser mode');\n      // Set mock user for browser testing\n      setUser({\n        id: 123456789,\n        firstName: \"Test\",\n        lastName: \"User\",\n        username: \"testuser\",\n        languageCode: \"en\",\n        isPremium: false,\n        displayName: \"Test User\",\n        shortName: \"Test\",\n        photoUrl: null\n      });\n\n      // Handle orientation in browser mode\n      const handleBrowserOrientationChange = () => {\n        const newOrientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';\n        setOrientation(newOrientation);\n        setViewportDimensions({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      };\n      window.addEventListener('resize', handleBrowserOrientationChange);\n      return () => {\n        window.removeEventListener('resize', handleBrowserOrientationChange);\n      };\n    }\n  }, []);\n  const showAlert = message => {\n    if (webApp) {\n      webApp.showAlert(message);\n    } else {\n      window.alert(message);\n    }\n  };\n  const showConfirm = (message, callback) => {\n    if (webApp) {\n      webApp.showConfirm(message, callback);\n    } else {\n      callback(window.confirm(message));\n    }\n  };\n  const hapticFeedback = (type = 'impact') => {\n    if (webApp !== null && webApp !== void 0 && webApp.HapticFeedback) {\n      switch (type) {\n        case 'light':\n          webApp.HapticFeedback.impactOccurred('light');\n          break;\n        case 'medium':\n          webApp.HapticFeedback.impactOccurred('medium');\n          break;\n        case 'heavy':\n          webApp.HapticFeedback.impactOccurred('heavy');\n          break;\n        case 'error':\n          webApp.HapticFeedback.notificationOccurred('error');\n          break;\n        case 'success':\n          webApp.HapticFeedback.notificationOccurred('success');\n          break;\n        case 'warning':\n          webApp.HapticFeedback.notificationOccurred('warning');\n          break;\n        default:\n          webApp.HapticFeedback.impactOccurred('medium');\n      }\n    }\n  };\n\n  // Open external link (for wallet connections)\n  const openLink = url => {\n    if (webApp) {\n      webApp.openLink(url);\n    } else {\n      window.open(url, '_blank');\n    }\n  };\n\n  // Show main button (for betting actions)\n  const showMainButton = (text, onClick) => {\n    if (webApp !== null && webApp !== void 0 && webApp.MainButton) {\n      webApp.MainButton.setText(text);\n      webApp.MainButton.show();\n      webApp.MainButton.onClick(onClick);\n    }\n  };\n  const hideMainButton = () => {\n    if (webApp !== null && webApp !== void 0 && webApp.MainButton) {\n      webApp.MainButton.hide();\n    }\n  };\n\n  // Full-screen mode controls\n  const requestFullScreen = async () => {\n    if (webApp !== null && webApp !== void 0 && webApp.requestFullscreen) {\n      try {\n        await webApp.requestFullscreen();\n        setIsFullScreen(true);\n        console.log('ðŸ“± Full-screen mode activated');\n        return true;\n      } catch (error) {\n        console.error('ðŸ“± Failed to request full-screen:', error);\n        return false;\n      }\n    } else {\n      console.warn('ðŸ“± Full-screen mode not supported');\n      return false;\n    }\n  };\n  const exitFullScreen = async () => {\n    if (webApp !== null && webApp !== void 0 && webApp.exitFullscreen) {\n      try {\n        await webApp.exitFullscreen();\n        setIsFullScreen(false);\n        console.log('ðŸ“± Exited full-screen mode');\n        return true;\n      } catch (error) {\n        console.error('ðŸ“± Failed to exit full-screen:', error);\n        return false;\n      }\n    } else {\n      console.warn('ðŸ“± Full-screen exit not supported');\n      return false;\n    }\n  };\n  const toggleFullScreen = async () => {\n    if (isFullScreen) {\n      return await exitFullScreen();\n    } else {\n      return await requestFullScreen();\n    }\n  };\n\n  // Lock orientation (if supported)\n  const lockOrientation = orientationLock => {\n    // Use window.screen to avoid ESLint no-restricted-globals error\n    if (typeof window !== 'undefined' && window.screen && window.screen.orientation && window.screen.orientation.lock) {\n      try {\n        window.screen.orientation.lock(orientationLock);\n        console.log(`ðŸ“± Orientation locked to: ${orientationLock}`);\n      } catch (error) {\n        console.warn('ðŸ“± Orientation lock not supported or failed:', error);\n      }\n    } else {\n      console.warn('ðŸ“± Screen orientation API not available');\n    }\n  };\n  const unlockOrientation = () => {\n    // Use window.screen to avoid ESLint no-restricted-globals error\n    if (typeof window !== 'undefined' && window.screen && window.screen.orientation && window.screen.orientation.unlock) {\n      try {\n        window.screen.orientation.unlock();\n        console.log('ðŸ“± Orientation unlocked');\n      } catch (error) {\n        console.warn('ðŸ“± Orientation unlock failed:', error);\n      }\n    } else {\n      console.warn('ðŸ“± Screen orientation API not available');\n    }\n  };\n\n  // Get user avatar URL or generate one\n  const getUserAvatar = () => {\n    var _user$shortName, _user$shortName$charA;\n    if (user !== null && user !== void 0 && user.photoUrl) {\n      return user.photoUrl;\n    }\n\n    // Generate avatar based on user initials\n    const initials = (user === null || user === void 0 ? void 0 : (_user$shortName = user.shortName) === null || _user$shortName === void 0 ? void 0 : (_user$shortName$charA = _user$shortName.charAt(0)) === null || _user$shortName$charA === void 0 ? void 0 : _user$shortName$charA.toUpperCase()) || 'U';\n    return `https://ui-avatars.com/api/?name=${initials}&background=6366f1&color=ffffff&size=128`;\n  };\n  return {\n    webApp,\n    user,\n    isExpanded,\n    initData,\n    showAlert,\n    showConfirm,\n    hapticFeedback,\n    openLink,\n    showMainButton,\n    hideMainButton,\n    getUserAvatar,\n    isReady: !!webApp,\n    isTelegramEnv: !!((_window$Telegram2 = window.Telegram) !== null && _window$Telegram2 !== void 0 && _window$Telegram2.WebApp),\n    // Helper to check if we have real user data\n    hasRealUserData: !!(webApp && (_webApp$initDataUnsaf = webApp.initDataUnsafe) !== null && _webApp$initDataUnsaf !== void 0 && _webApp$initDataUnsaf.user),\n    // Full-screen mode functionality\n    isFullScreen,\n    requestFullScreen,\n    exitFullScreen,\n    toggleFullScreen,\n    // Orientation and viewport\n    orientation,\n    viewportDimensions,\n    lockOrientation,\n    unlockOrientation,\n    // Helper to check if full-screen is supported\n    supportsFullScreen: !!(webApp !== null && webApp !== void 0 && webApp.requestFullscreen),\n    // Helper to get optimal layout based on orientation and full-screen\n    getLayoutMode: () => {\n      if (isFullScreen) {\n        return orientation === 'landscape' ? 'fullscreen-landscape' : 'fullscreen-portrait';\n      }\n      return orientation === 'landscape' ? 'normal-landscape' : 'normal-portrait';\n    }\n  };\n};\n_s(useTelegramWebApp, \"KxHYqyzKkR3/D9T+woPCKD2KSFQ=\");\nexport default useTelegramWebApp;","map":{"version":3,"names":["useEffect","useState","useTelegramWebApp","_s","_window$Telegram2","_webApp$initDataUnsaf","webApp","setWebApp","user","setUser","isExpanded","setIsExpanded","initData","setInitData","isFullScreen","setIsFullScreen","orientation","setOrientation","viewportDimensions","setViewportDimensions","width","window","innerWidth","height","innerHeight","_window$Telegram","app","Telegram","WebApp","_app$initDataUnsafe","_app$initDataUnsafe2","_app$initDataUnsafe3","document","body","setAttribute","console","log","ready","expand","enableClosingConfirmation","disableVerticalSwipes","setHeaderColor","addEventListener","e","target","documentElement","preventDefault","passive","requestFullscreen","error","viewportHeight","viewportStableHeight","stableHeight","isFullscreen","style","setProperty","viewportWidth","currentOrientation","setBackgroundColor","userData","initDataUnsafe","rawInitData","hash","location","slice","hashParams","URLSearchParams","startParam","get","start_param","id","firstName","first_name","lastName","last_name","username","languageCode","language_code","isPremium","is_premium","photoUrl","photo_url","displayName","shortName","referralCode","search","handleViewportChange","newOrientation","handleFullScreenChange","isCurrentlyFullScreen","classList","add","remove","onEvent","BackButton","onClick","close","handleOrientationChange","setTimeout","removeEventListener","removeAttribute","handleBrowserOrientationChange","showAlert","message","alert","showConfirm","callback","confirm","hapticFeedback","type","HapticFeedback","impactOccurred","notificationOccurred","openLink","url","open","showMainButton","text","MainButton","setText","show","hideMainButton","hide","requestFullScreen","warn","exitFullScreen","exitFullscreen","toggleFullScreen","lockOrientation","orientationLock","screen","lock","unlockOrientation","unlock","getUserAvatar","_user$shortName","_user$shortName$charA","initials","charAt","toUpperCase","isReady","isTelegramEnv","hasRealUserData","supportsFullScreen","getLayoutMode"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useTelegramWebApp.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useTelegramWebApp = () => {\n  const [webApp, setWebApp] = useState(null);\n  const [user, setUser] = useState(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [initData, setInitData] = useState(null);\n  // Full-screen mode state\n  const [isFullScreen, setIsFullScreen] = useState(false);\n  const [orientation, setOrientation] = useState('portrait');\n  const [viewportDimensions, setViewportDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n\n  useEffect(() => {\n    const app = window.Telegram?.WebApp;\n    \n    if (app) {\n      // Mark body as Telegram environment for CSS targeting\n      document.body.setAttribute('data-telegram', 'true');\n      console.log('ðŸ“± Telegram WebApp detected - marked body with data-telegram attribute');\n      \n      app.ready();\n      \n      // Enable full screen mode aggressively\n      app.expand();\n      app.enableClosingConfirmation();\n      \n      // Prevent scroll-to-close gestures\n      app.disableVerticalSwipes();\n      if (app.setHeaderColor) {\n        app.setHeaderColor('#0a0a0f');\n      }\n      \n      // Prevent pull-to-refresh and document scroll\n      document.addEventListener('touchmove', (e) => {\n        // Only prevent scrolling on body/html level, allow within containers\n        if (e.target === document.body || e.target === document.documentElement) {\n          e.preventDefault();\n        }\n      }, { passive: false });\n      \n      // Request new full-screen mode if available\n      if (app.requestFullscreen) {\n        try {\n          app.requestFullscreen();\n          setIsFullScreen(true);\n          console.log('ðŸ“± Telegram full-screen mode requested');\n        } catch (error) {\n          console.log('ðŸ“± Full-screen mode not available:', error);\n        }\n      }\n      \n      // Request full screen viewport\n      if (app.viewportHeight && app.viewportStableHeight) {\n        console.log('ðŸ“± Telegram viewport:', {\n          height: app.viewportHeight,\n          stableHeight: app.viewportStableHeight,\n          isExpanded: app.isExpanded,\n          isFullScreen: app.isFullscreen || false\n        });\n      }\n      \n      // Set CSS custom properties for dynamic viewport\n      document.documentElement.style.setProperty('--tg-viewport-height', `${app.viewportHeight || window.innerHeight}px`);\n      document.documentElement.style.setProperty('--tg-viewport-stable-height', `${app.viewportStableHeight || window.innerHeight}px`);\n      document.documentElement.style.setProperty('--tg-viewport-width', `${app.viewportWidth || window.innerWidth}px`);\n      \n      // Detect orientation\n      const currentOrientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';\n      setOrientation(currentOrientation);\n      setViewportDimensions({\n        width: app.viewportWidth || window.innerWidth,\n        height: app.viewportHeight || window.innerHeight\n      });\n      \n      // Set theme colors to match our design\n      app.setHeaderColor('#0a0a0f');\n      app.setBackgroundColor('#0a0a0f');\n      \n      // Hide Telegram header if possible\n      if (app.setHeaderColor) {\n        app.setHeaderColor('#0a0a0f');\n      }\n      \n      setWebApp(app);\n      \n      // Get real user data\n      const userData = app.initDataUnsafe?.user;\n      const rawInitData = app.initData;\n      \n      // Extract start parameter from URL hash\n      const hash = window.location.hash.slice(1);\n      const hashParams = new URLSearchParams(hash);\n      const startParam = hashParams.get('tgWebAppStartParam') || app.initDataUnsafe?.start_param || null;\n      \n      console.log('ðŸ“± URL hash:', hash);\n      console.log('ðŸ“± tgWebAppStartParam from hash:', hashParams.get('tgWebAppStartParam'));\n      console.log('ðŸ“± start_param from initDataUnsafe:', app.initDataUnsafe?.start_param);\n      console.log('ðŸ“± Final startParam:', startParam);\n      \n      if (userData) {\n        setUser({\n          id: userData.id,\n          firstName: userData.first_name,\n          lastName: userData.last_name,\n          username: userData.username,\n          languageCode: userData.language_code,\n          isPremium: userData.is_premium || false,\n          photoUrl: userData.photo_url,\n          // Formatted display name\n          displayName: userData.first_name + (userData.last_name ? ` ${userData.last_name}` : ''),\n          // Short name for UI\n          shortName: userData.first_name || userData.username || 'User',\n          // Referral start param if present\n          referralCode: startParam || null\n        });\n        \n        setInitData(rawInitData);\n        console.log('ðŸ“± Real Telegram user data loaded:', userData);\n      } else {\n        // Fallback to mock data for testing\n        console.log('ðŸ“± No Telegram user data - using mock');\n        setUser({\n          id: 123456789,\n          firstName: \"Test\",\n          lastName: \"User\", \n          username: \"testuser\",\n          languageCode: \"en\",\n          isPremium: false,\n          displayName: \"Test User\",\n          shortName: \"Test\",\n          photoUrl: null,\n          referralCode: new URLSearchParams(window.location.search).get('startapp') || null\n        });\n      }\n      \n      setIsExpanded(true);\n      \n      // Handle viewport changes (keyboard, orientation, etc.)\n      const handleViewportChange = () => {\n        if (app.viewportHeight) {\n          document.documentElement.style.setProperty('--tg-viewport-height', `${app.viewportHeight}px`);\n          document.documentElement.style.setProperty('--tg-viewport-stable-height', `${app.viewportStableHeight}px`);\n          document.documentElement.style.setProperty('--tg-viewport-width', `${app.viewportWidth}px`);\n          \n          const newOrientation = app.viewportWidth > app.viewportHeight ? 'landscape' : 'portrait';\n          setOrientation(newOrientation);\n          setViewportDimensions({\n            width: app.viewportWidth,\n            height: app.viewportHeight\n          });\n          \n          console.log('ðŸ“± Viewport changed:', {\n            height: app.viewportHeight,\n            stableHeight: app.viewportStableHeight,\n            width: app.viewportWidth,\n            orientation: newOrientation,\n            isFullScreen: app.isFullscreen || false\n          });\n        }\n      };\n      \n      // Handle full-screen mode changes\n      const handleFullScreenChange = () => {\n        const isCurrentlyFullScreen = app.isFullscreen || false;\n        setIsFullScreen(isCurrentlyFullScreen);\n        console.log('ðŸ“± Full-screen mode changed:', isCurrentlyFullScreen);\n        \n        // Add CSS class for full-screen styling\n        if (isCurrentlyFullScreen) {\n          document.documentElement.classList.add('telegram-fullscreen');\n        } else {\n          document.documentElement.classList.remove('telegram-fullscreen');\n        }\n      };\n      \n      // Listen for viewport changes\n      if (app.onEvent) {\n        app.onEvent('viewportChanged', handleViewportChange);\n        app.onEvent('fullscreenChanged', handleFullScreenChange);\n        app.onEvent('fullscreenFailed', () => {\n          console.log('ðŸ“± Full-screen request failed');\n          setIsFullScreen(false);\n        });\n      }\n      \n      // Handle back button\n      app.BackButton.onClick(() => {\n        app.close();\n      });\n      \n      // Handle orientation changes\n      const handleOrientationChange = () => {\n        setTimeout(() => {\n          const newOrientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';\n          setOrientation(newOrientation);\n          setViewportDimensions({\n            width: window.innerWidth,\n            height: window.innerHeight\n          });\n          console.log('ðŸ“± Orientation changed to:', newOrientation);\n        }, 100); // Small delay to ensure dimensions are updated\n      };\n      \n      window.addEventListener('orientationchange', handleOrientationChange);\n      window.addEventListener('resize', handleOrientationChange);\n      \n      // Cleanup\n      return () => {\n        window.removeEventListener('orientationchange', handleOrientationChange);\n        window.removeEventListener('resize', handleOrientationChange);\n        // Clean up Telegram body attribute\n        document.body.removeAttribute('data-telegram');\n        console.log('ðŸ“± Cleaned up Telegram WebApp body attribute');\n      };\n      \n    } else {\n      console.log('Telegram WebApp not available - running in browser mode');\n      // Set mock user for browser testing\n      setUser({\n        id: 123456789,\n        firstName: \"Test\",\n        lastName: \"User\",\n        username: \"testuser\", \n        languageCode: \"en\",\n        isPremium: false,\n        displayName: \"Test User\",\n        shortName: \"Test\",\n        photoUrl: null\n      });\n      \n      // Handle orientation in browser mode\n      const handleBrowserOrientationChange = () => {\n        const newOrientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';\n        setOrientation(newOrientation);\n        setViewportDimensions({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      };\n      \n      window.addEventListener('resize', handleBrowserOrientationChange);\n      \n      return () => {\n        window.removeEventListener('resize', handleBrowserOrientationChange);\n      };\n    }\n  }, []);\n\n  const showAlert = (message) => {\n    if (webApp) {\n      webApp.showAlert(message);\n    } else {\n      window.alert(message);\n    }\n  };\n\n  const showConfirm = (message, callback) => {\n    if (webApp) {\n      webApp.showConfirm(message, callback);\n    } else {\n      callback(window.confirm(message));\n    }\n  };\n\n  const hapticFeedback = (type = 'impact') => {\n    if (webApp?.HapticFeedback) {\n      switch (type) {\n        case 'light':\n          webApp.HapticFeedback.impactOccurred('light');\n          break;\n        case 'medium':\n          webApp.HapticFeedback.impactOccurred('medium');\n          break;\n        case 'heavy':\n          webApp.HapticFeedback.impactOccurred('heavy');\n          break;\n        case 'error':\n          webApp.HapticFeedback.notificationOccurred('error');\n          break;\n        case 'success':\n          webApp.HapticFeedback.notificationOccurred('success');\n          break;\n        case 'warning':\n          webApp.HapticFeedback.notificationOccurred('warning');\n          break;\n        default:\n          webApp.HapticFeedback.impactOccurred('medium');\n      }\n    }\n  };\n\n  // Open external link (for wallet connections)\n  const openLink = (url) => {\n    if (webApp) {\n      webApp.openLink(url);\n    } else {\n      window.open(url, '_blank');\n    }\n  };\n\n  // Show main button (for betting actions)\n  const showMainButton = (text, onClick) => {\n    if (webApp?.MainButton) {\n      webApp.MainButton.setText(text);\n      webApp.MainButton.show();\n      webApp.MainButton.onClick(onClick);\n    }\n  };\n\n  const hideMainButton = () => {\n    if (webApp?.MainButton) {\n      webApp.MainButton.hide();\n    }\n  };\n\n  // Full-screen mode controls\n  const requestFullScreen = async () => {\n    if (webApp?.requestFullscreen) {\n      try {\n        await webApp.requestFullscreen();\n        setIsFullScreen(true);\n        console.log('ðŸ“± Full-screen mode activated');\n        return true;\n      } catch (error) {\n        console.error('ðŸ“± Failed to request full-screen:', error);\n        return false;\n      }\n    } else {\n      console.warn('ðŸ“± Full-screen mode not supported');\n      return false;\n    }\n  };\n\n  const exitFullScreen = async () => {\n    if (webApp?.exitFullscreen) {\n      try {\n        await webApp.exitFullscreen();\n        setIsFullScreen(false);\n        console.log('ðŸ“± Exited full-screen mode');\n        return true;\n      } catch (error) {\n        console.error('ðŸ“± Failed to exit full-screen:', error);\n        return false;\n      }\n    } else {\n      console.warn('ðŸ“± Full-screen exit not supported');\n      return false;\n    }\n  };\n\n  const toggleFullScreen = async () => {\n    if (isFullScreen) {\n      return await exitFullScreen();\n    } else {\n      return await requestFullScreen();\n    }\n  };\n\n  // Lock orientation (if supported)\n  const lockOrientation = (orientationLock) => {\n    // Use window.screen to avoid ESLint no-restricted-globals error\n    if (typeof window !== 'undefined' && window.screen && window.screen.orientation && window.screen.orientation.lock) {\n      try {\n        window.screen.orientation.lock(orientationLock);\n        console.log(`ðŸ“± Orientation locked to: ${orientationLock}`);\n      } catch (error) {\n        console.warn('ðŸ“± Orientation lock not supported or failed:', error);\n      }\n    } else {\n      console.warn('ðŸ“± Screen orientation API not available');\n    }\n  };\n\n  const unlockOrientation = () => {\n    // Use window.screen to avoid ESLint no-restricted-globals error\n    if (typeof window !== 'undefined' && window.screen && window.screen.orientation && window.screen.orientation.unlock) {\n      try {\n        window.screen.orientation.unlock();\n        console.log('ðŸ“± Orientation unlocked');\n      } catch (error) {\n        console.warn('ðŸ“± Orientation unlock failed:', error);\n      }\n    } else {\n      console.warn('ðŸ“± Screen orientation API not available');\n    }\n  };\n\n  // Get user avatar URL or generate one\n  const getUserAvatar = () => {\n    if (user?.photoUrl) {\n      return user.photoUrl;\n    }\n    \n    // Generate avatar based on user initials\n    const initials = user?.shortName?.charAt(0)?.toUpperCase() || 'U';\n    return `https://ui-avatars.com/api/?name=${initials}&background=6366f1&color=ffffff&size=128`;\n  };\n\n  return {\n    webApp,\n    user,\n    isExpanded,\n    initData,\n    showAlert,\n    showConfirm,\n    hapticFeedback,\n    openLink,\n    showMainButton,\n    hideMainButton,\n    getUserAvatar,\n    isReady: !!webApp,\n    isTelegramEnv: !!window.Telegram?.WebApp,\n    // Helper to check if we have real user data\n    hasRealUserData: !!(webApp && webApp.initDataUnsafe?.user),\n    // Full-screen mode functionality\n    isFullScreen,\n    requestFullScreen,\n    exitFullScreen,\n    toggleFullScreen,\n    // Orientation and viewport\n    orientation,\n    viewportDimensions,\n    lockOrientation,\n    unlockOrientation,\n    // Helper to check if full-screen is supported\n    supportsFullScreen: !!(webApp?.requestFullscreen),\n    // Helper to get optimal layout based on orientation and full-screen\n    getLayoutMode: () => {\n      if (isFullScreen) {\n        return orientation === 'landscape' ? 'fullscreen-landscape' : 'fullscreen-portrait';\n      }\n      return orientation === 'landscape' ? 'normal-landscape' : 'normal-portrait';\n    }\n  };\n};\n\nexport default useTelegramWebApp; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}