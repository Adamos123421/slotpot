{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exoticMerkleProof = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nfunction exoticMerkleProof(bits, refs) {\n  const reader = new BitReader_1.BitReader(bits);\n  // type + hash + depth\n  const size = 8 + 256 + 16;\n  if (bits.length !== size) {\n    throw new Error(\"Merkle Proof cell must have exactly (8 + 256 + 16) bits, got \\\"\".concat(bits.length, \"\\\"\"));\n  }\n  if (refs.length !== 1) {\n    throw new Error(\"Merkle Proof cell must have exactly 1 ref, got \\\"\".concat(refs.length, \"\\\"\"));\n  }\n  // Check type\n  let type = reader.loadUint(8);\n  if (type !== 3) {\n    throw new Error(\"Merkle Proof cell must have type 3, got \\\"\".concat(type, \"\\\"\"));\n  }\n  // Check data\n  const proofHash = reader.loadBuffer(32);\n  const proofDepth = reader.loadUint(16);\n  const refHash = refs[0].hash(0);\n  const refDepth = refs[0].depth(0);\n  if (proofDepth !== refDepth) {\n    throw new Error(\"Merkle Proof cell ref depth must be exactly \\\"\".concat(proofDepth, \"\\\", got \\\"\").concat(refDepth, \"\\\"\"));\n  }\n  if (!proofHash.equals(refHash)) {\n    throw new Error(\"Merkle Proof cell ref hash must be exactly \\\"\".concat(proofHash.toString('hex'), \"\\\", got \\\"\").concat(refHash.toString('hex'), \"\\\"\"));\n  }\n  return {\n    proofDepth,\n    proofHash\n  };\n}\nexports.exoticMerkleProof = exoticMerkleProof;","map":{"version":3,"names":["Object","defineProperty","exports","value","exoticMerkleProof","BitReader_1","require","bits","refs","reader","BitReader","size","length","Error","concat","type","loadUint","proofHash","loadBuffer","proofDepth","refHash","hash","refDepth","depth","equals","toString"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@ton/core/dist/boc/cell/exoticMerkleProof.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exoticMerkleProof = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nfunction exoticMerkleProof(bits, refs) {\n    const reader = new BitReader_1.BitReader(bits);\n    // type + hash + depth\n    const size = 8 + 256 + 16;\n    if (bits.length !== size) {\n        throw new Error(`Merkle Proof cell must have exactly (8 + 256 + 16) bits, got \"${bits.length}\"`);\n    }\n    if (refs.length !== 1) {\n        throw new Error(`Merkle Proof cell must have exactly 1 ref, got \"${refs.length}\"`);\n    }\n    // Check type\n    let type = reader.loadUint(8);\n    if (type !== 3) {\n        throw new Error(`Merkle Proof cell must have type 3, got \"${type}\"`);\n    }\n    // Check data\n    const proofHash = reader.loadBuffer(32);\n    const proofDepth = reader.loadUint(16);\n    const refHash = refs[0].hash(0);\n    const refDepth = refs[0].depth(0);\n    if (proofDepth !== refDepth) {\n        throw new Error(`Merkle Proof cell ref depth must be exactly \"${proofDepth}\", got \"${refDepth}\"`);\n    }\n    if (!proofHash.equals(refHash)) {\n        throw new Error(`Merkle Proof cell ref hash must be exactly \"${proofHash.toString('hex')}\", got \"${refHash.toString('hex')}\"`);\n    }\n    return {\n        proofDepth,\n        proofHash\n    };\n}\nexports.exoticMerkleProof = exoticMerkleProof;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,SAASF,iBAAiBA,CAACG,IAAI,EAAEC,IAAI,EAAE;EACnC,MAAMC,MAAM,GAAG,IAAIJ,WAAW,CAACK,SAAS,CAACH,IAAI,CAAC;EAC9C;EACA,MAAMI,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE;EACzB,IAAIJ,IAAI,CAACK,MAAM,KAAKD,IAAI,EAAE;IACtB,MAAM,IAAIE,KAAK,mEAAAC,MAAA,CAAkEP,IAAI,CAACK,MAAM,OAAG,CAAC;EACpG;EACA,IAAIJ,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;IACnB,MAAM,IAAIC,KAAK,qDAAAC,MAAA,CAAoDN,IAAI,CAACI,MAAM,OAAG,CAAC;EACtF;EACA;EACA,IAAIG,IAAI,GAAGN,MAAM,CAACO,QAAQ,CAAC,CAAC,CAAC;EAC7B,IAAID,IAAI,KAAK,CAAC,EAAE;IACZ,MAAM,IAAIF,KAAK,8CAAAC,MAAA,CAA6CC,IAAI,OAAG,CAAC;EACxE;EACA;EACA,MAAME,SAAS,GAAGR,MAAM,CAACS,UAAU,CAAC,EAAE,CAAC;EACvC,MAAMC,UAAU,GAAGV,MAAM,CAACO,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMI,OAAO,GAAGZ,IAAI,CAAC,CAAC,CAAC,CAACa,IAAI,CAAC,CAAC,CAAC;EAC/B,MAAMC,QAAQ,GAAGd,IAAI,CAAC,CAAC,CAAC,CAACe,KAAK,CAAC,CAAC,CAAC;EACjC,IAAIJ,UAAU,KAAKG,QAAQ,EAAE;IACzB,MAAM,IAAIT,KAAK,kDAAAC,MAAA,CAAiDK,UAAU,gBAAAL,MAAA,CAAWQ,QAAQ,OAAG,CAAC;EACrG;EACA,IAAI,CAACL,SAAS,CAACO,MAAM,CAACJ,OAAO,CAAC,EAAE;IAC5B,MAAM,IAAIP,KAAK,iDAAAC,MAAA,CAAgDG,SAAS,CAACQ,QAAQ,CAAC,KAAK,CAAC,gBAAAX,MAAA,CAAWM,OAAO,CAACK,QAAQ,CAAC,KAAK,CAAC,OAAG,CAAC;EAClI;EACA,OAAO;IACHN,UAAU;IACVF;EACJ,CAAC;AACL;AACAf,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}