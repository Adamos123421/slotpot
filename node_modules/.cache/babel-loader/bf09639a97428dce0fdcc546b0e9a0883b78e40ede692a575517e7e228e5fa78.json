{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\nfunction AppContent() {\n  _s();\n  var _contractState$timer2, _contractState$timer4, _contractState$timer5, _contractState$timer6, _contractState$timer7, _contractState$timer8, _contractState$timer9;\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n\n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n\n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n  }, [gameBettors]);\n  useEffect(() => {\n    contractWinnerRef.current = contractWinner;\n  }, [contractWinner]);\n  useEffect(() => {\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n  }, [showWinnerAnnouncement]);\n  useEffect(() => {\n    waitingForWinnerRef.current = waitingForWinner;\n  }, [waitingForWinner]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n\n    // Use coordinator to check if should block\n    if (winnerCoordinator.shouldBlock(winnerTimestamp)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n\n    // Set coordination flag via coordinator\n    winnerCoordinator.setActive(true, winnerTimestamp);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n\n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n\n    // Auto-clear announcement but keep winner highlighted until new round\n    setTimeout(() => {\n      setShowWinnerAnnouncement(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.setActive(false);\n      // Keep contractWinner for highlighting until new round starts\n    }, 6000);\n    return true;\n  }, []);\n\n  // Telegram integration\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n\n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    var _contractState$curren;\n    if (!contractState) return contractState;\n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' ? ((_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || 0 : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n\n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address || bettor.walletAddress === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || !jackpotValue || userBetTotal === 0) return 0;\n    return userBetTotal / jackpotValue * 100;\n  }, [userBetTotal, jackpotValue, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    var _contractState$timer;\n    // Always sync with backend timer when it changes\n    if (((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n    console.log('⏰ Starting local countdown timer...');\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n\n          // When we reach 0, trigger \"analyzing bets\" state locally\n          if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n          }\n          return newTime;\n        }\n\n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) return;\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    const cardWidth = 110 + 10; // card width + gap\n    const totalCards = Math.max(6, gameBettors.length || 0);\n    const resetPoint = cardWidth * totalCards; // Reset when we've moved one full set\n\n    // Reference to allItems for winner finding\n    const allItems = [...gameBettors, ...Array.from({\n      length: Math.max(0, 6 - gameBettors.length)\n    }, () => null)];\n    console.log('🎠 Starting carousel animation:', {\n      totalCards,\n      resetPoint\n    });\n    const animate = () => {\n      var _contractState$timer3;\n      // Special handling for analyzing state - slide to winner\n      if (waitingForWinner && (((_contractState$timer3 = contractState.timer) === null || _contractState$timer3 === void 0 ? void 0 : _contractState$timer3.timeRemaining) || 0) === 0) {\n        // Fast spinning during analyzing\n        currentPosition += 8; // Fast speed during analyzing\n\n        if (currentPosition >= resetPoint) {\n          currentPosition = 0;\n        }\n        carousel.style.transform = `translateX(-${currentPosition}px)`;\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n\n      // Stop animation when winner is revealed\n      if (contractWinner) {\n        // Find winner position and slide to it\n        if (!winnerPositionFound) {\n          const winnerIndex = allItems.findIndex(item => item && contractWinner && (item.address === contractWinner.fullAddress || item.address === contractWinner.winner || item.username === contractWinner.username));\n          if (winnerIndex !== -1) {\n            const winnerPosition = winnerIndex * cardWidth;\n            carousel.style.transform = `translateX(-${winnerPosition}px)`;\n            carousel.style.transition = 'transform 1s ease-out';\n            console.log('🎯 Sliding to winner at position:', winnerPosition);\n          }\n          winnerPositionFound = true;\n        }\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n\n      // Normal carousel animation\n      currentPosition += 1; // Slower, smoother movement speed\n\n      // Reset position seamlessly when reaching the end of first set\n      if (currentPosition >= resetPoint) {\n        currentPosition = 0;\n      }\n      carousel.style.transform = `translateX(-${currentPosition}px)`;\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n    };\n  }, [gameBettors.length, contractWinner, waitingForWinner, slotSpinning]);\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', timerData => {\n      console.log('⏰ App: Socket timer update:', timerData);\n\n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n\n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n\n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n\n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', roundData => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n\n      // Clear winner highlighting for new round\n      setContractWinner(null);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', gameState => {\n      console.log('🎮 App: Game state update:', gameState);\n      if (gameState.timeRemaining !== undefined) {\n        setTimeRemaining(gameState.timeRemaining);\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n\n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n\n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n\n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        setGameBettors(gameState.bettors);\n      }\n\n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', gameData => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', data => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', data => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n\n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      setWaitingForWinner(isWaiting);\n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', winnerData => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', winnerData => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', resetData => {\n      console.log('🔄 App: Round reset detected:', resetData);\n\n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n\n      // Clear any winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n\n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n    });\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = e => {\n    const value = parseFloat(e.target.value) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n  const handleTabChange = tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    console.log(`🔥 BET BUTTON CLICKED - Amount: ${betAmount} TON`);\n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first');\n      return;\n    }\n    if (!contractState.isActive) {\n      showAlert('Jackpot is not currently active\\n\\n🤖 Automated system will start a new round soon...');\n      return;\n    }\n    try {\n      console.log(`🚀 Starting bet placement process...`);\n      hapticFeedback('medium');\n\n      // This will call the contract with opcode 0x03\n      const result = await placeBet(betAmount);\n      if (result.success) {\n        hapticFeedback('success');\n        showAlert(`✅ Bet placed successfully!\\n${betAmount} TON in round #${currentRound}\\nTransaction: ${result.txHash.slice(0, 8)}...`);\n        console.log('🎉 Bet placement completed:', result);\n      }\n    } catch (error) {\n      hapticFeedback('error');\n      showAlert(`❌ Bet failed: ${error.message}`);\n      console.error('💥 Bet error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logo-icon\",\n              children: \"\\uD83C\\uDFB0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"app-name\",\n              children: \"SlotPot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-icons\",\n            children: /*#__PURE__*/_jsxDEV(WalletConnection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-label\",\n            children: \"Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-amount\",\n            children: [isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000', /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"balance-symbol\",\n              children: \"TON\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 561,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-title\",\n            children: \"\\uD83D\\uDCB0 JACKPOT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-value-display\",\n            children: jackpotValue.toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-subtitle\",\n            children: \"Winner takes all...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-input-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"bet-amount-input\",\n              value: betAmount,\n              onChange: handleBetChange,\n              step: \"0.01\",\n              min: \"0.01\",\n              placeholder: \"0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bet-increment-btn\",\n              onClick: () => setBetAmount(prev => prev + 0.1),\n              children: \"+0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-button\",\n            onClick: handlePlaceBet,\n            disabled: isPlacingBet || !isConnected,\n            children: isPlacingBet ? 'Betting...' : 'Bet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: userBetTotal.toFixed(3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Wager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card chance-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: [userWinChance.toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Chance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Time Remaining\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: [Math.floor((((_contractState$timer4 = contractState.timer) === null || _contractState$timer4 === void 0 ? void 0 : _contractState$timer4.timeRemaining) || 0) / 60), \":\", ((((_contractState$timer5 = contractState.timer) === null || _contractState$timer5 === void 0 ? void 0 : _contractState$timer5.timeRemaining) || 0) % 60).toString().padStart(2, '0')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-carousel-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `carousel-header ${(((_contractState$timer6 = contractState.timer) === null || _contractState$timer6 === void 0 ? void 0 : _contractState$timer6.timeRemaining) || 0) === 0 && waitingForWinner ? 'analyzing' : contractWinner ? 'winner' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: (((_contractState$timer7 = contractState.timer) === null || _contractState$timer7 === void 0 ? void 0 : _contractState$timer7.timeRemaining) || 0) === 0 && waitingForWinner ? \"🔍 Analyzing Bets...\" : contractWinner ? `🏆 Winner: ${contractWinner.username || 'Player'}` : `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"players-carousel\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: carouselRef,\n              className: `carousel-track ${(((_contractState$timer8 = contractState.timer) === null || _contractState$timer8 === void 0 ? void 0 : _contractState$timer8.timeRemaining) || 0) === 0 && waitingForWinner ? 'analyzing' : contractWinner ? 'winner-revealed' : slotSpinning ? 'sliding' : ''}`,\n              style: {\n                transition: (((_contractState$timer9 = contractState.timer) === null || _contractState$timer9 === void 0 ? void 0 : _contractState$timer9.timeRemaining) || 0) === 0 && waitingForWinner || contractWinner ? 'none' : ''\n              },\n              children: (() => {\n                // Always use current bettors as primary source\n                let bettorsToShow = gameBettors;\n\n                // For winner matching, check against previous round bettors if needed\n                const bettorsForWinnerMatching = gameBettors.length > 0 ? gameBettors : previousRoundBettors;\n                console.log('🎠 Carousel: Using bettors:', bettorsToShow.length, 'from current round');\n                console.log('🎠 Winner matching pool:', bettorsForWinnerMatching.length, 'bettors');\n                console.log('🎠 Current gameBettors:', gameBettors);\n                console.log('🎠 Previous round bettors for matching:', previousRoundBettors);\n\n                // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                const allItems = [...bettorsToShow, ...Array.from({\n                  length: Math.max(0, 6 - bettorsToShow.length)\n                }, () => null)];\n\n                // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                const infiniteItems = [...allItems, ...allItems, ...allItems];\n                return infiniteItems.map((bettor, index) => {\n                  const isWinner = contractWinner && bettor && (() => {\n                    // Check if this bettor exists in the winner matching pool\n                    const matchingBettor = bettorsForWinnerMatching.find(matchBettor => {\n                      var _contractWinner$betto, _contractWinner$betto2, _contractWinner$betto3, _contractWinner$betto4;\n                      // Normalize addresses for comparison (remove any case sensitivity)\n                      const normalizeAddress = addr => addr ? addr.toLowerCase().trim() : '';\n\n                      // Get all possible identifiers from winner\n                      const winnerIds = [normalizeAddress(contractWinner.address), normalizeAddress(contractWinner.walletAddress), normalizeAddress(contractWinner.winner),\n                      // truncated address\n                      normalizeAddress(contractWinner.fullAddress),\n                      // full address\n                      normalizeAddress((_contractWinner$betto = contractWinner.bettor) === null || _contractWinner$betto === void 0 ? void 0 : _contractWinner$betto.address), normalizeAddress((_contractWinner$betto2 = contractWinner.bettor) === null || _contractWinner$betto2 === void 0 ? void 0 : _contractWinner$betto2.walletAddress), contractWinner.username, (_contractWinner$betto3 = contractWinner.bettor) === null || _contractWinner$betto3 === void 0 ? void 0 : _contractWinner$betto3.username, contractWinner.displayName, (_contractWinner$betto4 = contractWinner.bettor) === null || _contractWinner$betto4 === void 0 ? void 0 : _contractWinner$betto4.displayName].filter(Boolean);\n\n                      // Get all possible identifiers from match bettor\n                      const bettorIds = [normalizeAddress(matchBettor.address), normalizeAddress(matchBettor.walletAddress), matchBettor.username, matchBettor.displayName].filter(Boolean);\n\n                      // Check exact matches first\n                      let isMatch = winnerIds.some(winnerId => bettorIds.includes(winnerId));\n\n                      // Also check for partial address matches (truncated addresses)\n                      if (!isMatch) {\n                        isMatch = winnerIds.some(winnerId => {\n                          if (typeof winnerId === 'string' && winnerId.length > 10) {\n                            return bettorIds.some(bettorId => {\n                              if (typeof bettorId === 'string' && bettorId.length > 10) {\n                                // Check if one is a truncated version of the other\n                                return winnerId.startsWith(bettorId.substring(0, 10)) || bettorId.startsWith(winnerId.substring(0, 10));\n                              }\n                              return false;\n                            });\n                          }\n                          return false;\n                        });\n                      }\n                      return isMatch;\n                    });\n\n                    // If a matching bettor was found, check if current bettor is the same\n                    const isCurrentBettorWinner = matchingBettor && (bettor.address === matchingBettor.address || bettor.walletAddress === matchingBettor.walletAddress || bettor.username === matchingBettor.username);\n                    if (isCurrentBettorWinner) {\n                      console.log('🔍 Winner found in current bettors:', bettor);\n                    }\n                    return isCurrentBettorWinner;\n                  })();\n\n                  // Log when we find a winner card\n                  if (isWinner) {\n                    console.log('🏆 WINNER CARD FOUND!', {\n                      index,\n                      bettor,\n                      isWinner\n                    });\n                  }\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `carousel-card ${isWinner ? 'winner' : bettor ? 'active' : 'waiting'}`,\n                    \"data-debug\": `winner: ${isWinner}, address: ${bettor === null || bettor === void 0 ? void 0 : bettor.address}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-avatar\",\n                      children: bettor ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"generated-avatar\",\n                        children: bettor.username ? bettor.username[0].toUpperCase() : '?'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 749,\n                        columnNumber: 31\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"waiting-icon\",\n                        children: \"\\u2753\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 753,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 747,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-info\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-name\",\n                        children: bettor ? bettor.username || bettor.displayName || 'Player' : 'Waiting'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 757,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-bet\",\n                        children: bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 760,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 756,\n                      columnNumber: 27\n                    }, this), isWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"winner-crown\",\n                      children: \"\\uD83D\\uDC51\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 765,\n                      columnNumber: 29\n                    }, this)]\n                  }, `${index}-${(bettor === null || bettor === void 0 ? void 0 : bettor.address) || 'waiting'}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 743,\n                    columnNumber: 25\n                  }, this);\n                });\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83C\\uDFE0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 781,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 779,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\u26A1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 784,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 785,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 783,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 788,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD0D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 792,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"games-button\",\n          children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n            size: 14\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 15\n          }, this), \"Games\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 9\n    }, this), isLoadingContract && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"\\uD83D\\uDD04\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading contract data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinnerBroadcast, {\n      socketService: socketService\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 812,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 544,\n    columnNumber: 7\n  }, this);\n}\n\n// Main App component with TON Connect Provider\n_s(AppContent, \"arvOTlbdnN8ql69NB3j1+ZxgnXU=\", false, function () {\n  return [useTelegramWebApp, useJackpotContract];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(TonConnectUIProvider, {\n    manifestUrl: manifestUrl,\n    uiPreferences: uiOptions.uiPreferences,\n    language: uiOptions.language,\n    restoreConnection: uiOptions.restoreConnection,\n    actionsConfiguration: uiOptions.actionsConfiguration,\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 820,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","TonConnectUIProvider","Chat","GameArea","MobileChat","WalletConnection","WinnerBroadcast","useTelegramWebApp","useJackpotContract","socketService","winnerCoordinator","uiOptions","MessageCircle","Trophy","Users","DollarSign","jsxDEV","_jsxDEV","manifestUrl","AppContent","_s","_contractState$timer2","_contractState$timer4","_contractState$timer5","_contractState$timer6","_contractState$timer7","_contractState$timer8","_contractState$timer9","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","carouselRef","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","waitingForWinnerRef","current","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","shouldBlock","console","log","setActive","setTimeout","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","address","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","_contractState$curren","timer","isActive","timeElapsed","timerExpired","undefined","jackpotValue","totalJackpot","isLive","userBetTotal","length","filter","bettor","walletAddress","reduce","total","amount","userWinChance","_contractState$timer","countdown","setInterval","prev","newTime","clearInterval","carousel","style","transition","animationId","currentPosition","winnerPositionFound","cardWidth","totalCards","Math","max","resetPoint","allItems","Array","from","animate","_contractState$timer3","transform","requestAnimationFrame","winnerIndex","findIndex","item","fullAddress","winner","username","winnerPosition","cancelAnimationFrame","connect","on","timerData","warn","newTimeRemaining","newRoundNumber","timeDiff","abs","isNewRound","roundData","reset","gameState","isWaitingForWinner","bettors","isArray","winnerAnnouncement","gameData","data","isWaiting","message","resetData","off","disconnect","handleBetChange","e","value","parseFloat","target","min","handleTabChange","tab","handlePlaceBet","result","success","txHash","slice","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userBalance","toFixed","type","onChange","step","placeholder","onClick","disabled","floor","toString","padStart","ref","bettorsToShow","bettorsForWinnerMatching","infiniteItems","map","index","isWinner","matchingBettor","find","matchBettor","_contractWinner$betto","_contractWinner$betto2","_contractWinner$betto3","_contractWinner$betto4","normalizeAddress","addr","toLowerCase","trim","winnerIds","displayName","bettorIds","isMatch","some","winnerId","includes","bettorId","startsWith","substring","isCurrentBettorWinner","toUpperCase","size","_c","App","uiPreferences","language","restoreConnection","actionsConfiguration","_c2","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  \n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { contractWinnerRef.current = contractWinner; }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n  useEffect(() => { waitingForWinnerRef.current = waitingForWinner; }, [waitingForWinner]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Use coordinator to check if should block\n    if (winnerCoordinator.shouldBlock(winnerTimestamp)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    \n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n    \n    // Set coordination flag via coordinator\n    winnerCoordinator.setActive(true, winnerTimestamp);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Auto-clear announcement but keep winner highlighted until new round\n    setTimeout(() => {\n      setShowWinnerAnnouncement(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.setActive(false);\n      // Keep contractWinner for highlighting until new round starts\n    }, 6000);\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    \n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\n        : (Number(rawAdminInfo.currentRound) || 0)\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    if (!contractState) return contractState;\n    \n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' \n        ? (contractState.currentRound?.roundNumber || 0)\n        : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  \n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    \n    return gameBettors\n      .filter(bettor => \n        bettor.address === address || \n        bettor.walletAddress === address\n      )\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  \n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || !jackpotValue || userBetTotal === 0) return 0;\n    \n    return (userBetTotal / jackpotValue) * 100;\n  }, [userBetTotal, jackpotValue, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    // Always sync with backend timer when it changes\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n\n    console.log('⏰ Starting local countdown timer...');\n    \n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n          \n          // When we reach 0, trigger \"analyzing bets\" state locally\n          if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n          }\n          \n          return newTime;\n        }\n        \n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) return;\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    const cardWidth = 110 + 10; // card width + gap\n    const totalCards = Math.max(6, gameBettors.length || 0);\n    const resetPoint = cardWidth * totalCards; // Reset when we've moved one full set\n    \n    // Reference to allItems for winner finding\n    const allItems = [\n      ...gameBettors,\n      ...Array.from({ length: Math.max(0, 6 - gameBettors.length) }, () => null)\n    ];\n    \n    console.log('🎠 Starting carousel animation:', { totalCards, resetPoint });\n\n    const animate = () => {\n      // Special handling for analyzing state - slide to winner\n      if (waitingForWinner && (contractState.timer?.timeRemaining || 0) === 0) {\n        // Fast spinning during analyzing\n        currentPosition += 8; // Fast speed during analyzing\n        \n        if (currentPosition >= resetPoint) {\n          currentPosition = 0;\n        }\n        \n        carousel.style.transform = `translateX(-${currentPosition}px)`;\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n      \n      // Stop animation when winner is revealed\n      if (contractWinner) {\n        // Find winner position and slide to it\n        if (!winnerPositionFound) {\n          const winnerIndex = allItems.findIndex(item => item && contractWinner && (\n            item.address === contractWinner.fullAddress ||\n            item.address === contractWinner.winner ||\n            item.username === contractWinner.username\n          ));\n          \n          if (winnerIndex !== -1) {\n            const winnerPosition = winnerIndex * cardWidth;\n            carousel.style.transform = `translateX(-${winnerPosition}px)`;\n            carousel.style.transition = 'transform 1s ease-out';\n            console.log('🎯 Sliding to winner at position:', winnerPosition);\n          }\n          winnerPositionFound = true;\n        }\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n\n      // Normal carousel animation\n      currentPosition += 1; // Slower, smoother movement speed\n      \n      // Reset position seamlessly when reaching the end of first set\n      if (currentPosition >= resetPoint) {\n        currentPosition = 0;\n      }\n      \n      carousel.style.transform = `translateX(-${currentPosition}px)`;\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n    };\n  }, [gameBettors.length, contractWinner, waitingForWinner, slotSpinning]);\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      console.log('⏰ App: Socket timer update:', timerData);\n      \n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      \n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      \n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n        \n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n        \n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      \n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n      \n      // Clear winner highlighting for new round\n      setContractWinner(null);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      console.log('🎮 App: Game state update:', gameState);\n      if (gameState.timeRemaining !== undefined) {\n        setTimeRemaining(gameState.timeRemaining);\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        \n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        \n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        \n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (data) => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n      \n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      \n      setWaitingForWinner(isWaiting);\n      \n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', (resetData) => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      \n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n      \n      // Clear any winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      \n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    const value = parseFloat(e.target.value) || 0;\n    setBetAmount(Math.max(0, Math.min(value, 10))); // Min 0, Max 10\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    console.log(`🔥 BET BUTTON CLICKED - Amount: ${betAmount} TON`);\n    \n    if (betAmount <= 0) {\n      showAlert('Please enter a valid bet amount');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first');\n      return;\n    }\n\n    if (!contractState.isActive) {\n      showAlert('Jackpot is not currently active\\n\\n🤖 Automated system will start a new round soon...');\n      return;\n    }\n\n    try {\n      console.log(`🚀 Starting bet placement process...`);\n      hapticFeedback('medium');\n      \n      // This will call the contract with opcode 0x03\n      const result = await placeBet(betAmount);\n      \n      if (result.success) {\n        hapticFeedback('success');\n        showAlert(`✅ Bet placed successfully!\\n${betAmount} TON in round #${currentRound}\\nTransaction: ${result.txHash.slice(0, 8)}...`);\n        console.log('🎉 Bet placement completed:', result);\n      }\n    } catch (error) {\n      hapticFeedback('error');\n      showAlert(`❌ Bet failed: ${error.message}`);\n      console.error('💥 Bet error:', error);\n    }\n  };\n\n      return (\n      <div className=\"app\">\n        <div className=\"app-container\">\n          {/* Header Section */}\n          <div className=\"header-section\">\n            <div className=\"header-top\">\n              <div className=\"logo-section\">\n                <div className=\"logo-icon\">🎰</div>\n                <div className=\"app-name\">SlotPot</div>\n              </div>\n              <div className=\"header-icons\">\n                <WalletConnection />\n              </div>\n            </div>\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">\n                {isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000'}\n                <span className=\"balance-symbol\">TON</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"main-content\">\n            {/* Jackpot Display */}\n            <div className=\"jackpot-header\">\n              <div className=\"jackpot-title\">💰 JACKPOT</div>\n              <div className=\"jackpot-value-display\">{jackpotValue.toFixed(3)}</div>\n              <div className=\"jackpot-subtitle\">Winner takes all...</div>\n            </div>\n\n            {/* Betting Section */}\n            <div className=\"betting-section\">\n              <div className=\"bet-input-section\">\n                <input \n                  type=\"number\" \n                  className=\"bet-amount-input\" \n                  value={betAmount}\n                  onChange={handleBetChange}\n                  step=\"0.01\"\n                  min=\"0.01\"\n                  placeholder=\"0\"\n                />\n                <button className=\"bet-increment-btn\" onClick={() => setBetAmount(prev => prev + 0.1)}>\n                  +0.1\n                </button>\n              </div>\n              <button \n                className=\"bet-button\" \n                onClick={handlePlaceBet}\n                disabled={isPlacingBet || !isConnected}\n              >\n                {isPlacingBet ? 'Betting...' : 'Bet'}\n              </button>\n            </div>\n\n            {/* Stats Grid */}\n            <div className=\"stats-grid\">\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{userBetTotal.toFixed(3)}</div>\n                <div className=\"stat-label\">Your Wager</div>\n              </div>\n              <div className=\"stat-card chance-stat\">\n                <div className=\"stat-value\">{userWinChance.toFixed(2)}%</div>\n                <div className=\"stat-label\">Your Chance</div>\n              </div>\n            </div>\n\n            {/* Time Section */}\n            <div className=\"time-section\">\n              <div className=\"time-label\">Time Remaining</div>\n              <div className=\"time-value\">\n                {Math.floor((contractState.timer?.timeRemaining || 0) / 60)}:{((contractState.timer?.timeRemaining || 0) % 60).toString().padStart(2, '0')}\n              </div>\n            </div>\n\n            {/* Players Carousel Section */}\n            <div className=\"players-carousel-section\">\n              <div className={`carousel-header ${\n                (contractState.timer?.timeRemaining || 0) === 0 && waitingForWinner ? 'analyzing' : \n                contractWinner ? 'winner' : ''\n              }`}>\n                <h3>\n                  {(contractState.timer?.timeRemaining || 0) === 0 && waitingForWinner ? \n                    \"🔍 Analyzing Bets...\" : \n                    contractWinner ? \n                    `🏆 Winner: ${contractWinner.username || 'Player'}` :\n                    `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                  }\n                </h3>\n              </div>\n              <div className=\"players-carousel\">\n                <div \n                  ref={carouselRef}\n                  className={`carousel-track ${\n                    (contractState.timer?.timeRemaining || 0) === 0 && waitingForWinner ? 'analyzing' : \n                    contractWinner ? 'winner-revealed' : \n                    slotSpinning ? 'sliding' : ''\n                  }`}\n                  style={{\n                    transition: ((contractState.timer?.timeRemaining || 0) === 0 && waitingForWinner) || contractWinner ? 'none' : ''\n                  }}\n                >\n                  {/* Create infinite loop: duplicate all cards twice for seamless scrolling */}\n                  {(() => {\n                    // Always use current bettors as primary source\n                    let bettorsToShow = gameBettors;\n                    \n                    // For winner matching, check against previous round bettors if needed\n                    const bettorsForWinnerMatching = gameBettors.length > 0 ? gameBettors : previousRoundBettors;\n                    \n                    console.log('🎠 Carousel: Using bettors:', bettorsToShow.length, 'from current round');\n                    console.log('🎠 Winner matching pool:', bettorsForWinnerMatching.length, 'bettors');\n                    console.log('🎠 Current gameBettors:', gameBettors);\n                    console.log('🎠 Previous round bettors for matching:', previousRoundBettors);\n                    \n                    // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                    const allItems = [\n                      ...bettorsToShow,\n                      ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n                    ];\n                    \n                    // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                    const infiniteItems = [...allItems, ...allItems, ...allItems];\n                    \n                    return infiniteItems.map((bettor, index) => {\n                                          const isWinner = contractWinner && bettor && (() => {\n                      // Check if this bettor exists in the winner matching pool\n                      const matchingBettor = bettorsForWinnerMatching.find(matchBettor => {\n                        // Normalize addresses for comparison (remove any case sensitivity)\n                        const normalizeAddress = (addr) => addr ? addr.toLowerCase().trim() : '';\n                        \n                        // Get all possible identifiers from winner\n                        const winnerIds = [\n                          normalizeAddress(contractWinner.address),\n                          normalizeAddress(contractWinner.walletAddress),\n                          normalizeAddress(contractWinner.winner), // truncated address\n                          normalizeAddress(contractWinner.fullAddress), // full address\n                          normalizeAddress(contractWinner.bettor?.address),\n                          normalizeAddress(contractWinner.bettor?.walletAddress),\n                          contractWinner.username,\n                          contractWinner.bettor?.username,\n                          contractWinner.displayName,\n                          contractWinner.bettor?.displayName\n                        ].filter(Boolean);\n                        \n                        // Get all possible identifiers from match bettor\n                        const bettorIds = [\n                          normalizeAddress(matchBettor.address),\n                          normalizeAddress(matchBettor.walletAddress),\n                          matchBettor.username,\n                          matchBettor.displayName\n                        ].filter(Boolean);\n                        \n                        // Check exact matches first\n                        let isMatch = winnerIds.some(winnerId => \n                          bettorIds.includes(winnerId)\n                        );\n                        \n                        // Also check for partial address matches (truncated addresses)\n                        if (!isMatch) {\n                          isMatch = winnerIds.some(winnerId => {\n                            if (typeof winnerId === 'string' && winnerId.length > 10) {\n                              return bettorIds.some(bettorId => {\n                                if (typeof bettorId === 'string' && bettorId.length > 10) {\n                                  // Check if one is a truncated version of the other\n                                  return winnerId.startsWith(bettorId.substring(0, 10)) || \n                                         bettorId.startsWith(winnerId.substring(0, 10));\n                                }\n                                return false;\n                              });\n                            }\n                            return false;\n                          });\n                        }\n                        \n                        return isMatch;\n                      });\n                      \n                      // If a matching bettor was found, check if current bettor is the same\n                      const isCurrentBettorWinner = matchingBettor && (\n                        bettor.address === matchingBettor.address ||\n                        bettor.walletAddress === matchingBettor.walletAddress ||\n                        bettor.username === matchingBettor.username\n                      );\n                      \n                      if (isCurrentBettorWinner) {\n                        console.log('🔍 Winner found in current bettors:', bettor);\n                      }\n                      \n                      return isCurrentBettorWinner;\n                    })();\n                    \n                    // Log when we find a winner card\n                    if (isWinner) {\n                      console.log('🏆 WINNER CARD FOUND!', { index, bettor, isWinner });\n                    }\n                      \n                      return (\n                        <div key={`${index}-${bettor?.address || 'waiting'}`} className={`carousel-card ${\n                          isWinner ? 'winner' : \n                          bettor ? 'active' : 'waiting'\n                        }`} data-debug={`winner: ${isWinner}, address: ${bettor?.address}`}>\n                          <div className=\"mobile-player-avatar\">\n                            {bettor ? (\n                              <div className=\"generated-avatar\">\n                                {bettor.username ? bettor.username[0].toUpperCase() : '?'}\n                              </div>\n                            ) : (\n                              <div className=\"waiting-icon\">❓</div>\n                            )}\n                          </div>\n                          <div className=\"mobile-player-info\">\n                            <div className=\"mobile-player-name\">\n                              {bettor ? (bettor.username || bettor.displayName || 'Player') : 'Waiting'}\n                            </div>\n                            <div className=\"mobile-player-bet\">\n                              {bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                            </div>\n                          </div>\n                          {isWinner && (\n                            <div className=\"winner-crown\">👑</div>\n                          )}\n                        </div>\n                      );\n                    });\n                  })()}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Mobile Footer */}\n          <div className=\"mobile-footer\">\n            <div className=\"footer-stats\">\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🏠</div>\n                <div className=\"footer-stat-value\">Home</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">⚡</div>\n                <div className=\"footer-stat-value\">Fast</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🕐</div>\n                <div className=\"footer-stat-value\">History</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🔍</div>\n                <div className=\"footer-stat-value\">Search</div>\n              </div>\n            </div>\n            <button className=\"games-button\">\n              <DollarSign size={14} />\n              Games\n            </button>\n          </div>\n        </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\">🔄</div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}