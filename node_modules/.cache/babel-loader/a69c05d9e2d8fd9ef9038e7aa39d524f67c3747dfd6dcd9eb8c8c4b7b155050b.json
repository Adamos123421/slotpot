{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { TonIcon } from './IconComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', {\n        hasSwiper: !!swiperRef.current,\n        hasWinner: !!winner,\n        isActive: winnerAnimationActive\n      });\n      return;\n    }\n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    setWinnerAnimationActive(true);\n\n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // STEP 1: Find winner slide index by checking CSS classes (most reliable)\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    console.log('🔍 Searching through', slides.length, 'slides for winner...');\n\n    // Find winner by matching player data directly (don't rely on CSS classes)\n    const winnerName = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName) || 'Player';\n    const winnerAddr = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Searching for winner:', {\n      winnerName,\n      winnerAddr\n    });\n    for (let i = 0; i < slides.length; i++) {\n      var _nameEl$textContent;\n      const slide = slides[i];\n      const nameEl = slide.querySelector('.player-name');\n      const playerName = nameEl === null || nameEl === void 0 ? void 0 : (_nameEl$textContent = nameEl.textContent) === null || _nameEl$textContent === void 0 ? void 0 : _nameEl$textContent.trim();\n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n\n      // Try to match by getting the slide's player data\n      const slidePlayerData = slide.querySelector('.player-card');\n      let isWinnerSlide = false;\n\n      // Method 1: Check if this slide corresponds to the winner's position in players array\n      if (winnerAddr) {\n        // Find which player index this slide represents\n        const slideIndex = i % players.length; // Since slides repeat, get position in one set\n        const playerAtThisIndex = players[slideIndex];\n        if (playerAtThisIndex && (playerAtThisIndex.address === winnerAddr || playerAtThisIndex.address === winner.address || playerAtThisIndex.username === winner.username)) {\n          isWinnerSlide = true;\n          console.log(`✅ Found winner by player data match at slide ${i} (player index ${slideIndex})`);\n        }\n      }\n\n      // Method 2: Fallback to name matching\n      if (!isWinnerSlide && playerName && (playerName === winnerName || winnerAddr && playerName.includes(winnerAddr.slice(0, 6)) || winnerAddr && winnerAddr.includes(playerName))) {\n        isWinnerSlide = true;\n        console.log(`✅ Found winner by name match at slide ${i}`);\n      }\n      if (isWinnerSlide) {\n        winnerSlideIndex = i;\n        console.log('✅ Found winner slide at index:', i, 'Player:', playerName);\n        break;\n      }\n    }\n    if (winnerSlideIndex === -1) {\n      console.error('❌ Could not find winner slide at all!');\n      setWinnerAnimationActive(false);\n      // Don't set locked here, let it try again\n      return;\n    }\n    console.log('🎯 Target winner slide index:', winnerSlideIndex);\n\n    // Calculate the target position first\n    const totalSlides = slides.length;\n    const slidesPerSet = players.length;\n\n    // Convert absolute slide index to real index within one set\n    let realIndex = winnerSlideIndex % slidesPerSet;\n\n    // Find the winner in the players array to get the true position\n    let winnerPositionInPlayers = -1;\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n      if (!player) continue; // Skip waiting cards\n\n      const isMatch = player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName || winnerUsername && player.username === winnerUsername || winnerUsername && player.displayName === winnerUsername;\n      if (isMatch) {\n        winnerPositionInPlayers = i;\n        console.log('🎯 Found winner in players array at position:', i, 'Player:', player.username || player.displayName);\n        break;\n      }\n    }\n    if (winnerPositionInPlayers !== -1) {\n      realIndex = winnerPositionInPlayers;\n      console.log('✅ Using winner position from players array:', realIndex);\n    } else {\n      console.log('⚠️ Could not find winner in players array, using calculated index:', realIndex);\n    }\n    console.log('🎯 Target real index for animation:', realIndex);\n\n    // STEP 2: Smooth gradual approach with progressive slowdown\n    console.log('🎰 Starting smooth slot machine animation...');\n    const smoothApproach = () => {\n      if (!swiperRef.current) return;\n      const currentRealIndex = swiperRef.current.realIndex;\n      let distanceToWinner = realIndex - currentRealIndex;\n\n      // Handle loop wrapping\n      if (distanceToWinner < 0) {\n        distanceToWinner += slidesPerSet;\n      }\n      console.log(`📍 Current: ${currentRealIndex}, Target: ${realIndex}, Distance: ${distanceToWinner}`);\n\n      // If we're at the winner, stop and land\n      if (distanceToWinner === 0 || currentRealIndex === realIndex) {\n        console.log('🏆 Perfect! Already at winner position!');\n\n        // Lock immediately since we're already there\n        setTimeout(() => {\n          console.log('🔒 Winner locked in perfect position!');\n          if (swiperRef.current) {\n            swiperRef.current.autoplay.stop();\n            swiperRef.current.allowSlideNext = false;\n            swiperRef.current.allowSlidePrev = false;\n            swiperRef.current.allowTouchMove = false;\n            const wrapper = swiperRef.current.wrapperEl;\n            if (wrapper) {\n              wrapper.style.transition = 'none';\n            }\n          }\n          setWinnerLocked(true);\n          setWinnerAnimationActive(false);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          console.log('✅ Animation complete!');\n        }, 500);\n        return;\n      }\n\n      // Calculate speed based on distance - progressive slowdown\n      let speed;\n      let nextDelay;\n      if (distanceToWinner > 8) {\n        speed = 150; // Medium speed when far\n        nextDelay = 200;\n        console.log(`🎰 Far from winner - medium speed (${speed}ms)`);\n      } else if (distanceToWinner > 5) {\n        speed = 250; // Getting slower\n        nextDelay = 300;\n        console.log(`🎯 Getting closer - slowing down (${speed}ms)`);\n      } else if (distanceToWinner > 3) {\n        speed = 400; // Slower\n        nextDelay = 450;\n        console.log(`🎯 Close to winner - slow speed (${speed}ms)`);\n      } else if (distanceToWinner > 1) {\n        speed = 600; // Very slow\n        nextDelay = 650;\n        console.log(`🎯 Very close - very slow (${speed}ms)`);\n      } else {\n        // Final approach - FORWARD ONLY step-by-step to winner\n        console.log('🏆 Final approach - stepping forward to winner!');\n        const finalSteps = () => {\n          if (!swiperRef.current) return;\n          const currentRealIndex = swiperRef.current.realIndex;\n          console.log(`🎯 Final step: current=${currentRealIndex}, target=${realIndex}`);\n          if (currentRealIndex === realIndex) {\n            // Perfect! We're at the winner\n            console.log('🔒 Winner locked in perfect position!');\n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              swiperRef.current.allowTouchMove = false;\n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                wrapper.style.transition = 'none';\n              }\n            }\n            setWinnerLocked(true);\n            setWinnerAnimationActive(false);\n            onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n            console.log('✅ Forward-only animation complete!');\n            return;\n          }\n\n          // Take one more forward step\n          swiperRef.current.slideNext(600);\n\n          // Check again after step\n          setTimeout(() => {\n            finalSteps();\n          }, 700);\n        };\n        finalSteps();\n        return;\n      }\n\n      // Move one step closer\n      swiperRef.current.slideNext(speed);\n\n      // Continue approaching with increasing delay (progressive slowdown)\n      setTimeout(() => {\n        smoothApproach();\n      }, nextDelay);\n    };\n\n    // Start the smooth approach immediately (no fast rolling phase)\n    console.log('🎯 Starting gradual approach to winner...');\n    setTimeout(() => {\n      smoothApproach();\n    }, 300);\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    console.log('🔒 Locking on winner...');\n\n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Looking for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon = playerNameEl.textContent) === null || _playerNameEl$textCon === void 0 ? void 0 : _playerNameEl$textCon.trim();\n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n\n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n\n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        }\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n      }\n\n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n\n      // FORWARD ONLY - Calculate steps needed and move forward only\n      const currentSlide = swiperRef.current.activeIndex;\n      const totalSlides = slides.length;\n      let stepsForward = 0;\n      if (winnerSlideIndex >= currentSlide) {\n        stepsForward = winnerSlideIndex - currentSlide;\n      } else {\n        // Wrap around - go forward to end then to target\n        stepsForward = totalSlides - currentSlide + winnerSlideIndex;\n      }\n      console.log(`🎯 Moving ${stepsForward} steps FORWARD ONLY to reach winner`);\n\n      // Move forward step by step\n      const stepToWinner = stepsLeft => {\n        if (stepsLeft <= 0 || !swiperRef.current) {\n          console.log('🏆 Reached winner position!');\n\n          // Lock after reaching winner\n          setTimeout(() => {\n            console.log('🏆 Winner locked in position!');\n\n            // Completely stop all movement\n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n\n              // Force stop transitions\n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                setTimeout(() => {\n                  wrapper.style.transition = 'none';\n                  const transform = getComputedStyle(wrapper).transform;\n                  wrapper.style.transform = transform;\n                }, 100);\n              }\n            }\n            setWinnerLocked(true);\n            onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n            // Show winner for 7 seconds\n            winnerTimeoutRef.current = setTimeout(() => {\n              resetToIdle();\n            }, 7000);\n          }, 1100);\n          return;\n        }\n\n        // Take one forward step\n        console.log(`🎯 Step ${stepsForward - stepsLeft + 1}/${stepsForward} - moving forward`);\n        swiperRef.current.slideNext(800);\n\n        // Continue with next step\n        setTimeout(() => {\n          stepToWinner(stepsLeft - 1);\n        }, 900);\n      };\n\n      // Start stepping to winner\n      stepToWinner(stepsForward);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n\n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n\n        // FORWARD ONLY for fallback too\n        const currentSlide = swiperRef.current.activeIndex;\n        const totalSlides = slides.length;\n        let fallbackStepsForward = 0;\n        if (fallbackIndex >= currentSlide) {\n          fallbackStepsForward = fallbackIndex - currentSlide;\n        } else {\n          fallbackStepsForward = totalSlides - currentSlide + fallbackIndex;\n        }\n        console.log(`🎯 Fallback: Moving ${fallbackStepsForward} steps FORWARD ONLY`);\n        const fallbackStep = stepsLeft => {\n          if (stepsLeft <= 0) {\n            setTimeout(() => {\n              setWinnerLocked(true);\n              onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n              winnerTimeoutRef.current = setTimeout(() => {\n                resetToIdle();\n              }, 7000);\n            }, 1100);\n            return;\n          }\n          swiperRef.current.slideNext(800);\n          setTimeout(() => {\n            fallbackStep(stepsLeft - 1);\n          }, 900);\n        };\n        fallbackStep(fallbackStepsForward);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n\n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n\n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n\n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('🚫 No winner, skipping animation');\n      return;\n    }\n    if (winnerAnimationActive) {\n      console.log('🚫 Animation already active, skipping');\n      return;\n    }\n    if (winnerLocked) {\n      console.log('🚫 Winner already locked, skipping');\n      return;\n    }\n\n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n\n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('🆕 New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n\n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('🎯 Forcing winner display without animation');\n\n      // Just show the winner without animation\n      setWinnerLocked(true);\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n      // NO AUTO-RESET - let game logic handle it\n      console.log('🎯 Winner locked without animation - waiting for new round');\n      return;\n    }\n    console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    animationAttemptsRef.current++;\n\n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${winnerAnimationActive && !winnerLocked ? 'winner-approaching' : winnerLocked ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: Math.max(players.length, 6),\n      autoplay: {\n        delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: 300,\n      className: `player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(2)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${winnerLocked && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner-final' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: player ? (player.amount || 0).toFixed(2) : '0.00'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TonIcon, {\n                size: 12,\n                className: \"ton-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 672,\n              columnNumber: 19\n            }, this), winnerLocked && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 684,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(TonIcon, {\n                size: 12,\n                className: \"ton-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 685,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 17\n          }, this), winnerLocked && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 621,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"+lturoi5MGn+/8Zh6H9qMrupE2I=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","TonIcon","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","winnerAnimationActive","setWinnerAnimationActive","winnerLocked","setWinnerLocked","winnerTimeoutRef","animationAttemptsRef","lastWinnerRef","handleSwiperInit","swiper","current","animateToWinner","console","log","hasSwiper","hasWinner","isActive","autoplay","stop","slides","winnerSlideIndex","length","winnerName","username","displayName","winnerAddr","address","fullAddress","i","_nameEl$textContent","slide","nameEl","querySelector","playerName","textContent","trim","slidePlayerData","isWinnerSlide","slideIndex","playerAtThisIndex","includes","slice","error","totalSlides","slidesPerSet","realIndex","winnerPositionInPlayers","winnerUsername","winnerAddress","player","isMatch","smoothApproach","currentRealIndex","distanceToWinner","setTimeout","allowSlideNext","allowSlidePrev","allowTouchMove","wrapper","wrapperEl","style","transition","speed","nextDelay","finalSteps","slideNext","lockOnWinner","closestToCenter","Infinity","containerCenter","el","clientWidth","_playerNameEl$textCon","playerNameEl","isWinner","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","Math","abs","currentSlide","activeIndex","stepsForward","stepToWinner","stepsLeft","transform","getComputedStyle","resetToIdle","warn","fallbackIndex","fallbackStepsForward","fallbackStep","start","clearTimeout","currentWinnerKey","lastWinnerKey","params","delay","disableOnInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","max","pauseOnMouseEnter","onSwiper","Array","map","_","setIndex","index","toUpperCase","amount","toFixed","size","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { TonIcon } from './IconComponents';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', { \n        hasSwiper: !!swiperRef.current, \n        hasWinner: !!winner, \n        isActive: winnerAnimationActive \n      });\n      return;\n    }\n    \n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    \n    setWinnerAnimationActive(true);\n    \n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // STEP 1: Find winner slide index by checking CSS classes (most reliable)\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    console.log('🔍 Searching through', slides.length, 'slides for winner...');\n    \n    // Find winner by matching player data directly (don't rely on CSS classes)\n    const winnerName = winner?.username || winner?.displayName || 'Player';\n    const winnerAddr = winner?.address || winner?.winner || winner?.fullAddress;\n    console.log('🔍 Searching for winner:', { winnerName, winnerAddr });\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const nameEl = slide.querySelector('.player-name');\n      const playerName = nameEl?.textContent?.trim();\n      \n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n      \n             // Try to match by getting the slide's player data\n       const slidePlayerData = slide.querySelector('.player-card');\n       let isWinnerSlide = false;\n       \n       // Method 1: Check if this slide corresponds to the winner's position in players array\n       if (winnerAddr) {\n         // Find which player index this slide represents\n         const slideIndex = i % players.length; // Since slides repeat, get position in one set\n         const playerAtThisIndex = players[slideIndex];\n         \n         if (playerAtThisIndex && (\n           playerAtThisIndex.address === winnerAddr ||\n           playerAtThisIndex.address === winner.address ||\n           playerAtThisIndex.username === winner.username\n         )) {\n           isWinnerSlide = true;\n           console.log(`✅ Found winner by player data match at slide ${i} (player index ${slideIndex})`);\n         }\n       }\n       \n       // Method 2: Fallback to name matching\n       if (!isWinnerSlide && playerName && (\n         playerName === winnerName ||\n         (winnerAddr && playerName.includes(winnerAddr.slice(0, 6))) ||\n         (winnerAddr && winnerAddr.includes(playerName))\n       )) {\n         isWinnerSlide = true;\n         console.log(`✅ Found winner by name match at slide ${i}`);\n       }\n       \n       if (isWinnerSlide) {\n        winnerSlideIndex = i;\n        console.log('✅ Found winner slide at index:', i, 'Player:', playerName);\n        break;\n      }\n    }\n    \n\n    \n    if (winnerSlideIndex === -1) {\n      console.error('❌ Could not find winner slide at all!');\n      setWinnerAnimationActive(false);\n      // Don't set locked here, let it try again\n      return;\n    }\n    \n    console.log('🎯 Target winner slide index:', winnerSlideIndex);\n    \n    // Calculate the target position first\n    const totalSlides = slides.length;\n    const slidesPerSet = players.length;\n    \n    // Convert absolute slide index to real index within one set\n    let realIndex = winnerSlideIndex % slidesPerSet;\n    \n    // Find the winner in the players array to get the true position\n    let winnerPositionInPlayers = -1;\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n      if (!player) continue; // Skip waiting cards\n      \n      const isMatch = (player.address === winner.address) ||\n                     (player.username === winner.username) ||\n                     (player.address === winner.winner) ||\n                     (player.address === winner.fullAddress) ||\n                     (player.username === winner.displayName) ||\n                     (winnerUsername && player.username === winnerUsername) ||\n                     (winnerUsername && player.displayName === winnerUsername);\n      \n      if (isMatch) {\n        winnerPositionInPlayers = i;\n        console.log('🎯 Found winner in players array at position:', i, 'Player:', player.username || player.displayName);\n        break;\n      }\n    }\n    \n    if (winnerPositionInPlayers !== -1) {\n      realIndex = winnerPositionInPlayers;\n      console.log('✅ Using winner position from players array:', realIndex);\n    } else {\n      console.log('⚠️ Could not find winner in players array, using calculated index:', realIndex);\n    }\n    \n    console.log('🎯 Target real index for animation:', realIndex);\n    \n    // STEP 2: Smooth gradual approach with progressive slowdown\n    console.log('🎰 Starting smooth slot machine animation...');\n    \n    const smoothApproach = () => {\n      if (!swiperRef.current) return;\n      \n      const currentRealIndex = swiperRef.current.realIndex;\n      let distanceToWinner = realIndex - currentRealIndex;\n      \n      // Handle loop wrapping\n      if (distanceToWinner < 0) {\n        distanceToWinner += slidesPerSet;\n      }\n      \n      console.log(`📍 Current: ${currentRealIndex}, Target: ${realIndex}, Distance: ${distanceToWinner}`);\n      \n      // If we're at the winner, stop and land\n      if (distanceToWinner === 0 || currentRealIndex === realIndex) {\n        console.log('🏆 Perfect! Already at winner position!');\n        \n        // Lock immediately since we're already there\n        setTimeout(() => {\n          console.log('🔒 Winner locked in perfect position!');\n          \n          if (swiperRef.current) {\n            swiperRef.current.autoplay.stop();\n            swiperRef.current.allowSlideNext = false;\n            swiperRef.current.allowSlidePrev = false;\n            swiperRef.current.allowTouchMove = false;\n            \n            const wrapper = swiperRef.current.wrapperEl;\n            if (wrapper) {\n              wrapper.style.transition = 'none';\n            }\n          }\n          \n          setWinnerLocked(true);\n          setWinnerAnimationActive(false);\n          onWinnerLand?.();\n          \n          console.log('✅ Animation complete!');\n          \n        }, 500);\n        \n        return;\n      }\n      \n      // Calculate speed based on distance - progressive slowdown\n      let speed;\n      let nextDelay;\n      \n      if (distanceToWinner > 8) {\n        speed = 150; // Medium speed when far\n        nextDelay = 200;\n        console.log(`🎰 Far from winner - medium speed (${speed}ms)`);\n      } else if (distanceToWinner > 5) {\n        speed = 250; // Getting slower\n        nextDelay = 300;\n        console.log(`🎯 Getting closer - slowing down (${speed}ms)`);\n      } else if (distanceToWinner > 3) {\n        speed = 400; // Slower\n        nextDelay = 450;\n        console.log(`🎯 Close to winner - slow speed (${speed}ms)`);\n      } else if (distanceToWinner > 1) {\n        speed = 600; // Very slow\n        nextDelay = 650;\n        console.log(`🎯 Very close - very slow (${speed}ms)`);\n      } else {\n        // Final approach - FORWARD ONLY step-by-step to winner\n        console.log('🏆 Final approach - stepping forward to winner!');\n        \n        const finalSteps = () => {\n          if (!swiperRef.current) return;\n          \n          const currentRealIndex = swiperRef.current.realIndex;\n          console.log(`🎯 Final step: current=${currentRealIndex}, target=${realIndex}`);\n          \n          if (currentRealIndex === realIndex) {\n            // Perfect! We're at the winner\n            console.log('🔒 Winner locked in perfect position!');\n            \n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              swiperRef.current.allowTouchMove = false;\n              \n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                wrapper.style.transition = 'none';\n              }\n            }\n            \n            setWinnerLocked(true);\n            setWinnerAnimationActive(false);\n            onWinnerLand?.();\n            \n            console.log('✅ Forward-only animation complete!');\n            return;\n          }\n          \n          // Take one more forward step\n          swiperRef.current.slideNext(600);\n          \n          // Check again after step\n          setTimeout(() => {\n            finalSteps();\n          }, 700);\n        };\n        \n        finalSteps();\n        return;\n      }\n      \n      // Move one step closer\n      swiperRef.current.slideNext(speed);\n      \n      // Continue approaching with increasing delay (progressive slowdown)\n      setTimeout(() => {\n        smoothApproach();\n      }, nextDelay);\n    };\n    \n    // Start the smooth approach immediately (no fast rolling phase)\n    console.log('🎯 Starting gradual approach to winner...');\n    setTimeout(() => {\n      smoothApproach();\n    }, 300);\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    \n    console.log('🔒 Locking on winner...');\n    \n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('🔍 Looking for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n      \n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n        \n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner?.displayName);\n        }\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || \n                   winnerAddress.includes(playerName);\n      }\n      \n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      \n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      \n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        \n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        \n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n      \n      // FORWARD ONLY - Calculate steps needed and move forward only\n      const currentSlide = swiperRef.current.activeIndex;\n      const totalSlides = slides.length;\n      \n      let stepsForward = 0;\n      if (winnerSlideIndex >= currentSlide) {\n        stepsForward = winnerSlideIndex - currentSlide;\n      } else {\n        // Wrap around - go forward to end then to target\n        stepsForward = (totalSlides - currentSlide) + winnerSlideIndex;\n      }\n      \n      console.log(`🎯 Moving ${stepsForward} steps FORWARD ONLY to reach winner`);\n      \n      // Move forward step by step\n      const stepToWinner = (stepsLeft) => {\n        if (stepsLeft <= 0 || !swiperRef.current) {\n          console.log('🏆 Reached winner position!');\n          \n          // Lock after reaching winner\n          setTimeout(() => {\n            console.log('🏆 Winner locked in position!');\n            \n            // Completely stop all movement\n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              \n              // Force stop transitions\n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                setTimeout(() => {\n                  wrapper.style.transition = 'none';\n                  const transform = getComputedStyle(wrapper).transform;\n                  wrapper.style.transform = transform;\n                }, 100);\n              }\n            }\n            \n            setWinnerLocked(true);\n            onWinnerLand?.();\n            \n            // Show winner for 7 seconds\n            winnerTimeoutRef.current = setTimeout(() => {\n              resetToIdle();\n            }, 7000);\n            \n          }, 1100);\n          return;\n        }\n        \n        // Take one forward step\n        console.log(`🎯 Step ${stepsForward - stepsLeft + 1}/${stepsForward} - moving forward`);\n        swiperRef.current.slideNext(800);\n        \n        // Continue with next step\n        setTimeout(() => {\n          stepToWinner(stepsLeft - 1);\n        }, 900);\n      };\n      \n      // Start stepping to winner\n      stepToWinner(stepsForward);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n      \n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      \n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        \n        // FORWARD ONLY for fallback too\n        const currentSlide = swiperRef.current.activeIndex;\n        const totalSlides = slides.length;\n        let fallbackStepsForward = 0;\n        \n        if (fallbackIndex >= currentSlide) {\n          fallbackStepsForward = fallbackIndex - currentSlide;\n        } else {\n          fallbackStepsForward = (totalSlides - currentSlide) + fallbackIndex;\n        }\n        \n        console.log(`🎯 Fallback: Moving ${fallbackStepsForward} steps FORWARD ONLY`);\n        \n        const fallbackStep = (stepsLeft) => {\n          if (stepsLeft <= 0) {\n            setTimeout(() => {\n              setWinnerLocked(true);\n              onWinnerLand?.();\n              \n              winnerTimeoutRef.current = setTimeout(() => {\n                resetToIdle();\n              }, 7000);\n            }, 1100);\n            return;\n          }\n          \n          swiperRef.current.slideNext(800);\n          setTimeout(() => {\n            fallbackStep(stepsLeft - 1);\n          }, 900);\n        };\n        \n        fallbackStep(fallbackStepsForward);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    \n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n      \n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n      \n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    \n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    \n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    \n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('🚫 No winner, skipping animation');\n      return;\n    }\n    \n    if (winnerAnimationActive) {\n      console.log('🚫 Animation already active, skipping');\n      return;\n    }\n    \n    if (winnerLocked) {\n      console.log('🚫 Winner already locked, skipping');\n      return;\n    }\n    \n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n    \n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('🆕 New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n    \n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('🎯 Forcing winner display without animation');\n      \n      // Just show the winner without animation\n      setWinnerLocked(true);\n      onWinnerLand?.();\n      \n      // NO AUTO-RESET - let game logic handle it\n      console.log('🎯 Winner locked without animation - waiting for new round');\n      \n      return;\n    }\n    \n    console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    \n    animationAttemptsRef.current++;\n    \n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n    \n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    \n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        winnerAnimationActive && !winnerLocked ? 'winner-approaching' : \n        winnerLocked ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={Math.max(players.length, 6)}\n        autoplay={{\n          delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={300}\n        className={`player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Only 2 sets to reduce complexity */}\n        {[...Array(2)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                winnerLocked && winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner-final' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    <span>{player ? (player.amount || 0).toFixed(2) : '0.00'}</span>\n                    <TonIcon size={12} className=\"ton-icon\" />\n                  </div>\n                  {winnerLocked && winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      <span>Won {parseFloat(winner.prize || 0).toFixed(3)}</span>\n                      <TonIcon size={12} className=\"ton-icon\" />\n                    </div>\n                  )}\n                </div>\n                {winnerLocked && winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}