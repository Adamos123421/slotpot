{"ast":null,"code":"import{Address,beginCell,Cell,toNano}from'@ton/core';import{TonClient}from'@ton/ton';// Contract configuration\nexport const JACKPOT_CONTRACT_CONFIG={// ⚠️ IMPORTANT: Replace this with your actual deployed contract address!\n// This is just a placeholder - transactions will fail with wrong address\naddress:process.env.REACT_APP_CONTRACT_ADDRESS||\"REPLACE_WITH_YOUR_ACTUAL_CONTRACT_ADDRESS\",// Admin configuration - in production, use environment variables\nadminMnemonic:\"cabin flame border diary parent web extend stable hungry cabin alley cable bulk nasty learn toe recipe pluck memory twist wheel boost execute caution\".split(' ')||[],// TON Client configuration\nendpoint:process.env.REACT_APP_TON_ENDPOINT||'https://toncenter.com/api/v2/jsonRPC',apiKey:\"cb6a181146fafbe2adc51d3a21d27341aa8a93cbf581e03a80e9e7203a3abd65\"};// Message constructors for contract interactions\nexport const ContractMessages={// Admin messages\nstartJackpot:function(){let queryId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;return beginCell().storeUint(0x12345678,32)// Replace with actual op code\n.storeUint(queryId,64).endCell();},endJackpot:function(){let queryId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;return beginCell().storeUint(0x87654321,32)// Replace with actual op code  \n.storeUint(queryId,64).endCell();},placeBet:function(){let queryId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;return beginCell().storeUint(0x03,32)// PlaceBet opcode as specified in contract\n.storeUint(queryId,64)// query_id as uint64\n.endCell();}};export class JackpotContract{constructor(){this.client=new TonClient({endpoint:JACKPOT_CONTRACT_CONFIG.endpoint,apiKey:JACKPOT_CONTRACT_CONFIG.apiKey});this.contractAddress=Address.parse(\"EQAO-eknIHULYsinQdpEb8oPVQy6eUXz0-zAPTKi1QTAJkjo\");// Debug contract address on initialization\nconsole.log('🏗️ JackpotContract initialized:',{configAddress:JACKPOT_CONTRACT_CONFIG.address,parsedAddress:this.contractAddress.toString(),fromEnv:!!process.env.REACT_APP_CONTRACT_ADDRESS});}// Contract getters - these call the smart contract's get methods\nasync getTotalJackpot(){try{const result=await this.client.runMethod(this.contractAddress,\"getTotalJackpot\");// Parse the result from stack\nconst jackpotAmount=result.stack.readBigNumber();return Number(jackpotAmount)/1e9;// Convert from nanotons to TON\n}catch(error){console.error('Error fetching jackpot amount:',error);return 0;}}async isJackpotActive(){try{const result=await this.client.runMethod(this.contractAddress,\"isJackpotActive\");return result.stack.readBoolean();}catch(error){console.error('Error fetching jackpot status:',error);return false;}}async getBetCount(){try{const result=await this.client.runMethod(this.contractAddress,\"getBetCount\");return result.stack.readNumber();}catch(error){console.error('Error fetching bet count:',error);return 0;}}async getBettorAmount(bettorAddress){try{const result=await this.client.runMethod(this.contractAddress,\"getBettorAmount\",[{type:'slice',cell:beginCell().storeAddress(Address.parse(bettorAddress)).endCell()}]);const amount=result.stack.readBigNumber();return Number(amount)/1e9;// Convert from nanotons to TON\n}catch(error){console.error('Error fetching bettor amount:',error);return 0;}}async getWinningProbability(bettorAddress){try{const result=await this.client.runMethod(this.contractAddress,\"getWinningProbability\",[{type:'slice',cell:beginCell().storeAddress(Address.parse(bettorAddress)).endCell()}]);const probability=result.stack.readNumber();return probability/100;// Convert from basis points to percentage\n}catch(error){console.error('Error fetching winning probability:',error);return 0;}}async getAllBettors(){try{const result=await this.client.runMethod(this.contractAddress,\"getAllBettors\");// Parse the dictionary result\n// This will return a map of addresses to amounts\nconst bettorsDict=result.stack.readCellOpt();if(!bettorsDict)return{};// Parse the dictionary - implementation depends on exact contract structure\n// For now, return empty object - you'll need to implement dictionary parsing\nreturn{};}catch(error){console.error('Error fetching all bettors:',error);return{};}}async getLastWinner(){try{const result=await this.client.runMethod(this.contractAddress,\"getLastWinner\");const winnerCell=result.stack.readCellOpt();if(!winnerCell)return null;// Parse address from cell\nconst slice=winnerCell.beginParse();const winnerAddress=slice.loadAddress();return winnerAddress===null||winnerAddress===void 0?void 0:winnerAddress.toString();}catch(error){console.error('Error fetching last winner:',error);return null;}}async getLastPrizeAmount(){try{const result=await this.client.runMethod(this.contractAddress,\"getLastPrizeAmount\");const prizeAmount=result.stack.readBigNumber();return Number(prizeAmount)/1e9;// Convert from nanotons to TON\n}catch(error){console.error('Error fetching last prize amount:',error);return 0;}}async getContractBalance(){try{const result=await this.client.runMethod(this.contractAddress,\"getBalance\");const balance=result.stack.readBigNumber();return Number(balance)/1e9;// Convert from nanotons to TON\n}catch(error){console.error('Error fetching contract balance:',error);return 0;}}// Transaction builders for sending to the contract\nbuildBetTransaction(betAmount,senderAddress){const betAmountNano=toNano(betAmount.toString());// Generate unique query_id for this bet\nconst queryId=Date.now()*1000+Math.floor(Math.random()*1000);console.log(\"\\uD83D\\uDD27 Building bet transaction:\",{betAmount:betAmount+' TON',betAmountNano:betAmountNano.toString(),queryId,senderAddress,contractAddress:this.contractAddress.toString(),// Check if contract address equals sender address (this would be wrong!)\naddressesMatch:this.contractAddress.toString()===senderAddress,usingEnvAddress:!!process.env.REACT_APP_CONTRACT_ADDRESS});const payload=ContractMessages.placeBet(queryId);console.log(\"\\uD83D\\uDCE6 PlaceBet message payload:\",payload.toBoc().toString('base64'));// Verify the message structure immediately\ntry{const cell=payload;const slice=cell.beginParse();const opCode=slice.loadUint(32);const decodedQueryId=slice.loadUint(64);console.log(\"\\u2705 Message verification:\",{opCode:\"0x\".concat(opCode.toString(16).padStart(2,'0')),queryId:decodedQueryId,isCorrectOpCode:opCode===0x03,matches:queryId===decodedQueryId});}catch(error){console.error('❌ Message verification failed:',error);}const transaction={validUntil:Math.floor(Date.now()/1000)+600,// 10 minutes\nmessages:[{address:this.contractAddress.toString(),amount:betAmountNano.toString(),payload:payload.toBoc().toString('base64')}]};console.log(\"\\uD83C\\uDFAF Final transaction will be sent to:\",{destinationAddress:transaction.messages[0].address,amount:transaction.messages[0].amount+' nanotons',amountTON:betAmount+' TON',senderAddress:senderAddress,isGoingToContract:transaction.messages[0].address!==senderAddress});return transaction;}buildStartJackpotTransaction(){return{validUntil:Math.floor(Date.now()/1000)+600,// 10 minutes\nmessages:[{address:this.contractAddress.toString(),amount:toNano('0.05').toString(),// Gas fee\npayload:ContractMessages.startJackpot(Date.now()).toBoc().toString('base64')}]};}buildEndJackpotTransaction(){return{validUntil:Math.floor(Date.now()/1000)+600,// 10 minutes\nmessages:[{address:this.contractAddress.toString(),amount:toNano('0.05').toString(),// Gas fee\npayload:ContractMessages.endJackpot(Date.now()).toBoc().toString('base64')}]};}// Utility method to get comprehensive contract state\nasync getContractState(){try{const[totalJackpot,isActive,betCount,lastWinner,lastPrizeAmount,contractBalance]=await Promise.all([this.getTotalJackpot(),this.isJackpotActive(),this.getBetCount(),this.getLastWinner(),this.getLastPrizeAmount(),this.getContractBalance()]);return{totalJackpot,isActive,betCount,lastWinner,lastPrizeAmount,contractBalance,timestamp:Date.now()};}catch(error){console.error('Error fetching contract state:',error);return{totalJackpot:0,isActive:false,betCount:0,lastWinner:null,lastPrizeAmount:0,contractBalance:0,timestamp:Date.now(),error:error.message};}}}// Create a singleton instance\nexport const jackpotContract=new JackpotContract();// Export utility functions\nexport const formatTonAmount=amount=>{return Number(amount).toFixed(3);};export const formatAddress=address=>{if(!address)return'';return\"\".concat(address.slice(0,6),\"...\").concat(address.slice(-4));};// Utility function to decode and verify PlaceBet message\nexport const decodePlaceBetMessage=base64Payload=>{try{const cell=Cell.fromBase64(base64Payload);const slice=cell.beginParse();const opCode=slice.loadUint(32);const queryId=slice.loadUint(64);console.log(\"\\uD83D\\uDD0D Decoded PlaceBet message:\",{opCode:\"0x\".concat(opCode.toString(16).padStart(2,'0')),queryId,isCorrectOpCode:opCode===0x03});return{opCode,queryId,isValid:opCode===0x03};}catch(error){console.error('Error decoding PlaceBet message:',error);return null;}};","map":{"version":3,"names":["Address","beginCell","Cell","toNano","TonClient","JACKPOT_CONTRACT_CONFIG","address","process","env","REACT_APP_CONTRACT_ADDRESS","adminMnemonic","split","endpoint","REACT_APP_TON_ENDPOINT","apiKey","ContractMessages","startJackpot","queryId","arguments","length","undefined","storeUint","endCell","endJackpot","placeBet","JackpotContract","constructor","client","contractAddress","parse","console","log","configAddress","parsedAddress","toString","fromEnv","getTotalJackpot","result","runMethod","jackpotAmount","stack","readBigNumber","Number","error","isJackpotActive","readBoolean","getBetCount","readNumber","getBettorAmount","bettorAddress","type","cell","storeAddress","amount","getWinningProbability","probability","getAllBettors","bettorsDict","readCellOpt","getLastWinner","winnerCell","slice","beginParse","winnerAddress","loadAddress","getLastPrizeAmount","prizeAmount","getContractBalance","balance","buildBetTransaction","betAmount","senderAddress","betAmountNano","Date","now","Math","floor","random","addressesMatch","usingEnvAddress","payload","toBoc","opCode","loadUint","decodedQueryId","concat","padStart","isCorrectOpCode","matches","transaction","validUntil","messages","destinationAddress","amountTON","isGoingToContract","buildStartJackpotTransaction","buildEndJackpotTransaction","getContractState","totalJackpot","isActive","betCount","lastWinner","lastPrizeAmount","contractBalance","Promise","all","timestamp","message","jackpotContract","formatTonAmount","toFixed","formatAddress","decodePlaceBetMessage","base64Payload","fromBase64","isValid"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/jackpotContract.js"],"sourcesContent":["import { Address, beginCell, Cell, toNano } from '@ton/core';\r\nimport { TonClient } from '@ton/ton';\r\n\r\n// Contract configuration\r\nexport const JACKPOT_CONTRACT_CONFIG = {\r\n  // ⚠️ IMPORTANT: Replace this with your actual deployed contract address!\r\n  // This is just a placeholder - transactions will fail with wrong address\r\n  address: process.env.REACT_APP_CONTRACT_ADDRESS || \"REPLACE_WITH_YOUR_ACTUAL_CONTRACT_ADDRESS\",\r\n  \r\n  // Admin configuration - in production, use environment variables\r\n  adminMnemonic: \"cabin flame border diary parent web extend stable hungry cabin alley cable bulk nasty learn toe recipe pluck memory twist wheel boost execute caution\".split(' ') || [],\r\n  \r\n  // TON Client configuration\r\n  endpoint: process.env.REACT_APP_TON_ENDPOINT || 'https://toncenter.com/api/v2/jsonRPC',\r\n  apiKey: \"cb6a181146fafbe2adc51d3a21d27341aa8a93cbf581e03a80e9e7203a3abd65\"\r\n};\r\n\r\n// Message constructors for contract interactions\r\nexport const ContractMessages = {\r\n  // Admin messages\r\n  startJackpot: (queryId = 0) => {\r\n    return beginCell()\r\n      .storeUint(0x12345678, 32) // Replace with actual op code\r\n      .storeUint(queryId, 64)\r\n      .endCell();\r\n  },\r\n\r\n  endJackpot: (queryId = 0) => {\r\n    return beginCell()\r\n      .storeUint(0x87654321, 32) // Replace with actual op code  \r\n      .storeUint(queryId, 64)\r\n      .endCell();\r\n  },\r\n\r\n  placeBet: (queryId = 0) => {\r\n    return beginCell()\r\n      .storeUint(0x03, 32) // PlaceBet opcode as specified in contract\r\n      .storeUint(queryId, 64) // query_id as uint64\r\n      .endCell();\r\n  }\r\n};\r\n\r\nexport class JackpotContract {\r\n  constructor() {\r\n    this.client = new TonClient({\r\n      endpoint: JACKPOT_CONTRACT_CONFIG.endpoint,\r\n      apiKey: JACKPOT_CONTRACT_CONFIG.apiKey\r\n    });\r\n    \r\n    this.contractAddress = Address.parse(\"EQAO-eknIHULYsinQdpEb8oPVQy6eUXz0-zAPTKi1QTAJkjo\");\r\n    \r\n    // Debug contract address on initialization\r\n    console.log('🏗️ JackpotContract initialized:', {\r\n      configAddress: JACKPOT_CONTRACT_CONFIG.address,\r\n      parsedAddress: this.contractAddress.toString(),\r\n      fromEnv: !!process.env.REACT_APP_CONTRACT_ADDRESS\r\n    });\r\n  }\r\n\r\n  // Contract getters - these call the smart contract's get methods\r\n  async getTotalJackpot() {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"getTotalJackpot\"\r\n      );\r\n      \r\n      // Parse the result from stack\r\n      const jackpotAmount = result.stack.readBigNumber();\r\n      return Number(jackpotAmount) / 1e9; // Convert from nanotons to TON\r\n    } catch (error) {\r\n      console.error('Error fetching jackpot amount:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  async isJackpotActive() {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"isJackpotActive\"\r\n      );\r\n      \r\n      return result.stack.readBoolean();\r\n    } catch (error) {\r\n      console.error('Error fetching jackpot status:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getBetCount() {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"getBetCount\"\r\n      );\r\n      \r\n      return result.stack.readNumber();\r\n    } catch (error) {\r\n      console.error('Error fetching bet count:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  async getBettorAmount(bettorAddress) {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"getBettorAmount\",\r\n        [\r\n          { type: 'slice', cell: beginCell().storeAddress(Address.parse(bettorAddress)).endCell() }\r\n        ]\r\n      );\r\n      \r\n      const amount = result.stack.readBigNumber();\r\n      return Number(amount) / 1e9; // Convert from nanotons to TON\r\n    } catch (error) {\r\n      console.error('Error fetching bettor amount:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  async getWinningProbability(bettorAddress) {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"getWinningProbability\",\r\n        [\r\n          { type: 'slice', cell: beginCell().storeAddress(Address.parse(bettorAddress)).endCell() }\r\n        ]\r\n      );\r\n      \r\n      const probability = result.stack.readNumber();\r\n      return probability / 100; // Convert from basis points to percentage\r\n    } catch (error) {\r\n      console.error('Error fetching winning probability:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  async getAllBettors() {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"getAllBettors\"\r\n      );\r\n      \r\n      // Parse the dictionary result\r\n      // This will return a map of addresses to amounts\r\n      const bettorsDict = result.stack.readCellOpt();\r\n      \r\n      if (!bettorsDict) return {};\r\n      \r\n      // Parse the dictionary - implementation depends on exact contract structure\r\n      // For now, return empty object - you'll need to implement dictionary parsing\r\n      return {};\r\n    } catch (error) {\r\n      console.error('Error fetching all bettors:', error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  async getLastWinner() {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"getLastWinner\"\r\n      );\r\n      \r\n      const winnerCell = result.stack.readCellOpt();\r\n      if (!winnerCell) return null;\r\n      \r\n      // Parse address from cell\r\n      const slice = winnerCell.beginParse();\r\n      const winnerAddress = slice.loadAddress();\r\n      \r\n      return winnerAddress?.toString();\r\n    } catch (error) {\r\n      console.error('Error fetching last winner:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getLastPrizeAmount() {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"getLastPrizeAmount\"\r\n      );\r\n      \r\n      const prizeAmount = result.stack.readBigNumber();\r\n      return Number(prizeAmount) / 1e9; // Convert from nanotons to TON\r\n    } catch (error) {\r\n      console.error('Error fetching last prize amount:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  async getContractBalance() {\r\n    try {\r\n      const result = await this.client.runMethod(\r\n        this.contractAddress,\r\n        \"getBalance\"\r\n      );\r\n      \r\n      const balance = result.stack.readBigNumber();\r\n      return Number(balance) / 1e9; // Convert from nanotons to TON\r\n    } catch (error) {\r\n      console.error('Error fetching contract balance:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Transaction builders for sending to the contract\r\n  buildBetTransaction(betAmount, senderAddress) {\r\n    const betAmountNano = toNano(betAmount.toString());\r\n    // Generate unique query_id for this bet\r\n    const queryId = Date.now() * 1000 + Math.floor(Math.random() * 1000);\r\n    \r\n    console.log(`🔧 Building bet transaction:`, {\r\n      betAmount: betAmount + ' TON',\r\n      betAmountNano: betAmountNano.toString(),\r\n      queryId,\r\n      senderAddress,\r\n      contractAddress: this.contractAddress.toString(),\r\n      // Check if contract address equals sender address (this would be wrong!)\r\n      addressesMatch: this.contractAddress.toString() === senderAddress,\r\n      usingEnvAddress: !!process.env.REACT_APP_CONTRACT_ADDRESS\r\n    });\r\n    \r\n    const payload = ContractMessages.placeBet(queryId);\r\n    console.log(`📦 PlaceBet message payload:`, payload.toBoc().toString('base64'));\r\n    \r\n    // Verify the message structure immediately\r\n    try {\r\n      const cell = payload;\r\n      const slice = cell.beginParse();\r\n      const opCode = slice.loadUint(32);\r\n      const decodedQueryId = slice.loadUint(64);\r\n      \r\n      console.log(`✅ Message verification:`, {\r\n        opCode: `0x${opCode.toString(16).padStart(2, '0')}`,\r\n        queryId: decodedQueryId,\r\n        isCorrectOpCode: opCode === 0x03,\r\n        matches: queryId === decodedQueryId\r\n      });\r\n    } catch (error) {\r\n      console.error('❌ Message verification failed:', error);\r\n    }\r\n    \r\n    const transaction = {\r\n      validUntil: Math.floor(Date.now() / 1000) + 600, // 10 minutes\r\n      messages: [\r\n        {\r\n          address: this.contractAddress.toString(),\r\n          amount: betAmountNano.toString(),\r\n          payload: payload.toBoc().toString('base64')\r\n        }\r\n      ]\r\n    };\r\n    \r\n    console.log(`🎯 Final transaction will be sent to:`, {\r\n      destinationAddress: transaction.messages[0].address,\r\n      amount: transaction.messages[0].amount + ' nanotons',\r\n      amountTON: betAmount + ' TON',\r\n      senderAddress: senderAddress,\r\n      isGoingToContract: transaction.messages[0].address !== senderAddress\r\n    });\r\n    \r\n    return transaction;\r\n  }\r\n\r\n  buildStartJackpotTransaction() {\r\n    return {\r\n      validUntil: Math.floor(Date.now() / 1000) + 600, // 10 minutes\r\n      messages: [\r\n        {\r\n          address: this.contractAddress.toString(),\r\n          amount: toNano('0.05').toString(), // Gas fee\r\n          payload: ContractMessages.startJackpot(Date.now()).toBoc().toString('base64')\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  buildEndJackpotTransaction() {\r\n    return {\r\n      validUntil: Math.floor(Date.now() / 1000) + 600, // 10 minutes\r\n      messages: [\r\n        {\r\n          address: this.contractAddress.toString(),\r\n          amount: toNano('0.05').toString(), // Gas fee\r\n          payload: ContractMessages.endJackpot(Date.now()).toBoc().toString('base64')\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  // Utility method to get comprehensive contract state\r\n  async getContractState() {\r\n    try {\r\n      const [\r\n        totalJackpot,\r\n        isActive,\r\n        betCount,\r\n        lastWinner,\r\n        lastPrizeAmount,\r\n        contractBalance\r\n      ] = await Promise.all([\r\n        this.getTotalJackpot(),\r\n        this.isJackpotActive(),\r\n        this.getBetCount(),\r\n        this.getLastWinner(),\r\n        this.getLastPrizeAmount(),\r\n        this.getContractBalance()\r\n      ]);\r\n\r\n      return {\r\n        totalJackpot,\r\n        isActive,\r\n        betCount,\r\n        lastWinner,\r\n        lastPrizeAmount,\r\n        contractBalance,\r\n        timestamp: Date.now()\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching contract state:', error);\r\n      return {\r\n        totalJackpot: 0,\r\n        isActive: false,\r\n        betCount: 0,\r\n        lastWinner: null,\r\n        lastPrizeAmount: 0,\r\n        contractBalance: 0,\r\n        timestamp: Date.now(),\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nexport const jackpotContract = new JackpotContract();\r\n\r\n// Export utility functions\r\nexport const formatTonAmount = (amount) => {\r\n  return Number(amount).toFixed(3);\r\n};\r\n\r\nexport const formatAddress = (address) => {\r\n  if (!address) return '';\r\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n};\r\n\r\n// Utility function to decode and verify PlaceBet message\r\nexport const decodePlaceBetMessage = (base64Payload) => {\r\n  try {\r\n    const cell = Cell.fromBase64(base64Payload);\r\n    const slice = cell.beginParse();\r\n    \r\n    const opCode = slice.loadUint(32);\r\n    const queryId = slice.loadUint(64);\r\n    \r\n    console.log(`🔍 Decoded PlaceBet message:`, {\r\n      opCode: `0x${opCode.toString(16).padStart(2, '0')}`,\r\n      queryId,\r\n      isCorrectOpCode: opCode === 0x03\r\n    });\r\n    \r\n    return {\r\n      opCode,\r\n      queryId,\r\n      isValid: opCode === 0x03\r\n    };\r\n  } catch (error) {\r\n    console.error('Error decoding PlaceBet message:', error);\r\n    return null;\r\n  }\r\n}; "],"mappings":"AAAA,OAASA,OAAO,CAAEC,SAAS,CAAEC,IAAI,CAAEC,MAAM,KAAQ,WAAW,CAC5D,OAASC,SAAS,KAAQ,UAAU,CAEpC;AACA,MAAO,MAAM,CAAAC,uBAAuB,CAAG,CACrC;AACA;AACAC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B,EAAI,2CAA2C,CAE9F;AACAC,aAAa,CAAE,uJAAuJ,CAACC,KAAK,CAAC,GAAG,CAAC,EAAI,EAAE,CAEvL;AACAC,QAAQ,CAAEL,OAAO,CAACC,GAAG,CAACK,sBAAsB,EAAI,sCAAsC,CACtFC,MAAM,CAAE,kEACV,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,CAC9B;AACAC,YAAY,CAAE,QAAAA,CAAA,CAAiB,IAAhB,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACxB,MAAO,CAAAjB,SAAS,CAAC,CAAC,CACfoB,SAAS,CAAC,UAAU,CAAE,EAAE,CAAE;AAAA,CAC1BA,SAAS,CAACJ,OAAO,CAAE,EAAE,CAAC,CACtBK,OAAO,CAAC,CAAC,CACd,CAAC,CAEDC,UAAU,CAAE,QAAAA,CAAA,CAAiB,IAAhB,CAAAN,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACtB,MAAO,CAAAjB,SAAS,CAAC,CAAC,CACfoB,SAAS,CAAC,UAAU,CAAE,EAAE,CAAE;AAAA,CAC1BA,SAAS,CAACJ,OAAO,CAAE,EAAE,CAAC,CACtBK,OAAO,CAAC,CAAC,CACd,CAAC,CAEDE,QAAQ,CAAE,QAAAA,CAAA,CAAiB,IAAhB,CAAAP,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACpB,MAAO,CAAAjB,SAAS,CAAC,CAAC,CACfoB,SAAS,CAAC,IAAI,CAAE,EAAE,CAAE;AAAA,CACpBA,SAAS,CAACJ,OAAO,CAAE,EAAE,CAAE;AAAA,CACvBK,OAAO,CAAC,CAAC,CACd,CACF,CAAC,CAED,MAAO,MAAM,CAAAG,eAAgB,CAC3BC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,MAAM,CAAG,GAAI,CAAAvB,SAAS,CAAC,CAC1BQ,QAAQ,CAAEP,uBAAuB,CAACO,QAAQ,CAC1CE,MAAM,CAAET,uBAAuB,CAACS,MAClC,CAAC,CAAC,CAEF,IAAI,CAACc,eAAe,CAAG5B,OAAO,CAAC6B,KAAK,CAAC,kDAAkD,CAAC,CAExF;AACAC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAE,CAC9CC,aAAa,CAAE3B,uBAAuB,CAACC,OAAO,CAC9C2B,aAAa,CAAE,IAAI,CAACL,eAAe,CAACM,QAAQ,CAAC,CAAC,CAC9CC,OAAO,CAAE,CAAC,CAAC5B,OAAO,CAACC,GAAG,CAACC,0BACzB,CAAC,CAAC,CACJ,CAEA;AACA,KAAM,CAAA2B,eAAeA,CAAA,CAAG,CACtB,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,iBACF,CAAC,CAED;AACA,KAAM,CAAAW,aAAa,CAAGF,MAAM,CAACG,KAAK,CAACC,aAAa,CAAC,CAAC,CAClD,MAAO,CAAAC,MAAM,CAACH,aAAa,CAAC,CAAG,GAAG,CAAE;AACtC,CAAE,MAAOI,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,EAAC,CACV,CACF,CAEA,KAAM,CAAAC,eAAeA,CAAA,CAAG,CACtB,GAAI,CACF,KAAM,CAAAP,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,iBACF,CAAC,CAED,MAAO,CAAAS,MAAM,CAACG,KAAK,CAACK,WAAW,CAAC,CAAC,CACnC,CAAE,MAAOF,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,MAAK,CACd,CACF,CAEA,KAAM,CAAAG,WAAWA,CAAA,CAAG,CAClB,GAAI,CACF,KAAM,CAAAT,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,aACF,CAAC,CAED,MAAO,CAAAS,MAAM,CAACG,KAAK,CAACO,UAAU,CAAC,CAAC,CAClC,CAAE,MAAOJ,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,MAAO,EAAC,CACV,CACF,CAEA,KAAM,CAAAK,eAAeA,CAACC,aAAa,CAAE,CACnC,GAAI,CACF,KAAM,CAAAZ,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,iBAAiB,CACjB,CACE,CAAEsB,IAAI,CAAE,OAAO,CAAEC,IAAI,CAAElD,SAAS,CAAC,CAAC,CAACmD,YAAY,CAACpD,OAAO,CAAC6B,KAAK,CAACoB,aAAa,CAAC,CAAC,CAAC3B,OAAO,CAAC,CAAE,CAAC,CAE7F,CAAC,CAED,KAAM,CAAA+B,MAAM,CAAGhB,MAAM,CAACG,KAAK,CAACC,aAAa,CAAC,CAAC,CAC3C,MAAO,CAAAC,MAAM,CAACW,MAAM,CAAC,CAAG,GAAG,CAAE;AAC/B,CAAE,MAAOV,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,MAAO,EAAC,CACV,CACF,CAEA,KAAM,CAAAW,qBAAqBA,CAACL,aAAa,CAAE,CACzC,GAAI,CACF,KAAM,CAAAZ,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,uBAAuB,CACvB,CACE,CAAEsB,IAAI,CAAE,OAAO,CAAEC,IAAI,CAAElD,SAAS,CAAC,CAAC,CAACmD,YAAY,CAACpD,OAAO,CAAC6B,KAAK,CAACoB,aAAa,CAAC,CAAC,CAAC3B,OAAO,CAAC,CAAE,CAAC,CAE7F,CAAC,CAED,KAAM,CAAAiC,WAAW,CAAGlB,MAAM,CAACG,KAAK,CAACO,UAAU,CAAC,CAAC,CAC7C,MAAO,CAAAQ,WAAW,CAAG,GAAG,CAAE;AAC5B,CAAE,MAAOZ,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC3D,MAAO,EAAC,CACV,CACF,CAEA,KAAM,CAAAa,aAAaA,CAAA,CAAG,CACpB,GAAI,CACF,KAAM,CAAAnB,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,eACF,CAAC,CAED;AACA;AACA,KAAM,CAAA6B,WAAW,CAAGpB,MAAM,CAACG,KAAK,CAACkB,WAAW,CAAC,CAAC,CAE9C,GAAI,CAACD,WAAW,CAAE,MAAO,CAAC,CAAC,CAE3B;AACA;AACA,MAAO,CAAC,CAAC,CACX,CAAE,MAAOd,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,CAAC,CAAC,CACX,CACF,CAEA,KAAM,CAAAgB,aAAaA,CAAA,CAAG,CACpB,GAAI,CACF,KAAM,CAAAtB,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,eACF,CAAC,CAED,KAAM,CAAAgC,UAAU,CAAGvB,MAAM,CAACG,KAAK,CAACkB,WAAW,CAAC,CAAC,CAC7C,GAAI,CAACE,UAAU,CAAE,MAAO,KAAI,CAE5B;AACA,KAAM,CAAAC,KAAK,CAAGD,UAAU,CAACE,UAAU,CAAC,CAAC,CACrC,KAAM,CAAAC,aAAa,CAAGF,KAAK,CAACG,WAAW,CAAC,CAAC,CAEzC,MAAO,CAAAD,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAE7B,QAAQ,CAAC,CAAC,CAClC,CAAE,MAAOS,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,KAAI,CACb,CACF,CAEA,KAAM,CAAAsB,kBAAkBA,CAAA,CAAG,CACzB,GAAI,CACF,KAAM,CAAA5B,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,oBACF,CAAC,CAED,KAAM,CAAAsC,WAAW,CAAG7B,MAAM,CAACG,KAAK,CAACC,aAAa,CAAC,CAAC,CAChD,MAAO,CAAAC,MAAM,CAACwB,WAAW,CAAC,CAAG,GAAG,CAAE;AACpC,CAAE,MAAOvB,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,EAAC,CACV,CACF,CAEA,KAAM,CAAAwB,kBAAkBA,CAAA,CAAG,CACzB,GAAI,CACF,KAAM,CAAA9B,MAAM,CAAG,KAAM,KAAI,CAACV,MAAM,CAACW,SAAS,CACxC,IAAI,CAACV,eAAe,CACpB,YACF,CAAC,CAED,KAAM,CAAAwC,OAAO,CAAG/B,MAAM,CAACG,KAAK,CAACC,aAAa,CAAC,CAAC,CAC5C,MAAO,CAAAC,MAAM,CAAC0B,OAAO,CAAC,CAAG,GAAG,CAAE;AAChC,CAAE,MAAOzB,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,EAAC,CACV,CACF,CAEA;AACA0B,mBAAmBA,CAACC,SAAS,CAAEC,aAAa,CAAE,CAC5C,KAAM,CAAAC,aAAa,CAAGrE,MAAM,CAACmE,SAAS,CAACpC,QAAQ,CAAC,CAAC,CAAC,CAClD;AACA,KAAM,CAAAjB,OAAO,CAAGwD,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,IAAI,CAAC,CAEpE/C,OAAO,CAACC,GAAG,0CAAiC,CAC1CuC,SAAS,CAAEA,SAAS,CAAG,MAAM,CAC7BE,aAAa,CAAEA,aAAa,CAACtC,QAAQ,CAAC,CAAC,CACvCjB,OAAO,CACPsD,aAAa,CACb3C,eAAe,CAAE,IAAI,CAACA,eAAe,CAACM,QAAQ,CAAC,CAAC,CAChD;AACA4C,cAAc,CAAE,IAAI,CAAClD,eAAe,CAACM,QAAQ,CAAC,CAAC,GAAKqC,aAAa,CACjEQ,eAAe,CAAE,CAAC,CAACxE,OAAO,CAACC,GAAG,CAACC,0BACjC,CAAC,CAAC,CAEF,KAAM,CAAAuE,OAAO,CAAGjE,gBAAgB,CAACS,QAAQ,CAACP,OAAO,CAAC,CAClDa,OAAO,CAACC,GAAG,0CAAiCiD,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC/C,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAE/E;AACA,GAAI,CACF,KAAM,CAAAiB,IAAI,CAAG6B,OAAO,CACpB,KAAM,CAAAnB,KAAK,CAAGV,IAAI,CAACW,UAAU,CAAC,CAAC,CAC/B,KAAM,CAAAoB,MAAM,CAAGrB,KAAK,CAACsB,QAAQ,CAAC,EAAE,CAAC,CACjC,KAAM,CAAAC,cAAc,CAAGvB,KAAK,CAACsB,QAAQ,CAAC,EAAE,CAAC,CAEzCrD,OAAO,CAACC,GAAG,gCAA4B,CACrCmD,MAAM,MAAAG,MAAA,CAAOH,MAAM,CAAChD,QAAQ,CAAC,EAAE,CAAC,CAACoD,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAE,CACnDrE,OAAO,CAAEmE,cAAc,CACvBG,eAAe,CAAEL,MAAM,GAAK,IAAI,CAChCM,OAAO,CAAEvE,OAAO,GAAKmE,cACvB,CAAC,CAAC,CACJ,CAAE,MAAOzC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACxD,CAEA,KAAM,CAAA8C,WAAW,CAAG,CAClBC,UAAU,CAAEf,IAAI,CAACC,KAAK,CAACH,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAC,CAAG,GAAG,CAAE;AACjDiB,QAAQ,CAAE,CACR,CACErF,OAAO,CAAE,IAAI,CAACsB,eAAe,CAACM,QAAQ,CAAC,CAAC,CACxCmB,MAAM,CAAEmB,aAAa,CAACtC,QAAQ,CAAC,CAAC,CAChC8C,OAAO,CAAEA,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC/C,QAAQ,CAAC,QAAQ,CAC5C,CAAC,CAEL,CAAC,CAEDJ,OAAO,CAACC,GAAG,mDAA0C,CACnD6D,kBAAkB,CAAEH,WAAW,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACrF,OAAO,CACnD+C,MAAM,CAAEoC,WAAW,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACtC,MAAM,CAAG,WAAW,CACpDwC,SAAS,CAAEvB,SAAS,CAAG,MAAM,CAC7BC,aAAa,CAAEA,aAAa,CAC5BuB,iBAAiB,CAAEL,WAAW,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACrF,OAAO,GAAKiE,aACzD,CAAC,CAAC,CAEF,MAAO,CAAAkB,WAAW,CACpB,CAEAM,4BAA4BA,CAAA,CAAG,CAC7B,MAAO,CACLL,UAAU,CAAEf,IAAI,CAACC,KAAK,CAACH,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAC,CAAG,GAAG,CAAE;AACjDiB,QAAQ,CAAE,CACR,CACErF,OAAO,CAAE,IAAI,CAACsB,eAAe,CAACM,QAAQ,CAAC,CAAC,CACxCmB,MAAM,CAAElD,MAAM,CAAC,MAAM,CAAC,CAAC+B,QAAQ,CAAC,CAAC,CAAE;AACnC8C,OAAO,CAAEjE,gBAAgB,CAACC,YAAY,CAACyD,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAACO,KAAK,CAAC,CAAC,CAAC/C,QAAQ,CAAC,QAAQ,CAC9E,CAAC,CAEL,CAAC,CACH,CAEA8D,0BAA0BA,CAAA,CAAG,CAC3B,MAAO,CACLN,UAAU,CAAEf,IAAI,CAACC,KAAK,CAACH,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAC,CAAG,GAAG,CAAE;AACjDiB,QAAQ,CAAE,CACR,CACErF,OAAO,CAAE,IAAI,CAACsB,eAAe,CAACM,QAAQ,CAAC,CAAC,CACxCmB,MAAM,CAAElD,MAAM,CAAC,MAAM,CAAC,CAAC+B,QAAQ,CAAC,CAAC,CAAE;AACnC8C,OAAO,CAAEjE,gBAAgB,CAACQ,UAAU,CAACkD,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAACO,KAAK,CAAC,CAAC,CAAC/C,QAAQ,CAAC,QAAQ,CAC5E,CAAC,CAEL,CAAC,CACH,CAEA;AACA,KAAM,CAAA+D,gBAAgBA,CAAA,CAAG,CACvB,GAAI,CACF,KAAM,CACJC,YAAY,CACZC,QAAQ,CACRC,QAAQ,CACRC,UAAU,CACVC,eAAe,CACfC,eAAe,CAChB,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CACpB,IAAI,CAACrE,eAAe,CAAC,CAAC,CACtB,IAAI,CAACQ,eAAe,CAAC,CAAC,CACtB,IAAI,CAACE,WAAW,CAAC,CAAC,CAClB,IAAI,CAACa,aAAa,CAAC,CAAC,CACpB,IAAI,CAACM,kBAAkB,CAAC,CAAC,CACzB,IAAI,CAACE,kBAAkB,CAAC,CAAC,CAC1B,CAAC,CAEF,MAAO,CACL+B,YAAY,CACZC,QAAQ,CACRC,QAAQ,CACRC,UAAU,CACVC,eAAe,CACfC,eAAe,CACfG,SAAS,CAAEjC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CACH,CAAE,MAAO/B,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,CACLuD,YAAY,CAAE,CAAC,CACfC,QAAQ,CAAE,KAAK,CACfC,QAAQ,CAAE,CAAC,CACXC,UAAU,CAAE,IAAI,CAChBC,eAAe,CAAE,CAAC,CAClBC,eAAe,CAAE,CAAC,CAClBG,SAAS,CAAEjC,IAAI,CAACC,GAAG,CAAC,CAAC,CACrB/B,KAAK,CAAEA,KAAK,CAACgE,OACf,CAAC,CACH,CACF,CACF,CAEA;AACA,MAAO,MAAM,CAAAC,eAAe,CAAG,GAAI,CAAAnF,eAAe,CAAC,CAAC,CAEpD;AACA,MAAO,MAAM,CAAAoF,eAAe,CAAIxD,MAAM,EAAK,CACzC,MAAO,CAAAX,MAAM,CAACW,MAAM,CAAC,CAACyD,OAAO,CAAC,CAAC,CAAC,CAClC,CAAC,CAED,MAAO,MAAM,CAAAC,aAAa,CAAIzG,OAAO,EAAK,CACxC,GAAI,CAACA,OAAO,CAAE,MAAO,EAAE,CACvB,SAAA+E,MAAA,CAAU/E,OAAO,CAACuD,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,QAAAwB,MAAA,CAAM/E,OAAO,CAACuD,KAAK,CAAC,CAAC,CAAC,CAAC,EACtD,CAAC,CAED;AACA,MAAO,MAAM,CAAAmD,qBAAqB,CAAIC,aAAa,EAAK,CACtD,GAAI,CACF,KAAM,CAAA9D,IAAI,CAAGjD,IAAI,CAACgH,UAAU,CAACD,aAAa,CAAC,CAC3C,KAAM,CAAApD,KAAK,CAAGV,IAAI,CAACW,UAAU,CAAC,CAAC,CAE/B,KAAM,CAAAoB,MAAM,CAAGrB,KAAK,CAACsB,QAAQ,CAAC,EAAE,CAAC,CACjC,KAAM,CAAAlE,OAAO,CAAG4C,KAAK,CAACsB,QAAQ,CAAC,EAAE,CAAC,CAElCrD,OAAO,CAACC,GAAG,0CAAiC,CAC1CmD,MAAM,MAAAG,MAAA,CAAOH,MAAM,CAAChD,QAAQ,CAAC,EAAE,CAAC,CAACoD,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAE,CACnDrE,OAAO,CACPsE,eAAe,CAAEL,MAAM,GAAK,IAC9B,CAAC,CAAC,CAEF,MAAO,CACLA,MAAM,CACNjE,OAAO,CACPkG,OAAO,CAAEjC,MAAM,GAAK,IACtB,CAAC,CACH,CAAE,MAAOvC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,KAAI,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}