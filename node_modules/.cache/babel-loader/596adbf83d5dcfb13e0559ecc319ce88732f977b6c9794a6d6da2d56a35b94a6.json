{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const [showWinnerStyling, setShowWinnerStyling] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', {\n        hasSwiper: !!swiperRef.current,\n        hasWinner: !!winner,\n        isActive: winnerAnimationActive\n      });\n      return;\n    }\n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    setWinnerAnimationActive(true);\n\n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // STEP 1: SIMPLE - Find winner in players array (no DOM searching needed!)\n    console.log('🔍 Finding winner in players array...');\n    console.log('🔍 Winner data:', {\n      username: winner === null || winner === void 0 ? void 0 : winner.username,\n      address: winner === null || winner === void 0 ? void 0 : winner.address\n    });\n    console.log('🔍 Players array:', players.map((p, i) => ({\n      index: i,\n      username: p === null || p === void 0 ? void 0 : p.username,\n      address: p === null || p === void 0 ? void 0 : p.address\n    })));\n\n    // Find winner position in players array directly\n    let realIndex = players.findIndex(player => {\n      if (!player) return false;\n\n      // Simple matching - check address first (most reliable), then username\n      return player.address === winner.address || player.address === winner.winner || player.username === winner.username || player.username === winner.displayName;\n    });\n    if (realIndex === -1) {\n      console.warn('⚠️ Winner not found in players array - using first player as fallback');\n      realIndex = players.findIndex(player => player !== null);\n      if (realIndex === -1) {\n        console.error('💥 No players found at all!');\n        setWinnerAnimationActive(false);\n        setShowWinnerStyling(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        return;\n      }\n    }\n    console.log('✅ Winner found at players array index:', realIndex);\n    console.log('🎯 Target position for animation:', realIndex);\n\n    // STEP 2: Simple but effective slot machine animation\n    console.log('🎰 Starting slot machine animation...');\n    let moveCount = 0;\n    const maxMoves = 10; // Fixed number for consistency\n    let isLanding = false; // Prevent multiple landings\n\n    const moveToNext = () => {\n      if (!swiperRef.current || isLanding) {\n        console.log('🚫 Animation stopped or already landing');\n        return;\n      }\n      moveCount++;\n      console.log(`🎰 Move ${moveCount}/${maxMoves}`);\n\n      // Calculate speed - gets slower over time\n      let speed = 150;\n      let delay = 200;\n      if (moveCount > 7) {\n        // Very slow in final moves\n        speed = 400 + moveCount * 100;\n        delay = 500 + moveCount * 150;\n        console.log(`🎯 Final moves - very slow (${speed}ms)`);\n      } else if (moveCount > 4) {\n        // Medium slow in middle\n        speed = 250 + moveCount * 50;\n        delay = 300 + moveCount * 50;\n        console.log(`🎰 Slowing down (${speed}ms)`);\n      }\n\n      // Move one step\n      swiperRef.current.slideNext(speed);\n\n      // Check if we should land\n      if (moveCount >= maxMoves) {\n        console.log('🏆 Time to land on winner!');\n        isLanding = true;\n\n        // NEW SIMPLE SYSTEM: Land on winner naturally without rollback\n        setTimeout(() => {\n          console.log('🎯 Landing on winner slide...');\n\n          // Get current position\n          const currentActive = swiperRef.current.activeIndex;\n          const slidesPerSet = players.length;\n          console.log(`🎯 Current position: ${currentActive}, Target real index: ${realIndex}`);\n\n          // Calculate how many steps forward to reach the winner position\n          // We want to land on realIndex position within the current cycle\n          let stepsToWinner = 0;\n          let currentRealIndex = currentActive % slidesPerSet;\n\n          // Calculate forward distance to winner\n          if (realIndex >= currentRealIndex) {\n            stepsToWinner = realIndex - currentRealIndex;\n          } else {\n            // Wrap around (go to next cycle)\n            stepsToWinner = slidesPerSet - currentRealIndex + realIndex;\n          }\n\n          // If steps is too far, find closer path in loop\n          if (stepsToWinner > slidesPerSet / 2) {\n            // Go backwards instead (previous cycle)\n            stepsToWinner = stepsToWinner - slidesPerSet;\n          }\n          console.log(`🎯 Steps to winner: ${stepsToWinner} (from real ${currentRealIndex} to ${realIndex})`);\n\n          // Move step by step to winner for smooth natural landing\n          let currentStep = 0;\n          const landingSteps = Math.abs(stepsToWinner);\n          const stepToWinner = () => {\n            if (!swiperRef.current || currentStep >= landingSteps) {\n              // Reached winner - IMMEDIATE HARD LOCK\n              console.log('🏆 Landed on winner - HARD LOCKING!');\n              if (swiperRef.current) {\n                var _swiperRef$current$au;\n                // IMMEDIATELY stop everything\n                (_swiperRef$current$au = swiperRef.current.autoplay) === null || _swiperRef$current$au === void 0 ? void 0 : _swiperRef$current$au.stop();\n                swiperRef.current.allowSlideNext = false;\n                swiperRef.current.allowSlidePrev = false;\n                swiperRef.current.allowTouchMove = false;\n\n                // FORCE stop all transitions immediately\n                const wrapper = swiperRef.current.wrapperEl;\n                if (wrapper) {\n                  wrapper.style.transition = 'none !important';\n                  wrapper.style.transform = getComputedStyle(wrapper).transform;\n\n                  // Double-check - force stop any ongoing transitions\n                  setTimeout(() => {\n                    wrapper.style.transition = 'none';\n                    wrapper.style.transform = getComputedStyle(wrapper).transform;\n                  }, 50);\n                }\n\n                // Disable any swiper animations\n                swiperRef.current.params.speed = 0;\n\n                // Force destroy any pending animations\n                if (swiperRef.current.animating) {\n                  swiperRef.current.animating = false;\n                }\n              }\n              setWinnerLocked(true);\n              setWinnerAnimationActive(false);\n\n              // NOW show the winner styling (green highlight + crown + prize)\n              console.log('🎉 NOW showing winner in green!');\n              setShowWinnerStyling(true);\n              onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n              console.log('✅ Winner animation complete and LOCKED!');\n              return;\n            }\n            currentStep++;\n            console.log(`🎯 Landing step ${currentStep}/${landingSteps}`);\n\n            // Move one step toward winner\n            if (stepsToWinner > 0) {\n              swiperRef.current.slideNext(400);\n            } else if (stepsToWinner < 0) {\n              swiperRef.current.slidePrev(400);\n            }\n\n            // Continue to next step\n            setTimeout(() => {\n              stepToWinner();\n            }, 450);\n          };\n\n          // Start step-by-step landing\n          if (landingSteps > 0) {\n            stepToWinner();\n          } else {\n            // Already on winner position\n            console.log('🏆 Already on winner position - locking!');\n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              swiperRef.current.allowTouchMove = false;\n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                wrapper.style.transition = 'none';\n              }\n            }\n            setWinnerLocked(true);\n            setWinnerAnimationActive(false);\n            setShowWinnerStyling(true);\n            onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n            console.log('✅ Winner animation complete!');\n          }\n        }, delay);\n        return;\n      }\n\n      // Continue moving\n      setTimeout(() => {\n        moveToNext();\n      }, delay);\n    };\n\n    // Start animation\n    setTimeout(() => {\n      moveToNext();\n    }, 300);\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    console.log('🔒 Locking on winner...');\n\n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Looking for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon = playerNameEl.textContent) === null || _playerNameEl$textCon === void 0 ? void 0 : _playerNameEl$textCon.trim();\n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n\n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n\n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        }\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n      }\n\n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n\n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n\n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n\n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n\n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n\n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n\n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n\n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    setShowWinnerStyling(false); // Reset winner styling\n\n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('🚫 No winner, skipping animation');\n      setShowWinnerStyling(false); // Hide winner styling when no winner\n      return;\n    }\n    if (winnerAnimationActive) {\n      console.log('🚫 Animation already active, skipping');\n      return;\n    }\n    if (winnerLocked) {\n      console.log('🚫 Winner already locked, skipping');\n      return;\n    }\n\n    // Reset winner styling for new animation\n    setShowWinnerStyling(false);\n    console.log('🎰 Starting animation - winner styling hidden until animation completes');\n\n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n\n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('🆕 New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n\n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('🎯 Forcing winner display without animation');\n\n      // Just show the winner without animation\n      setWinnerLocked(true);\n      setShowWinnerStyling(true); // Show styling immediately if no animation\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n      // NO AUTO-RESET - let game logic handle it\n      console.log('🎯 Winner locked without animation - waiting for new round');\n      return;\n    }\n    console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    animationAttemptsRef.current++;\n\n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${winnerAnimationActive && !winnerLocked ? 'winner-approaching' : winnerLocked ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: Math.max(players.length, 6),\n      autoplay: {\n        delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: 300,\n      className: `player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(2)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 19\n            }, this), showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 17\n          }, this), showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 553,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"nnZifd35lS0KVAw5e4vmaMqUjLs=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","winnerAnimationActive","setWinnerAnimationActive","winnerLocked","setWinnerLocked","showWinnerStyling","setShowWinnerStyling","winnerTimeoutRef","animationAttemptsRef","lastWinnerRef","handleSwiperInit","swiper","current","animateToWinner","console","log","hasSwiper","hasWinner","isActive","autoplay","stop","username","address","map","p","i","index","realIndex","findIndex","player","displayName","warn","error","moveCount","maxMoves","isLanding","moveToNext","speed","delay","slideNext","setTimeout","currentActive","activeIndex","slidesPerSet","length","stepsToWinner","currentRealIndex","currentStep","landingSteps","Math","abs","stepToWinner","_swiperRef$current$au","allowSlideNext","allowSlidePrev","allowTouchMove","wrapper","wrapperEl","style","transition","transform","getComputedStyle","params","animating","slidePrev","lockOnWinner","slides","winnerSlideIndex","winnerUsername","winnerAddress","fullAddress","closestToCenter","Infinity","containerCenter","el","clientWidth","_playerNameEl$textCon","slide","playerNameEl","querySelector","playerName","textContent","trim","isWinner","includes","slice","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","slideTo","resetToIdle","fallbackIndex","start","clearTimeout","currentWinnerKey","lastWinnerKey","disableOnInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","max","pauseOnMouseEnter","onSwiper","Array","_","setIndex","toUpperCase","amount","toFixed","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const [showWinnerStyling, setShowWinnerStyling] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', { \n        hasSwiper: !!swiperRef.current, \n        hasWinner: !!winner, \n        isActive: winnerAnimationActive \n      });\n      return;\n    }\n    \n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    \n    setWinnerAnimationActive(true);\n    \n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // STEP 1: SIMPLE - Find winner in players array (no DOM searching needed!)\n    console.log('🔍 Finding winner in players array...');\n    console.log('🔍 Winner data:', { username: winner?.username, address: winner?.address });\n    console.log('🔍 Players array:', players.map((p, i) => ({ index: i, username: p?.username, address: p?.address })));\n    \n    // Find winner position in players array directly\n    let realIndex = players.findIndex(player => {\n      if (!player) return false;\n      \n      // Simple matching - check address first (most reliable), then username\n      return player.address === winner.address || \n             player.address === winner.winner || \n             player.username === winner.username ||\n             player.username === winner.displayName;\n    });\n    \n    if (realIndex === -1) {\n      console.warn('⚠️ Winner not found in players array - using first player as fallback');\n      realIndex = players.findIndex(player => player !== null);\n      \n      if (realIndex === -1) {\n        console.error('💥 No players found at all!');\n        setWinnerAnimationActive(false);\n        setShowWinnerStyling(true);\n        onWinnerLand?.();\n        return;\n      }\n    }\n    \n    console.log('✅ Winner found at players array index:', realIndex);\n    console.log('🎯 Target position for animation:', realIndex);\n    \n    // STEP 2: Simple but effective slot machine animation\n    console.log('🎰 Starting slot machine animation...');\n    \n    let moveCount = 0;\n    const maxMoves = 10; // Fixed number for consistency\n    let isLanding = false; // Prevent multiple landings\n    \n    const moveToNext = () => {\n      if (!swiperRef.current || isLanding) {\n        console.log('🚫 Animation stopped or already landing');\n        return;\n      }\n      \n      moveCount++;\n      console.log(`🎰 Move ${moveCount}/${maxMoves}`);\n      \n      // Calculate speed - gets slower over time\n      let speed = 150;\n      let delay = 200;\n      \n      if (moveCount > 7) {\n        // Very slow in final moves\n        speed = 400 + (moveCount * 100);\n        delay = 500 + (moveCount * 150);\n        console.log(`🎯 Final moves - very slow (${speed}ms)`);\n      } else if (moveCount > 4) {\n        // Medium slow in middle\n        speed = 250 + (moveCount * 50);\n        delay = 300 + (moveCount * 50);\n        console.log(`🎰 Slowing down (${speed}ms)`);\n      }\n      \n      // Move one step\n      swiperRef.current.slideNext(speed);\n      \n      // Check if we should land\n      if (moveCount >= maxMoves) {\n        console.log('🏆 Time to land on winner!');\n        isLanding = true;\n        \n        // NEW SIMPLE SYSTEM: Land on winner naturally without rollback\n        setTimeout(() => {\n          console.log('🎯 Landing on winner slide...');\n          \n          // Get current position\n          const currentActive = swiperRef.current.activeIndex;\n          const slidesPerSet = players.length;\n          \n          console.log(`🎯 Current position: ${currentActive}, Target real index: ${realIndex}`);\n          \n          // Calculate how many steps forward to reach the winner position\n          // We want to land on realIndex position within the current cycle\n          let stepsToWinner = 0;\n          let currentRealIndex = currentActive % slidesPerSet;\n          \n          // Calculate forward distance to winner\n          if (realIndex >= currentRealIndex) {\n            stepsToWinner = realIndex - currentRealIndex;\n          } else {\n            // Wrap around (go to next cycle)\n            stepsToWinner = (slidesPerSet - currentRealIndex) + realIndex;\n          }\n          \n          // If steps is too far, find closer path in loop\n          if (stepsToWinner > slidesPerSet / 2) {\n            // Go backwards instead (previous cycle)\n            stepsToWinner = stepsToWinner - slidesPerSet;\n          }\n          \n          console.log(`🎯 Steps to winner: ${stepsToWinner} (from real ${currentRealIndex} to ${realIndex})`);\n          \n          // Move step by step to winner for smooth natural landing\n          let currentStep = 0;\n          const landingSteps = Math.abs(stepsToWinner);\n          \n                     const stepToWinner = () => {\n             if (!swiperRef.current || currentStep >= landingSteps) {\n               // Reached winner - IMMEDIATE HARD LOCK\n               console.log('🏆 Landed on winner - HARD LOCKING!');\n               \n               if (swiperRef.current) {\n                 // IMMEDIATELY stop everything\n                 swiperRef.current.autoplay?.stop();\n                 swiperRef.current.allowSlideNext = false;\n                 swiperRef.current.allowSlidePrev = false;\n                 swiperRef.current.allowTouchMove = false;\n                 \n                 // FORCE stop all transitions immediately\n                 const wrapper = swiperRef.current.wrapperEl;\n                 if (wrapper) {\n                   wrapper.style.transition = 'none !important';\n                   wrapper.style.transform = getComputedStyle(wrapper).transform;\n                   \n                   // Double-check - force stop any ongoing transitions\n                   setTimeout(() => {\n                     wrapper.style.transition = 'none';\n                     wrapper.style.transform = getComputedStyle(wrapper).transform;\n                   }, 50);\n                 }\n                 \n                 // Disable any swiper animations\n                 swiperRef.current.params.speed = 0;\n                 \n                 // Force destroy any pending animations\n                 if (swiperRef.current.animating) {\n                   swiperRef.current.animating = false;\n                 }\n               }\n               \n               setWinnerLocked(true);\n               setWinnerAnimationActive(false);\n               \n               // NOW show the winner styling (green highlight + crown + prize)\n               console.log('🎉 NOW showing winner in green!');\n               setShowWinnerStyling(true);\n               \n               onWinnerLand?.();\n               \n               console.log('✅ Winner animation complete and LOCKED!');\n               return;\n             }\n            \n            currentStep++;\n            console.log(`🎯 Landing step ${currentStep}/${landingSteps}`);\n            \n            // Move one step toward winner\n            if (stepsToWinner > 0) {\n              swiperRef.current.slideNext(400);\n            } else if (stepsToWinner < 0) {\n              swiperRef.current.slidePrev(400);\n            }\n            \n            // Continue to next step\n            setTimeout(() => {\n              stepToWinner();\n            }, 450);\n          };\n          \n          // Start step-by-step landing\n          if (landingSteps > 0) {\n            stepToWinner();\n          } else {\n            // Already on winner position\n            console.log('🏆 Already on winner position - locking!');\n            \n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              swiperRef.current.allowTouchMove = false;\n              \n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                wrapper.style.transition = 'none';\n              }\n            }\n            \n            setWinnerLocked(true);\n            setWinnerAnimationActive(false);\n            setShowWinnerStyling(true);\n            onWinnerLand?.();\n            \n            console.log('✅ Winner animation complete!');\n          }\n          \n        }, delay);\n        \n        return;\n      }\n      \n      // Continue moving\n      setTimeout(() => {\n        moveToNext();\n      }, delay);\n    };\n    \n\n    \n    // Start animation\n    setTimeout(() => {\n      moveToNext();\n    }, 300);\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    \n    console.log('🔒 Locking on winner...');\n    \n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('🔍 Looking for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n      \n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n        \n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner?.displayName);\n        }\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || \n                   winnerAddress.includes(playerName);\n      }\n      \n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      \n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      \n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        \n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        \n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n      \n      // Slide to winner smoothly\n      swiperRef.current.slideTo(winnerSlideIndex, 1000, false);\n      \n      // Lock after slide completes\n      setTimeout(() => {\n        console.log('🏆 Winner locked in position!');\n        \n        // Completely stop all movement\n        if (swiperRef.current) {\n          swiperRef.current.autoplay.stop();\n          swiperRef.current.allowSlideNext = false;\n          swiperRef.current.allowSlidePrev = false;\n          \n          // Force stop transitions\n          const wrapper = swiperRef.current.wrapperEl;\n          if (wrapper) {\n            setTimeout(() => {\n              wrapper.style.transition = 'none';\n              const transform = getComputedStyle(wrapper).transform;\n              wrapper.style.transform = transform;\n            }, 100);\n          }\n        }\n        \n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        // Show winner for 7 seconds\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n        \n      }, 1100);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n      \n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      \n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        swiperRef.current.slideTo(fallbackIndex, 1000, false);\n        \n        setTimeout(() => {\n          setWinnerLocked(true);\n          onWinnerLand?.();\n          \n          winnerTimeoutRef.current = setTimeout(() => {\n            resetToIdle();\n          }, 7000);\n        }, 1100);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    \n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n      \n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n      \n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    \n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    setShowWinnerStyling(false); // Reset winner styling\n    \n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    \n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('🚫 No winner, skipping animation');\n      setShowWinnerStyling(false); // Hide winner styling when no winner\n      return;\n    }\n    \n    if (winnerAnimationActive) {\n      console.log('🚫 Animation already active, skipping');\n      return;\n    }\n    \n    if (winnerLocked) {\n      console.log('🚫 Winner already locked, skipping');\n      return;\n    }\n    \n    // Reset winner styling for new animation\n    setShowWinnerStyling(false);\n    console.log('🎰 Starting animation - winner styling hidden until animation completes');\n    \n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n    \n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('🆕 New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n    \n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('🎯 Forcing winner display without animation');\n      \n      // Just show the winner without animation\n      setWinnerLocked(true);\n      setShowWinnerStyling(true); // Show styling immediately if no animation\n      onWinnerLand?.();\n      \n      // NO AUTO-RESET - let game logic handle it\n      console.log('🎯 Winner locked without animation - waiting for new round');\n      \n      return;\n    }\n    \n    console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    \n    animationAttemptsRef.current++;\n    \n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n    \n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    \n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        winnerAnimationActive && !winnerLocked ? 'winner-approaching' : \n        winnerLocked ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={Math.max(players.length, 6)}\n        autoplay={{\n          delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={300}\n        className={`player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Only 2 sets to reduce complexity */}\n        {[...Array(2)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                showWinnerStyling && winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {showWinnerStyling && winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {showWinnerStyling && winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}