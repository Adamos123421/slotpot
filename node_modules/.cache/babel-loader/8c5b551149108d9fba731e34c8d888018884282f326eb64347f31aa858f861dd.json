{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [isCustomSpinning, setIsCustomSpinning] = useState(false);\n  const [spinSpeed, setSpinSpeed] = useState(50);\n  const [showingWinner, setShowingWinner] = useState(false);\n  const [lockedPosition, setLockedPosition] = useState(null);\n  const animationRef = useRef(null);\n  const targetIndexRef = useRef(null);\n  const spinPhaseRef = useRef('idle'); // 'idle', 'spinning', 'slowing', 'locked'\n  const winnerTimeoutRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // COMPLETELY LOCK CAROUSEL AT SPECIFIC POSITION\n  const lockCarouselAtPosition = useCallback(targetIndex => {\n    var _currentTransform$mat;\n    if (!swiperRef.current) return;\n    console.log('🔒 LOCKING carousel at winner position:', targetIndex);\n\n    // Find the actual winner slide that's currently visible\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    let winnerSlide = null;\n\n    // Look through all slides to find the winner card that's closest to center\n    const containerCenterX = swiperRef.current.el.clientWidth / 2;\n    let closestDistance = Infinity;\n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const slideRect = slide.getBoundingClientRect();\n      const containerRect = swiperRef.current.el.getBoundingClientRect();\n      const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n      const distanceFromCenter = Math.abs(slideCenter - containerCenterX);\n\n      // Check if this slide contains a winner card\n      const playerCard = slide.querySelector('.player-card.winner');\n      if (playerCard && distanceFromCenter < closestDistance) {\n        closestDistance = distanceFromCenter;\n        winnerSlideIndex = i;\n        winnerSlide = slide;\n      }\n    }\n\n    // If no winner slide found, find by slide content\n    if (winnerSlideIndex === -1) {\n      console.log('No winner slide found by class, searching by content...');\n\n      // Get the winner info\n      const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n      const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n      for (let i = 0; i < slides.length; i++) {\n        var _slide$querySelector;\n        const slide = slides[i];\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenterX);\n\n        // Check slide content\n        const playerName = (_slide$querySelector = slide.querySelector('.player-name')) === null || _slide$querySelector === void 0 ? void 0 : _slide$querySelector.textContent;\n        const isWinnerSlide = winnerUsername && playerName === winnerUsername || winnerAddress && playerName === winnerAddress;\n        if (isWinnerSlide && distanceFromCenter < closestDistance) {\n          closestDistance = distanceFromCenter;\n          winnerSlideIndex = i;\n          winnerSlide = slide;\n        }\n      }\n    }\n    if (winnerSlideIndex === -1 || !winnerSlide) {\n      console.error('❌ Could not find winner slide to lock on');\n      return;\n    }\n    console.log('🎯 Found winner slide at index:', winnerSlideIndex);\n\n    // Calculate exact position to center this specific slide\n    const slideRect = winnerSlide.getBoundingClientRect();\n    const containerRect = swiperRef.current.el.getBoundingClientRect();\n    const slideWidth = slideRect.width;\n    const containerWidth = containerRect.width;\n\n    // Current position of the slide relative to container\n    const currentSlideLeft = slideRect.left - containerRect.left;\n    const slideCenter = currentSlideLeft + slideWidth / 2;\n    const containerCenter = containerWidth / 2;\n\n    // Calculate how much we need to move to center the slide\n    const moveDistance = containerCenter - slideCenter;\n\n    // Get current transform and add the move distance\n    const wrapper = swiperRef.current.wrapperEl;\n    const currentTransform = wrapper.style.transform;\n    const currentX = ((_currentTransform$mat = currentTransform.match(/-?\\d+(\\.\\d+)?/g)) === null || _currentTransform$mat === void 0 ? void 0 : _currentTransform$mat[0]) || 0;\n    const newX = parseFloat(currentX) + moveDistance;\n    console.log('📍 Centering winner slide:', {\n      slideIndex: winnerSlideIndex,\n      currentX: currentX,\n      moveDistance: moveDistance,\n      newX: newX\n    });\n\n    // FORCE STOP ALL SWIPER FUNCTIONALITY\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n      swiperRef.current.autoplay.pause();\n      swiperRef.current.autoplay.running = false;\n    }\n\n    // Disable all Swiper interactions\n    swiperRef.current.allowSlideNext = false;\n    swiperRef.current.allowSlidePrev = false;\n    swiperRef.current.allowTouchMove = false;\n\n    // FORCE the exact position to center winner\n    if (wrapper) {\n      // Remove all CSS classes that might interfere\n      wrapper.style.transition = 'none';\n      wrapper.style.transitionDuration = '0ms';\n      wrapper.style.transitionDelay = '0ms';\n      wrapper.style.animation = 'none';\n\n      // FORCE the exact position to center the winner\n      wrapper.style.transform = `translate3d(${newX}px, 0px, 0px)`;\n\n      // Lock it in place by setting position as important\n      wrapper.style.setProperty('transform', `translate3d(${newX}px, 0px, 0px)`, 'important');\n      wrapper.style.setProperty('transition', 'none', 'important');\n    }\n\n    // Disable all slide transitions\n    if (slides) {\n      slides.forEach(slide => {\n        slide.style.transition = 'none';\n        slide.style.transitionDuration = '0ms';\n      });\n    }\n\n    // Set locked state\n    setLockedPosition(newX);\n    setShowingWinner(true);\n    spinPhaseRef.current = 'locked';\n    console.log('🏆 Carousel LOCKED with winner centered at position:', newX);\n\n    // Trigger winner callback\n    setTimeout(() => {\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n    }, 500);\n\n    // Keep locked for 8 seconds\n    winnerTimeoutRef.current = setTimeout(() => {\n      unlockCarousel();\n    }, 8000);\n  }, [onWinnerLand, winner]);\n\n  // UNLOCK CAROUSEL AND RESUME NORMAL OPERATION\n  const unlockCarousel = useCallback(() => {\n    if (!swiperRef.current) return;\n    console.log('🔓 UNLOCKING carousel - resuming normal operation');\n\n    // Re-enable Swiper functionality\n    swiperRef.current.allowSlideNext = true;\n    swiperRef.current.allowSlidePrev = true;\n    swiperRef.current.allowTouchMove = false; // Keep touch disabled\n\n    // Reset wrapper styles\n    const wrapper = swiperRef.current.wrapperEl;\n    if (wrapper) {\n      wrapper.style.transition = '';\n      wrapper.style.transitionDuration = '';\n      wrapper.style.transitionDelay = '';\n      wrapper.style.animation = '';\n      wrapper.style.removeProperty('transform');\n    }\n\n    // Reset slide styles\n    const slides = swiperRef.current.slides;\n    if (slides) {\n      slides.forEach(slide => {\n        slide.style.transition = '';\n        slide.style.transitionDuration = '';\n      });\n    }\n\n    // Reset states\n    setLockedPosition(null);\n    setShowingWinner(false);\n    spinPhaseRef.current = 'idle';\n\n    // Resume autoplay if no winner\n    if (!winner && swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.running = true;\n      swiperRef.current.autoplay.start();\n    }\n  }, [winner]);\n\n  // Natural casino-style spin animation\n  const startCasinoSpin = useCallback(() => {\n    if (!swiperRef.current || isCustomSpinning) return;\n    console.log('🎰 Starting casino-style spin animation');\n    setIsCustomSpinning(true);\n    setShowingWinner(false);\n    setLockedPosition(null);\n    spinPhaseRef.current = 'spinning';\n\n    // Stop any existing autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // Start fast spinning\n    let currentSpeed = 20; // Start very fast\n    setSpinSpeed(currentSpeed);\n    const spinInterval = setInterval(() => {\n      if (swiperRef.current && spinPhaseRef.current === 'spinning') {\n        // Move to next slide\n        swiperRef.current.slideNext(currentSpeed);\n      }\n    }, currentSpeed);\n\n    // Save interval reference for cleanup\n    animationRef.current = spinInterval;\n    return spinInterval;\n  }, [isCustomSpinning]);\n\n  // Natural deceleration to winner - ends with LOCK instead of slideTo\n  const startSlowDownToWinner = useCallback(winnerIndex => {\n    if (!swiperRef.current || spinPhaseRef.current !== 'spinning') return;\n    console.log('🎯 Starting slow-down to winner at index:', winnerIndex);\n    spinPhaseRef.current = 'slowing';\n\n    // Clear fast spinning\n    if (animationRef.current) {\n      clearInterval(animationRef.current);\n    }\n\n    // Start deceleration animation\n    let speed = 50; // Start medium speed\n    let slideCount = 0;\n    const maxSlides = 20; // Maximum slides before forcing stop\n\n    const decelerateInterval = setInterval(() => {\n      if (!swiperRef.current) {\n        clearInterval(decelerateInterval);\n        return;\n      }\n      slideCount++;\n\n      // Move to next slide\n      swiperRef.current.slideNext(speed);\n\n      // Check if we should stop (after enough deceleration)\n      if (slideCount >= maxSlides || speed > 1000) {\n        clearInterval(decelerateInterval);\n\n        // LOCK at winner position instead of using slideTo\n        setTimeout(() => {\n          setIsCustomSpinning(false);\n          lockCarouselAtPosition(winnerIndex);\n        }, 500);\n      } else {\n        // Gradually slow down\n        speed = Math.min(speed * 1.15, 1200); // Faster deceleration\n        setSpinSpeed(speed);\n      }\n    }, speed);\n    animationRef.current = decelerateInterval;\n  }, [lockCarouselAtPosition]);\n\n  // Handle winner announcement with realistic spin\n  useEffect(() => {\n    if (winner && swiperRef.current && players && !isCustomSpinning && !showingWinner) {\n      const winnerIndex = players.findIndex(p => p && (p.address === winner.address || p.username === winner.username || p.address === winner.winner || p.address === winner.fullAddress || p.username === winner.displayName));\n      if (winnerIndex !== -1) {\n        targetIndexRef.current = winnerIndex;\n        console.log('🏆 Winner found at index:', winnerIndex, 'Starting casino spin...');\n\n        // Clear any existing winner timeout\n        if (winnerTimeoutRef.current) {\n          clearTimeout(winnerTimeoutRef.current);\n        }\n\n        // Start spinning, then slow down to winner\n        startCasinoSpin();\n        setTimeout(() => {\n          startSlowDownToWinner(winnerIndex);\n        }, 2500); // Spin for 2.5 seconds before starting to slow down\n      }\n    }\n  }, [winner, players, isCustomSpinning, showingWinner, startCasinoSpin, startSlowDownToWinner]);\n\n  // Handle regular spinning state (not winner selection)\n  useEffect(() => {\n    // Don't do anything if locked or showing winner\n    if (showingWinner || spinPhaseRef.current === 'locked') {\n      return;\n    }\n    if (isSpinning && !winner && !isCustomSpinning && !showingWinner) {\n      // Regular fast spinning while waiting for winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    } else if (!isSpinning && !winner && !isCustomSpinning && !showingWinner && spinPhaseRef.current === 'idle') {\n      // Normal slow movement when not spinning and not showing winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    }\n  }, [isSpinning, winner, isCustomSpinning, showingWinner]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        clearInterval(animationRef.current);\n      }\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Prevent autoplay restart during locked state\n  useEffect(() => {\n    if (showingWinner || spinPhaseRef.current === 'locked') {\n      // Force stop during locked state\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.stop();\n        swiperRef.current.autoplay.running = false;\n      }\n      return;\n    }\n\n    // Only restart normal autoplay if we're in idle state\n    if (!winner && !isCustomSpinning && spinPhaseRef.current === 'idle' && swiperRef.current && swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.running = true;\n      swiperRef.current.autoplay.start();\n    }\n  }, [players.length, isCustomSpinning, showingWinner, winner]);\n\n  // Reset states when winner prop is cleared (new round)\n  useEffect(() => {\n    if (!winner && showingWinner) {\n      console.log('🔄 Winner cleared - resetting carousel states');\n      unlockCarousel();\n    }\n  }, [winner, showingWinner, unlockCarousel]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `simple-carousel-container ${showingWinner ? 'winner-showing' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${isCustomSpinning && spinPhaseRef.current === 'slowing' ? 'winner-approaching' : spinPhaseRef.current === 'locked' || showingWinner ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: players.length * 6,\n      autoplay: showingWinner || spinPhaseRef.current === 'locked' ? false : {\n        delay: isSpinning && !isCustomSpinning && !showingWinner ? 15 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: isCustomSpinning ? spinSpeed : isSpinning && !showingWinner ? 30 : 300,\n      className: `player-swiper ${(isSpinning || isCustomSpinning) && !showingWinner ? 'spinning' : ''} ${showingWinner ? 'winner-display' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(6)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 19\n            }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 17\n          }, this), winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"nkgUlth1mREv9CcHBZy3npH9APM=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","isCustomSpinning","setIsCustomSpinning","spinSpeed","setSpinSpeed","showingWinner","setShowingWinner","lockedPosition","setLockedPosition","animationRef","targetIndexRef","spinPhaseRef","winnerTimeoutRef","handleSwiperInit","swiper","current","lockCarouselAtPosition","targetIndex","_currentTransform$mat","console","log","slides","winnerSlideIndex","winnerSlide","containerCenterX","el","clientWidth","closestDistance","Infinity","i","length","slide","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","Math","abs","playerCard","querySelector","winnerAddress","address","fullAddress","winnerUsername","username","displayName","_slide$querySelector","playerName","textContent","isWinnerSlide","error","slideWidth","containerWidth","currentSlideLeft","containerCenter","moveDistance","wrapper","wrapperEl","currentTransform","style","transform","currentX","match","newX","parseFloat","slideIndex","autoplay","stop","pause","running","allowSlideNext","allowSlidePrev","allowTouchMove","transition","transitionDuration","transitionDelay","animation","setProperty","forEach","setTimeout","unlockCarousel","removeProperty","start","startCasinoSpin","currentSpeed","spinInterval","setInterval","slideNext","startSlowDownToWinner","winnerIndex","clearInterval","speed","slideCount","maxSlides","decelerateInterval","min","findIndex","p","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","delay","disableOnInteraction","pauseOnMouseEnter","onSwiper","Array","map","_","setIndex","player","index","toUpperCase","amount","toFixed","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [isCustomSpinning, setIsCustomSpinning] = useState(false);\n  const [spinSpeed, setSpinSpeed] = useState(50);\n  const [showingWinner, setShowingWinner] = useState(false);\n  const [lockedPosition, setLockedPosition] = useState(null);\n  const animationRef = useRef(null);\n  const targetIndexRef = useRef(null);\n  const spinPhaseRef = useRef('idle'); // 'idle', 'spinning', 'slowing', 'locked'\n  const winnerTimeoutRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // COMPLETELY LOCK CAROUSEL AT SPECIFIC POSITION\n  const lockCarouselAtPosition = useCallback((targetIndex) => {\n    if (!swiperRef.current) return;\n    \n    console.log('🔒 LOCKING carousel at winner position:', targetIndex);\n    \n    // Find the actual winner slide that's currently visible\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    let winnerSlide = null;\n    \n    // Look through all slides to find the winner card that's closest to center\n    const containerCenterX = swiperRef.current.el.clientWidth / 2;\n    let closestDistance = Infinity;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const slideRect = slide.getBoundingClientRect();\n      const containerRect = swiperRef.current.el.getBoundingClientRect();\n      const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n      const distanceFromCenter = Math.abs(slideCenter - containerCenterX);\n      \n      // Check if this slide contains a winner card\n      const playerCard = slide.querySelector('.player-card.winner');\n      if (playerCard && distanceFromCenter < closestDistance) {\n        closestDistance = distanceFromCenter;\n        winnerSlideIndex = i;\n        winnerSlide = slide;\n      }\n    }\n    \n    // If no winner slide found, find by slide content\n    if (winnerSlideIndex === -1) {\n      console.log('No winner slide found by class, searching by content...');\n      \n      // Get the winner info\n      const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n      const winnerUsername = winner?.username || winner?.displayName;\n      \n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenterX);\n        \n        // Check slide content\n        const playerName = slide.querySelector('.player-name')?.textContent;\n        const isWinnerSlide = (winnerUsername && playerName === winnerUsername) || \n                             (winnerAddress && playerName === winnerAddress);\n        \n        if (isWinnerSlide && distanceFromCenter < closestDistance) {\n          closestDistance = distanceFromCenter;\n          winnerSlideIndex = i;\n          winnerSlide = slide;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex === -1 || !winnerSlide) {\n      console.error('❌ Could not find winner slide to lock on');\n      return;\n    }\n    \n    console.log('🎯 Found winner slide at index:', winnerSlideIndex);\n    \n    // Calculate exact position to center this specific slide\n    const slideRect = winnerSlide.getBoundingClientRect();\n    const containerRect = swiperRef.current.el.getBoundingClientRect();\n    const slideWidth = slideRect.width;\n    const containerWidth = containerRect.width;\n    \n    // Current position of the slide relative to container\n    const currentSlideLeft = slideRect.left - containerRect.left;\n    const slideCenter = currentSlideLeft + slideWidth / 2;\n    const containerCenter = containerWidth / 2;\n    \n    // Calculate how much we need to move to center the slide\n    const moveDistance = containerCenter - slideCenter;\n    \n    // Get current transform and add the move distance\n    const wrapper = swiperRef.current.wrapperEl;\n    const currentTransform = wrapper.style.transform;\n    const currentX = currentTransform.match(/-?\\d+(\\.\\d+)?/g)?.[0] || 0;\n    const newX = parseFloat(currentX) + moveDistance;\n    \n    console.log('📍 Centering winner slide:', {\n      slideIndex: winnerSlideIndex,\n      currentX: currentX,\n      moveDistance: moveDistance,\n      newX: newX\n    });\n    \n    // FORCE STOP ALL SWIPER FUNCTIONALITY\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n      swiperRef.current.autoplay.pause();\n      swiperRef.current.autoplay.running = false;\n    }\n    \n    // Disable all Swiper interactions\n    swiperRef.current.allowSlideNext = false;\n    swiperRef.current.allowSlidePrev = false;\n    swiperRef.current.allowTouchMove = false;\n    \n    // FORCE the exact position to center winner\n    if (wrapper) {\n      // Remove all CSS classes that might interfere\n      wrapper.style.transition = 'none';\n      wrapper.style.transitionDuration = '0ms';\n      wrapper.style.transitionDelay = '0ms';\n      wrapper.style.animation = 'none';\n      \n      // FORCE the exact position to center the winner\n      wrapper.style.transform = `translate3d(${newX}px, 0px, 0px)`;\n      \n      // Lock it in place by setting position as important\n      wrapper.style.setProperty('transform', `translate3d(${newX}px, 0px, 0px)`, 'important');\n      wrapper.style.setProperty('transition', 'none', 'important');\n    }\n    \n    // Disable all slide transitions\n    if (slides) {\n      slides.forEach(slide => {\n        slide.style.transition = 'none';\n        slide.style.transitionDuration = '0ms';\n      });\n    }\n    \n    // Set locked state\n    setLockedPosition(newX);\n    setShowingWinner(true);\n    spinPhaseRef.current = 'locked';\n    \n    console.log('🏆 Carousel LOCKED with winner centered at position:', newX);\n    \n    // Trigger winner callback\n    setTimeout(() => {\n      onWinnerLand?.();\n    }, 500);\n    \n    // Keep locked for 8 seconds\n    winnerTimeoutRef.current = setTimeout(() => {\n      unlockCarousel();\n    }, 8000);\n    \n  }, [onWinnerLand, winner]);\n\n  // UNLOCK CAROUSEL AND RESUME NORMAL OPERATION\n  const unlockCarousel = useCallback(() => {\n    if (!swiperRef.current) return;\n    \n    console.log('🔓 UNLOCKING carousel - resuming normal operation');\n    \n    // Re-enable Swiper functionality\n    swiperRef.current.allowSlideNext = true;\n    swiperRef.current.allowSlidePrev = true;\n    swiperRef.current.allowTouchMove = false; // Keep touch disabled\n    \n    // Reset wrapper styles\n    const wrapper = swiperRef.current.wrapperEl;\n    if (wrapper) {\n      wrapper.style.transition = '';\n      wrapper.style.transitionDuration = '';\n      wrapper.style.transitionDelay = '';\n      wrapper.style.animation = '';\n      wrapper.style.removeProperty('transform');\n    }\n    \n    // Reset slide styles\n    const slides = swiperRef.current.slides;\n    if (slides) {\n      slides.forEach(slide => {\n        slide.style.transition = '';\n        slide.style.transitionDuration = '';\n      });\n    }\n    \n    // Reset states\n    setLockedPosition(null);\n    setShowingWinner(false);\n    spinPhaseRef.current = 'idle';\n    \n    // Resume autoplay if no winner\n    if (!winner && swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.running = true;\n      swiperRef.current.autoplay.start();\n    }\n  }, [winner]);\n\n  // Natural casino-style spin animation\n  const startCasinoSpin = useCallback(() => {\n    if (!swiperRef.current || isCustomSpinning) return;\n    \n    console.log('🎰 Starting casino-style spin animation');\n    setIsCustomSpinning(true);\n    setShowingWinner(false);\n    setLockedPosition(null);\n    spinPhaseRef.current = 'spinning';\n    \n    // Stop any existing autoplay\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // Start fast spinning\n    let currentSpeed = 20; // Start very fast\n    setSpinSpeed(currentSpeed);\n    \n    const spinInterval = setInterval(() => {\n      if (swiperRef.current && spinPhaseRef.current === 'spinning') {\n        // Move to next slide\n        swiperRef.current.slideNext(currentSpeed);\n      }\n    }, currentSpeed);\n    \n    // Save interval reference for cleanup\n    animationRef.current = spinInterval;\n    \n    return spinInterval;\n  }, [isCustomSpinning]);\n\n  // Natural deceleration to winner - ends with LOCK instead of slideTo\n  const startSlowDownToWinner = useCallback((winnerIndex) => {\n    if (!swiperRef.current || spinPhaseRef.current !== 'spinning') return;\n    \n    console.log('🎯 Starting slow-down to winner at index:', winnerIndex);\n    spinPhaseRef.current = 'slowing';\n    \n    // Clear fast spinning\n    if (animationRef.current) {\n      clearInterval(animationRef.current);\n    }\n    \n    // Start deceleration animation\n    let speed = 50; // Start medium speed\n    let slideCount = 0;\n    const maxSlides = 20; // Maximum slides before forcing stop\n    \n    const decelerateInterval = setInterval(() => {\n      if (!swiperRef.current) {\n        clearInterval(decelerateInterval);\n        return;\n      }\n      \n      slideCount++;\n      \n      // Move to next slide\n      swiperRef.current.slideNext(speed);\n      \n      // Check if we should stop (after enough deceleration)\n      if (slideCount >= maxSlides || speed > 1000) {\n        clearInterval(decelerateInterval);\n        \n        // LOCK at winner position instead of using slideTo\n        setTimeout(() => {\n          setIsCustomSpinning(false);\n          lockCarouselAtPosition(winnerIndex);\n        }, 500);\n      } else {\n        // Gradually slow down\n        speed = Math.min(speed * 1.15, 1200); // Faster deceleration\n        setSpinSpeed(speed);\n      }\n    }, speed);\n    \n    animationRef.current = decelerateInterval;\n  }, [lockCarouselAtPosition]);\n\n  // Handle winner announcement with realistic spin\n  useEffect(() => {\n    if (winner && swiperRef.current && players && !isCustomSpinning && !showingWinner) {\n      const winnerIndex = players.findIndex(p => \n        p && (\n          p.address === winner.address || \n          p.username === winner.username ||\n          p.address === winner.winner ||\n          p.address === winner.fullAddress ||\n          p.username === winner.displayName\n        )\n      );\n      \n      if (winnerIndex !== -1) {\n        targetIndexRef.current = winnerIndex;\n        console.log('🏆 Winner found at index:', winnerIndex, 'Starting casino spin...');\n        \n        // Clear any existing winner timeout\n        if (winnerTimeoutRef.current) {\n          clearTimeout(winnerTimeoutRef.current);\n        }\n        \n        // Start spinning, then slow down to winner\n        startCasinoSpin();\n        \n        setTimeout(() => {\n          startSlowDownToWinner(winnerIndex);\n        }, 2500); // Spin for 2.5 seconds before starting to slow down\n      }\n    }\n  }, [winner, players, isCustomSpinning, showingWinner, startCasinoSpin, startSlowDownToWinner]);\n\n  // Handle regular spinning state (not winner selection)\n  useEffect(() => {\n    // Don't do anything if locked or showing winner\n    if (showingWinner || spinPhaseRef.current === 'locked') {\n      return;\n    }\n\n    if (isSpinning && !winner && !isCustomSpinning && !showingWinner) {\n      // Regular fast spinning while waiting for winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    } else if (!isSpinning && !winner && !isCustomSpinning && !showingWinner && spinPhaseRef.current === 'idle') {\n      // Normal slow movement when not spinning and not showing winner\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.start();\n      }\n    }\n  }, [isSpinning, winner, isCustomSpinning, showingWinner]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        clearInterval(animationRef.current);\n      }\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Prevent autoplay restart during locked state\n  useEffect(() => {\n    if (showingWinner || spinPhaseRef.current === 'locked') {\n      // Force stop during locked state\n      if (swiperRef.current && swiperRef.current.autoplay) {\n        swiperRef.current.autoplay.stop();\n        swiperRef.current.autoplay.running = false;\n      }\n      return;\n    }\n    \n    // Only restart normal autoplay if we're in idle state\n    if (!winner && !isCustomSpinning && spinPhaseRef.current === 'idle' && swiperRef.current && swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.running = true;\n      swiperRef.current.autoplay.start();\n    }\n  }, [players.length, isCustomSpinning, showingWinner, winner]);\n\n  // Reset states when winner prop is cleared (new round)\n  useEffect(() => {\n    if (!winner && showingWinner) {\n      console.log('🔄 Winner cleared - resetting carousel states');\n      unlockCarousel();\n    }\n  }, [winner, showingWinner, unlockCarousel]);\n\n  return (\n    <div className={`simple-carousel-container ${showingWinner ? 'winner-showing' : ''}`}>\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        isCustomSpinning && spinPhaseRef.current === 'slowing' ? 'winner-approaching' : \n        spinPhaseRef.current === 'locked' || showingWinner ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={players.length * 6}\n        autoplay={showingWinner || spinPhaseRef.current === 'locked' ? false : {\n          delay: isSpinning && !isCustomSpinning && !showingWinner ? 15 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={isCustomSpinning ? spinSpeed : (isSpinning && !showingWinner ? 30 : 300)}\n        className={`player-swiper ${(isSpinning || isCustomSpinning) && !showingWinner ? 'spinning' : ''} ${showingWinner ? 'winner-display' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Create 6 sets for much smoother infinite scroll */}\n        {[...Array(6)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}