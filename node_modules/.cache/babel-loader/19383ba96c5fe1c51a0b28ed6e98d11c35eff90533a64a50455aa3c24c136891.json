{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletContractV1R3 = void 0;\nconst core_1 = require(\"@ton/core\");\nconst createWalletTransfer_1 = require(\"./signing/createWalletTransfer\");\nclass WalletContractV1R3 {\n  static create(args) {\n    return new WalletContractV1R3(args.workchain, args.publicKey);\n  }\n  constructor(workchain, publicKey) {\n    this.workchain = workchain;\n    this.publicKey = publicKey;\n    // Build initial code and data\n    let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEAXwAAuv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVLW4bkI=', 'base64'))[0];\n    let data = (0, core_1.beginCell)().storeUint(0, 32) // Seqno\n    .storeBuffer(publicKey).endCell();\n    this.init = {\n      code,\n      data\n    };\n    this.address = (0, core_1.contractAddress)(workchain, {\n      code,\n      data\n    });\n  }\n  /**\n   * Get Wallet Balance\n   */\n  async getBalance(provider) {\n    let state = await provider.getState();\n    return state.balance;\n  }\n  /**\n   * Get Wallet Seqno\n   */\n  async getSeqno(provider) {\n    let state = await provider.getState();\n    if (state.state.type === 'active') {\n      let res = await provider.get('seqno', []);\n      return res.stack.readNumber();\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Send signed transfer\n   */\n  async send(executor, message) {\n    await executor.external(message);\n  }\n  /**\n   * Sign and send transfer\n   */\n  async sendTransfer(provider, args) {\n    let transfer = this.createTransfer(args);\n    await this.send(provider, transfer);\n  }\n  /**\n   * Create signed transfer\n   */\n  createTransfer(args) {\n    let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n    if (args.sendMode !== null && args.sendMode !== undefined) {\n      sendMode = args.sendMode;\n    }\n    return (0, createWalletTransfer_1.createWalletTransferV1)({\n      seqno: args.seqno,\n      sendMode: sendMode,\n      secretKey: args.secretKey,\n      message: args.message\n    });\n  }\n  /**\n   * Create sender\n   */\n  sender(provider, secretKey) {\n    return {\n      send: async args => {\n        let seqno = await this.getSeqno(provider);\n        let transfer = this.createTransfer({\n          seqno,\n          secretKey,\n          sendMode: args.sendMode,\n          message: (0, core_1.internal)({\n            to: args.to,\n            value: args.value,\n            init: args.init,\n            body: args.body,\n            bounce: args.bounce\n          })\n        });\n        await this.send(provider, transfer);\n      }\n    };\n  }\n}\nexports.WalletContractV1R3 = WalletContractV1R3;","map":{"version":3,"names":["Object","defineProperty","exports","value","WalletContractV1R3","core_1","require","createWalletTransfer_1","create","args","workchain","publicKey","constructor","code","Cell","fromBoc","Buffer","from","data","beginCell","storeUint","storeBuffer","endCell","init","address","contractAddress","getBalance","provider","state","getState","balance","getSeqno","type","res","get","stack","readNumber","send","executor","message","external","sendTransfer","transfer","createTransfer","sendMode","SendMode","PAY_GAS_SEPARATELY","undefined","createWalletTransferV1","seqno","secretKey","sender","internal","to","body","bounce"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/ton/dist/wallets/WalletContractV1R3.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletContractV1R3 = void 0;\nconst core_1 = require(\"@ton/core\");\nconst createWalletTransfer_1 = require(\"./signing/createWalletTransfer\");\nclass WalletContractV1R3 {\n    static create(args) {\n        return new WalletContractV1R3(args.workchain, args.publicKey);\n    }\n    constructor(workchain, publicKey) {\n        this.workchain = workchain;\n        this.publicKey = publicKey;\n        // Build initial code and data\n        let code = core_1.Cell.fromBoc(Buffer.from('te6cckEBAQEAXwAAuv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVLW4bkI=', 'base64'))[0];\n        let data = (0, core_1.beginCell)()\n            .storeUint(0, 32) // Seqno\n            .storeBuffer(publicKey)\n            .endCell();\n        this.init = { code, data };\n        this.address = (0, core_1.contractAddress)(workchain, { code, data });\n    }\n    /**\n     * Get Wallet Balance\n     */\n    async getBalance(provider) {\n        let state = await provider.getState();\n        return state.balance;\n    }\n    /**\n     * Get Wallet Seqno\n     */\n    async getSeqno(provider) {\n        let state = await provider.getState();\n        if (state.state.type === 'active') {\n            let res = await provider.get('seqno', []);\n            return res.stack.readNumber();\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Send signed transfer\n     */\n    async send(executor, message) {\n        await executor.external(message);\n    }\n    /**\n     * Sign and send transfer\n     */\n    async sendTransfer(provider, args) {\n        let transfer = this.createTransfer(args);\n        await this.send(provider, transfer);\n    }\n    /**\n     * Create signed transfer\n     */\n    createTransfer(args) {\n        let sendMode = core_1.SendMode.PAY_GAS_SEPARATELY;\n        if (args.sendMode !== null && args.sendMode !== undefined) {\n            sendMode = args.sendMode;\n        }\n        return (0, createWalletTransfer_1.createWalletTransferV1)({\n            seqno: args.seqno,\n            sendMode: sendMode,\n            secretKey: args.secretKey,\n            message: args.message\n        });\n    }\n    /**\n     * Create sender\n     */\n    sender(provider, secretKey) {\n        return {\n            send: async (args) => {\n                let seqno = await this.getSeqno(provider);\n                let transfer = this.createTransfer({\n                    seqno,\n                    secretKey,\n                    sendMode: args.sendMode,\n                    message: (0, core_1.internal)({\n                        to: args.to,\n                        value: args.value,\n                        init: args.init,\n                        body: args.body,\n                        bounce: args.bounce\n                    })\n                });\n                await this.send(provider, transfer);\n            }\n        };\n    }\n}\nexports.WalletContractV1R3 = WalletContractV1R3;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}