{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useTonConnectUI, useTonWallet } from '@tonconnect/ui-react';\nimport { Address } from '@ton/core';\nimport userService from '../services/userService';\nimport useTelegramWebApp from './useTelegramWebApp';\nconst useTonConnect = () => {\n  _s();\n  var _tonConnectUI$account;\n  const [tonConnectUI] = useTonConnectUI();\n  const wallet = useTonWallet();\n  const [balance, setBalance] = useState(null);\n  const [isRestoringConnection, setIsRestoringConnection] = useState(true);\n  const {\n    user\n  } = useTelegramWebApp();\n\n  // Get bounceable address using proper TON Core Address handling\n  const rawAddress = (_tonConnectUI$account = tonConnectUI.account) === null || _tonConnectUI$account === void 0 ? void 0 : _tonConnectUI$account.address;\n  const address = rawAddress ? Address.parse(rawAddress).toString({\n    bounceable: true,\n    urlSafe: true\n  }) : undefined;\n\n  // Handle connection restoration loading state\n  useEffect(() => {\n    console.log('🔍 TON Connect state check:', {\n      hasWallet: !!wallet,\n      hasAccount: !!tonConnectUI.account,\n      rawAddress,\n      address,\n      isConnected: !!(wallet && address),\n      isRestoringConnection\n    });\n    if (rawAddress && address) {\n      console.log('✅ Address restored from TON Connect:', {\n        rawAddress,\n        bounceableAddress: address,\n        isBounceable: address.startsWith('EQ')\n      });\n      setIsRestoringConnection(false);\n    } else if (!wallet && !tonConnectUI.account) {\n      // No wallet at all - stop loading\n      console.log('❌ No wallet connection detected - stopping restoration loading');\n      setIsRestoringConnection(false);\n    }\n  }, [wallet, tonConnectUI.account, rawAddress, address, isRestoringConnection]);\n\n  // Timeout for restoration loading (prevent infinite loading)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (isRestoringConnection) {\n        console.log('⏰ Connection restoration timeout - stopping loading');\n        setIsRestoringConnection(false);\n      }\n    }, 5000); // 5 second timeout\n\n    return () => clearTimeout(timeout);\n  }, [isRestoringConnection]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if wallet is connected and has an address\n  const isConnected = !!(wallet && address);\n\n  // Get formatted address\n  const getFormattedAddress = () => {\n    if (!address) return null;\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  // Get wallet info\n  const getWalletInfo = () => {\n    if (!wallet) return null;\n    return {\n      name: wallet.device.appName,\n      address: address,\n      formattedAddress: getFormattedAddress(),\n      imageUrl: wallet.device.appImage || null,\n      platform: wallet.device.platform\n    };\n  };\n\n  // Connect wallet\n  const connectWallet = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      await tonConnectUI.connectWallet();\n    } catch (err) {\n      setError(err.message || 'Failed to connect wallet');\n      console.error('Wallet connection error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = async () => {\n    try {\n      setIsLoading(true);\n      await tonConnectUI.disconnect();\n      setBalance(null);\n    } catch (err) {\n      setError(err.message || 'Failed to disconnect wallet');\n      console.error('Wallet disconnect error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get wallet balance (mock for now)\n  const getBalance = useCallback(async () => {\n    if (!address) return null;\n    try {\n      setIsLoading(true);\n      // Mock balance for testing - in production you'd call TON API\n      const mockBalance = (Math.random() * 100).toFixed(2);\n      setBalance(mockBalance);\n      return mockBalance;\n    } catch (err) {\n      setError(err.message || 'Failed to get balance');\n      console.error('Balance fetch error:', err);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [address]);\n\n  // Send transaction to smart contract\n  const sendTransaction = async transaction => {\n    if (!wallet || !address) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      setIsLoading(true);\n      setError(null);\n      console.log('📤 Sending transaction:', transaction);\n\n      // Send transaction using TON Connect UI\n      const result = await tonConnectUI.sendTransaction(transaction);\n      console.log('✅ Transaction sent successfully:', result);\n      return result;\n    } catch (err) {\n      const errorMessage = err.message || 'Transaction failed';\n      setError(errorMessage);\n      console.error('❌ Transaction error:', err);\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Legacy placeBet function for backward compatibility\n  const placeBet = async betAmount => {\n    try {\n      console.log(`🎰 Legacy placeBet called with ${betAmount} TON`);\n\n      // For development, just simulate the bet\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🎰 Simulating bet in development mode');\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay\n        return {\n          success: true,\n          txHash: 'mock_tx_' + Date.now(),\n          amount: betAmount\n        };\n      }\n\n      // This should not be used anymore - use the contract hook instead\n      throw new Error('Please use the contract hook for placing bets');\n    } catch (err) {\n      console.error('Bet placement error:', err);\n      throw err;\n    }\n  };\n\n  // Auto-refresh balance when wallet connects\n  useEffect(() => {\n    if (isConnected && !balance) {\n      getBalance();\n    }\n  }, [isConnected, balance, getBalance]);\n\n  // Register user with backend when wallet connects\n  useEffect(() => {\n    if (isConnected && address && user) {\n      console.log('👤 Wallet connected, registering user with backend...');\n      userService.registerUser(address, user, (user === null || user === void 0 ? void 0 : user.referralCode) || undefined);\n    }\n  }, [isConnected, address, user]);\n  return {\n    // Connection state\n    isConnected,\n    isLoading,\n    isRestoringConnection,\n    error,\n    // Wallet info\n    wallet: getWalletInfo(),\n    address,\n    formattedAddress: getFormattedAddress(),\n    balance,\n    // Actions\n    connectWallet,\n    disconnectWallet,\n    getBalance,\n    sendTransaction,\n    placeBet,\n    // Legacy - use contract hook instead\n\n    // Utils\n    setError: err => setError(err)\n  };\n};\n_s(useTonConnect, \"TjjVilCaiiiUXHwCOpRw5JsU/4c=\", false, function () {\n  return [useTonConnectUI, useTonWallet, useTelegramWebApp];\n});\nexport default useTonConnect;","map":{"version":3,"names":["useState","useEffect","useCallback","useTonConnectUI","useTonWallet","Address","userService","useTelegramWebApp","useTonConnect","_s","_tonConnectUI$account","tonConnectUI","wallet","balance","setBalance","isRestoringConnection","setIsRestoringConnection","user","rawAddress","account","address","parse","toString","bounceable","urlSafe","undefined","console","log","hasWallet","hasAccount","isConnected","bounceableAddress","isBounceable","startsWith","timeout","setTimeout","clearTimeout","isLoading","setIsLoading","error","setError","getFormattedAddress","slice","getWalletInfo","name","device","appName","formattedAddress","imageUrl","appImage","platform","connectWallet","err","message","disconnectWallet","disconnect","getBalance","mockBalance","Math","random","toFixed","sendTransaction","transaction","Error","result","errorMessage","placeBet","betAmount","process","env","NODE_ENV","Promise","resolve","success","txHash","Date","now","amount","registerUser","referralCode"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useTonConnect.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useTonConnectUI, useTonWallet } from '@tonconnect/ui-react';\nimport { Address } from '@ton/core';\nimport userService from '../services/userService';\nimport useTelegramWebApp from './useTelegramWebApp';\n\nconst useTonConnect = () => {\n  const [tonConnectUI] = useTonConnectUI();\n  const wallet = useTonWallet();\n  const [balance, setBalance] = useState(null);\n  const [isRestoringConnection, setIsRestoringConnection] = useState(true);\n  const { user } = useTelegramWebApp();\n\n  // Get bounceable address using proper TON Core Address handling\n  const rawAddress = tonConnectUI.account?.address;\n  const address = rawAddress ? Address.parse(rawAddress).toString({ bounceable: true, urlSafe: true }) : undefined;\n  \n  // Handle connection restoration loading state\n  useEffect(() => {\n    console.log('🔍 TON Connect state check:', { \n      hasWallet: !!wallet,\n      hasAccount: !!tonConnectUI.account,\n      rawAddress,\n      address,\n      isConnected: !!(wallet && address),\n      isRestoringConnection\n    });\n    \n    if (rawAddress && address) {\n      console.log('✅ Address restored from TON Connect:', { \n        rawAddress, \n        bounceableAddress: address, \n        isBounceable: address.startsWith('EQ') \n      });\n      setIsRestoringConnection(false);\n    } else if (!wallet && !tonConnectUI.account) {\n      // No wallet at all - stop loading\n      console.log('❌ No wallet connection detected - stopping restoration loading');\n      setIsRestoringConnection(false);\n    }\n  }, [wallet, tonConnectUI.account, rawAddress, address, isRestoringConnection]);\n\n  // Timeout for restoration loading (prevent infinite loading)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (isRestoringConnection) {\n        console.log('⏰ Connection restoration timeout - stopping loading');\n        setIsRestoringConnection(false);\n      }\n    }, 5000); // 5 second timeout\n\n    return () => clearTimeout(timeout);\n  }, [isRestoringConnection]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if wallet is connected and has an address\n  const isConnected = !!(wallet && address);\n\n  // Get formatted address\n  const getFormattedAddress = () => {\n    if (!address) return null;\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  // Get wallet info\n  const getWalletInfo = () => {\n    if (!wallet) return null;\n    \n    return {\n      name: wallet.device.appName,\n      address: address,\n      formattedAddress: getFormattedAddress(),\n      imageUrl: wallet.device.appImage || null,\n      platform: wallet.device.platform\n    };\n  };\n\n  // Connect wallet\n  const connectWallet = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      await tonConnectUI.connectWallet();\n    } catch (err) {\n      setError(err.message || 'Failed to connect wallet');\n      console.error('Wallet connection error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = async () => {\n    try {\n      setIsLoading(true);\n      await tonConnectUI.disconnect();\n      setBalance(null);\n    } catch (err) {\n      setError(err.message || 'Failed to disconnect wallet');\n      console.error('Wallet disconnect error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get wallet balance (mock for now)\n  const getBalance = useCallback(async () => {\n    if (!address) return null;\n    \n    try {\n      setIsLoading(true);\n      // Mock balance for testing - in production you'd call TON API\n      const mockBalance = (Math.random() * 100).toFixed(2);\n      setBalance(mockBalance);\n      return mockBalance;\n    } catch (err) {\n      setError(err.message || 'Failed to get balance');\n      console.error('Balance fetch error:', err);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [address]);\n\n  // Send transaction to smart contract\n  const sendTransaction = async (transaction) => {\n    if (!wallet || !address) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      console.log('📤 Sending transaction:', transaction);\n\n      // Send transaction using TON Connect UI\n      const result = await tonConnectUI.sendTransaction(transaction);\n      \n      console.log('✅ Transaction sent successfully:', result);\n      return result;\n    } catch (err) {\n      const errorMessage = err.message || 'Transaction failed';\n      setError(errorMessage);\n      console.error('❌ Transaction error:', err);\n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Legacy placeBet function for backward compatibility\n  const placeBet = async (betAmount) => {\n    try {\n      console.log(`🎰 Legacy placeBet called with ${betAmount} TON`);\n      \n      // For development, just simulate the bet\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🎰 Simulating bet in development mode');\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay\n        return {\n          success: true,\n          txHash: 'mock_tx_' + Date.now(),\n          amount: betAmount\n        };\n      }\n\n      // This should not be used anymore - use the contract hook instead\n      throw new Error('Please use the contract hook for placing bets');\n    } catch (err) {\n      console.error('Bet placement error:', err);\n      throw err;\n    }\n  };\n\n  // Auto-refresh balance when wallet connects\n  useEffect(() => {\n    if (isConnected && !balance) {\n      getBalance();\n    }\n  }, [isConnected, balance, getBalance]);\n\n  // Register user with backend when wallet connects\n  useEffect(() => {\n    if (isConnected && address && user) {\n      console.log('👤 Wallet connected, registering user with backend...');\n      userService.registerUser(address, user, user?.referralCode || undefined);\n    }\n  }, [isConnected, address, user]);\n\n  return {\n    // Connection state\n    isConnected,\n    isLoading,\n    isRestoringConnection,\n    error,\n    \n    // Wallet info\n    wallet: getWalletInfo(),\n    address,\n    formattedAddress: getFormattedAddress(),\n    balance,\n    \n    // Actions\n    connectWallet,\n    disconnectWallet,\n    getBalance,\n    sendTransaction,\n    placeBet, // Legacy - use contract hook instead\n    \n    // Utils\n    setError: (err) => setError(err)\n  };\n};\n\nexport default useTonConnect; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}