{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbkdf2_sha512 = void 0;\nasync function pbkdf2_sha512(key, salt, iterations, keyLen) {\n  const keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;\n  const saltBuffer = typeof salt === 'string' ? Buffer.from(salt, 'utf-8') : salt;\n  const pbkdf2_key = await window.crypto.subtle.importKey(\"raw\", keyBuffer, {\n    name: \"PBKDF2\"\n  }, false, [\"deriveBits\"]);\n  const derivedBits = await window.crypto.subtle.deriveBits({\n    name: \"PBKDF2\",\n    hash: \"SHA-512\",\n    salt: saltBuffer,\n    iterations: iterations\n  }, pbkdf2_key, keyLen * 8);\n  return Buffer.from(derivedBits);\n}\nexports.pbkdf2_sha512 = pbkdf2_sha512;","map":{"version":3,"names":["Object","defineProperty","exports","value","pbkdf2_sha512","key","salt","iterations","keyLen","keyBuffer","Buffer","from","saltBuffer","pbkdf2_key","window","crypto","subtle","importKey","name","derivedBits","deriveBits","hash"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/crypto-primitives/dist/browser/pbkdf2_sha512.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2_sha512 = void 0;\nasync function pbkdf2_sha512(key, salt, iterations, keyLen) {\n    const keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;\n    const saltBuffer = typeof salt === 'string' ? Buffer.from(salt, 'utf-8') : salt;\n    const pbkdf2_key = await window.crypto.subtle.importKey(\"raw\", keyBuffer, { name: \"PBKDF2\" }, false, [\"deriveBits\"]);\n    const derivedBits = await window.crypto.subtle.deriveBits({ name: \"PBKDF2\", hash: \"SHA-512\", salt: saltBuffer, iterations: iterations }, pbkdf2_key, keyLen * 8);\n    return Buffer.from(derivedBits);\n}\nexports.pbkdf2_sha512 = pbkdf2_sha512;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,eAAeA,aAAaA,CAACC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAE;EACxD,MAAMC,SAAS,GAAG,OAAOJ,GAAG,KAAK,QAAQ,GAAGK,MAAM,CAACC,IAAI,CAACN,GAAG,EAAE,OAAO,CAAC,GAAGA,GAAG;EAC3E,MAAMO,UAAU,GAAG,OAAON,IAAI,KAAK,QAAQ,GAAGI,MAAM,CAACC,IAAI,CAACL,IAAI,EAAE,OAAO,CAAC,GAAGA,IAAI;EAC/E,MAAMO,UAAU,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,SAAS,CAAC,KAAK,EAAER,SAAS,EAAE;IAAES,IAAI,EAAE;EAAS,CAAC,EAAE,KAAK,EAAE,CAAC,YAAY,CAAC,CAAC;EACpH,MAAMC,WAAW,GAAG,MAAML,MAAM,CAACC,MAAM,CAACC,MAAM,CAACI,UAAU,CAAC;IAAEF,IAAI,EAAE,QAAQ;IAAEG,IAAI,EAAE,SAAS;IAAEf,IAAI,EAAEM,UAAU;IAAEL,UAAU,EAAEA;EAAW,CAAC,EAAEM,UAAU,EAAEL,MAAM,GAAG,CAAC,CAAC;EAChK,OAAOE,MAAM,CAACC,IAAI,CAACQ,WAAW,CAAC;AACnC;AACAjB,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}