{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo, memo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport GameArea from './components/GameArea';\nimport WalletConnection from './components/WalletConnection';\nimport PlayerProfile from './components/PlayerProfile';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport Header from './components/Header';\nimport RecentWinners from './components/RecentWinners';\nimport SimpleCarousel from './components/SimpleCarousel';\nimport ReferralSystem from './components/ReferralSystem';\nimport { TonIcon } from './components/IconComponents';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport useReferralAutoRegistration from './hooks/useReferralAutoRegistration';\nimport { DollarSign, User, Loader2, Trophy, Share2, Users, Target, Coins } from 'lucide-react';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\nfunction AppContent() {\n  _s();\n  var _contractState$timer2;\n  // Global referral auto-registration\n  useReferralAutoRegistration();\n\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.1);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n\n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  const [isInWinnerState, setIsInWinnerState] = useState(false); // Blocks new winner broadcasts\n\n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  // Note: carouselRef removed - now using Swiper component\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n  }, [gameBettors]);\n  useEffect(() => {\n    contractWinnerRef.current = contractWinner;\n  }, [contractWinner]);\n  useEffect(() => {\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n  }, [showWinnerAnnouncement]);\n  useEffect(() => {\n    waitingForWinnerRef.current = waitingForWinner;\n  }, [waitingForWinner]);\n  useEffect(() => {\n    previousRoundBettorsRef.current = previousRoundBettors;\n  }, [previousRoundBettors]);\n  useEffect(() => {\n    timeRemainingRef.current = timeRemaining;\n  }, [timeRemaining]);\n  useEffect(() => {\n    showWinnerVisuallyRef.current = showWinnerVisually;\n  }, [showWinnerVisually]);\n  useEffect(() => {\n    isInWinnerStateRef.current = isInWinnerState;\n  }, [isInWinnerState]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n\n    // Block winner broadcasts if already in winner state\n    if (isInWinnerStateRef.current) {\n      if (process.env.NODE_ENV === 'development') {\n        // console.log(`🚫 BLOCKED - Already in winner state, ignoring ${source}`);\n      }\n      return false;\n    }\n\n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      return false;\n    }\n\n    // Winner sound removed for performance\n\n    // Enter winner state to block future broadcasts\n    setIsInWinnerState(true);\n\n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n\n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n\n    // Start animation - winner visual will appear after animation lands on winner\n    setTimeout(() => {\n      setShowWinnerVisually(true);\n    }, 3000); // Give animation time to land properly\n\n    return true;\n  }, []);\n\n  // Telegram integration\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n\n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    var _contractState$curren;\n    if (!contractState) return contractState;\n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' ? ((_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || 0 : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n\n  // Calculate user stats from gameBettors data - optimized with shallow comparison\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address || bettor.walletAddress === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors.length, address, isConnected]); // Optimized dependencies\n\n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n\n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n\n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    if (!liveJackpotValue) return 0;\n    return userBetTotal / liveJackpotValue * 100;\n  }, [userBetTotal, jackpotValue, gameBettors.length, isConnected, address]); // Optimized dependencies\n\n  // Use automation timer or fallback to UI timer - only sync if significant difference\n  useEffect(() => {\n    var _contractState$timer;\n    if (((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) !== undefined) {\n      setTimeRemaining(prev => {\n        const backendTime = contractState.timer.timeRemaining;\n        const timeDiff = Math.abs(prev - backendTime);\n\n        // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n        if (waitingForWinner || isInWinnerState) {\n          return prev;\n        }\n\n        // Only sync if difference is 5+ seconds or backend is significantly ahead\n        if (timeDiff >= 5 || backendTime > prev + 2) {\n          return backendTime;\n        }\n\n        // Keep local countdown running for smooth performance\n        return prev;\n      });\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining, waitingForWinner, isInWinnerState]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n\n          // Play countdown sound for final 5 seconds (more dramatic)\n          if (newTime <= 5 && newTime > 0) {\n            // Countdown sound removed for performance\n          }\n\n          // When we reach 0, trigger \"analyzing bets\" state locally\n          if (newTime === 0) {\n            // Analyze sound removed for performance\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n          }\n          return newTime;\n        }\n\n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n    return () => {\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Note: Old animation useEffect removed - now using Swiper component for all carousel animations\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    // Socket connection established\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', timerData => {\n      // Timer update received\n\n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n\n      // Only update timeRemaining if it's significantly different (>5 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n\n        // Only clear winner state when new round detected AND timer is significantly higher (real new round)\n        if (isNewRound && contractWinner && newTimeRemaining > 200) {\n          // New round detected - clearing winner state\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n        }\n\n        // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n        if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n          // Timer sync blocked - in analyzing/winner state\n          return prev;\n        }\n\n        // Sync if: new round, big difference (>5s), or timer reset (server > client)\n        if (isNewRound || timeDiff >= 5 || newTimeRemaining > prev + 2) {\n          // Timer synced\n          return newTimeRemaining;\n        }\n\n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', roundData => {\n      // console.log('🎰 App: New round detected via socket:', roundData);\n      // console.log('🔓 Exiting winner state - new round started');\n\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsInWinnerState(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n\n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n\n      // Note: Animation reset handled by Swiper component\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', gameState => {\n      var _gameState$timer;\n      // console.log('🎮 App: Game state update:', gameState);\n\n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = (_gameState$timer = gameState.timer) === null || _gameState$timer === void 0 ? void 0 : _gameState$timer.timeRemaining;\n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n\n          // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n          if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n            // console.log('⏰ GameState timer sync blocked - in analyzing/winner state');\n            return prev;\n          }\n\n          // Only sync if there's a significant difference (>=5s) or if backend is ahead\n          if (timeDiff >= 5 || backendTimeRemaining > prev + 2) {\n            // console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff >= 5 ? '(>=5s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n\n          // Keep local countdown running if difference is small\n          // console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        var _gameState$timer2, _gameState$timer3;\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n\n        // Check if this is a new round with active timer - this means new round started\n        const isNewRound = roundNumber !== currentRound;\n        const hasActiveTimer = ((_gameState$timer2 = gameState.timer) === null || _gameState$timer2 === void 0 ? void 0 : _gameState$timer2.isActive) || ((_gameState$timer3 = gameState.timer) === null || _gameState$timer3 === void 0 ? void 0 : _gameState$timer3.timeRemaining) > 60;\n        if (isNewRound && hasActiveTimer && isInWinnerStateRef.current) {\n          // console.log('🔄 GameState detected NEW ROUND with active timer - clearing winner state');\n          // console.log('🔓 Exiting winner state - new round started via gameState');\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          // Don't clear previousRoundBettors immediately - let carousel finish its animation\n          setTimeout(() => {\n            // console.log('🔄 Delayed clearing of previous round bettors');\n            setPreviousRoundBettors([]);\n          }, 2000); // Give carousel time to finish\n          winnerCoordinator.reset();\n        }\n        setCurrentRound(roundNumber);\n      }\n\n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          // console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        setWaitingForWinner(gameState.isWaitingForWinner);\n\n        // If waitingForWinner becomes false AND we have a new round with active timer, reset winner state\n        if (!gameState.isWaitingForWinner && isInWinnerStateRef.current) {\n          var _gameState$timer4, _gameState$timer5;\n          const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n          const isNewRound = roundNumber && roundNumber !== currentRound;\n          const hasActiveTimer = ((_gameState$timer4 = gameState.timer) === null || _gameState$timer4 === void 0 ? void 0 : _gameState$timer4.isActive) || ((_gameState$timer5 = gameState.timer) === null || _gameState$timer5 === void 0 ? void 0 : _gameState$timer5.timeRemaining) > 60;\n          if (isNewRound && hasActiveTimer) {\n            // console.log('🔄 waitingForWinner false + new round + active timer = new round started - clearing winner state');\n            // console.log('🔓 Exiting winner state - new round confirmed');\n            setIsInWinnerState(false);\n            setContractWinner(null);\n            setShowWinnerAnnouncement(false);\n            setShowWinnerVisually(false);\n            setPostWinnerLoading(false);\n            setIsAnyWinnerDisplayActive(false);\n            // Don't clear previousRoundBettors immediately - let carousel finish its animation\n            setTimeout(() => {\n              // console.log('🔄 Delayed clearing of previous round bettors (waitingForWinner)');\n              setPreviousRoundBettors([]);\n            }, 2000); // Give carousel time to finish\n            winnerCoordinator.reset();\n          } else {\n            // console.log('⏳ waitingForWinner became false, but keeping winner state (no new round detected)');\n          }\n        }\n      }\n\n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          // console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n\n          // Play bet sound when new bettor joins (if count increased)\n          if (gameState.bettors.length > gameBettorsRef.current.length) {\n            // Bet sound removed for performance\n          }\n\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n\n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        setGameBettors(gameState.bettors);\n      }\n\n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', gameData => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', data => {\n      // Bet sound removed for performance\n\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', data => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n\n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n\n      // Don't reset winner state just because waitingForWinner changed\n      // Only reset when we get explicit newRound/roundReset events\n      setWaitingForWinner(isWaiting);\n\n      // Log but don't auto-reset winner state\n      if (!isWaiting && isInWinnerStateRef.current) {\n        console.log('⏳ waitingForWinner event became false, but keeping winner state until explicit new round');\n      }\n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', winnerData => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', winnerData => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', resetData => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      console.log('🔓 Exiting winner state - round reset');\n\n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n\n      // Clear ALL winner states since this is a fresh timer\n      setIsInWinnerState(false);\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n\n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      // Don't clear previousRoundBettors immediately on reset - let any ongoing animation finish\n      setTimeout(() => {\n        console.log('🔄 Delayed clearing of previous round bettors (round reset)');\n        setPreviousRoundBettors([]);\n      }, 1000);\n\n      // Note: Animation reset handled by Swiper component\n    });\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = e => {\n    const inputValue = e.target.value;\n\n    // Allow empty input or numbers with decimal points (both . and ,)\n    if (inputValue === '' || inputValue === '.' || inputValue === ',' || /^\\d*[.,]?\\d*$/.test(inputValue)) {\n      // Convert comma to period for consistency\n      const normalizedValue = inputValue.replace(',', '.');\n\n      // For empty or just \".\" input, keep the raw value but show comma if user typed comma\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(inputValue); // Keep original input (might be comma)\n        return;\n      }\n\n      // For valid numbers, check limits but preserve decimal typing\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(inputValue); // Keep the original input format (comma or period)\n      }\n    }\n  };\n  const handleTabChange = tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    // Convert comma to period before parsing for validation\n    const normalizedBetAmount = betAmount.toString().replace(',', '.');\n    const numericBetAmount = parseFloat(normalizedBetAmount);\n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n    try {\n      hapticFeedback('medium');\n      await placeBet(numericBetAmount);\n\n      // Bet sound removed for performance\n      console.log('✅ Bet placed successfully');\n\n      // Reset bet amount after successful bet\n      setBetAmount(0.1);\n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: activeTab === 'profile' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile-container\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(PlayerProfile, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 15\n        }, this) : activeTab === 'referrals' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"referrals-container\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ReferralSystem, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-container\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"betting-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bet-input-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"bet-amount-input\",\n                  value: betAmount,\n                  onChange: handleBetChange,\n                  placeholder: \"0.000\",\n                  inputMode: \"decimal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 675,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"bet-increment-btn\",\n                  onClick: () => setBetAmount(prev => {\n                    const currentValue = parseFloat(prev) || 0;\n                    return Math.min(currentValue + 0.1, 10).toFixed(1);\n                  }),\n                  children: \"+0.1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 683,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"balance-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"balance-label\",\n                  children: \"Balance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 693,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"balance-amount\",\n                  children: [isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000', /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"balance-symbol\",\n                    children: \"TON\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 696,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"bet-button\",\n                onClick: handlePlaceBet,\n                disabled: isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement,\n                children: contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' : isPlacingBet ? 'Betting...' : 'Bet'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 700,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stats-grid four-cards\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-card jackpot-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-value\",\n                  children: [/*#__PURE__*/_jsxDEV(TonIcon, {\n                    size: 14,\n                    className: \"wager-ton-icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 714,\n                    columnNumber: 19\n                  }, this), jackpotValue.toFixed(3)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 713,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Jackpot Value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 717,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 712,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-value\",\n                  children: [/*#__PURE__*/_jsxDEV(TonIcon, {\n                    size: 14,\n                    className: \"wager-ton-icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 721,\n                    columnNumber: 19\n                  }, this), userBetTotal.toFixed(3)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 720,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Your Wager\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 724,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 719,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-card chance-stat\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-value\",\n                  children: [userWinChance.toFixed(2), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 727,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Your Chance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 728,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-value\",\n                  children: [Math.floor((timeRemaining || 0) / 60), \":\", ((timeRemaining || 0) % 60).toString().padStart(2, '0')]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 731,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Time Remaining\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 734,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 730,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"players-carousel-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `carousel-header ${timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? 'analyzing' : showWinnerVisually ? 'winner' : ''}`,\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? \"🔍 Analyzing Bets...\" : showWinnerVisually && contractWinner ? `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` : `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 744,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 740,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(SimpleCarousel, {\n                players: (() => {\n                  // Same data logic as before\n                  const bettorsToShow = contractWinner || waitingForWinner ? previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors : gameBettors.length > 0 ? gameBettors : [];\n\n                  // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                  return [...bettorsToShow, ...Array.from({\n                    length: Math.max(0, 6 - bettorsToShow.length)\n                  }, () => null)];\n                })(),\n                contractWinner: contractWinner,\n                isSpinning: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually,\n                onSpinComplete: () => {\n                  console.log('🎯 Winner animation completed in SimpleCarousel!');\n                  console.log('🔄 Carousel finished - now safe to clear winner state in future');\n                  // Winner is already set via showWinnerVisually\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 755,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 739,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bets-deflate-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bets-deflate-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Current Round Bets\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 781,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"round-info\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"#\", currentRound]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 783,\n                    columnNumber: 15\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 782,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bets-deflate-list\",\n                children: [(() => {\n                  const bettorsToShow = contractWinner || waitingForWinner ? previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors : gameBettors.length > 0 ? gameBettors : [];\n                  return bettorsToShow.map((bettor, index) => {\n                    const betAmount = parseFloat(bettor.amount || 0);\n                    const currentJackpot = parseFloat(jackpotValue || 0);\n                    const chance = currentJackpot > 0 ? (betAmount / currentJackpot * 100).toFixed(2) : '0.00';\n                    const usdValue = (betAmount * 2.5).toFixed(1); // Approximate USD value\n\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"bet-deflate-card\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"bet-deflate-avatar\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"avatar-icon\",\n                          children: /*#__PURE__*/_jsxDEV(Users, {\n                            size: 20\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 803,\n                            columnNumber: 25\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 802,\n                          columnNumber: 23\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"avatar-count\",\n                          children: \"1\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 805,\n                          columnNumber: 23\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 801,\n                        columnNumber: 21\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"bet-deflate-info\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"bet-deflate-username\",\n                          children: bettor.username || bettor.displayName || bettor.winner || `Player_${bettor.address.slice(-4)}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 809,\n                          columnNumber: 23\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"bet-deflate-amount\",\n                          children: [/*#__PURE__*/_jsxDEV(TonIcon, {\n                            size: 16,\n                            className: \"bet-deflate-ton-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 813,\n                            columnNumber: 25\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: betAmount.toFixed(3)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 814,\n                            columnNumber: 25\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"bet-deflate-usd\",\n                            children: [\"~$\", usdValue]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 815,\n                            columnNumber: 25\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 812,\n                          columnNumber: 23\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 808,\n                        columnNumber: 21\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"bet-deflate-chance\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"chance-label\",\n                          children: [/*#__PURE__*/_jsxDEV(Target, {\n                            size: 12\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 821,\n                            columnNumber: 25\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: \"Chance\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 822,\n                            columnNumber: 25\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 820,\n                          columnNumber: 23\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"chance-value\",\n                          children: [chance, \"%\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 824,\n                          columnNumber: 23\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 819,\n                        columnNumber: 21\n                      }, this)]\n                    }, `${bettor.address}-${index}`, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 800,\n                      columnNumber: 19\n                    }, this);\n                  });\n                })(), (() => {\n                  const bettorsToShow = contractWinner || waitingForWinner ? previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors : gameBettors.length > 0 ? gameBettors : [];\n                  if (bettorsToShow.length === 0) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"bet-deflate-empty\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"empty-icon\",\n                        children: /*#__PURE__*/_jsxDEV(Coins, {\n                          size: 32\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 840,\n                          columnNumber: 23\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 839,\n                        columnNumber: 21\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"empty-text\",\n                        children: \"No bets yet\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 842,\n                        columnNumber: 21\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"empty-subtext\",\n                        children: \"Be the first to place a bet!\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 843,\n                        columnNumber: 21\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 838,\n                      columnNumber: 19\n                    }, this);\n                  }\n                  return null;\n                })()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(RecentWinners, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 853,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-navbar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"navbar-items\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `navbar-item ${activeTab === 'jackpot' ? 'active' : ''}`,\n            onClick: () => setActiveTab('jackpot'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-icon\",\n              children: /*#__PURE__*/_jsxDEV(DollarSign, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 867,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-label\",\n              children: \"Jackpot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 868,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 863,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `navbar-item ${activeTab === 'profile' ? 'active' : ''}`,\n            onClick: () => setActiveTab('profile'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-icon\",\n              children: /*#__PURE__*/_jsxDEV(User, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 875,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-label\",\n              children: \"Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 876,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 871,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `navbar-item ${activeTab === 'referrals' ? 'active' : ''}`,\n            onClick: () => setActiveTab('referrals'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-icon\",\n              children: /*#__PURE__*/_jsxDEV(Share2, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 883,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 883,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-label\",\n              children: \"Referrals\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 9\n    }, this), isLoadingContract && !contractWinner && !showWinnerAnnouncement && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: /*#__PURE__*/_jsxDEV(Loader2, {\n          size: 24,\n          className: \"animate-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 44\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading contract data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinnerBroadcast, {\n      socketService: socketService\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 654,\n    columnNumber: 5\n  }, this);\n}\n\n// Main App component with TON Connect Provider\n_s(AppContent, \"TJZ6DpT5jaq847cvhK/pHGDIRhk=\", false, function () {\n  return [useReferralAutoRegistration, useTelegramWebApp, useJackpotContract];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(TonConnectUIProvider, {\n    manifestUrl: manifestUrl,\n    uiPreferences: uiOptions.uiPreferences,\n    language: uiOptions.language,\n    restoreConnection: uiOptions.restoreConnection,\n    actionsConfiguration: uiOptions.actionsConfiguration,\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 907,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","memo","TonConnectUIProvider","GameArea","WalletConnection","PlayerProfile","WinnerBroadcast","Header","RecentWinners","SimpleCarousel","ReferralSystem","TonIcon","useTelegramWebApp","useJackpotContract","useReferralAutoRegistration","DollarSign","User","Loader2","Trophy","Share2","Users","Target","Coins","socketService","winnerCoordinator","uiOptions","jsxDEV","_jsxDEV","Fragment","_Fragment","manifestUrl","AppContent","_s","_contractState$timer2","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","showWinnerVisually","setShowWinnerVisually","isInWinnerState","setIsInWinnerState","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","waitingForWinnerRef","previousRoundBettorsRef","timeRemainingRef","showWinnerVisuallyRef","isInWinnerStateRef","current","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","process","env","NODE_ENV","shouldBlock","setActive","setTimeout","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","address","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","_contractState$curren","timer","isActive","timeElapsed","timerExpired","undefined","jackpotValue","totalJackpot","isLive","userBetTotal","length","filter","bettor","walletAddress","reduce","total","amount","userWinChance","currentRoundTotal","liveJackpotValue","_contractState$timer","prev","backendTime","timeDiff","Math","abs","countdown","setInterval","newTime","clearInterval","connect","on","timerData","console","warn","newTimeRemaining","newRoundNumber","isNewRound","roundData","reset","gameState","_gameState$timer","backendTimeRemaining","_gameState$timer2","_gameState$timer3","hasActiveTimer","isWaitingForWinner","_gameState$timer4","_gameState$timer5","bettors","Array","isArray","log","winnerAnnouncement","gameData","data","isWaiting","message","resetData","off","disconnect","handleBetChange","e","inputValue","target","value","test","normalizedValue","replace","numericValue","parseFloat","isNaN","handleTabChange","tab","handlePlaceBet","normalizedBetAmount","toString","numericBetAmount","toFixed","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","inputMode","onClick","currentValue","min","userBalance","disabled","size","floor","padStart","username","displayName","winner","players","bettorsToShow","from","max","isSpinning","onSpinComplete","map","index","currentJackpot","chance","usdValue","slice","_c","App","uiPreferences","language","restoreConnection","actionsConfiguration","_c2","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo, memo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport GameArea from './components/GameArea';\nimport WalletConnection from './components/WalletConnection';\nimport PlayerProfile from './components/PlayerProfile';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport Header from './components/Header';\nimport RecentWinners from './components/RecentWinners';\nimport SimpleCarousel from './components/SimpleCarousel';\nimport ReferralSystem from './components/ReferralSystem';\n\nimport { TonIcon } from './components/IconComponents';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport useReferralAutoRegistration from './hooks/useReferralAutoRegistration';\nimport { DollarSign, User, Loader2, Trophy, Share2, Users, Target, Coins } from 'lucide-react';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\n\nimport { uiOptions } from './config/tonconnect';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Global referral auto-registration\n  useReferralAutoRegistration();\n  \n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.1);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  const [isInWinnerState, setIsInWinnerState] = useState(false); // Blocks new winner broadcasts\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  // Note: carouselRef removed - now using Swiper component\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n  \n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { \n    contractWinnerRef.current = contractWinner; \n  }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n  useEffect(() => { waitingForWinnerRef.current = waitingForWinner; }, [waitingForWinner]);\n  useEffect(() => { previousRoundBettorsRef.current = previousRoundBettors; }, [previousRoundBettors]);\n  useEffect(() => { timeRemainingRef.current = timeRemaining; }, [timeRemaining]);\n  useEffect(() => { showWinnerVisuallyRef.current = showWinnerVisually; }, [showWinnerVisually]);\n  useEffect(() => { isInWinnerStateRef.current = isInWinnerState; }, [isInWinnerState]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Block winner broadcasts if already in winner state\n    if (isInWinnerStateRef.current) {\n      if (process.env.NODE_ENV === 'development') {\n        // console.log(`🚫 BLOCKED - Already in winner state, ignoring ${source}`);\n      }\n      return false;\n    }\n    \n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      return false;\n    }\n    \n    // Winner sound removed for performance\n    \n    // Enter winner state to block future broadcasts\n    setIsInWinnerState(true);\n    \n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Start animation - winner visual will appear after animation lands on winner\n    setTimeout(() => {\n      setShowWinnerVisually(true);\n    }, 3000); // Give animation time to land properly\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    \n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\n        : (Number(rawAdminInfo.currentRound) || 0)\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    if (!contractState) return contractState;\n    \n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' \n        ? (contractState.currentRound?.roundNumber || 0)\n        : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  \n  // Calculate user stats from gameBettors data - optimized with shallow comparison\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    \n    return gameBettors\n      .filter(bettor => \n        bettor.address === address || \n        bettor.walletAddress === address\n      )\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors.length, address, isConnected]); // Optimized dependencies\n  \n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n    \n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n    \n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    \n    if (!liveJackpotValue) return 0;\n    \n    return (userBetTotal / liveJackpotValue) * 100;\n  }, [userBetTotal, jackpotValue, gameBettors.length, isConnected, address]); // Optimized dependencies\n\n  // Use automation timer or fallback to UI timer - only sync if significant difference\n  useEffect(() => {\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(prev => {\n        const backendTime = contractState.timer.timeRemaining;\n        const timeDiff = Math.abs(prev - backendTime);\n        \n        // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n        if (waitingForWinner || isInWinnerState) {\n          return prev;\n        }\n        \n        // Only sync if difference is 5+ seconds or backend is significantly ahead\n        if (timeDiff >= 5 || backendTime > prev + 2) {\n          return backendTime;\n        }\n        \n        // Keep local countdown running for smooth performance\n        return prev;\n      });\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining, waitingForWinner, isInWinnerState]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          \n          // Play countdown sound for final 5 seconds (more dramatic)\n          if (newTime <= 5 && newTime > 0) {\n            // Countdown sound removed for performance\n          }\n        \n          // When we reach 0, trigger \"analyzing bets\" state locally\n        if (newTime === 0) {\n            // Analyze sound removed for performance\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n        }\n        \n        return newTime;\n        }\n        \n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n\n    return () => {\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Note: Old animation useEffect removed - now using Swiper component for all carousel animations\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    // Socket connection established\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      // Timer update received\n      \n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      \n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      \n              // Only update timeRemaining if it's significantly different (>5 seconds) or new round\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - newTimeRemaining);\n          const isNewRound = newRoundNumber !== currentRound;\n          \n          // Only clear winner state when new round detected AND timer is significantly higher (real new round)\n          if (isNewRound && contractWinner && newTimeRemaining > 200) {\n                    // New round detected - clearing winner state\n            setIsInWinnerState(false);\n            setContractWinner(null);\n            setShowWinnerAnnouncement(false);\n            setShowWinnerVisually(false);\n            setPostWinnerLoading(false);\n            setIsAnyWinnerDisplayActive(false);\n            setPreviousRoundBettors([]);\n          }\n          \n          // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n          if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n            // Timer sync blocked - in analyzing/winner state\n            return prev;\n          }\n          \n          // Sync if: new round, big difference (>5s), or timer reset (server > client)\n          if (isNewRound || timeDiff >= 5 || newTimeRemaining > prev + 2) {\n            // Timer synced\n            return newTimeRemaining;\n          }\n          \n          // Otherwise keep local countdown running smoothly\n          return prev;\n        });\n      \n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      // console.log('🎰 App: New round detected via socket:', roundData);\n      // console.log('🔓 Exiting winner state - new round started');\n      \n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsInWinnerState(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n      \n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n      \n      // Note: Animation reset handled by Swiper component\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      // console.log('🎮 App: Game state update:', gameState);\n      \n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = gameState.timer?.timeRemaining;\n      \n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n          \n          // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n          if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n            // console.log('⏰ GameState timer sync blocked - in analyzing/winner state');\n            return prev;\n          }\n          \n          // Only sync if there's a significant difference (>=5s) or if backend is ahead\n          if (timeDiff >= 5 || backendTimeRemaining > prev + 2) {\n            // console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff >= 5 ? '(>=5s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n          \n          // Keep local countdown running if difference is small\n          // console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        \n        // Check if this is a new round with active timer - this means new round started\n        const isNewRound = roundNumber !== currentRound;\n        const hasActiveTimer = gameState.timer?.isActive || gameState.timer?.timeRemaining > 60;\n        \n        if (isNewRound && hasActiveTimer && isInWinnerStateRef.current) {\n                  // console.log('🔄 GameState detected NEW ROUND with active timer - clearing winner state');\n        // console.log('🔓 Exiting winner state - new round started via gameState');\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          // Don't clear previousRoundBettors immediately - let carousel finish its animation\n          setTimeout(() => {\n            // console.log('🔄 Delayed clearing of previous round bettors');\n            setPreviousRoundBettors([]);\n          }, 2000); // Give carousel time to finish\n          winnerCoordinator.reset();\n        }\n        \n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          // console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        \n        setWaitingForWinner(gameState.isWaitingForWinner);\n        \n        // If waitingForWinner becomes false AND we have a new round with active timer, reset winner state\n        if (!gameState.isWaitingForWinner && isInWinnerStateRef.current) {\n          const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n            ? gameState.currentRound.roundNumber \n            : gameState.currentRound;\n          const isNewRound = roundNumber && roundNumber !== currentRound;\n          const hasActiveTimer = gameState.timer?.isActive || gameState.timer?.timeRemaining > 60;\n          \n          if (isNewRound && hasActiveTimer) {\n                    // console.log('🔄 waitingForWinner false + new round + active timer = new round started - clearing winner state');\n        // console.log('🔓 Exiting winner state - new round confirmed');\n            setIsInWinnerState(false);\n            setContractWinner(null);\n            setShowWinnerAnnouncement(false);\n            setShowWinnerVisually(false);\n            setPostWinnerLoading(false);\n            setIsAnyWinnerDisplayActive(false);\n            // Don't clear previousRoundBettors immediately - let carousel finish its animation\n            setTimeout(() => {\n              // console.log('🔄 Delayed clearing of previous round bettors (waitingForWinner)');\n              setPreviousRoundBettors([]);\n            }, 2000); // Give carousel time to finish\n            winnerCoordinator.reset();\n          } else {\n            // console.log('⏳ waitingForWinner became false, but keeping winner state (no new round detected)');\n          }\n        }\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          // console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          \n          // Play bet sound when new bettor joins (if count increased)\n          if (gameState.bettors.length > gameBettorsRef.current.length) {\n            // Bet sound removed for performance\n          }\n          \n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        \n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        \n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      // Bet sound removed for performance\n      \n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (data) => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n      \n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      \n      // Don't reset winner state just because waitingForWinner changed\n      // Only reset when we get explicit newRound/roundReset events\n      setWaitingForWinner(isWaiting);\n      \n      // Log but don't auto-reset winner state\n      if (!isWaiting && isInWinnerStateRef.current) {\n        console.log('⏳ waitingForWinner event became false, but keeping winner state until explicit new round');\n      }\n      \n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', (resetData) => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      console.log('🔓 Exiting winner state - round reset');\n      \n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n      \n      // Clear ALL winner states since this is a fresh timer\n      setIsInWinnerState(false);\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      \n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      // Don't clear previousRoundBettors immediately on reset - let any ongoing animation finish\n      setTimeout(() => {\n        console.log('🔄 Delayed clearing of previous round bettors (round reset)');\n        setPreviousRoundBettors([]);\n      }, 1000);\n      \n      // Note: Animation reset handled by Swiper component\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    const inputValue = e.target.value;\n    \n    // Allow empty input or numbers with decimal points (both . and ,)\n    if (inputValue === '' || inputValue === '.' || inputValue === ',' || /^\\d*[.,]?\\d*$/.test(inputValue)) {\n      // Convert comma to period for consistency\n      const normalizedValue = inputValue.replace(',', '.');\n      \n      // For empty or just \".\" input, keep the raw value but show comma if user typed comma\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(inputValue); // Keep original input (might be comma)\n        return;\n      }\n      \n      // For valid numbers, check limits but preserve decimal typing\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(inputValue); // Keep the original input format (comma or period)\n      }\n    }\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    // Convert comma to period before parsing for validation\n    const normalizedBetAmount = betAmount.toString().replace(',', '.');\n    const numericBetAmount = parseFloat(normalizedBetAmount);\n    \n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n\n    try {\n      hapticFeedback('medium');\n      \n      await placeBet(numericBetAmount);\n      \n      // Bet sound removed for performance\n      console.log('✅ Bet placed successfully');\n      \n      // Reset bet amount after successful bet\n      setBetAmount(0.1);\n      \n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n        <div className=\"app-container\">\n          {/* Main Content */}\n          <div className=\"main-content\">\n            {activeTab === 'profile' ? (\n              <div className=\"profile-container\">\n                <Header />\n                <PlayerProfile />\n              </div>\n            ) : activeTab === 'referrals' ? (\n              <div className=\"referrals-container\">\n                <Header />\n                <ReferralSystem />\n              </div>\n            ) : (\n              <div className=\"jackpot-container\">\n                <Header />\n            <>\n            {/* Betting Section */}\n            <div className=\"betting-section\">\n              <div className=\"bet-input-section\">\n                <input \n                  type=\"text\" \n                  className=\"bet-amount-input\" \n                  value={betAmount}\n                  onChange={handleBetChange}\n                  placeholder=\"0.000\"\n                  inputMode=\"decimal\"\n                />\n                <button className=\"bet-increment-btn\" onClick={() => setBetAmount(prev => {\n                  const currentValue = parseFloat(prev) || 0;\n                  return Math.min(currentValue + 0.1, 10).toFixed(1);\n                })}>\n                  +0.1\n          </button>\n              </div>\n              \n              {/* Balance Section */}\n              <div className=\"balance-section\">\n                <div className=\"balance-label\">Balance</div>\n                <div className=\"balance-amount\">\n                  {isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000'}\n                  <span className=\"balance-symbol\">TON</span>\n                </div>\n              </div>\n              \n          <button \n                className=\"bet-button\" \n                onClick={handlePlaceBet}\n                disabled={isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement}\n          >\n                {contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' :\n                 isPlacingBet ? 'Betting...' : 'Bet'}\n          </button>\n        </div>\n\n            {/* Four Card Stats Grid */}\n            <div className=\"stats-grid four-cards\">\n              <div className=\"stat-card jackpot-card\">\n                <div className=\"stat-value\">\n                  <TonIcon size={14} className=\"wager-ton-icon\" />\n                  {jackpotValue.toFixed(3)}\n                </div>\n                <div className=\"stat-label\">Jackpot Value</div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">\n                  <TonIcon size={14} className=\"wager-ton-icon\" />\n                  {userBetTotal.toFixed(3)}\n                </div>\n                <div className=\"stat-label\">Your Wager</div>\n              </div>\n              <div className=\"stat-card chance-stat\">\n                <div className=\"stat-value\">{userWinChance.toFixed(2)}%</div>\n                <div className=\"stat-label\">Your Chance</div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">\n                  {Math.floor((timeRemaining || 0) / 60)}:{((timeRemaining || 0) % 60).toString().padStart(2, '0')}\n                </div>\n                <div className=\"stat-label\">Time Remaining</div>\n              </div>\n            </div>\n\n            {/* Players Carousel Section */}\n            <div className=\"players-carousel-section\">\n              <div className={`carousel-header ${\n                (timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? 'analyzing' : \n                showWinnerVisually ? 'winner' : ''\n              }`}>\n                <h3>\n                  {(timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? \n                    \"🔍 Analyzing Bets...\" : \n                    showWinnerVisually && contractWinner ? \n                    `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` :\n                    `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                  }\n                </h3>\n              </div>\n              \n              {/* NEW: Simple Swiper Carousel */}\n              <SimpleCarousel \n                players={(() => {\n                  // Same data logic as before\n                  const bettorsToShow = (contractWinner || waitingForWinner) ? \n                                       previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors :\n                                       gameBettors.length > 0 ? gameBettors : [];\n                  \n                  // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                  return [\n                    ...bettorsToShow,\n                    ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n                  ];\n                })()}\n                contractWinner={contractWinner}\n                isSpinning={(timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually)}\n                onSpinComplete={() => {\n                  console.log('🎯 Winner animation completed in SimpleCarousel!');\n                  console.log('🔄 Carousel finished - now safe to clear winner state in future');\n                  // Winner is already set via showWinnerVisually\n                }}\n              />\n        </div>\n        \n        {/* Bets Deflate Section */}\n        <div className=\"bets-deflate-section\">\n          <div className=\"bets-deflate-header\">\n            <h3>Current Round Bets</h3>\n            <div className=\"round-info\">\n              <span>#{currentRound}</span>\n            </div>\n          </div>\n          \n          <div className=\"bets-deflate-list\">\n            {(() => {\n              const bettorsToShow = (contractWinner || waitingForWinner) ? \n                                   previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors :\n                                   gameBettors.length > 0 ? gameBettors : [];\n              \n                             return bettorsToShow.map((bettor, index) => {\n                 const betAmount = parseFloat(bettor.amount || 0);\n                 const currentJackpot = parseFloat(jackpotValue || 0);\n                 const chance = currentJackpot > 0 ? ((betAmount / currentJackpot) * 100).toFixed(2) : '0.00';\n                 const usdValue = (betAmount * 2.5).toFixed(1); // Approximate USD value\n                \n                return (\n                  <div key={`${bettor.address}-${index}`} className=\"bet-deflate-card\">\n                    <div className=\"bet-deflate-avatar\">\n                      <div className=\"avatar-icon\">\n                        <Users size={20} />\n                      </div>\n                      <div className=\"avatar-count\">1</div>\n                    </div>\n                    \n                    <div className=\"bet-deflate-info\">\n                      <div className=\"bet-deflate-username\">\n                        {bettor.username || bettor.displayName || bettor.winner || `Player_${bettor.address.slice(-4)}`}\n                      </div>\n                      <div className=\"bet-deflate-amount\">\n                        <TonIcon size={16} className=\"bet-deflate-ton-icon\" />\n                        <span>{betAmount.toFixed(3)}</span>\n                        <div className=\"bet-deflate-usd\">~${usdValue}</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bet-deflate-chance\">\n                      <div className=\"chance-label\">\n                        <Target size={12} />\n                        <span>Chance</span>\n                      </div>\n                      <div className=\"chance-value\">{chance}%</div>\n                    </div>\n                  </div>\n                );\n              });\n            })()}\n            \n            {(() => {\n              const bettorsToShow = (contractWinner || waitingForWinner) ? \n                                   previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors :\n                                   gameBettors.length > 0 ? gameBettors : [];\n              \n              if (bettorsToShow.length === 0) {\n                return (\n                  <div className=\"bet-deflate-empty\">\n                    <div className=\"empty-icon\">\n                      <Coins size={32} />\n                    </div>\n                    <div className=\"empty-text\">No bets yet</div>\n                    <div className=\"empty-subtext\">Be the first to place a bet!</div>\n                  </div>\n                );\n              }\n              return null;\n            })()}\n          </div>\n        </div>\n        \n        {/* Recent Winners Section */}\n        <RecentWinners />\n        \n            </>\n              </div>\n            )}\n      </div>\n\n      {/* Mobile Navigation Bar */}\n      <div className=\"mobile-navbar\">\n        <div className=\"navbar-items\">\n          <button \n            className={`navbar-item ${activeTab === 'jackpot' ? 'active' : ''}`}\n            onClick={() => setActiveTab('jackpot')}\n          >\n            <div className=\"navbar-icon\"><DollarSign size={20} /></div>\n            <div className=\"navbar-label\">Jackpot</div>\n          </button>\n          \n          <button \n            className={`navbar-item ${activeTab === 'profile' ? 'active' : ''}`}\n            onClick={() => setActiveTab('profile')}\n          >\n            <div className=\"navbar-icon\"><User size={20} /></div>\n            <div className=\"navbar-label\">Profile</div>\n          </button>\n          \n          <button \n            className={`navbar-item ${activeTab === 'referrals' ? 'active' : ''}`}\n            onClick={() => setActiveTab('referrals')}\n          >\n            <div className=\"navbar-icon\"><Share2 size={20} /></div>\n            <div className=\"navbar-label\">Referrals</div>\n          </button>\n        </div>\n      </div>\n      </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && !contractWinner && !showWinnerAnnouncement && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\"><Loader2 size={24} className=\"animate-spin\" /></div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}