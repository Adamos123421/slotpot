{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Slice = void 0;\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst Builder_1 = require(\"./Builder\");\nconst strings_1 = require(\"./utils/strings\");\n/**\n * Slice is a class that allows to read cell data\n */\nclass Slice {\n  constructor(reader, refs) {\n    this[_a] = () => this.toString();\n    this._reader = reader.clone();\n    this._refs = [...refs];\n    this._refsOffset = 0;\n  }\n  /**\n   * Get remaining bits\n   */\n  get remainingBits() {\n    return this._reader.remaining;\n  }\n  /**\n   * Get offset bits\n   */\n  get offsetBits() {\n    return this._reader.offset;\n  }\n  /**\n   * Get remaining refs\n   */\n  get remainingRefs() {\n    return this._refs.length - this._refsOffset;\n  }\n  /**\n   * Get offset refs\n   */\n  get offsetRefs() {\n    return this._refsOffset;\n  }\n  /**\n   * Skip bits\n   * @param bits\n   */\n  skip(bits) {\n    this._reader.skip(bits);\n    return this;\n  }\n  /**\n   * Load a single bit\n   * @returns true or false depending on the bit value\n   */\n  loadBit() {\n    return this._reader.loadBit();\n  }\n  /**\n   * Preload a signle bit\n   * @returns true or false depending on the bit value\n   */\n  preloadBit() {\n    return this._reader.preloadBit();\n  }\n  /**\n   * Load a boolean\n   * @returns true or false depending on the bit value\n   */\n  loadBoolean() {\n    return this.loadBit();\n  }\n  /**\n   * Load maybe boolean\n   * @returns true or false depending on the bit value or null\n   */\n  loadMaybeBoolean() {\n    if (this.loadBit()) {\n      return this.loadBoolean();\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Load bits as a new BitString\n   * @param bits number of bits to read\n   * @returns new BitString\n   */\n  loadBits(bits) {\n    return this._reader.loadBits(bits);\n  }\n  /**\n   * Preload bits as a new BitString\n   * @param bits number of bits to read\n   * @returns new BitString\n   */\n  preloadBits(bits) {\n    return this._reader.preloadBits(bits);\n  }\n  /**\n   * Load uint\n   * @param bits number of bits to read\n   * @returns uint value\n   */\n  loadUint(bits) {\n    return this._reader.loadUint(bits);\n  }\n  /**\n   * Load uint\n   * @param bits number of bits to read\n   * @returns uint value\n   */\n  loadUintBig(bits) {\n    return this._reader.loadUintBig(bits);\n  }\n  /**\n   * Preload uint\n   * @param bits number of bits to read\n   * @returns uint value\n   */\n  preloadUint(bits) {\n    return this._reader.preloadUint(bits);\n  }\n  /**\n   * Preload uint\n   * @param bits number of bits to read\n   * @returns uint value\n   */\n  preloadUintBig(bits) {\n    return this._reader.preloadUintBig(bits);\n  }\n  /**\n   * Load maybe uint\n   * @param bits number of bits to read\n   * @returns uint value or null\n   */\n  loadMaybeUint(bits) {\n    if (this.loadBit()) {\n      return this.loadUint(bits);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Load maybe uint\n   * @param bits number of bits to read\n   * @returns uint value or null\n   */\n  loadMaybeUintBig(bits) {\n    if (this.loadBit()) {\n      return this.loadUintBig(bits);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Load int\n   * @param bits number of bits to read\n   * @returns int value\n   */\n  loadInt(bits) {\n    return this._reader.loadInt(bits);\n  }\n  /**\n   * Load int\n   * @param bits number of bits to read\n   * @returns int value\n   */\n  loadIntBig(bits) {\n    return this._reader.loadIntBig(bits);\n  }\n  /**\n   * Preload int\n   * @param bits number of bits to read\n   * @returns int value\n   */\n  preloadInt(bits) {\n    return this._reader.preloadInt(bits);\n  }\n  /**\n   * Preload int\n   * @param bits number of bits to read\n   * @returns int value\n   */\n  preloadIntBig(bits) {\n    return this._reader.preloadIntBig(bits);\n  }\n  /**\n   * Load maybe uint\n   * @param bits number of bits to read\n   * @returns uint value or null\n   */\n  loadMaybeInt(bits) {\n    if (this.loadBit()) {\n      return this.loadInt(bits);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Load maybe uint\n   * @param bits number of bits to read\n   * @returns uint value or null\n   */\n  loadMaybeIntBig(bits) {\n    if (this.loadBit()) {\n      return this.loadIntBig(bits);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Load varuint\n   * @param bits number of bits to read in header\n   * @returns varuint value\n   */\n  loadVarUint(bits) {\n    return this._reader.loadVarUint(bits);\n  }\n  /**\n   * Load varuint\n   * @param bits number of bits to read in header\n   * @returns varuint value\n   */\n  loadVarUintBig(bits) {\n    return this._reader.loadVarUintBig(bits);\n  }\n  /**\n   * Preload varuint\n   * @param bits number of bits to read in header\n   * @returns varuint value\n   */\n  preloadVarUint(bits) {\n    return this._reader.preloadVarUint(bits);\n  }\n  /**\n   * Preload varuint\n   * @param bits number of bits to read in header\n   * @returns varuint value\n   */\n  preloadVarUintBig(bits) {\n    return this._reader.preloadVarUintBig(bits);\n  }\n  /**\n   * Load varint\n   * @param bits number of bits to read in header\n   * @returns varint value\n   */\n  loadVarInt(bits) {\n    return this._reader.loadVarInt(bits);\n  }\n  /**\n   * Load varint\n   * @param bits number of bits to read in header\n   * @returns varint value\n   */\n  loadVarIntBig(bits) {\n    return this._reader.loadVarIntBig(bits);\n  }\n  /**\n   * Preload varint\n   * @param bits number of bits to read in header\n   * @returns varint value\n   */\n  preloadVarInt(bits) {\n    return this._reader.preloadVarInt(bits);\n  }\n  /**\n   * Preload varint\n   * @param bits number of bits to read in header\n   * @returns varint value\n   */\n  preloadVarIntBig(bits) {\n    return this._reader.preloadVarIntBig(bits);\n  }\n  /**\n   * Load coins\n   * @returns coins value\n   */\n  loadCoins() {\n    return this._reader.loadCoins();\n  }\n  /**\n   * Preload coins\n   * @returns coins value\n   */\n  preloadCoins() {\n    return this._reader.preloadCoins();\n  }\n  /**\n   * Load maybe coins\n   * @returns coins value or null\n   */\n  loadMaybeCoins() {\n    if (this._reader.loadBit()) {\n      return this._reader.loadCoins();\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Load internal Address\n   * @returns Address\n   */\n  loadAddress() {\n    return this._reader.loadAddress();\n  }\n  /**\n   * Load optional internal Address\n   * @returns Address or null\n   */\n  loadMaybeAddress() {\n    return this._reader.loadMaybeAddress();\n  }\n  /**\n   * Load external address\n   * @returns ExternalAddress\n   */\n  loadExternalAddress() {\n    return this._reader.loadExternalAddress();\n  }\n  /**\n   * Load optional external address\n   * @returns ExternalAddress or null\n   */\n  loadMaybeExternalAddress() {\n    return this._reader.loadMaybeExternalAddress();\n  }\n  /**\n   * Load address\n   * @returns Address, ExternalAddress or null\n   */\n  loadAddressAny() {\n    return this._reader.loadAddressAny();\n  }\n  /**\n   * Load reference\n   * @returns Cell\n   */\n  loadRef() {\n    if (this._refsOffset >= this._refs.length) {\n      throw new Error(\"No more references\");\n    }\n    return this._refs[this._refsOffset++];\n  }\n  /**\n   * Preload reference\n   * @returns Cell\n   */\n  preloadRef() {\n    if (this._refsOffset >= this._refs.length) {\n      throw new Error(\"No more references\");\n    }\n    return this._refs[this._refsOffset];\n  }\n  /**\n   * Load optional reference\n   * @returns Cell or null\n   */\n  loadMaybeRef() {\n    if (this.loadBit()) {\n      return this.loadRef();\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Preload optional reference\n   * @returns Cell or null\n   */\n  preloadMaybeRef() {\n    if (this.preloadBit()) {\n      return this.preloadRef();\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Load byte buffer\n   * @param bytes number of bytes to load\n   * @returns Buffer\n   */\n  loadBuffer(bytes) {\n    return this._reader.loadBuffer(bytes);\n  }\n  /**\n   * Load byte buffer\n   * @param bytes number of bytes to load\n   * @returns Buffer\n   */\n  preloadBuffer(bytes) {\n    return this._reader.preloadBuffer(bytes);\n  }\n  /**\n   * Load string tail\n   */\n  loadStringTail() {\n    return (0, strings_1.readString)(this);\n  }\n  /**\n   * Load maybe string tail\n   * @returns string or null\n   */\n  loadMaybeStringTail() {\n    if (this.loadBit()) {\n      return (0, strings_1.readString)(this);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Load string tail from ref\n   * @returns string\n   */\n  loadStringRefTail() {\n    return (0, strings_1.readString)(this.loadRef().beginParse());\n  }\n  /**\n   * Load maybe string tail from ref\n   * @returns string or null\n   */\n  loadMaybeStringRefTail() {\n    const ref = this.loadMaybeRef();\n    if (ref) {\n      return (0, strings_1.readString)(ref.beginParse());\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Loads dictionary\n   * @param key key description\n   * @param value value description\n   * @returns Dictionary<K, V>\n   */\n  loadDict(key, value) {\n    return Dictionary_1.Dictionary.load(key, value, this);\n  }\n  /**\n   * Loads dictionary directly from current slice\n   * @param key key description\n   * @param value value description\n   * @returns Dictionary<K, V>\n   */\n  loadDictDirect(key, value) {\n    return Dictionary_1.Dictionary.loadDirect(key, value, this);\n  }\n  /**\n   * Checks if slice is empty\n   */\n  endParse() {\n    if (this.remainingBits > 0 || this.remainingRefs > 0) {\n      throw new Error(\"Slice is not empty\");\n    }\n  }\n  /**\n   * Convert slice to cell\n   */\n  asCell() {\n    return (0, Builder_1.beginCell)().storeSlice(this).endCell();\n  }\n  /**\n   *\n   * @returns\n   */\n  asBuilder() {\n    return (0, Builder_1.beginCell)().storeSlice(this);\n  }\n  /**\n   * Clone slice\n   * @returns cloned slice\n   */\n  clone() {\n    let fromStart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (fromStart) {\n      let reader = this._reader.clone();\n      reader.reset();\n      return new Slice(reader, this._refs);\n    } else {\n      let res = new Slice(this._reader, this._refs);\n      res._refsOffset = this._refsOffset;\n      return res;\n    }\n  }\n  /**\n   * Print slice as string by converting it to cell\n   * @returns string\n   */\n  toString() {\n    return this.asCell().toString();\n  }\n}\nexports.Slice = Slice;\n_a = symbol_inspect_1.default;","map":{"version":3,"names":["__importDefault","mod","__esModule","_a","Object","defineProperty","exports","value","Slice","symbol_inspect_1","require","Dictionary_1","Builder_1","strings_1","constructor","reader","refs","toString","_reader","clone","_refs","_refsOffset","remainingBits","remaining","offsetBits","offset","remainingRefs","length","offsetRefs","skip","bits","loadBit","preloadBit","loadBoolean","loadMaybeBoolean","loadBits","preloadBits","loadUint","loadUintBig","preloadUint","preloadUintBig","loadMaybeUint","loadMaybeUintBig","loadInt","loadIntBig","preloadInt","preloadIntBig","loadMaybeInt","loadMaybeIntBig","loadVarUint","loadVarUintBig","preloadVarUint","preloadVarUintBig","loadVarInt","loadVarIntBig","preloadVarInt","preloadVarIntBig","loadCoins","preloadCoins","loadMaybeCoins","loadAddress","loadMaybeAddress","loadExternalAddress","loadMaybeExternalAddress","loadAddressAny","loadRef","Error","preloadRef","loadMaybeRef","preloadMaybeRef","loadBuffer","bytes","preloadBuffer","loadStringTail","readString","loadMaybeStringTail","loadStringRefTail","beginParse","loadMaybeStringRefTail","ref","loadDict","key","Dictionary","load","loadDictDirect","loadDirect","endParse","asCell","beginCell","storeSlice","endCell","asBuilder","fromStart","arguments","undefined","reset","res","default"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@ton/core/dist/boc/Slice.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Slice = void 0;\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst Builder_1 = require(\"./Builder\");\nconst strings_1 = require(\"./utils/strings\");\n/**\n * Slice is a class that allows to read cell data\n */\nclass Slice {\n    constructor(reader, refs) {\n        this[_a] = () => this.toString();\n        this._reader = reader.clone();\n        this._refs = [...refs];\n        this._refsOffset = 0;\n    }\n    /**\n     * Get remaining bits\n     */\n    get remainingBits() {\n        return this._reader.remaining;\n    }\n    /**\n     * Get offset bits\n     */\n    get offsetBits() {\n        return this._reader.offset;\n    }\n    /**\n     * Get remaining refs\n     */\n    get remainingRefs() {\n        return this._refs.length - this._refsOffset;\n    }\n    /**\n     * Get offset refs\n     */\n    get offsetRefs() {\n        return this._refsOffset;\n    }\n    /**\n     * Skip bits\n     * @param bits\n     */\n    skip(bits) {\n        this._reader.skip(bits);\n        return this;\n    }\n    /**\n     * Load a single bit\n     * @returns true or false depending on the bit value\n     */\n    loadBit() {\n        return this._reader.loadBit();\n    }\n    /**\n     * Preload a signle bit\n     * @returns true or false depending on the bit value\n     */\n    preloadBit() {\n        return this._reader.preloadBit();\n    }\n    /**\n     * Load a boolean\n     * @returns true or false depending on the bit value\n     */\n    loadBoolean() {\n        return this.loadBit();\n    }\n    /**\n     * Load maybe boolean\n     * @returns true or false depending on the bit value or null\n     */\n    loadMaybeBoolean() {\n        if (this.loadBit()) {\n            return this.loadBoolean();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load bits as a new BitString\n     * @param bits number of bits to read\n     * @returns new BitString\n     */\n    loadBits(bits) {\n        return this._reader.loadBits(bits);\n    }\n    /**\n     * Preload bits as a new BitString\n     * @param bits number of bits to read\n     * @returns new BitString\n     */\n    preloadBits(bits) {\n        return this._reader.preloadBits(bits);\n    }\n    /**\n     * Load uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */\n    loadUint(bits) {\n        return this._reader.loadUint(bits);\n    }\n    /**\n     * Load uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */\n    loadUintBig(bits) {\n        return this._reader.loadUintBig(bits);\n    }\n    /**\n     * Preload uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */\n    preloadUint(bits) {\n        return this._reader.preloadUint(bits);\n    }\n    /**\n     * Preload uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */\n    preloadUintBig(bits) {\n        return this._reader.preloadUintBig(bits);\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */\n    loadMaybeUint(bits) {\n        if (this.loadBit()) {\n            return this.loadUint(bits);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */\n    loadMaybeUintBig(bits) {\n        if (this.loadBit()) {\n            return this.loadUintBig(bits);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load int\n     * @param bits number of bits to read\n     * @returns int value\n     */\n    loadInt(bits) {\n        return this._reader.loadInt(bits);\n    }\n    /**\n     * Load int\n     * @param bits number of bits to read\n     * @returns int value\n     */\n    loadIntBig(bits) {\n        return this._reader.loadIntBig(bits);\n    }\n    /**\n     * Preload int\n     * @param bits number of bits to read\n     * @returns int value\n     */\n    preloadInt(bits) {\n        return this._reader.preloadInt(bits);\n    }\n    /**\n     * Preload int\n     * @param bits number of bits to read\n     * @returns int value\n     */\n    preloadIntBig(bits) {\n        return this._reader.preloadIntBig(bits);\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */\n    loadMaybeInt(bits) {\n        if (this.loadBit()) {\n            return this.loadInt(bits);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */\n    loadMaybeIntBig(bits) {\n        if (this.loadBit()) {\n            return this.loadIntBig(bits);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */\n    loadVarUint(bits) {\n        return this._reader.loadVarUint(bits);\n    }\n    /**\n     * Load varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */\n    loadVarUintBig(bits) {\n        return this._reader.loadVarUintBig(bits);\n    }\n    /**\n     * Preload varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */\n    preloadVarUint(bits) {\n        return this._reader.preloadVarUint(bits);\n    }\n    /**\n     * Preload varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */\n    preloadVarUintBig(bits) {\n        return this._reader.preloadVarUintBig(bits);\n    }\n    /**\n     * Load varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */\n    loadVarInt(bits) {\n        return this._reader.loadVarInt(bits);\n    }\n    /**\n     * Load varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */\n    loadVarIntBig(bits) {\n        return this._reader.loadVarIntBig(bits);\n    }\n    /**\n     * Preload varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */\n    preloadVarInt(bits) {\n        return this._reader.preloadVarInt(bits);\n    }\n    /**\n     * Preload varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */\n    preloadVarIntBig(bits) {\n        return this._reader.preloadVarIntBig(bits);\n    }\n    /**\n     * Load coins\n     * @returns coins value\n     */\n    loadCoins() {\n        return this._reader.loadCoins();\n    }\n    /**\n     * Preload coins\n     * @returns coins value\n     */\n    preloadCoins() {\n        return this._reader.preloadCoins();\n    }\n    /**\n     * Load maybe coins\n     * @returns coins value or null\n     */\n    loadMaybeCoins() {\n        if (this._reader.loadBit()) {\n            return this._reader.loadCoins();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load internal Address\n     * @returns Address\n     */\n    loadAddress() {\n        return this._reader.loadAddress();\n    }\n    /**\n     * Load optional internal Address\n     * @returns Address or null\n     */\n    loadMaybeAddress() {\n        return this._reader.loadMaybeAddress();\n    }\n    /**\n     * Load external address\n     * @returns ExternalAddress\n     */\n    loadExternalAddress() {\n        return this._reader.loadExternalAddress();\n    }\n    /**\n     * Load optional external address\n     * @returns ExternalAddress or null\n     */\n    loadMaybeExternalAddress() {\n        return this._reader.loadMaybeExternalAddress();\n    }\n    /**\n     * Load address\n     * @returns Address, ExternalAddress or null\n     */\n    loadAddressAny() {\n        return this._reader.loadAddressAny();\n    }\n    /**\n     * Load reference\n     * @returns Cell\n     */\n    loadRef() {\n        if (this._refsOffset >= this._refs.length) {\n            throw new Error(\"No more references\");\n        }\n        return this._refs[this._refsOffset++];\n    }\n    /**\n     * Preload reference\n     * @returns Cell\n     */\n    preloadRef() {\n        if (this._refsOffset >= this._refs.length) {\n            throw new Error(\"No more references\");\n        }\n        return this._refs[this._refsOffset];\n    }\n    /**\n     * Load optional reference\n     * @returns Cell or null\n     */\n    loadMaybeRef() {\n        if (this.loadBit()) {\n            return this.loadRef();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Preload optional reference\n     * @returns Cell or null\n     */\n    preloadMaybeRef() {\n        if (this.preloadBit()) {\n            return this.preloadRef();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load byte buffer\n     * @param bytes number of bytes to load\n     * @returns Buffer\n     */\n    loadBuffer(bytes) {\n        return this._reader.loadBuffer(bytes);\n    }\n    /**\n     * Load byte buffer\n     * @param bytes number of bytes to load\n     * @returns Buffer\n     */\n    preloadBuffer(bytes) {\n        return this._reader.preloadBuffer(bytes);\n    }\n    /**\n     * Load string tail\n     */\n    loadStringTail() {\n        return (0, strings_1.readString)(this);\n    }\n    /**\n     * Load maybe string tail\n     * @returns string or null\n     */\n    loadMaybeStringTail() {\n        if (this.loadBit()) {\n            return (0, strings_1.readString)(this);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load string tail from ref\n     * @returns string\n     */\n    loadStringRefTail() {\n        return (0, strings_1.readString)(this.loadRef().beginParse());\n    }\n    /**\n     * Load maybe string tail from ref\n     * @returns string or null\n     */\n    loadMaybeStringRefTail() {\n        const ref = this.loadMaybeRef();\n        if (ref) {\n            return (0, strings_1.readString)(ref.beginParse());\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Loads dictionary\n     * @param key key description\n     * @param value value description\n     * @returns Dictionary<K, V>\n     */\n    loadDict(key, value) {\n        return Dictionary_1.Dictionary.load(key, value, this);\n    }\n    /**\n     * Loads dictionary directly from current slice\n     * @param key key description\n     * @param value value description\n     * @returns Dictionary<K, V>\n     */\n    loadDictDirect(key, value) {\n        return Dictionary_1.Dictionary.loadDirect(key, value, this);\n    }\n    /**\n     * Checks if slice is empty\n     */\n    endParse() {\n        if (this.remainingBits > 0 || this.remainingRefs > 0) {\n            throw new Error(\"Slice is not empty\");\n        }\n    }\n    /**\n     * Convert slice to cell\n     */\n    asCell() {\n        return (0, Builder_1.beginCell)().storeSlice(this).endCell();\n    }\n    /**\n     *\n     * @returns\n     */\n    asBuilder() {\n        return (0, Builder_1.beginCell)().storeSlice(this);\n    }\n    /**\n     * Clone slice\n     * @returns cloned slice\n     */\n    clone(fromStart = false) {\n        if (fromStart) {\n            let reader = this._reader.clone();\n            reader.reset();\n            return new Slice(reader, this._refs);\n        }\n        else {\n            let res = new Slice(this._reader, this._refs);\n            res._refsOffset = this._refsOffset;\n            return res;\n        }\n    }\n    /**\n     * Print slice as string by converting it to cell\n     * @returns string\n     */\n    toString() {\n        return this.asCell().toString();\n    }\n}\nexports.Slice = Slice;\n_a = symbol_inspect_1.default;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}