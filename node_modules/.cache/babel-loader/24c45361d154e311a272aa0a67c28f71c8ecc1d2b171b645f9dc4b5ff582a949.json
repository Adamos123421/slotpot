{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\Downloads\\\\GLL\\\\slotpot\\\\src\\\\components\\\\GameArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport PlayerSlot from './PlayerSlot';\nimport socketService from '../services/socketService';\nimport './GameArea.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameArea({\n  jackpotValue,\n  currentRound,\n  timeRemaining,\n  isLive,\n  betAmount,\n  onBetChange,\n  onPlaceBet,\n  isConnected,\n  isLoading,\n  userWinChance,\n  userBetTotal,\n  contractState,\n  adminInfo,\n  currentBettors,\n  // Winner state props (passed from App.js)\n  waitingForWinner,\n  contractWinner,\n  postWinnerLoading,\n  showWinnerAnnouncement\n}) {\n  _s();\n  var _contractState$timer4, _contractState$curren, _contractState$curren2, _contractState$timer6, _contractState$timer7, _contractState$timer8;\n  // Local animation state only (winner states are now props from App.js)\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [reelOffset, setReelOffset] = useState(0);\n  const [winner, setWinner] = useState(null);\n  const [predeterminedWinner, setPredeterminedWinner] = useState(null);\n\n  // Winner states removed - now passed as props from App.js:\n  // waitingForWinner, contractWinner, showWinnerAnnouncement, postWinnerLoading\n  const [betConfirmationStatus, setBetConfirmationStatus] = useState({\n    isPolling: false,\n    attempts: 0,\n    maxAttempts: 30,\n    currentWager: 0,\n    expectedWager: 0\n  });\n  const [transactionNotification, setTransactionNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success' // 'success', 'pending', 'error'\n  });\n\n  // Use refs to prevent unnecessary re-renders\n  const animationFrameRef = useRef();\n\n  // Memoized calculated values to prevent recalculation on every render\n  const memoizedValues = useMemo(() => {\n    var _contractState$timer, _contractState$timer3;\n    // Check if contract is active - consider both contract state AND timer data\n    // If we have active timer data (timeRemaining > 0), the game is effectively active\n    const hasActiveTimer = timeRemaining > 0 || (contractState === null || contractState === void 0 ? void 0 : (_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) > 0;\n    const isContractActive = (contractState === null || contractState === void 0 ? void 0 : contractState.isActive) !== false || hasActiveTimer;\n\n    // Calculate timer based on startTime and timeElapsed for accurate sync\n    const calculateTimeRemaining = () => {\n      const roundData = (contractState === null || contractState === void 0 ? void 0 : contractState.currentRound) || (contractState === null || contractState === void 0 ? void 0 : contractState.timer);\n      if (!(roundData !== null && roundData !== void 0 && roundData.startTime)) {\n        var _contractState$timer$, _contractState$timer2;\n        return (_contractState$timer$ = contractState === null || contractState === void 0 ? void 0 : (_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining) !== null && _contractState$timer$ !== void 0 ? _contractState$timer$ : timeRemaining;\n      }\n\n      // Calculate current elapsed time since round start\n      const now = Date.now();\n      const roundStartTime = roundData.startTime;\n      const currentElapsed = Math.floor((now - roundStartTime) / 1000);\n\n      // Calculate total round duration from initial data\n      const initialElapsed = roundData.timeElapsed || 0;\n      const initialRemaining = roundData.timeRemaining || timeRemaining;\n      const totalDuration = initialElapsed + initialRemaining;\n\n      // Calculate current time remaining\n      const timeLeft = Math.max(0, totalDuration - currentElapsed);\n      return timeLeft;\n    };\n    const displayTimer = calculateTimeRemaining();\n\n    // Simplified debug logging\n    if ((contractState === null || contractState === void 0 ? void 0 : contractState.isActive) === false && displayTimer > 0) {\n      console.log('⚠️ Contract inactive but timer active:', {\n        contractActive: contractState === null || contractState === void 0 ? void 0 : contractState.isActive,\n        timerRemaining: displayTimer,\n        effectiveActive: isContractActive\n      });\n    }\n    const displayRound = (contractState === null || contractState === void 0 ? void 0 : (_contractState$timer3 = contractState.timer) === null || _contractState$timer3 === void 0 ? void 0 : _contractState$timer3.roundNumber) || currentRound;\n    const totalPlayers = isContractActive ? (contractState === null || contractState === void 0 ? void 0 : contractState.betCount) || (currentBettors === null || currentBettors === void 0 ? void 0 : currentBettors.length) || 0 : 0;\n\n    // Use contract's total jackpot value directly (this includes all bet amounts before fees)\n    const totalJackpotValue = isContractActive ? (contractState === null || contractState === void 0 ? void 0 : contractState.totalJackpot) || jackpotValue || 0 : 0;\n\n    // Calculate winner prize (95% of total jackpot, 5% is fee)\n    const winnerPrizeValue = totalJackpotValue * 0.95;\n    return {\n      displayTimer,\n      displayRound,\n      totalPlayers,\n      totalJackpotValue: parseFloat(totalJackpotValue.toFixed(3)),\n      // Contract's total jackpot\n      winnerPrizeValue: parseFloat(winnerPrizeValue.toFixed(3)),\n      // Amount winner gets (95% of total)\n      isContractActive\n    };\n  }, [contractState === null || contractState === void 0 ? void 0 : contractState.isActive, contractState === null || contractState === void 0 ? void 0 : (_contractState$timer4 = contractState.timer) === null || _contractState$timer4 === void 0 ? void 0 : _contractState$timer4.roundNumber, contractState === null || contractState === void 0 ? void 0 : contractState.betCount, contractState === null || contractState === void 0 ? void 0 : contractState.totalJackpot, currentBettors, currentRound, jackpotValue, timeRemaining, contractState === null || contractState === void 0 ? void 0 : (_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.startTime, contractState === null || contractState === void 0 ? void 0 : (_contractState$curren2 = contractState.currentRound) === null || _contractState$curren2 === void 0 ? void 0 : _contractState$curren2.timeElapsed]);\n\n  // Memoize player stats to prevent unnecessary updates\n  const playerStats = useMemo(() => {\n    // If contract is not active, show everything as 0\n    if (!memoizedValues.isContractActive) {\n      return {\n        yourWager: 0,\n        yourChance: 0\n      };\n    }\n    const userBettor = currentBettors === null || currentBettors === void 0 ? void 0 : currentBettors.find(bettor => bettor.address === (contractState === null || contractState === void 0 ? void 0 : contractState.userAddress));\n    const yourWager = userBettor ? userBettor.amount : userBetTotal || 0; // Show actual bet amount including fee\n\n    // Use contract's probability calculation if available, otherwise fallback to manual calculation\n    const yourChance = userWinChance > 0 ? userWinChance : userBettor !== null && userBettor !== void 0 && userBettor.amount && memoizedValues.totalJackpotValue > 0 ? userBettor.amount * 100 / memoizedValues.totalJackpotValue : 0;\n    return {\n      yourWager: parseFloat(yourWager.toFixed(3)),\n      // Prevent floating point jitter\n      yourChance: parseFloat(yourChance.toFixed(2)) // Prevent floating point jitter\n    };\n  }, [currentBettors, contractState === null || contractState === void 0 ? void 0 : contractState.userAddress, userBetTotal, userWinChance, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]);\n\n  // Memoize game status to prevent text flicker\n  const gameStatus = useMemo(() => {\n    if (!memoizedValues.isContractActive) return \"⏸️ Jackpot is paused\";\n    if (waitingForWinner) return \"🎯 Selecting winner...\";\n    if (!isLive) return adminInfo !== null && adminInfo !== void 0 && adminInfo.isAutoManaged ? \"🤖 Auto-starting next round...\" : \"Waiting for next round...\";\n    if (winner) return `🎉 ${winner.name} wins ${memoizedValues.winnerPrizeValue.toFixed(3)} TON!`;\n    if (isSpinning) return \"🎰 Spinning...\";\n    if (memoizedValues.displayTimer <= 5 && memoizedValues.totalPlayers > 0) return \"⏰ Get ready to spin!\";\n    if (memoizedValues.totalPlayers === 0) return \"💰 Place your bets to start!\";\n    return `💰 ${memoizedValues.totalPlayers} player${memoizedValues.totalPlayers !== 1 ? 's' : ''} betting...`;\n  }, [waitingForWinner, isLive, winner, isSpinning, adminInfo === null || adminInfo === void 0 ? void 0 : adminInfo.isAutoManaged, memoizedValues]);\n  const {\n    displayTimer,\n    displayRound,\n    totalPlayers,\n    totalJackpotValue,\n    winnerPrizeValue\n  } = memoizedValues;\n\n  // Memoized player creation to prevent recreation on every render\n  const players = useMemo(() => {\n    // Create fixed array of 20 cards\n    const FIXED_CARDS = 20;\n    const playersArray = [];\n\n    // If contract is not active, show only waiting placeholders\n    if (memoizedValues.isContractActive && currentBettors && currentBettors.length > 0) {\n      currentBettors.forEach((bettor, index) => {\n        if (index < FIXED_CARDS) {\n          // Only fill up to 20 slots\n          // Apply 0.5 TON fee deduction for jackpot calculations\n          const netBetAmount = Math.max(0, bettor.amount - 0.5);\n\n          // Use contract's probability calculation: (bettorAmount * 100) / totalJackpot\n          const winChance = memoizedValues.totalJackpotValue > 0 ? bettor.amount * 100 / memoizedValues.totalJackpotValue : 0;\n          playersArray.push({\n            id: index + 1,\n            name: bettor.username,\n            avatar: '👤',\n            bet: bettor.amount,\n            // Show actual bet amount including fee\n            netBet: netBetAmount,\n            // Store net bet for calculations\n            chance: winChance,\n            address: bettor.address,\n            isRealPlayer: true\n          });\n        }\n      });\n    }\n\n    // Fill remaining slots with waiting placeholders\n    while (playersArray.length < FIXED_CARDS) {\n      playersArray.push({\n        id: playersArray.length + 1,\n        name: 'Waiting',\n        avatar: '❓',\n        bet: 0,\n        netBet: 0,\n        chance: 0,\n        isRealPlayer: false\n      });\n    }\n    return playersArray;\n  }, [currentBettors, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]); // Recalculate when bettors change or jackpot changes\n\n  // Memoized extended players for slot machine\n  const extendedPlayers = useMemo(() => {\n    const extended = [];\n    for (let i = 0; i < 20; i++) {\n      extended.push(...players);\n    }\n    return extended;\n  }, [players]);\n\n  // Reset local state when new round starts (only track round number changes)\n  const [lastRoundNumber, setLastRoundNumber] = useState(null);\n  useEffect(() => {\n    var _contractState$timer5;\n    const currentRoundNumber = contractState === null || contractState === void 0 ? void 0 : (_contractState$timer5 = contractState.timer) === null || _contractState$timer5 === void 0 ? void 0 : _contractState$timer5.roundNumber;\n\n    // Only reset when round number actually changes (indicating a new round)\n    if (currentRoundNumber && currentRoundNumber !== lastRoundNumber) {\n      console.log(`🔄 New round detected: ${lastRoundNumber} → ${currentRoundNumber}`);\n\n      // Reset all local game state for new round (winner states managed by App.js)\n      setIsSpinning(false);\n      setWinner(null);\n      setPredeterminedWinner(null);\n      setReelOffset(0);\n\n      // Reset bet confirmation status\n      setBetConfirmationStatus({\n        isPolling: false,\n        attempts: 0,\n        maxAttempts: 30,\n        currentWager: 0,\n        expectedWager: 0\n      });\n      setLastRoundNumber(currentRoundNumber);\n    } else if (!lastRoundNumber && currentRoundNumber) {\n      // Initialize the round number on first load\n      setLastRoundNumber(currentRoundNumber);\n    }\n  }, [contractState === null || contractState === void 0 ? void 0 : (_contractState$timer6 = contractState.timer) === null || _contractState$timer6 === void 0 ? void 0 : _contractState$timer6.roundNumber, lastRoundNumber]);\n\n  // Winner state is now managed by App.js via socket events - no local timer logic needed\n\n  // Handle contract winner detection and start animation\n  useEffect(() => {\n    if (contractState !== null && contractState !== void 0 && contractState.roundJustEnded && contractState !== null && contractState !== void 0 && contractState.winnerAnnouncement) {\n      console.log('🎉 Contract winner detected:', contractState.winnerAnnouncement);\n\n      // Winner states are now managed by App.js via socket events\n\n      // Find the winner in our current bettors list\n      const realWinner = currentBettors.find(bettor => bettor.address === contractState.winnerAnnouncement.fullAddress || bettor.address.toLowerCase() === contractState.winnerAnnouncement.fullAddress.toLowerCase());\n      if (realWinner) {\n        console.log('🎯 Found winner in bettors list:', realWinner);\n\n        // Convert to player format for animation\n        const netBetAmount = Math.max(0, realWinner.amount - 0.5); // Subtract 0.5 TON fee\n        const winnerPlayer = {\n          id: currentBettors.indexOf(realWinner) + 1,\n          name: realWinner.username,\n          avatar: '👤',\n          bet: realWinner.amount,\n          // Show actual bet amount including fee\n          netBet: netBetAmount,\n          // Store net bet for calculations\n          chance: 0,\n          address: realWinner.address,\n          isRealPlayer: true\n        };\n\n        // Start the animation targeting this specific winner\n        startSpinToWinner(winnerPlayer);\n      } else {\n        console.log('⚠️ Winner not found in current bettors, winner display handled by App.js');\n        // Winner display is now handled by App.js via socket events\n      }\n    }\n  }, [contractState === null || contractState === void 0 ? void 0 : contractState.roundJustEnded, contractState === null || contractState === void 0 ? void 0 : contractState.winnerAnnouncement]);\n\n  // Persistent animation that doesn't restart on user changes\n  useEffect(() => {\n    let isAnimating = false;\n    const animate = () => {\n      // Only animate if conditions are met\n      if (!isSpinning && !winner && isLive) {\n        if (!isAnimating) {\n          isAnimating = true;\n        }\n        setReelOffset(prev => {\n          const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n          const gap = window.innerWidth <= 480 ? 15 : 20;\n          const cardPlusGap = currentCardWidth + gap;\n          const newOffset = prev + 0.5; // Simple continuous scroll\n          const fullCycleWidth = 20 * cardPlusGap;\n\n          // Reset to 0 when full cycle is complete\n          if (newOffset >= fullCycleWidth) {\n            return 0;\n          }\n          return newOffset;\n        });\n      } else {\n        isAnimating = false;\n      }\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    animationFrameRef.current = requestAnimationFrame(animate);\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []); // Empty dependency array - only run once on mount\n\n  // Separate effect to handle game state changes without restarting animation\n  useEffect(() => {\n    // Don't restart animation, just let the conditions check in the animation loop\n    console.log('Game state changed:', {\n      isSpinning,\n      winner: !!winner,\n      isLive\n    });\n  }, [isSpinning, winner, isLive]);\n\n  // Select winner based on weighted probability\n  const selectWeightedWinner = () => {\n    const realPlayers = players.filter(p => p.isRealPlayer && p.netBet > 0);\n    if (realPlayers.length === 0) return null;\n\n    // Calculate cumulative weights based on net bet amounts (fair distribution)\n    const totalWeight = realPlayers.reduce((sum, player) => sum + player.netBet, 0);\n    const random = Math.random() * totalWeight;\n    let cumulativeWeight = 0;\n    for (const player of realPlayers) {\n      cumulativeWeight += player.netBet;\n      if (random <= cumulativeWeight) {\n        return player;\n      }\n    }\n\n    // Fallback to last player\n    return realPlayers[realPlayers.length - 1];\n  };\n  const startSpin = () => {\n    if (!isLive || isSpinning) return;\n\n    // Select winner based on weighted probability (bet amounts)\n    const selectedWinner = selectWeightedWinner();\n    if (!selectedWinner) return;\n    setPredeterminedWinner(selectedWinner);\n    setIsSpinning(true);\n    setWinner(null);\n\n    // Calculate precise stopping position with responsive card width\n    const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n    const gap = window.innerWidth <= 480 ? 15 : 20;\n    const cardPlusGap = currentCardWidth + gap;\n    const centerOffset = window.innerWidth / 2 - cardPlusGap / 2 - 25;\n    const winnerIndex = players.findIndex(p => p.id === selectedWinner.id);\n    const baseSpins = 2;\n    const targetCardPosition = winnerIndex * cardPlusGap;\n    const targetPosition = baseSpins * 20 * cardPlusGap + targetCardPosition + centerOffset; // Use fixed 20 cards\n\n    setReelOffset(targetPosition);\n    console.log('🎰 Winner selected:', selectedWinner.name, 'Bet:', selectedWinner.bet);\n\n    // Stop spinning after 3 seconds\n    setTimeout(() => {\n      setIsSpinning(false);\n      setWinner(selectedWinner);\n      setPredeterminedWinner(null);\n\n      // Stay on winner for 3 seconds\n      setTimeout(() => {\n        setWinner(null);\n      }, 3000);\n    }, 3000);\n  };\n\n  // New function to spin to a specific winner\n  const startSpinToWinner = targetWinner => {\n    if (isSpinning) return;\n    console.log('🎰 Starting spin animation to winner:', targetWinner.name);\n    setPredeterminedWinner(targetWinner);\n    setIsSpinning(true);\n    setWinner(null);\n\n    // Calculate precise stopping position for the target winner\n    const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n    const gap = window.innerWidth <= 480 ? 15 : 20;\n    const cardPlusGap = currentCardWidth + gap;\n    const centerOffset = window.innerWidth / 2 - cardPlusGap / 2 - 25;\n    const winnerIndex = players.findIndex(p => p.address === targetWinner.address || p.name === targetWinner.name);\n    if (winnerIndex === -1) {\n      console.error('Winner not found in players array');\n      return;\n    }\n    const baseSpins = 2;\n    const targetCardPosition = winnerIndex * cardPlusGap;\n    const targetPosition = baseSpins * 20 * cardPlusGap + targetCardPosition + centerOffset; // Use fixed 20 cards\n\n    setReelOffset(targetPosition);\n    console.log('🎯 Animation targeting winner:', targetWinner.name, 'at position:', winnerIndex);\n\n    // Stop spinning after 3 seconds and show winner\n    setTimeout(() => {\n      setIsSpinning(false);\n      setWinner(targetWinner);\n      setPredeterminedWinner(null);\n\n      // Winner notification is now handled by App.js via socket events\n\n      // Clear local winner after 3 seconds\n      setTimeout(() => {\n        setWinner(null);\n      }, 3000);\n    }, 3000);\n  };\n\n  // Global winner announcement is now handled by App.js via socket events\n\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // REMOVED: All socket handling moved to App.js to prevent duplicate listeners and re-renders\n  // GameArea now receives all data as props from App.js which handles all socket events\n\n  // Monitor bet confirmation polling status\n  useEffect(() => {\n    // Set up a global handler for bet confirmation updates\n    window.updateBetConfirmationStatus = status => {\n      setBetConfirmationStatus(status);\n    };\n\n    // Set up a global handler for transaction notifications\n    window.showTransactionNotification = (message, type = 'success') => {\n      setTransactionNotification({\n        show: true,\n        message: message,\n        type: type\n      });\n\n      // Auto-hide after 4 seconds\n      setTimeout(() => {\n        setTransactionNotification({\n          show: false,\n          message: '',\n          type: 'success'\n        });\n      }, 4000);\n    };\n    return () => {\n      delete window.updateBetConfirmationStatus;\n      delete window.showTransactionNotification;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jackpot-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"jackpot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u26A1 JACKPOT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"player-count\",\n          children: totalPlayers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this), (adminInfo === null || adminInfo === void 0 ? void 0 : adminInfo.isAutoManaged) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"automation-badge\",\n          children: \"\\uD83E\\uDD16 AUTO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"jackpot-subtitle\",\n        children: gameStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bet-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-amount-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bet-amount-value\",\n            children: (betAmount === null || betAmount === void 0 ? void 0 : betAmount.toFixed(1)) || '0.0'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"currency-label\",\n            children: \"TON\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-preset\",\n            onClick: () => onBetChange({\n              target: {\n                value: '0.11'\n              }\n            }),\n            children: \"0.11\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-preset\",\n            onClick: () => onBetChange({\n              target: {\n                value: '0.5'\n              }\n            }),\n            children: \"0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-preset\",\n            onClick: () => onBetChange({\n              target: {\n                value: '1.0'\n              }\n            }),\n            children: \"1.0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-preset\",\n            onClick: () => onBetChange({\n              target: {\n                value: '2.0'\n              }\n            }),\n            children: \"2.0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bet-button\",\n          onClick: onPlaceBet,\n          disabled: !isConnected || !memoizedValues.isContractActive || !isLive || isLoading || isSpinning || waitingForWinner || postWinnerLoading,\n          children: !memoizedValues.isContractActive ? '⏸️ Paused' : isSpinning ? '🎰 Spinning...' : waitingForWinner ? '🎯 Selecting...' : postWinnerLoading ? '🔄 New Round...' : isConnected ? 'Bet' : 'Connect Wallet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card jackpot-value\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-icon\",\n          children: \"\\uD83C\\uDFB0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: totalJackpotValue.toFixed(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Total Jackpot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card net-payout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-icon\",\n          children: \"\\uD83D\\uDCB0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: winnerPrizeValue.toFixed(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Winner Gets (95%)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card your-wager\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-icon\",\n          children: \"\\uD83C\\uDFAF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: playerStats.yourWager.toFixed(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Your Wager\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card your-chance\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: [playerStats.yourChance.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: \"Your Chance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-card time-remaining\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-amount\",\n          children: formatTime(displayTimer)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-label\",\n          children: contractState !== null && contractState !== void 0 && (_contractState$timer7 = contractState.timer) !== null && _contractState$timer7 !== void 0 && _contractState$timer7.isActive ? 'Auto Timer' : 'Time Remaining'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-arrow-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-arrow\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrow\",\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slot-machine\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slot-frame\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slot-reel-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `slot-reel ${isSpinning ? 'slot-spinning' : 'idle'}`,\n            style: {\n              transform: `translateX(${-reelOffset}px)`,\n              willChange: 'transform'\n            },\n            children: extendedPlayers.map((player, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"slot-card\",\n              children: /*#__PURE__*/_jsxDEV(PlayerSlot, {\n                player: player,\n                isWinner: winner && winner.id === player.id && !isSpinning,\n                isPredetermined: predeterminedWinner && predeterminedWinner.id === player.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 19\n              }, this)\n            }, `${player.id}-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), isSpinning && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slot-blur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payout-info\",\n        children: [\"\\u26A1 Payouts are settled in TON\", (contractState === null || contractState === void 0 ? void 0 : (_contractState$timer8 = contractState.timer) === null || _contractState$timer8 === void 0 ? void 0 : _contractState$timer8.isActive) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"automation-info\",\n          children: \" \\u2022 \\uD83E\\uDD16 Automated rounds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"players-count\",\n          children: [\"\\uD83D\\uDC65 \", totalPlayers, \" Players\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"round-number\",\n          children: [\"Round #\", displayRound]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this), isConnected && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connection-status\",\n          children: \"\\uD83D\\uDFE2 Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 7\n    }, this), showWinnerAnnouncement && contractWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-announcement-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-announcement-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"winner-icon\",\n          children: \"\\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"ROUND WINNER!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"winner-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-address\",\n            children: contractWinner.winner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-prize\",\n            children: [\"Won \", contractWinner.prize, \" TON\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"winner-confetti\",\n          children: \"\\uD83C\\uDF8A \\uD83C\\uDF89 \\uD83C\\uDF8A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 9\n    }, this), waitingForWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-selection-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-selection-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner-big\",\n          children: \"\\uD83C\\uDFAF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Selecting Winner...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Analyzing bets and picking the winner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-dots\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 9\n    }, this), postWinnerLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner-selection-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-selection-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner-big\",\n          children: \"\\uD83D\\uDD04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Preparing New Round...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Setting up the next jackpot round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-dots\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 9\n    }, this), transactionNotification.show && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `transaction-notification ${transactionNotification.type}`,\n      children: transactionNotification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 474,\n    columnNumber: 5\n  }, this);\n}\n_s(GameArea, \"gvv7ue0vBdv8RSGRNnPr0Z4MQhE=\");\n_c = GameArea;\nexport default GameArea;\nvar _c;\n$RefreshReg$(_c, \"GameArea\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useRef","PlayerSlot","socketService","jsxDEV","_jsxDEV","GameArea","jackpotValue","currentRound","timeRemaining","isLive","betAmount","onBetChange","onPlaceBet","isConnected","isLoading","userWinChance","userBetTotal","contractState","adminInfo","currentBettors","waitingForWinner","contractWinner","postWinnerLoading","showWinnerAnnouncement","_s","_contractState$timer4","_contractState$curren","_contractState$curren2","_contractState$timer6","_contractState$timer7","_contractState$timer8","isSpinning","setIsSpinning","reelOffset","setReelOffset","winner","setWinner","predeterminedWinner","setPredeterminedWinner","betConfirmationStatus","setBetConfirmationStatus","isPolling","attempts","maxAttempts","currentWager","expectedWager","transactionNotification","setTransactionNotification","show","message","type","animationFrameRef","memoizedValues","_contractState$timer","_contractState$timer3","hasActiveTimer","timer","isContractActive","isActive","calculateTimeRemaining","roundData","startTime","_contractState$timer$","_contractState$timer2","now","Date","roundStartTime","currentElapsed","Math","floor","initialElapsed","timeElapsed","initialRemaining","totalDuration","timeLeft","max","displayTimer","console","log","contractActive","timerRemaining","effectiveActive","displayRound","roundNumber","totalPlayers","betCount","length","totalJackpotValue","totalJackpot","winnerPrizeValue","parseFloat","toFixed","playerStats","yourWager","yourChance","userBettor","find","bettor","address","userAddress","amount","gameStatus","isAutoManaged","name","players","FIXED_CARDS","playersArray","forEach","index","netBetAmount","winChance","push","id","username","avatar","bet","netBet","chance","isRealPlayer","extendedPlayers","extended","i","lastRoundNumber","setLastRoundNumber","_contractState$timer5","currentRoundNumber","roundJustEnded","winnerAnnouncement","realWinner","fullAddress","toLowerCase","winnerPlayer","indexOf","startSpinToWinner","isAnimating","animate","prev","currentCardWidth","window","innerWidth","gap","cardPlusGap","newOffset","fullCycleWidth","current","requestAnimationFrame","cancelAnimationFrame","selectWeightedWinner","realPlayers","filter","p","totalWeight","reduce","sum","player","random","cumulativeWeight","startSpin","selectedWinner","centerOffset","winnerIndex","findIndex","baseSpins","targetCardPosition","targetPosition","setTimeout","targetWinner","error","formatTime","seconds","mins","secs","toString","padStart","updateBetConfirmationStatus","status","showTransactionNotification","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","target","value","disabled","style","transform","willChange","map","isWinner","isPredetermined","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/src/components/GameArea.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport PlayerSlot from './PlayerSlot';\nimport socketService from '../services/socketService';\nimport './GameArea.css';\n\nfunction GameArea({ \n  jackpotValue,\n  currentRound,\n  timeRemaining,\n  isLive,\n  betAmount,\n  onBetChange,\n  onPlaceBet,\n  isConnected,\n  isLoading,\n  userWinChance,\n  userBetTotal,\n  contractState,\n  adminInfo,\n  currentBettors,\n  // Winner state props (passed from App.js)\n  waitingForWinner,\n  contractWinner,\n  postWinnerLoading,\n  showWinnerAnnouncement\n}) {\n  // Local animation state only (winner states are now props from App.js)\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [reelOffset, setReelOffset] = useState(0);\n  const [winner, setWinner] = useState(null);\n  const [predeterminedWinner, setPredeterminedWinner] = useState(null);\n  \n  // Winner states removed - now passed as props from App.js:\n  // waitingForWinner, contractWinner, showWinnerAnnouncement, postWinnerLoading\n  const [betConfirmationStatus, setBetConfirmationStatus] = useState({\n    isPolling: false,\n    attempts: 0,\n    maxAttempts: 30,\n    currentWager: 0,\n    expectedWager: 0\n  });\n  const [transactionNotification, setTransactionNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success' // 'success', 'pending', 'error'\n  });\n\n  // Use refs to prevent unnecessary re-renders\n  const animationFrameRef = useRef();\n\n  // Memoized calculated values to prevent recalculation on every render\n  const memoizedValues = useMemo(() => {\n    // Check if contract is active - consider both contract state AND timer data\n    // If we have active timer data (timeRemaining > 0), the game is effectively active\n    const hasActiveTimer = timeRemaining > 0 || contractState?.timer?.timeRemaining > 0;\n    const isContractActive = (contractState?.isActive !== false) || hasActiveTimer;\n    \n    // Calculate timer based on startTime and timeElapsed for accurate sync\n    const calculateTimeRemaining = () => {\n      const roundData = contractState?.currentRound || contractState?.timer;\n      if (!roundData?.startTime) {\n        return contractState?.timer?.timeRemaining ?? timeRemaining;\n      }\n      \n      // Calculate current elapsed time since round start\n      const now = Date.now();\n      const roundStartTime = roundData.startTime;\n      const currentElapsed = Math.floor((now - roundStartTime) / 1000);\n      \n      // Calculate total round duration from initial data\n      const initialElapsed = roundData.timeElapsed || 0;\n      const initialRemaining = roundData.timeRemaining || timeRemaining;\n      const totalDuration = initialElapsed + initialRemaining;\n      \n      // Calculate current time remaining\n      const timeLeft = Math.max(0, totalDuration - currentElapsed);\n      \n      return timeLeft;\n    };\n    \n    const displayTimer = calculateTimeRemaining();\n    \n    // Simplified debug logging\n    if (contractState?.isActive === false && displayTimer > 0) {\n      console.log('⚠️ Contract inactive but timer active:', {\n        contractActive: contractState?.isActive,\n        timerRemaining: displayTimer,\n        effectiveActive: isContractActive\n      });\n    }\n    const displayRound = contractState?.timer?.roundNumber || currentRound;\n    const totalPlayers = isContractActive ? (contractState?.betCount || currentBettors?.length || 0) : 0;\n\n    // Use contract's total jackpot value directly (this includes all bet amounts before fees)\n    const totalJackpotValue = isContractActive ? (contractState?.totalJackpot || jackpotValue || 0) : 0;\n\n    // Calculate winner prize (95% of total jackpot, 5% is fee)\n    const winnerPrizeValue = totalJackpotValue * 0.95;\n\n    return {\n      displayTimer,\n      displayRound,\n      totalPlayers,\n      totalJackpotValue: parseFloat(totalJackpotValue.toFixed(3)), // Contract's total jackpot\n      winnerPrizeValue: parseFloat(winnerPrizeValue.toFixed(3)), // Amount winner gets (95% of total)\n      isContractActive\n    };\n  }, [contractState?.isActive, contractState?.timer?.roundNumber, contractState?.betCount, contractState?.totalJackpot,\n      currentBettors, currentRound, jackpotValue, timeRemaining, contractState?.currentRound?.startTime, contractState?.currentRound?.timeElapsed]);\n\n  // Memoize player stats to prevent unnecessary updates\n  const playerStats = useMemo(() => {\n    // If contract is not active, show everything as 0\n    if (!memoizedValues.isContractActive) {\n      return {\n        yourWager: 0,\n        yourChance: 0\n      };\n    }\n    \n    const userBettor = currentBettors?.find(bettor => bettor.address === contractState?.userAddress);\n    const yourWager = userBettor ? userBettor.amount : userBetTotal || 0; // Show actual bet amount including fee\n    \n    // Use contract's probability calculation if available, otherwise fallback to manual calculation\n    const yourChance = userWinChance > 0 ? userWinChance : \n      (userBettor?.amount && memoizedValues.totalJackpotValue > 0 ? \n        (userBettor.amount * 100) / memoizedValues.totalJackpotValue : 0);\n\n    return {\n      yourWager: parseFloat(yourWager.toFixed(3)), // Prevent floating point jitter\n      yourChance: parseFloat(yourChance.toFixed(2)) // Prevent floating point jitter\n    };\n  }, [currentBettors, contractState?.userAddress, userBetTotal, userWinChance, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]);\n\n  // Memoize game status to prevent text flicker\n  const gameStatus = useMemo(() => {\n    if (!memoizedValues.isContractActive) return \"⏸️ Jackpot is paused\";\n    if (waitingForWinner) return \"🎯 Selecting winner...\";\n    if (!isLive) return adminInfo?.isAutoManaged ? \"🤖 Auto-starting next round...\" : \"Waiting for next round...\";\n    if (winner) return `🎉 ${winner.name} wins ${memoizedValues.winnerPrizeValue.toFixed(3)} TON!`;\n    if (isSpinning) return \"🎰 Spinning...\";\n    if (memoizedValues.displayTimer <= 5 && memoizedValues.totalPlayers > 0) return \"⏰ Get ready to spin!\";\n    if (memoizedValues.totalPlayers === 0) return \"💰 Place your bets to start!\";\n    return `💰 ${memoizedValues.totalPlayers} player${memoizedValues.totalPlayers !== 1 ? 's' : ''} betting...`;\n  }, [waitingForWinner, isLive, winner, isSpinning, adminInfo?.isAutoManaged, memoizedValues]);\n\n  const { displayTimer, displayRound, totalPlayers, totalJackpotValue, winnerPrizeValue } = memoizedValues;\n\n  // Memoized player creation to prevent recreation on every render\n  const players = useMemo(() => {\n    // Create fixed array of 20 cards\n    const FIXED_CARDS = 20;\n    const playersArray = [];\n    \n    // If contract is not active, show only waiting placeholders\n    if (memoizedValues.isContractActive && currentBettors && currentBettors.length > 0) {\n      currentBettors.forEach((bettor, index) => {\n        if (index < FIXED_CARDS) { // Only fill up to 20 slots\n          // Apply 0.5 TON fee deduction for jackpot calculations\n          const netBetAmount = Math.max(0, bettor.amount - 0.5);\n          \n          // Use contract's probability calculation: (bettorAmount * 100) / totalJackpot\n          const winChance = memoizedValues.totalJackpotValue > 0 ? \n            (bettor.amount * 100) / memoizedValues.totalJackpotValue : 0;\n          \n          playersArray.push({\n            id: index + 1,\n            name: bettor.username,\n            avatar: '👤',\n            bet: bettor.amount, // Show actual bet amount including fee\n            netBet: netBetAmount, // Store net bet for calculations\n            chance: winChance,\n            address: bettor.address,\n            isRealPlayer: true\n          });\n        }\n      });\n    }\n    \n    // Fill remaining slots with waiting placeholders\n    while (playersArray.length < FIXED_CARDS) {\n      playersArray.push({\n        id: playersArray.length + 1,\n        name: 'Waiting',\n        avatar: '❓',\n        bet: 0,\n        netBet: 0,\n        chance: 0,\n        isRealPlayer: false\n      });\n    }\n    \n    return playersArray;\n  }, [currentBettors, memoizedValues.totalJackpotValue, memoizedValues.isContractActive]); // Recalculate when bettors change or jackpot changes\n\n  // Memoized extended players for slot machine\n  const extendedPlayers = useMemo(() => {\n    const extended = [];\n    for (let i = 0; i < 20; i++) {\n      extended.push(...players);\n    }\n    return extended;\n  }, [players]);\n\n  // Reset local state when new round starts (only track round number changes)\n  const [lastRoundNumber, setLastRoundNumber] = useState(null);\n  \n  useEffect(() => {\n    const currentRoundNumber = contractState?.timer?.roundNumber;\n    \n    // Only reset when round number actually changes (indicating a new round)\n    if (currentRoundNumber && currentRoundNumber !== lastRoundNumber) {\n      console.log(`🔄 New round detected: ${lastRoundNumber} → ${currentRoundNumber}`);\n      \n      // Reset all local game state for new round (winner states managed by App.js)\n      setIsSpinning(false);\n      setWinner(null);\n      setPredeterminedWinner(null);\n      setReelOffset(0);\n      \n      // Reset bet confirmation status\n      setBetConfirmationStatus({\n        isPolling: false,\n        attempts: 0,\n        maxAttempts: 30,\n        currentWager: 0,\n        expectedWager: 0\n      });\n      \n      setLastRoundNumber(currentRoundNumber);\n    } else if (!lastRoundNumber && currentRoundNumber) {\n      // Initialize the round number on first load\n      setLastRoundNumber(currentRoundNumber);\n    }\n  }, [contractState?.timer?.roundNumber, lastRoundNumber]);\n\n  // Winner state is now managed by App.js via socket events - no local timer logic needed\n\n  // Handle contract winner detection and start animation\n  useEffect(() => {\n    if (contractState?.roundJustEnded && contractState?.winnerAnnouncement) {\n      console.log('🎉 Contract winner detected:', contractState.winnerAnnouncement);\n      \n      // Winner states are now managed by App.js via socket events\n      \n      // Find the winner in our current bettors list\n      const realWinner = currentBettors.find(bettor => \n        bettor.address === contractState.winnerAnnouncement.fullAddress ||\n        bettor.address.toLowerCase() === contractState.winnerAnnouncement.fullAddress.toLowerCase()\n      );\n      \n      if (realWinner) {\n        console.log('🎯 Found winner in bettors list:', realWinner);\n        \n        // Convert to player format for animation\n        const netBetAmount = Math.max(0, realWinner.amount - 0.5); // Subtract 0.5 TON fee\n        const winnerPlayer = {\n          id: currentBettors.indexOf(realWinner) + 1,\n          name: realWinner.username,\n          avatar: '👤',\n          bet: realWinner.amount, // Show actual bet amount including fee\n          netBet: netBetAmount, // Store net bet for calculations\n          chance: 0,\n          address: realWinner.address,\n          isRealPlayer: true\n        };\n        \n        // Start the animation targeting this specific winner\n        startSpinToWinner(winnerPlayer);\n      } else {\n        console.log('⚠️ Winner not found in current bettors, winner display handled by App.js');\n        // Winner display is now handled by App.js via socket events\n      }\n    }\n  }, [contractState?.roundJustEnded, contractState?.winnerAnnouncement]);\n\n  // Persistent animation that doesn't restart on user changes\n  useEffect(() => {\n    let isAnimating = false;\n    \n    const animate = () => {\n      // Only animate if conditions are met\n      if (!isSpinning && !winner && isLive) {\n        if (!isAnimating) {\n          isAnimating = true;\n        }\n        \n        setReelOffset(prev => {\n          const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n          const gap = window.innerWidth <= 480 ? 15 : 20;\n          const cardPlusGap = currentCardWidth + gap;\n          const newOffset = prev + 0.5; // Simple continuous scroll\n          const fullCycleWidth = 20 * cardPlusGap;\n          \n          // Reset to 0 when full cycle is complete\n          if (newOffset >= fullCycleWidth) {\n            return 0;\n          }\n          return newOffset;\n        });\n      } else {\n        isAnimating = false;\n      }\n      \n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []); // Empty dependency array - only run once on mount\n\n  // Separate effect to handle game state changes without restarting animation\n  useEffect(() => {\n    // Don't restart animation, just let the conditions check in the animation loop\n    console.log('Game state changed:', { isSpinning, winner: !!winner, isLive });\n  }, [isSpinning, winner, isLive]);\n\n  // Select winner based on weighted probability\n  const selectWeightedWinner = () => {\n    const realPlayers = players.filter(p => p.isRealPlayer && p.netBet > 0);\n    if (realPlayers.length === 0) return null;\n\n    // Calculate cumulative weights based on net bet amounts (fair distribution)\n    const totalWeight = realPlayers.reduce((sum, player) => sum + player.netBet, 0);\n    const random = Math.random() * totalWeight;\n    \n    let cumulativeWeight = 0;\n    for (const player of realPlayers) {\n      cumulativeWeight += player.netBet;\n      if (random <= cumulativeWeight) {\n        return player;\n      }\n    }\n    \n    // Fallback to last player\n    return realPlayers[realPlayers.length - 1];\n  };\n\n  const startSpin = () => {\n    if (!isLive || isSpinning) return;\n    \n    // Select winner based on weighted probability (bet amounts)\n    const selectedWinner = selectWeightedWinner();\n    if (!selectedWinner) return;\n    \n    setPredeterminedWinner(selectedWinner);\n    \n    setIsSpinning(true);\n    setWinner(null);\n    \n    // Calculate precise stopping position with responsive card width\n    const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n    const gap = window.innerWidth <= 480 ? 15 : 20;\n    const cardPlusGap = currentCardWidth + gap;\n    const centerOffset = (window.innerWidth / 2) - (cardPlusGap / 2) - 25;\n    const winnerIndex = players.findIndex(p => p.id === selectedWinner.id);\n    const baseSpins = 2;\n    \n    const targetCardPosition = winnerIndex * cardPlusGap;\n    const targetPosition = (baseSpins * 20 * cardPlusGap) + targetCardPosition + centerOffset; // Use fixed 20 cards\n    \n    setReelOffset(targetPosition);\n    \n    console.log('🎰 Winner selected:', selectedWinner.name, 'Bet:', selectedWinner.bet);\n    \n    // Stop spinning after 3 seconds\n    setTimeout(() => {\n      setIsSpinning(false);\n      setWinner(selectedWinner);\n      setPredeterminedWinner(null);\n      \n      // Stay on winner for 3 seconds\n      setTimeout(() => {\n        setWinner(null);\n      }, 3000);\n    }, 3000);\n  };\n\n  // New function to spin to a specific winner\n  const startSpinToWinner = (targetWinner) => {\n    if (isSpinning) return;\n    \n    console.log('🎰 Starting spin animation to winner:', targetWinner.name);\n    \n    setPredeterminedWinner(targetWinner);\n    setIsSpinning(true);\n    setWinner(null);\n    \n    // Calculate precise stopping position for the target winner\n    const currentCardWidth = window.innerWidth <= 480 ? 120 : 150;\n    const gap = window.innerWidth <= 480 ? 15 : 20;\n    const cardPlusGap = currentCardWidth + gap;\n    const centerOffset = (window.innerWidth / 2) - (cardPlusGap / 2) - 25;\n    const winnerIndex = players.findIndex(p => \n      p.address === targetWinner.address || p.name === targetWinner.name\n    );\n    \n    if (winnerIndex === -1) {\n      console.error('Winner not found in players array');\n      return;\n    }\n    \n    const baseSpins = 2;\n    const targetCardPosition = winnerIndex * cardPlusGap;\n    const targetPosition = (baseSpins * 20 * cardPlusGap) + targetCardPosition + centerOffset; // Use fixed 20 cards\n    \n    setReelOffset(targetPosition);\n    \n    console.log('🎯 Animation targeting winner:', targetWinner.name, 'at position:', winnerIndex);\n    \n    // Stop spinning after 3 seconds and show winner\n    setTimeout(() => {\n      setIsSpinning(false);\n      setWinner(targetWinner);\n      setPredeterminedWinner(null);\n      \n      // Winner notification is now handled by App.js via socket events\n      \n      // Clear local winner after 3 seconds\n      setTimeout(() => {\n        setWinner(null);\n      }, 3000);\n    }, 3000);\n  };\n\n  // Global winner announcement is now handled by App.js via socket events\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // REMOVED: All socket handling moved to App.js to prevent duplicate listeners and re-renders\n  // GameArea now receives all data as props from App.js which handles all socket events\n\n  // Monitor bet confirmation polling status\n  useEffect(() => {\n    // Set up a global handler for bet confirmation updates\n    window.updateBetConfirmationStatus = (status) => {\n      setBetConfirmationStatus(status);\n    };\n\n    // Set up a global handler for transaction notifications\n    window.showTransactionNotification = (message, type = 'success') => {\n      setTransactionNotification({\n        show: true,\n        message: message,\n        type: type\n      });\n      \n      // Auto-hide after 4 seconds\n      setTimeout(() => {\n        setTransactionNotification({\n          show: false,\n          message: '',\n          type: 'success'\n        });\n      }, 4000);\n    };\n\n    return () => {\n      delete window.updateBetConfirmationStatus;\n      delete window.showTransactionNotification;\n    };\n  }, []);\n\n  return (\n    <div className=\"game-area\">\n      {/* Jackpot Section */}\n      <div className=\"jackpot-section\">\n        <div className=\"jackpot-header\">\n          <h2>⚡ JACKPOT</h2>\n          <span className=\"player-count\">{totalPlayers}</span>\n          {adminInfo?.isAutoManaged && (\n            <span className=\"automation-badge\">🤖 AUTO</span>\n          )}\n        </div>\n        <p className=\"jackpot-subtitle\">\n          {gameStatus}\n        </p>\n        \n        <div className=\"bet-controls\">\n          <div className=\"bet-amount-display\">\n            <span className=\"bet-amount-value\">{betAmount?.toFixed(1) || '0.0'}</span>\n            <span className=\"currency-label\">TON</span>\n          </div>\n          <div className=\"bet-buttons\">\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '0.11' } })}>0.11</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '0.5' } })}>0.5</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '1.0' } })}>1.0</button>\n            <button className=\"bet-preset\" onClick={() => onBetChange({ target: { value: '2.0' } })}>2.0</button>\n          </div>\n          <button \n            className=\"bet-button\" \n            onClick={onPlaceBet}\n            disabled={!isConnected || !memoizedValues.isContractActive || !isLive || isLoading || isSpinning || waitingForWinner || postWinnerLoading}\n          >\n            {!memoizedValues.isContractActive ? '⏸️ Paused' :\n             isSpinning ? '🎰 Spinning...' :\n             waitingForWinner ? '🎯 Selecting...' :\n             postWinnerLoading ? '🔄 New Round...' :\n             isConnected ? 'Bet' : 'Connect Wallet'}\n          </button>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"stats-grid\">\n        <div className=\"stat-card jackpot-value\">\n          <div className=\"stat-icon\">🎰</div>\n          <div className=\"stat-amount\">{totalJackpotValue.toFixed(3)}</div>\n          <div className=\"stat-label\">Total Jackpot</div>\n        </div>\n        \n        <div className=\"stat-card net-payout\">\n          <div className=\"stat-icon\">💰</div>\n          <div className=\"stat-amount\">{winnerPrizeValue.toFixed(3)}</div>\n          <div className=\"stat-label\">Winner Gets (95%)</div>\n        </div>\n        \n        <div className=\"stat-card your-wager\">\n          <div className=\"stat-icon\">🎯</div>\n          <div className=\"stat-amount\">\n            {playerStats.yourWager.toFixed(3)}\n          </div>\n          <div className=\"stat-label\">Your Wager</div>\n        </div>\n        \n        <div className=\"stat-card your-chance\">\n          <div className=\"stat-amount\">\n            {playerStats.yourChance.toFixed(2)}%\n          </div>\n          <div className=\"stat-label\">Your Chance</div>\n        </div>\n        \n        <div className=\"stat-card time-remaining\">\n          <div className=\"stat-amount\">{formatTime(displayTimer)}</div>\n          <div className=\"stat-label\">\n            {contractState?.timer?.isActive ? 'Auto Timer' : 'Time Remaining'}\n          </div>\n        </div>\n      </div>\n\n      {/* Winner Arrow */}\n      <div className=\"winner-arrow-container\">\n        <div className=\"winner-arrow\">\n          <div className=\"arrow\">▼</div>\n        </div>\n      </div>\n\n      {/* Slot Machine */}\n      <div className=\"slot-machine\">\n        <div className=\"slot-frame\">\n          <div className=\"slot-reel-container\">\n            <div \n              className={`slot-reel ${isSpinning ? 'slot-spinning' : 'idle'}`}\n              style={{ \n                transform: `translateX(${-reelOffset}px)`,\n                willChange: 'transform'\n              }}\n            >\n              {extendedPlayers.map((player, index) => (\n                <div key={`${player.id}-${index}`} className=\"slot-card\">\n                  <PlayerSlot \n                    player={player} \n                    isWinner={winner && winner.id === player.id && !isSpinning}\n                    isPredetermined={predeterminedWinner && predeterminedWinner.id === player.id}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          {/* Slot Machine Effects */}\n          {isSpinning && <div className=\"slot-blur\"></div>}\n        </div>\n      </div>\n\n      {/* Footer Info */}\n      <div className=\"footer-info\">\n        <div className=\"payout-info\">\n          ⚡ Payouts are settled in TON\n          {contractState?.timer?.isActive && (\n            <span className=\"automation-info\"> • 🤖 Automated rounds</span>\n          )}\n        </div>\n        <div className=\"game-stats\">\n          <span className=\"players-count\">👥 {totalPlayers} Players</span>\n          <span className=\"round-number\">Round #{displayRound}</span>\n          {isConnected && (\n            <span className=\"connection-status\">🟢 Connected</span>\n          )}\n        </div>\n      </div>\n\n      {/* Contract Winner Announcement Overlay */}\n      {showWinnerAnnouncement && contractWinner && (\n        <div className=\"winner-announcement-overlay\">\n          <div className=\"winner-announcement-card\">\n            <div className=\"winner-icon\">🎉</div>\n            <h3>ROUND WINNER!</h3>\n            <div className=\"winner-details\">\n              <div className=\"winner-address\">{contractWinner.winner}</div>\n              <div className=\"winner-prize\">Won {contractWinner.prize} TON</div>\n            </div>\n            <div className=\"winner-confetti\">🎊 🎉 🎊</div>\n          </div>\n        </div>\n      )}\n\n      {/* Big Loading Overlay for Winner Selection */}\n      {waitingForWinner && (\n        <div className=\"winner-selection-loading\">\n          <div className=\"winner-selection-content\">\n            <div className=\"loading-spinner-big\">🎯</div>\n            <h2>Selecting Winner...</h2>\n            <p>Analyzing bets and picking the winner</p>\n            <div className=\"loading-dots\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Post-Winner Loading Overlay */}\n      {postWinnerLoading && (\n        <div className=\"winner-selection-loading\">\n          <div className=\"winner-selection-content\">\n            <div className=\"loading-spinner-big\">🔄</div>\n            <h2>Preparing New Round...</h2>\n            <p>Setting up the next jackpot round</p>\n            <div className=\"loading-dots\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Transaction Notification */}\n      {transactionNotification.show && (\n        <div className={`transaction-notification ${transactionNotification.type}`}>\n          {transactionNotification.message}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}