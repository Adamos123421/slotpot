{"ast":null,"code":"import apiService from'./apiService';class UserService{constructor(){this.registeredUsers=new Set();// Track which addresses we've already registered\n}// Register user with backend when they connect wallet\nasync registerUser(address,userData){try{if(!address){console.error('‚ùå Cannot register user: no address provided');return false;}// Don't register the same user multiple times in a session\nif(this.registeredUsers.has(address)){console.log('üë§ User already registered in this session:',address.slice(0,8)+'...');return true;}console.log('üë§ Registering user with backend:',userData);const response=await apiService.post('/user/register',{address:address,username:userData.username||userData.displayName||userData.shortName,firstName:userData.firstName,lastName:userData.lastName,telegramId:userData.id});if(response.success){this.registeredUsers.add(address);console.log('‚úÖ User registered successfully:',response.user.username);return response.user;}else{console.error('‚ùå Failed to register user:',response.error);return false;}}catch(error){console.error('‚ùå Error registering user:',error);return false;}}// Update username for an address\nasync updateUsername(address,username){try{if(!address||!username){console.error('‚ùå Cannot update username: missing address or username');return false;}console.log('üë§ Updating username for:',address.slice(0,8)+'...','‚Üí',username);const response=await apiService.post('/user/update-username',{address:address,username:username});if(response.success){console.log('‚úÖ Username updated successfully:',response.user.username);return response.user;}else{console.error('‚ùå Failed to update username:',response.error);return false;}}catch(error){console.error('‚ùå Error updating username:',error);return false;}}// Get user info from backend\nasync getUserInfo(address){try{if(!address)return null;const response=await apiService.get(\"/user/\".concat(address));return response;}catch(error){console.error('‚ùå Error getting user info:',error);return null;}}// Clear registration cache (for testing)\nclearCache(){this.registeredUsers.clear();console.log('üóëÔ∏è User registration cache cleared');}// Check if user is registered in this session\nisRegisteredInSession(address){return this.registeredUsers.has(address);}}// Create singleton instance\nconst userService=new UserService();export default userService;","map":{"version":3,"names":["apiService","UserService","constructor","registeredUsers","Set","registerUser","address","userData","console","error","has","log","slice","response","post","username","displayName","shortName","firstName","lastName","telegramId","id","success","add","user","updateUsername","getUserInfo","get","concat","clearCache","clear","isRegisteredInSession","userService"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/userService.js"],"sourcesContent":["import apiService from './apiService';\r\n\r\nclass UserService {\r\n  constructor() {\r\n    this.registeredUsers = new Set(); // Track which addresses we've already registered\r\n  }\r\n\r\n  // Register user with backend when they connect wallet\r\n  async registerUser(address, userData) {\r\n    try {\r\n      if (!address) {\r\n        console.error('‚ùå Cannot register user: no address provided');\r\n        return false;\r\n      }\r\n\r\n      // Don't register the same user multiple times in a session\r\n      if (this.registeredUsers.has(address)) {\r\n        console.log('üë§ User already registered in this session:', address.slice(0, 8) + '...');\r\n        return true;\r\n      }\r\n\r\n      console.log('üë§ Registering user with backend:', userData);\r\n\r\n      const response = await apiService.post('/user/register', {\r\n        address: address,\r\n        username: userData.username || userData.displayName || userData.shortName,\r\n        firstName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        telegramId: userData.id\r\n      });\r\n\r\n      if (response.success) {\r\n        this.registeredUsers.add(address);\r\n        console.log('‚úÖ User registered successfully:', response.user.username);\r\n        return response.user;\r\n      } else {\r\n        console.error('‚ùå Failed to register user:', response.error);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error registering user:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Update username for an address\r\n  async updateUsername(address, username) {\r\n    try {\r\n      if (!address || !username) {\r\n        console.error('‚ùå Cannot update username: missing address or username');\r\n        return false;\r\n      }\r\n\r\n      console.log('üë§ Updating username for:', address.slice(0, 8) + '...', '‚Üí', username);\r\n\r\n      const response = await apiService.post('/user/update-username', {\r\n        address: address,\r\n        username: username\r\n      });\r\n\r\n      if (response.success) {\r\n        console.log('‚úÖ Username updated successfully:', response.user.username);\r\n        return response.user;\r\n      } else {\r\n        console.error('‚ùå Failed to update username:', response.error);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error updating username:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get user info from backend\r\n  async getUserInfo(address) {\r\n    try {\r\n      if (!address) return null;\r\n\r\n      const response = await apiService.get(`/user/${address}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('‚ùå Error getting user info:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Clear registration cache (for testing)\r\n  clearCache() {\r\n    this.registeredUsers.clear();\r\n    console.log('üóëÔ∏è User registration cache cleared');\r\n  }\r\n\r\n  // Check if user is registered in this session\r\n  isRegisteredInSession(address) {\r\n    return this.registeredUsers.has(address);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst userService = new UserService();\r\nexport default userService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}