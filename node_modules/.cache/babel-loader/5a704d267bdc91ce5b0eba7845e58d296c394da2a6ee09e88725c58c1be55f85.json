{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{useTonConnectUI,useTonWallet}from'@tonconnect/ui-react';import{Address}from'@ton/core';import userService from'../services/userService';import useTelegramWebApp from'./useTelegramWebApp';const useTonConnect=()=>{var _tonConnectUI$account;const[tonConnectUI]=useTonConnectUI();const wallet=useTonWallet();const[balance,setBalance]=useState(null);const[isRestoringConnection,setIsRestoringConnection]=useState(true);const{user}=useTelegramWebApp();// Get bounceable address using proper TON Core Address handling\nconst rawAddress=(_tonConnectUI$account=tonConnectUI.account)===null||_tonConnectUI$account===void 0?void 0:_tonConnectUI$account.address;const address=rawAddress?Address.parse(rawAddress).toString({bounceable:true,urlSafe:true}):undefined;// Handle connection restoration loading state\nuseEffect(()=>{console.log('🔍 TON Connect state check:',{hasWallet:!!wallet,hasAccount:!!tonConnectUI.account,rawAddress,address,isConnected:!!(wallet&&address),isRestoringConnection});if(rawAddress&&address){console.log('✅ Address restored from TON Connect:',{rawAddress,bounceableAddress:address,isBounceable:address.startsWith('EQ')});setIsRestoringConnection(false);}else if(!wallet&&!tonConnectUI.account){// No wallet at all - stop loading\nconsole.log('❌ No wallet connection detected - stopping restoration loading');setIsRestoringConnection(false);}},[wallet,tonConnectUI.account,rawAddress,address,isRestoringConnection]);// Timeout for restoration loading (prevent infinite loading)\nuseEffect(()=>{const timeout=setTimeout(()=>{if(isRestoringConnection){console.log('⏰ Connection restoration timeout - stopping loading');setIsRestoringConnection(false);}},5000);// 5 second timeout\nreturn()=>clearTimeout(timeout);},[isRestoringConnection]);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);// Check if wallet is connected and has an address\nconst isConnected=!!(wallet&&address);// Get formatted address\nconst getFormattedAddress=()=>{if(!address)return null;return\"\".concat(address.slice(0,6),\"...\").concat(address.slice(-4));};// Get wallet info\nconst getWalletInfo=()=>{if(!wallet)return null;return{name:wallet.device.appName,address:address,formattedAddress:getFormattedAddress(),imageUrl:wallet.device.appImage||null,platform:wallet.device.platform};};// Connect wallet\nconst connectWallet=async()=>{try{setIsLoading(true);setError(null);await tonConnectUI.connectWallet();}catch(err){setError(err.message||'Failed to connect wallet');console.error('Wallet connection error:',err);}finally{setIsLoading(false);}};// Disconnect wallet\nconst disconnectWallet=async()=>{try{setIsLoading(true);await tonConnectUI.disconnect();setBalance(null);}catch(err){setError(err.message||'Failed to disconnect wallet');console.error('Wallet disconnect error:',err);}finally{setIsLoading(false);}};// Get wallet balance (mock for now)\nconst getBalance=useCallback(async()=>{if(!address)return null;try{setIsLoading(true);// Mock balance for testing - in production you'd call TON API\nconst mockBalance=(Math.random()*100).toFixed(2);setBalance(mockBalance);return mockBalance;}catch(err){setError(err.message||'Failed to get balance');console.error('Balance fetch error:',err);return null;}finally{setIsLoading(false);}},[address]);// Send transaction to smart contract\nconst sendTransaction=async transaction=>{if(!wallet||!address){throw new Error('Wallet not connected');}try{setIsLoading(true);setError(null);console.log('📤 Sending transaction:',transaction);// Send transaction using TON Connect UI\nconst result=await tonConnectUI.sendTransaction(transaction);console.log('✅ Transaction sent successfully:',result);return result;}catch(err){const errorMessage=err.message||'Transaction failed';setError(errorMessage);console.error('❌ Transaction error:',err);throw new Error(errorMessage);}finally{setIsLoading(false);}};// Legacy placeBet function for backward compatibility\nconst placeBet=async betAmount=>{try{console.log(\"\\uD83C\\uDFB0 Legacy placeBet called with \".concat(betAmount,\" TON\"));// For development, just simulate the bet\nif(process.env.NODE_ENV==='development'){console.log('🎰 Simulating bet in development mode');await new Promise(resolve=>setTimeout(resolve,1000));// Simulate delay\nreturn{success:true,txHash:'mock_tx_'+Date.now(),amount:betAmount};}// This should not be used anymore - use the contract hook instead\nthrow new Error('Please use the contract hook for placing bets');}catch(err){console.error('Bet placement error:',err);throw err;}};// Auto-refresh balance when wallet connects\nuseEffect(()=>{if(isConnected&&!balance){getBalance();}},[isConnected,balance,getBalance]);// Register user with backend when wallet connects\nuseEffect(()=>{if(isConnected&&address&&user){console.log('👤 Wallet connected, registering user with backend...');userService.registerUser(address,user);}},[isConnected,address,user]);return{// Connection state\nisConnected,isLoading,isRestoringConnection,error,// Wallet info\nwallet:getWalletInfo(),address,formattedAddress:getFormattedAddress(),balance,// Actions\nconnectWallet,disconnectWallet,getBalance,sendTransaction,placeBet,// Legacy - use contract hook instead\n// Utils\nsetError:err=>setError(err)};};export default useTonConnect;","map":{"version":3,"names":["useState","useEffect","useCallback","useTonConnectUI","useTonWallet","Address","userService","useTelegramWebApp","useTonConnect","_tonConnectUI$account","tonConnectUI","wallet","balance","setBalance","isRestoringConnection","setIsRestoringConnection","user","rawAddress","account","address","parse","toString","bounceable","urlSafe","undefined","console","log","hasWallet","hasAccount","isConnected","bounceableAddress","isBounceable","startsWith","timeout","setTimeout","clearTimeout","isLoading","setIsLoading","error","setError","getFormattedAddress","concat","slice","getWalletInfo","name","device","appName","formattedAddress","imageUrl","appImage","platform","connectWallet","err","message","disconnectWallet","disconnect","getBalance","mockBalance","Math","random","toFixed","sendTransaction","transaction","Error","result","errorMessage","placeBet","betAmount","process","env","NODE_ENV","Promise","resolve","success","txHash","Date","now","amount","registerUser"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useTonConnect.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { useTonConnectUI, useTonWallet } from '@tonconnect/ui-react';\r\nimport { Address } from '@ton/core';\r\nimport userService from '../services/userService';\r\nimport useTelegramWebApp from './useTelegramWebApp';\r\n\r\nconst useTonConnect = () => {\r\n  const [tonConnectUI] = useTonConnectUI();\r\n  const wallet = useTonWallet();\r\n  const [balance, setBalance] = useState(null);\r\n  const [isRestoringConnection, setIsRestoringConnection] = useState(true);\r\n  const { user } = useTelegramWebApp();\r\n\r\n  // Get bounceable address using proper TON Core Address handling\r\n  const rawAddress = tonConnectUI.account?.address;\r\n  const address = rawAddress ? Address.parse(rawAddress).toString({ bounceable: true, urlSafe: true }) : undefined;\r\n  \r\n  // Handle connection restoration loading state\r\n  useEffect(() => {\r\n    console.log('🔍 TON Connect state check:', { \r\n      hasWallet: !!wallet,\r\n      hasAccount: !!tonConnectUI.account,\r\n      rawAddress,\r\n      address,\r\n      isConnected: !!(wallet && address),\r\n      isRestoringConnection\r\n    });\r\n    \r\n    if (rawAddress && address) {\r\n      console.log('✅ Address restored from TON Connect:', { \r\n        rawAddress, \r\n        bounceableAddress: address, \r\n        isBounceable: address.startsWith('EQ') \r\n      });\r\n      setIsRestoringConnection(false);\r\n    } else if (!wallet && !tonConnectUI.account) {\r\n      // No wallet at all - stop loading\r\n      console.log('❌ No wallet connection detected - stopping restoration loading');\r\n      setIsRestoringConnection(false);\r\n    }\r\n  }, [wallet, tonConnectUI.account, rawAddress, address, isRestoringConnection]);\r\n\r\n  // Timeout for restoration loading (prevent infinite loading)\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      if (isRestoringConnection) {\r\n        console.log('⏰ Connection restoration timeout - stopping loading');\r\n        setIsRestoringConnection(false);\r\n      }\r\n    }, 5000); // 5 second timeout\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [isRestoringConnection]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if wallet is connected and has an address\r\n  const isConnected = !!(wallet && address);\r\n\r\n  // Get formatted address\r\n  const getFormattedAddress = () => {\r\n    if (!address) return null;\r\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n  };\r\n\r\n  // Get wallet info\r\n  const getWalletInfo = () => {\r\n    if (!wallet) return null;\r\n    \r\n    return {\r\n      name: wallet.device.appName,\r\n      address: address,\r\n      formattedAddress: getFormattedAddress(),\r\n      imageUrl: wallet.device.appImage || null,\r\n      platform: wallet.device.platform\r\n    };\r\n  };\r\n\r\n  // Connect wallet\r\n  const connectWallet = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      await tonConnectUI.connectWallet();\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to connect wallet');\r\n      console.error('Wallet connection error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Disconnect wallet\r\n  const disconnectWallet = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      await tonConnectUI.disconnect();\r\n      setBalance(null);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to disconnect wallet');\r\n      console.error('Wallet disconnect error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get wallet balance (mock for now)\r\n  const getBalance = useCallback(async () => {\r\n    if (!address) return null;\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      // Mock balance for testing - in production you'd call TON API\r\n      const mockBalance = (Math.random() * 100).toFixed(2);\r\n      setBalance(mockBalance);\r\n      return mockBalance;\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to get balance');\r\n      console.error('Balance fetch error:', err);\r\n      return null;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [address]);\r\n\r\n  // Send transaction to smart contract\r\n  const sendTransaction = async (transaction) => {\r\n    if (!wallet || !address) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      console.log('📤 Sending transaction:', transaction);\r\n\r\n      // Send transaction using TON Connect UI\r\n      const result = await tonConnectUI.sendTransaction(transaction);\r\n      \r\n      console.log('✅ Transaction sent successfully:', result);\r\n      return result;\r\n    } catch (err) {\r\n      const errorMessage = err.message || 'Transaction failed';\r\n      setError(errorMessage);\r\n      console.error('❌ Transaction error:', err);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Legacy placeBet function for backward compatibility\r\n  const placeBet = async (betAmount) => {\r\n    try {\r\n      console.log(`🎰 Legacy placeBet called with ${betAmount} TON`);\r\n      \r\n      // For development, just simulate the bet\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log('🎰 Simulating bet in development mode');\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay\r\n        return {\r\n          success: true,\r\n          txHash: 'mock_tx_' + Date.now(),\r\n          amount: betAmount\r\n        };\r\n      }\r\n\r\n      // This should not be used anymore - use the contract hook instead\r\n      throw new Error('Please use the contract hook for placing bets');\r\n    } catch (err) {\r\n      console.error('Bet placement error:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Auto-refresh balance when wallet connects\r\n  useEffect(() => {\r\n    if (isConnected && !balance) {\r\n      getBalance();\r\n    }\r\n  }, [isConnected, balance, getBalance]);\r\n\r\n  // Register user with backend when wallet connects\r\n  useEffect(() => {\r\n    if (isConnected && address && user) {\r\n      console.log('👤 Wallet connected, registering user with backend...');\r\n      userService.registerUser(address, user);\r\n    }\r\n  }, [isConnected, address, user]);\r\n\r\n  return {\r\n    // Connection state\r\n    isConnected,\r\n    isLoading,\r\n    isRestoringConnection,\r\n    error,\r\n    \r\n    // Wallet info\r\n    wallet: getWalletInfo(),\r\n    address,\r\n    formattedAddress: getFormattedAddress(),\r\n    balance,\r\n    \r\n    // Actions\r\n    connectWallet,\r\n    disconnectWallet,\r\n    getBalance,\r\n    sendTransaction,\r\n    placeBet, // Legacy - use contract hook instead\r\n    \r\n    // Utils\r\n    setError: (err) => setError(err)\r\n  };\r\n};\r\n\r\nexport default useTonConnect; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}