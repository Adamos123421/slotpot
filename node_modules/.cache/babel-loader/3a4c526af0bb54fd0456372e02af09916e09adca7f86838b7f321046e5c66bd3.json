{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\nfunction AppContent() {\n  _s();\n  var _contractState$timer2;\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n\n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  const [isInWinnerState, setIsInWinnerState] = useState(false); // Blocks new winner broadcasts\n\n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n  }, [gameBettors]);\n  useEffect(() => {\n    contractWinnerRef.current = contractWinner;\n\n    // Log winner detection only once when contractWinner changes\n    if (contractWinner) {\n      console.log('🏆 WINNER DETECTED FROM BACKEND!', {\n        winnerAddress: contractWinner.winner || contractWinner.fullAddress,\n        winnerName: contractWinner.username || contractWinner.displayName || 'Player',\n        prize: contractWinner.prize,\n        contractWinner\n      });\n      console.log('🎬 ANIMATION SHOULD START NOW - waiting for carousel to detect winner');\n    } else {\n      console.log('❌ WINNER CLEARED - contractWinner set to null');\n    }\n  }, [contractWinner]);\n  useEffect(() => {\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n  }, [showWinnerAnnouncement]);\n  useEffect(() => {\n    waitingForWinnerRef.current = waitingForWinner;\n  }, [waitingForWinner]);\n  useEffect(() => {\n    previousRoundBettorsRef.current = previousRoundBettors;\n  }, [previousRoundBettors]);\n  useEffect(() => {\n    timeRemainingRef.current = timeRemaining;\n  }, [timeRemaining]);\n  useEffect(() => {\n    showWinnerVisuallyRef.current = showWinnerVisually;\n  }, [showWinnerVisually]);\n  useEffect(() => {\n    isInWinnerStateRef.current = isInWinnerState;\n  }, [isInWinnerState]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n\n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n\n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n\n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n\n    // Winner will stay visible until new round starts (no automatic timeout)\n    console.log('🏆 Winner display will persist until new round is declared by backend');\n    return true;\n  }, []);\n\n  // Telegram integration\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n\n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    var _contractState$curren;\n    if (!contractState) return contractState;\n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' ? ((_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || 0 : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n\n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address || bettor.walletAddress === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n\n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n\n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    if (!liveJackpotValue) return 0;\n    return userBetTotal / liveJackpotValue * 100;\n  }, [userBetTotal, jackpotValue, gameBettors, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    var _contractState$timer;\n    // Always sync with backend timer when it changes\n    if (((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n    console.log('⏰ Starting local countdown timer...');\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n\n          // When we reach 0, trigger \"analyzing bets\" state locally\n          if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n          }\n          return newTime;\n        }\n\n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) {\n      console.log('⚠️ CAROUSEL REF NOT READY - animation cannot start');\n      return;\n    }\n    console.log('🎠 CAROUSEL ANIMATION STARTING with ref:', carousel);\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    let winnerCardVisible = false;\n    let targetPosition = null; // For dramatic slow-down effect\n    let animationPhase = 'normal'; // 'normal', 'fast-spin', 'slow-reveal'\n    const cardWidth = 110 + 10; // card width + gap\n\n    // Use refs to get current values without causing re-renders\n    const getCurrentBettors = () => gameBettorsRef.current;\n    const getPreviousBettors = () => previousRoundBettorsRef.current;\n    const getContractWinner = () => contractWinnerRef.current;\n    const getWaitingForWinner = () => waitingForWinnerRef.current;\n    const getTimeRemaining = () => timeRemainingRef.current;\n    const getShowWinnerVisually = () => showWinnerVisuallyRef.current;\n    const getBettorsForAnimation = () => {\n      const currentBettors = getCurrentBettors();\n      const prevBettors = getPreviousBettors();\n\n      // Simple: use current bettors, fallback to previous if empty\n      const bettors = currentBettors.length > 0 ? currentBettors : prevBettors;\n      console.log('🎠 getBettorsForAnimation - Using:', bettors.length, 'bettors');\n      return bettors;\n    };\n    const totalCards = 6; // Fixed to prevent recalculation\n    const resetPoint = cardWidth * totalCards;\n    console.log('🎠 Starting carousel animation with fixed parameters');\n    const animate = () => {\n      // Get current values using refs\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const timeLeft = getTimeRemaining();\n\n      // PHASE 1: Normal scrolling or waiting phase\n      if (!currentWinner) {\n        if (isWaiting && timeLeft === 0) {\n          // Fast spin while waiting for winner announcement\n          if (animationPhase !== 'fast-spin') {\n            animationPhase = 'fast-spin';\n            console.log('🎰 PHASE 1: Fast spinning while waiting for winner...');\n          }\n          currentPosition += 12; // Fast spin\n          if (currentPosition >= resetPoint) {\n            currentPosition = 0;\n          }\n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          animationId = requestAnimationFrame(animate);\n          return;\n        } else {\n          // Normal carousel movement when not waiting\n          if (animationPhase !== 'normal') {\n            animationPhase = 'normal';\n            console.log('🎠 PHASE: Normal carousel movement');\n          }\n          currentPosition += 2;\n          if (currentPosition >= resetPoint) {\n            currentPosition = 0;\n          }\n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          animationId = requestAnimationFrame(animate);\n          return;\n        }\n      }\n\n      // DEBUG: Log when we have a winner but are not in reveal phase yet\n      if (currentWinner && animationPhase !== 'slow-reveal') {\n        console.log('🔄 TRANSITIONING: Winner detected, switching to slow-reveal phase');\n      }\n\n      // PHASE 2: Winner announced - start dramatic reveal animation\n      if (currentWinner && animationPhase !== 'slow-reveal' && !winnerPositionFound) {\n        animationPhase = 'slow-reveal';\n        console.log('🎯 PHASE 2: Winner announced! Starting dramatic reveal animation...');\n\n        // Calculate target position immediately when winner is announced\n        const bettorsForAnimation = getBettorsForAnimation();\n        const allItems = [...bettorsForAnimation, ...Array.from({\n          length: Math.max(0, 6 - bettorsForAnimation.length)\n        }, () => null)];\n        const winnerIndex = allItems.findIndex(item => {\n          if (!item || !currentWinner) return false;\n          return item.address === currentWinner.winner || item.address === currentWinner.fullAddress || item.username === currentWinner.username;\n        });\n        if (winnerIndex !== -1) {\n          // Go through players once (one full cycle) then land on winner\n          const oneCycleDistance = cardWidth * totalCards; // One full cycle through all cards\n\n          // Get precise measurements for mobile layout\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          const carouselContainer = document.querySelector('.players-carousel');\n          const carouselTrack = document.querySelector('.carousel-track');\n          let arrowCenterOffset = 240; // Default fallback\n          if (targetArrow && carouselContainer && carouselTrack) {\n            // Get the arrow position relative to the track (not the container)\n            const arrowRect = targetArrow.getBoundingClientRect();\n            const trackRect = carouselTrack.getBoundingClientRect();\n            arrowCenterOffset = arrowRect.left - trackRect.left + arrowRect.width / 2;\n            console.log('🎯 PRECISE ARROW POSITION: Arrow center is at', arrowCenterOffset, 'px from track left');\n          }\n\n          // Mobile layout calculations:\n          // - .players-carousel has margin: 0 16px\n          // - .carousel-track has padding: 12px\n          // - Arrow is centered in the container, so for mobile (448px container width):\n          //   Arrow center = (448px - 32px margin) / 2 = 208px from container left\n          //   But relative to track = 208px - 12px padding = 196px from track left\n\n          // Calculate where the winner card should be positioned\n          const cardCenterOffset = cardWidth / 2; // Half card width (60px if cardWidth = 120px)\n          const winnerCardLeftPosition = winnerIndex * cardWidth; // Left edge of winner card\n          const winnerCardCenterPosition = winnerCardLeftPosition + cardCenterOffset; // Center of winner card\n\n          // Calculate how much we need to move the track to align winner card center with arrow center\n          const requiredOffset = winnerCardCenterPosition - arrowCenterOffset;\n\n          // Target position = current position + one full cycle + required offset\n          targetPosition = currentPosition + oneCycleDistance + requiredOffset;\n          console.log('🎯 MOBILE POSITIONING CALCULATION:');\n          console.log('  - Winner index:', winnerIndex);\n          console.log('  - Card width:', cardWidth, 'px (110px + 10px gap)');\n          console.log('  - Winner card left edge would be at:', winnerCardLeftPosition, 'px');\n          console.log('  - Winner card center would be at:', winnerCardCenterPosition, 'px');\n          console.log('  - Arrow center is at:', arrowCenterOffset, 'px (from track left)');\n          console.log('  - Required offset to center winner under arrow:', requiredOffset, 'px');\n          console.log('  - Current carousel position:', currentPosition, 'px');\n          console.log('  - One cycle distance:', oneCycleDistance, 'px');\n          console.log('  - Final target position:', targetPosition, 'px');\n          console.log('  - This should land winner card center exactly under arrow!');\n        }\n      }\n\n      // PHASE 3: Execute dramatic slowdown to winner position\n      if (currentWinner && animationPhase === 'slow-reveal' && targetPosition !== null && !winnerPositionFound) {\n        // Calculate distance to target\n        const distanceToTarget = Math.abs(targetPosition - currentPosition);\n        let speed;\n\n        // DEBUG: Log progress every 60 frames (about once per second)\n        if (Math.floor(currentPosition) % 60 === 0) {\n          console.log(`🎯 Animation progress: Current: ${currentPosition.toFixed(1)}, Target: ${targetPosition.toFixed(1)}, Distance: ${distanceToTarget.toFixed(1)}`);\n        }\n\n        // Update arrow visual state based on distance\n        const targetArrow = document.querySelector('.carousel-target-arrow');\n        if (targetArrow) {\n          if (distanceToTarget < 200) {\n            targetArrow.classList.add('winner-approaching');\n          } else {\n            targetArrow.classList.remove('winner-approaching');\n          }\n        }\n\n        // ENHANCED SUSPENSE ALGORITHM: Go through one cycle then dramatic slowdown\n        if (distanceToTarget > 800) {\n          speed = 20; // Very fast for going through the cycle\n        } else if (distanceToTarget > 600) {\n          speed = 15; // Fast approach during cycle\n        } else if (distanceToTarget > 400) {\n          speed = 12; // Medium speed during cycle\n        } else if (distanceToTarget > 300) {\n          speed = 8; // Starting to slow down as we approach final position\n        } else if (distanceToTarget > 200) {\n          speed = 5; // Noticeable slowdown\n        } else if (distanceToTarget > 100) {\n          speed = 2.5; // Slowing down dramatically...\n        } else if (distanceToTarget > 50) {\n          speed = 1.2; // Very slow...\n        } else if (distanceToTarget > 25) {\n          speed = 0.6; // Crawling...\n        } else if (distanceToTarget > 10) {\n          speed = 0.2; // Almost stopping...\n        } else {\n          speed = 0.05; // Final crawl to target\n        }\n\n        // Move towards target with calculated speed\n        if (currentPosition < targetPosition) {\n          currentPosition += speed;\n          if (currentPosition >= targetPosition) {\n            currentPosition = targetPosition;\n            winnerPositionFound = true;\n          }\n        } else if (currentPosition > targetPosition) {\n          currentPosition -= speed;\n          if (currentPosition <= targetPosition) {\n            currentPosition = targetPosition;\n            winnerPositionFound = true;\n          }\n        } else {\n          winnerPositionFound = true;\n        }\n\n        // Check if we've reached the target\n        if (winnerPositionFound) {\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          if (targetArrow) {\n            targetArrow.classList.remove('winner-approaching');\n            targetArrow.classList.add('winner-landed');\n          }\n          console.log('🎯 ANIMATION COMPLETE! Winner landed perfectly on target!');\n          console.log('🎯 Final position:', currentPosition, 'px');\n          console.log('🎯 NOW REVEALING WINNER VISUALLY!');\n\n          // NOW reveal the winner visually (CSS animation disabled to keep position)\n          setShowWinnerVisually(true);\n          console.log('🎯 Winner revealed! Position should remain locked.');\n\n          // Log final positioning for debugging\n          setTimeout(() => {\n            const targetArrow = document.querySelector('.carousel-target-arrow');\n            const winnerCard = document.querySelector('.carousel-card.winner');\n            if (targetArrow && winnerCard) {\n              const arrowRect = targetArrow.getBoundingClientRect();\n              const cardRect = winnerCard.getBoundingClientRect();\n              const arrowCenter = arrowRect.left + arrowRect.width / 2;\n              const cardCenter = cardRect.left + cardRect.width / 2;\n              console.log('🎯 FINAL VERIFICATION:');\n              console.log('  - Arrow center at:', arrowCenter, 'px from screen left');\n              console.log('  - Winner card center at:', cardCenter, 'px from screen left');\n              console.log('  - Alignment difference:', Math.abs(arrowCenter - cardCenter), 'px');\n            }\n          }, 100);\n          animationPhase = 'stopped';\n          // Stop the animation\n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          return;\n        }\n        carousel.style.transform = `translateX(-${currentPosition}px)`;\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n\n      // PHASE 4: Animation stopped (winner landed)\n      if (animationPhase === 'stopped') {\n        return; // Do nothing, winner is positioned\n      }\n\n      // If we reach here, something unexpected happened - continue animation\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n\n    // Reset animation when new round starts\n    const resetAnimation = () => {\n      animationPhase = 'normal';\n      winnerPositionFound = false;\n      winnerCardVisible = false;\n      targetPosition = null;\n      setShowWinnerVisually(false); // Hide winner visually for new round\n      const targetArrow = document.querySelector('.carousel-target-arrow');\n      if (targetArrow) {\n        targetArrow.classList.remove('winner-approaching', 'winner-landed');\n      }\n\n      // Restart animation if it was stopped\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      animationId = requestAnimationFrame(animate);\n      console.log('🔄 Animation restarted for new round');\n    };\n\n    // Expose reset function for external use\n    window.resetCarouselAnimation = resetAnimation;\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n      // Clean up global reference\n      delete window.resetCarouselAnimation;\n    };\n  }, []); // EMPTY dependency array to prevent re-initialization\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', timerData => {\n      console.log('⏰ App: Socket timer update:', timerData);\n\n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n\n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n\n        // Clear winner state when new round detected\n        if (isNewRound && contractWinner) {\n          console.log('🔄 Timer update detected new round - clearing winner state');\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n        }\n\n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n\n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', roundData => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      console.log('🎰 New round - immediately clearing winner display for fresh start');\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n\n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n\n      // Reset animation phases and arrow state\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n      console.log('🔄 New round - cleared all winner states and reset animation');\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', gameState => {\n      var _gameState$timer;\n      console.log('🎮 App: Game state update:', gameState);\n\n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = (_gameState$timer = gameState.timer) === null || _gameState$timer === void 0 ? void 0 : _gameState$timer.timeRemaining;\n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n\n          // Only sync if there's a significant difference (>10s) or if backend is ahead\n          if (timeDiff > 10 || backendTimeRemaining > prev) {\n            console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n\n          // Keep local countdown running if difference is small\n          console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n\n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n\n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n\n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        setGameBettors(gameState.bettors);\n      }\n\n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', gameData => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', data => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', data => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n\n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      setWaitingForWinner(isWaiting);\n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', winnerData => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', winnerData => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', resetData => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      console.log('🔄 Round reset - immediately clearing winner display for fresh timer');\n\n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n\n      // Clear ALL winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n\n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n\n      // Reset animation phases and arrow state\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n      console.log('🔄 Round reset - cleared all winner and bettor states and reset animation');\n    });\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = e => {\n    const inputValue = e.target.value;\n\n    // Allow empty input or numbers with decimal points\n    if (inputValue === '' || inputValue === '.' || /^\\d*\\.?\\d*$/.test(inputValue)) {\n      // Convert comma to period for consistency (if needed in future)\n      const normalizedValue = inputValue.replace(',', '.');\n\n      // For empty or just \".\" input, keep the raw value\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(normalizedValue);\n        return;\n      }\n\n      // For valid numbers, check limits but preserve decimal typing\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(normalizedValue); // Keep the string format to preserve typing\n      }\n    }\n  };\n  const handleTabChange = tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n    const numericBetAmount = parseFloat(betAmount);\n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n    try {\n      hapticFeedback('medium');\n      await placeBet(numericBetAmount);\n\n      // Reset bet amount after successful bet\n      setBetAmount(0.11);\n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logo-icon\",\n              children: \"\\uD83C\\uDFB0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"app-name\",\n              children: \"SlotPot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 868,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-icons\",\n            children: /*#__PURE__*/_jsxDEV(WalletConnection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-label\",\n            children: \"Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 875,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-amount\",\n            children: [isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000', /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"balance-symbol\",\n              children: \"TON\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-title\",\n            children: \"\\uD83D\\uDCB0 JACKPOT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-value-display\",\n            children: jackpotValue.toFixed(3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 888,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"jackpot-subtitle\",\n            children: \"Winner takes all...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-input-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"bet-amount-input\",\n              value: betAmount,\n              onChange: handleBetChange,\n              placeholder: \"0.000\",\n              inputMode: \"decimal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 895,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bet-increment-btn\",\n              onClick: () => setBetAmount(prev => {\n                const currentValue = parseFloat(prev) || 0;\n                return Math.min(currentValue + 0.1, 10).toFixed(1);\n              }),\n              children: \"+0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 903,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bet-button\",\n            onClick: handlePlaceBet,\n            disabled: isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement,\n            children: contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' : isPlacingBet ? 'Betting...' : 'Bet'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: userBetTotal.toFixed(3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 923,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Wager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-card chance-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: [userWinChance.toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 927,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Your Chance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 928,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 926,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-label\",\n            children: \"Time Remaining \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-value\",\n            children: [Math.floor((timeRemaining || 0) / 60), \":\", ((timeRemaining || 0) % 60).toString().padStart(2, '0')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 935,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 933,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-carousel-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `carousel-header ${timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? 'analyzing' : showWinnerVisually ? 'winner' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? \"🔍 Analyzing Bets...\" : showWinnerVisually && contractWinner ? `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` : `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 942,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"players-carousel\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"carousel-target-arrow\",\n              children: \"\\u2B07\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 957,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: carouselRef,\n              className: `carousel-track ${timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? 'analyzing' : showWinnerVisually ? 'winner-revealed' : slotSpinning ? 'sliding' : ''}`,\n              style: {\n                transition: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually || showWinnerVisually ? 'none' : ''\n              },\n              children: (() => {\n                // For a fresh round, prefer empty display over old data\n                // Only use previousRoundBettors if we're in winner display mode\n                const bettorsToShow = gameBettors.length > 0 ? gameBettors : showWinnerVisually || waitingForWinner ? previousRoundBettors : [];\n                console.log('🎠 Using bettors:', bettorsToShow.length, 'total bettors');\n                console.log('🎠 ContractWinner from backend:', contractWinner);\n\n                // Check if we're showing waiting cards due to empty data\n                if (bettorsToShow.length === 0) {\n                  console.log('⚠️ SHOWING WAITING CARDS - No bettor data available');\n                }\n\n                // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                const allItems = [...bettorsToShow, ...Array.from({\n                  length: Math.max(0, 6 - bettorsToShow.length)\n                }, () => null)];\n\n                // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                const infiniteItems = [...allItems, ...allItems, ...allItems];\n                return infiniteItems.map((bettor, index) => {\n                  // Winner highlighting - only show AFTER animation completes (showWinnerVisually)\n                  const isWinner = showWinnerVisually && contractWinner && bettor && (bettor.address === contractWinner.winner || bettor.address === contractWinner.fullAddress || bettor.username === contractWinner.username);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `carousel-card ${isWinner ? 'winner' : bettor ? 'active' : 'waiting'}`,\n                    \"data-debug\": `winner: ${isWinner}, address: ${bettor === null || bettor === void 0 ? void 0 : bettor.address}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-avatar\",\n                      children: bettor ? /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"generated-avatar\",\n                        children: bettor.username ? bettor.username[0].toUpperCase() : '?'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1008,\n                        columnNumber: 33\n                      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"waiting-icon\",\n                        children: \"\\u2753\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1012,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1006,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"mobile-player-info\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-name\",\n                        children: bettor ? bettor.username || bettor.displayName || 'Player' : 'Waiting'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1016,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mobile-player-bet\",\n                        children: bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1019,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1015,\n                      columnNumber: 29\n                    }, this), isWinner && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"winner-crown\",\n                      children: \"\\uD83D\\uDC51\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1024,\n                      columnNumber: 31\n                    }, this)]\n                  }, `${index}-${(bettor === null || bettor === void 0 ? void 0 : bettor.address) || 'waiting'}`, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1002,\n                    columnNumber: 27\n                  }, this);\n                });\n              })()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 959,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 941,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83C\\uDFE0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1039,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1040,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1038,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\u26A1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1043,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1044,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1042,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1047,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1048,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1046,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-icon\",\n              children: \"\\uD83D\\uDD0D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1051,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"footer-stat-value\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1052,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1050,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"games-button\",\n          children: [/*#__PURE__*/_jsxDEV(DollarSign, {\n            size: 14\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1056,\n            columnNumber: 15\n          }, this), \"Games\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 9\n    }, this), isLoadingContract && !contractWinner && !showWinnerAnnouncement && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"\\uD83D\\uDD04\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading contract data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1066,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinnerBroadcast, {\n      socketService: socketService\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1071,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 861,\n    columnNumber: 5\n  }, this);\n}\n\n// Main App component with TON Connect Provider\n_s(AppContent, \"GTAi/CxmjlPviLXPO1D3CvRDIPA=\", false, function () {\n  return [useTelegramWebApp, useJackpotContract];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(TonConnectUIProvider, {\n    manifestUrl: manifestUrl,\n    uiPreferences: uiOptions.uiPreferences,\n    language: uiOptions.language,\n    restoreConnection: uiOptions.restoreConnection,\n    actionsConfiguration: uiOptions.actionsConfiguration,\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1086,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1079,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","TonConnectUIProvider","Chat","GameArea","MobileChat","WalletConnection","WinnerBroadcast","useTelegramWebApp","useJackpotContract","socketService","winnerCoordinator","uiOptions","MessageCircle","Trophy","Users","DollarSign","jsxDEV","_jsxDEV","manifestUrl","AppContent","_s","_contractState$timer2","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","showWinnerVisually","setShowWinnerVisually","isInWinnerState","setIsInWinnerState","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","carouselRef","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","waitingForWinnerRef","previousRoundBettorsRef","timeRemainingRef","showWinnerVisuallyRef","isInWinnerStateRef","current","console","log","winnerAddress","winner","fullAddress","winnerName","username","displayName","prize","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","shouldBlock","setActive","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","isConnected","address","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","_contractState$curren","timer","isActive","timeElapsed","timerExpired","undefined","jackpotValue","totalJackpot","isLive","userBetTotal","length","filter","bettor","walletAddress","reduce","total","amount","userWinChance","currentRoundTotal","liveJackpotValue","_contractState$timer","countdown","setInterval","prev","newTime","clearInterval","carousel","style","transition","animationId","currentPosition","winnerPositionFound","winnerCardVisible","targetPosition","animationPhase","cardWidth","getCurrentBettors","getPreviousBettors","getContractWinner","getWaitingForWinner","getTimeRemaining","getShowWinnerVisually","getBettorsForAnimation","currentBettors","prevBettors","bettors","totalCards","resetPoint","animate","currentWinner","isWaiting","timeLeft","transform","requestAnimationFrame","bettorsForAnimation","allItems","Array","from","Math","max","winnerIndex","findIndex","item","oneCycleDistance","targetArrow","document","querySelector","carouselContainer","carouselTrack","arrowCenterOffset","arrowRect","getBoundingClientRect","trackRect","left","width","cardCenterOffset","winnerCardLeftPosition","winnerCardCenterPosition","requiredOffset","distanceToTarget","abs","speed","floor","toFixed","classList","add","remove","setTimeout","winnerCard","cardRect","arrowCenter","cardCenter","resetAnimation","cancelAnimationFrame","window","resetCarouselAnimation","connect","on","timerData","warn","newTimeRemaining","newRoundNumber","timeDiff","isNewRound","roundData","reset","gameState","_gameState$timer","backendTimeRemaining","isWaitingForWinner","isArray","winnerAnnouncement","gameData","data","message","resetData","off","disconnect","handleBetChange","e","inputValue","target","value","test","normalizedValue","replace","numericValue","parseFloat","isNaN","handleTabChange","tab","handlePlaceBet","numericBetAmount","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userBalance","type","onChange","placeholder","inputMode","onClick","currentValue","min","disabled","toString","padStart","ref","bettorsToShow","infiniteItems","map","index","isWinner","toUpperCase","size","_c","App","uiPreferences","language","restoreConnection","actionsConfiguration","_c2","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport Chat from './components/Chat';\nimport GameArea from './components/GameArea';\nimport MobileChat from './components/MobileChat';\nimport WalletConnection from './components/WalletConnection';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport { MessageCircle, Trophy, Users, DollarSign } from 'lucide-react';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.11);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  const [isInWinnerState, setIsInWinnerState] = useState(false); // Blocks new winner broadcasts\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  const carouselRef = useRef(null);\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n  \n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { \n    contractWinnerRef.current = contractWinner; \n    \n    // Log winner detection only once when contractWinner changes\n    if (contractWinner) {\n      console.log('🏆 WINNER DETECTED FROM BACKEND!', { \n        winnerAddress: contractWinner.winner || contractWinner.fullAddress,\n        winnerName: contractWinner.username || contractWinner.displayName || 'Player',\n        prize: contractWinner.prize,\n        contractWinner\n      });\n      console.log('🎬 ANIMATION SHOULD START NOW - waiting for carousel to detect winner');\n    } else {\n      console.log('❌ WINNER CLEARED - contractWinner set to null');\n    }\n  }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n  useEffect(() => { waitingForWinnerRef.current = waitingForWinner; }, [waitingForWinner]);\n  useEffect(() => { previousRoundBettorsRef.current = previousRoundBettors; }, [previousRoundBettors]);\n  useEffect(() => { timeRemainingRef.current = timeRemaining; }, [timeRemaining]);\n  useEffect(() => { showWinnerVisuallyRef.current = showWinnerVisually; }, [showWinnerVisually]);\n  useEffect(() => { isInWinnerStateRef.current = isInWinnerState; }, [isInWinnerState]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      console.log(`🔄 Winner announcement blocked by coordinator (${source})`);\n      return false;\n    }\n    \n    console.log(`🎉 Showing winner announcements from ${source}:`, winnerData);\n    console.log(`🎉 Setting contractWinner to:`, winnerData);\n    \n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Winner will stay visible until new round starts (no automatic timeout)\n    console.log('🏆 Winner display will persist until new round is declared by backend');\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    \n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\n        : (Number(rawAdminInfo.currentRound) || 0)\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    if (!contractState) return contractState;\n    \n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' \n        ? (contractState.currentRound?.roundNumber || 0)\n        : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  \n  // Calculate user stats from gameBettors data\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    \n    return gameBettors\n      .filter(bettor => \n        bettor.address === address || \n        bettor.walletAddress === address\n      )\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors, address, isConnected]);\n  \n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n    \n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n    \n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    \n    if (!liveJackpotValue) return 0;\n    \n    return (userBetTotal / liveJackpotValue) * 100;\n  }, [userBetTotal, jackpotValue, gameBettors, isConnected, address]);\n\n  // Use automation timer or fallback to UI timer\n  useEffect(() => {\n    // Always sync with backend timer when it changes\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(contractState.timer.timeRemaining);\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n\n    console.log('⏰ Starting local countdown timer...');\n\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          console.log('⏰ Local countdown:', newTime);\n        \n          // When we reach 0, trigger \"analyzing bets\" state locally\n        if (newTime === 0) {\n            console.log('⏰ Local timer reached 0, entering analyzing state...');\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n        }\n        \n        return newTime;\n        }\n        \n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n\n    return () => {\n      console.log('⏰ Stopping local countdown timer...');\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Smooth infinite carousel effect\n  useEffect(() => {\n    const carousel = carouselRef.current;\n    if (!carousel) {\n      console.log('⚠️ CAROUSEL REF NOT READY - animation cannot start');\n      return;\n    }\n\n    console.log('🎠 CAROUSEL ANIMATION STARTING with ref:', carousel);\n\n    // Disable CSS transitions for smooth JS animation\n    carousel.style.transition = 'none';\n\n    let animationId;\n    let currentPosition = 0;\n    let winnerPositionFound = false;\n    let winnerCardVisible = false;\n    let targetPosition = null; // For dramatic slow-down effect\n    let animationPhase = 'normal'; // 'normal', 'fast-spin', 'slow-reveal'\n    const cardWidth = 110 + 10; // card width + gap\n    \n    // Use refs to get current values without causing re-renders\n    const getCurrentBettors = () => gameBettorsRef.current;\n    const getPreviousBettors = () => previousRoundBettorsRef.current;\n    const getContractWinner = () => contractWinnerRef.current;\n    const getWaitingForWinner = () => waitingForWinnerRef.current;\n    const getTimeRemaining = () => timeRemainingRef.current;\n    const getShowWinnerVisually = () => showWinnerVisuallyRef.current;\n    \n    const getBettorsForAnimation = () => {\n      const currentBettors = getCurrentBettors();\n      const prevBettors = getPreviousBettors();\n      \n      // Simple: use current bettors, fallback to previous if empty\n      const bettors = currentBettors.length > 0 ? currentBettors : prevBettors;\n      \n      console.log('🎠 getBettorsForAnimation - Using:', bettors.length, 'bettors');\n      \n      return bettors;\n    };\n    \n    const totalCards = 6; // Fixed to prevent recalculation\n    const resetPoint = cardWidth * totalCards;\n    \n    console.log('🎠 Starting carousel animation with fixed parameters');\n\n    const animate = () => {\n      // Get current values using refs\n      const currentWinner = getContractWinner();\n      const isWaiting = getWaitingForWinner();\n      const timeLeft = getTimeRemaining();\n      \n      // PHASE 1: Normal scrolling or waiting phase\n      if (!currentWinner) {\n        if (isWaiting && timeLeft === 0) {\n          // Fast spin while waiting for winner announcement\n          if (animationPhase !== 'fast-spin') {\n            animationPhase = 'fast-spin';\n            console.log('🎰 PHASE 1: Fast spinning while waiting for winner...');\n          }\n          \n          currentPosition += 12; // Fast spin\n          if (currentPosition >= resetPoint) {\n            currentPosition = 0;\n          }\n          \n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          animationId = requestAnimationFrame(animate);\n          return;\n        } else {\n          // Normal carousel movement when not waiting\n          if (animationPhase !== 'normal') {\n            animationPhase = 'normal';\n            console.log('🎠 PHASE: Normal carousel movement');\n          }\n          \n          currentPosition += 2;\n          if (currentPosition >= resetPoint) {\n            currentPosition = 0;\n          }\n          \n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          animationId = requestAnimationFrame(animate);\n          return;\n        }\n      }\n      \n      // DEBUG: Log when we have a winner but are not in reveal phase yet\n      if (currentWinner && animationPhase !== 'slow-reveal') {\n        console.log('🔄 TRANSITIONING: Winner detected, switching to slow-reveal phase');\n      }\n      \n      // PHASE 2: Winner announced - start dramatic reveal animation\n      if (currentWinner && animationPhase !== 'slow-reveal' && !winnerPositionFound) {\n        animationPhase = 'slow-reveal';\n        console.log('🎯 PHASE 2: Winner announced! Starting dramatic reveal animation...');\n        \n        // Calculate target position immediately when winner is announced\n        const bettorsForAnimation = getBettorsForAnimation();\n        const allItems = [\n          ...bettorsForAnimation,\n          ...Array.from({ length: Math.max(0, 6 - bettorsForAnimation.length) }, () => null)\n        ];\n        \n        const winnerIndex = allItems.findIndex(item => {\n          if (!item || !currentWinner) return false;\n          return (\n            item.address === currentWinner.winner ||\n            item.address === currentWinner.fullAddress ||\n            item.username === currentWinner.username\n          );\n        });\n        \n        if (winnerIndex !== -1) {\n          // Go through players once (one full cycle) then land on winner\n          const oneCycleDistance = cardWidth * totalCards; // One full cycle through all cards\n          \n          // Get precise measurements for mobile layout\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          const carouselContainer = document.querySelector('.players-carousel');\n          const carouselTrack = document.querySelector('.carousel-track');\n          \n          let arrowCenterOffset = 240; // Default fallback\n          if (targetArrow && carouselContainer && carouselTrack) {\n            // Get the arrow position relative to the track (not the container)\n            const arrowRect = targetArrow.getBoundingClientRect();\n            const trackRect = carouselTrack.getBoundingClientRect();\n            arrowCenterOffset = arrowRect.left - trackRect.left + (arrowRect.width / 2);\n            console.log('🎯 PRECISE ARROW POSITION: Arrow center is at', arrowCenterOffset, 'px from track left');\n          }\n          \n          // Mobile layout calculations:\n          // - .players-carousel has margin: 0 16px\n          // - .carousel-track has padding: 12px\n          // - Arrow is centered in the container, so for mobile (448px container width):\n          //   Arrow center = (448px - 32px margin) / 2 = 208px from container left\n          //   But relative to track = 208px - 12px padding = 196px from track left\n          \n          // Calculate where the winner card should be positioned\n          const cardCenterOffset = cardWidth / 2; // Half card width (60px if cardWidth = 120px)\n          const winnerCardLeftPosition = winnerIndex * cardWidth; // Left edge of winner card\n          const winnerCardCenterPosition = winnerCardLeftPosition + cardCenterOffset; // Center of winner card\n          \n          // Calculate how much we need to move the track to align winner card center with arrow center\n          const requiredOffset = winnerCardCenterPosition - arrowCenterOffset;\n          \n          // Target position = current position + one full cycle + required offset\n          targetPosition = currentPosition + oneCycleDistance + requiredOffset;\n          \n          console.log('🎯 MOBILE POSITIONING CALCULATION:');\n          console.log('  - Winner index:', winnerIndex);\n          console.log('  - Card width:', cardWidth, 'px (110px + 10px gap)');\n          console.log('  - Winner card left edge would be at:', winnerCardLeftPosition, 'px');\n          console.log('  - Winner card center would be at:', winnerCardCenterPosition, 'px');\n          console.log('  - Arrow center is at:', arrowCenterOffset, 'px (from track left)');\n          console.log('  - Required offset to center winner under arrow:', requiredOffset, 'px');\n          console.log('  - Current carousel position:', currentPosition, 'px');\n          console.log('  - One cycle distance:', oneCycleDistance, 'px');\n          console.log('  - Final target position:', targetPosition, 'px');\n          console.log('  - This should land winner card center exactly under arrow!');\n        }\n      }\n      \n      // PHASE 3: Execute dramatic slowdown to winner position\n      if (currentWinner && animationPhase === 'slow-reveal' && targetPosition !== null && !winnerPositionFound) {\n        // Calculate distance to target\n        const distanceToTarget = Math.abs(targetPosition - currentPosition);\n        let speed;\n        \n        // DEBUG: Log progress every 60 frames (about once per second)\n        if (Math.floor(currentPosition) % 60 === 0) {\n          console.log(`🎯 Animation progress: Current: ${currentPosition.toFixed(1)}, Target: ${targetPosition.toFixed(1)}, Distance: ${distanceToTarget.toFixed(1)}`);\n        }\n        \n        // Update arrow visual state based on distance\n        const targetArrow = document.querySelector('.carousel-target-arrow');\n        if (targetArrow) {\n          if (distanceToTarget < 200) {\n            targetArrow.classList.add('winner-approaching');\n          } else {\n            targetArrow.classList.remove('winner-approaching');\n          }\n        }\n        \n        // ENHANCED SUSPENSE ALGORITHM: Go through one cycle then dramatic slowdown\n        if (distanceToTarget > 800) {\n          speed = 20; // Very fast for going through the cycle\n        } else if (distanceToTarget > 600) {\n          speed = 15; // Fast approach during cycle\n        } else if (distanceToTarget > 400) {\n          speed = 12; // Medium speed during cycle\n        } else if (distanceToTarget > 300) {\n          speed = 8; // Starting to slow down as we approach final position\n        } else if (distanceToTarget > 200) {\n          speed = 5; // Noticeable slowdown\n        } else if (distanceToTarget > 100) {\n          speed = 2.5; // Slowing down dramatically...\n        } else if (distanceToTarget > 50) {\n          speed = 1.2; // Very slow...\n        } else if (distanceToTarget > 25) {\n          speed = 0.6; // Crawling...\n        } else if (distanceToTarget > 10) {\n          speed = 0.2; // Almost stopping...\n        } else {\n          speed = 0.05; // Final crawl to target\n        }\n        \n        // Move towards target with calculated speed\n        if (currentPosition < targetPosition) {\n          currentPosition += speed;\n          if (currentPosition >= targetPosition) {\n            currentPosition = targetPosition;\n            winnerPositionFound = true;\n          }\n        } else if (currentPosition > targetPosition) {\n          currentPosition -= speed;\n          if (currentPosition <= targetPosition) {\n            currentPosition = targetPosition;\n            winnerPositionFound = true;\n          }\n        } else {\n          winnerPositionFound = true;\n        }\n        \n        // Check if we've reached the target\n        if (winnerPositionFound) {\n          const targetArrow = document.querySelector('.carousel-target-arrow');\n          if (targetArrow) {\n            targetArrow.classList.remove('winner-approaching');\n            targetArrow.classList.add('winner-landed');\n          }\n          console.log('🎯 ANIMATION COMPLETE! Winner landed perfectly on target!');\n          console.log('🎯 Final position:', currentPosition, 'px');\n          console.log('🎯 NOW REVEALING WINNER VISUALLY!');\n          \n          // NOW reveal the winner visually (CSS animation disabled to keep position)\n          setShowWinnerVisually(true);\n          console.log('🎯 Winner revealed! Position should remain locked.');\n          \n          // Log final positioning for debugging\n          setTimeout(() => {\n            const targetArrow = document.querySelector('.carousel-target-arrow');\n            const winnerCard = document.querySelector('.carousel-card.winner');\n            if (targetArrow && winnerCard) {\n              const arrowRect = targetArrow.getBoundingClientRect();\n              const cardRect = winnerCard.getBoundingClientRect();\n              const arrowCenter = arrowRect.left + (arrowRect.width / 2);\n              const cardCenter = cardRect.left + (cardRect.width / 2);\n              console.log('🎯 FINAL VERIFICATION:');\n              console.log('  - Arrow center at:', arrowCenter, 'px from screen left');\n              console.log('  - Winner card center at:', cardCenter, 'px from screen left');\n              console.log('  - Alignment difference:', Math.abs(arrowCenter - cardCenter), 'px');\n            }\n          }, 100);\n          \n          animationPhase = 'stopped';\n          // Stop the animation\n          carousel.style.transform = `translateX(-${currentPosition}px)`;\n          return;\n        }\n        \n        carousel.style.transform = `translateX(-${currentPosition}px)`;\n        animationId = requestAnimationFrame(animate);\n        return;\n      }\n      \n      // PHASE 4: Animation stopped (winner landed)\n      if (animationPhase === 'stopped') {\n        return; // Do nothing, winner is positioned\n      }\n\n      // If we reach here, something unexpected happened - continue animation\n      animationId = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animationId = requestAnimationFrame(animate);\n\n    // Reset animation when new round starts\n    const resetAnimation = () => {\n      animationPhase = 'normal';\n      winnerPositionFound = false;\n      winnerCardVisible = false;\n      targetPosition = null;\n      setShowWinnerVisually(false); // Hide winner visually for new round\n      const targetArrow = document.querySelector('.carousel-target-arrow');\n      if (targetArrow) {\n        targetArrow.classList.remove('winner-approaching', 'winner-landed');\n      }\n      \n      // Restart animation if it was stopped\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      animationId = requestAnimationFrame(animate);\n      console.log('🔄 Animation restarted for new round');\n    };\n    \n    // Expose reset function for external use\n    window.resetCarouselAnimation = resetAnimation;\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      // Restore CSS transition\n      if (carousel) {\n        carousel.style.transition = '';\n      }\n      // Clean up global reference\n      delete window.resetCarouselAnimation;\n    };\n  }, []); // EMPTY dependency array to prevent re-initialization\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    console.log('🔌 App.js: Establishing single socket connection for entire app...');\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      console.log('⏰ App: Socket timer update:', timerData);\n      \n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      \n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      \n      // Only update timeRemaining if it's significantly different (>2 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n        \n        // Clear winner state when new round detected\n        if (isNewRound && contractWinner) {\n          console.log('🔄 Timer update detected new round - clearing winner state');\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n        }\n        \n        // Sync if: new round, big difference (>10s), or timer reset (server > client)\n        if (isNewRound || timeDiff > 10 || newTimeRemaining > prev) {\n          console.log('⏰ Syncing timer:', prev, '→', newTimeRemaining, isNewRound ? '(new round)' : timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n          return newTimeRemaining;\n        }\n        \n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      \n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      console.log('🎰 App: New round detected via socket:', roundData);\n      console.log('🎰 New round - immediately clearing winner display for fresh start');\n      \n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n      \n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n      \n      // Reset animation phases and arrow state\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n      \n      console.log('🔄 New round - cleared all winner states and reset animation');\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      console.log('🎮 App: Game state update:', gameState);\n      \n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = gameState.timer?.timeRemaining;\n      \n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n          \n          // Only sync if there's a significant difference (>10s) or if backend is ahead\n          if (timeDiff > 10 || backendTimeRemaining > prev) {\n            console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff > 10 ? '(>10s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n          \n          // Keep local countdown running if difference is small\n          console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          setPreviousRoundBettors([...gameBettorsRef.current]);\n        }\n        \n        setWaitingForWinner(gameState.isWaitingForWinner);\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        \n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          setPreviousRoundBettors([...gameState.bettors]);\n        }\n        \n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      console.log('💰 App: Bettors update:', data);\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (data) => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n      \n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      \n      setWaitingForWinner(isWaiting);\n      \n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', (resetData) => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      console.log('🔄 Round reset - immediately clearing winner display for fresh timer');\n      \n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n      \n      // Clear ALL winner states since this is a fresh timer\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      \n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      setPreviousRoundBettors([]);\n      \n      // Reset animation phases and arrow state\n      if (window.resetCarouselAnimation) {\n        window.resetCarouselAnimation();\n      }\n      \n      console.log('🔄 Round reset - cleared all winner and bettor states and reset animation');\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    const inputValue = e.target.value;\n    \n    // Allow empty input or numbers with decimal points\n    if (inputValue === '' || inputValue === '.' || /^\\d*\\.?\\d*$/.test(inputValue)) {\n      // Convert comma to period for consistency (if needed in future)\n      const normalizedValue = inputValue.replace(',', '.');\n      \n      // For empty or just \".\" input, keep the raw value\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(normalizedValue);\n        return;\n      }\n      \n      // For valid numbers, check limits but preserve decimal typing\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(normalizedValue); // Keep the string format to preserve typing\n      }\n    }\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    const numericBetAmount = parseFloat(betAmount);\n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n\n    try {\n      hapticFeedback('medium');\n      await placeBet(numericBetAmount);\n      \n      // Reset bet amount after successful bet\n      setBetAmount(0.11);\n      \n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n        <div className=\"app-container\">\n          {/* Header Section */}\n          <div className=\"header-section\">\n            <div className=\"header-top\">\n              <div className=\"logo-section\">\n                <div className=\"logo-icon\">🎰</div>\n                <div className=\"app-name\">SlotPot</div>\n              </div>\n              <div className=\"header-icons\">\n                <WalletConnection />\n              </div>\n            </div>\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">\n                {isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000'}\n                <span className=\"balance-symbol\">TON</span>\n              </div>\n              </div>\n          </div>\n          \n          {/* Main Content */}\n          <div className=\"main-content\">\n            {/* Jackpot Display */}\n            <div className=\"jackpot-header\">\n              <div className=\"jackpot-title\">💰 JACKPOT</div>\n              <div className=\"jackpot-value-display\">{jackpotValue.toFixed(3)}</div>\n              <div className=\"jackpot-subtitle\">Winner takes all...</div>\n            </div>\n\n            {/* Betting Section */}\n            <div className=\"betting-section\">\n              <div className=\"bet-input-section\">\n                <input \n                  type=\"text\" \n                  className=\"bet-amount-input\" \n                  value={betAmount}\n                  onChange={handleBetChange}\n                  placeholder=\"0.000\"\n                  inputMode=\"decimal\"\n                />\n                <button className=\"bet-increment-btn\" onClick={() => setBetAmount(prev => {\n                  const currentValue = parseFloat(prev) || 0;\n                  return Math.min(currentValue + 0.1, 10).toFixed(1);\n                })}>\n                  +0.1\n          </button>\n              </div>\n          <button \n                className=\"bet-button\" \n                onClick={handlePlaceBet}\n                disabled={isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement}\n          >\n                {contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' :\n                 isPlacingBet ? 'Betting...' : 'Bet'}\n          </button>\n        </div>\n\n            {/* Stats Grid */}\n            <div className=\"stats-grid\">\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">{userBetTotal.toFixed(3)}</div>\n                <div className=\"stat-label\">Your Wager</div>\n              </div>\n              <div className=\"stat-card chance-stat\">\n                <div className=\"stat-value\">{userWinChance.toFixed(2)}%</div>\n                <div className=\"stat-label\">Your Chance</div>\n          </div>\n        </div>\n\n            {/* Time Section */}\n            <div className=\"time-section\">\n              <div className=\"time-label\">Time Remaining </div>\n              <div className=\"time-value\">\n                {Math.floor((timeRemaining || 0) / 60)}:{((timeRemaining || 0) % 60).toString().padStart(2, '0')}\n          </div>\n        </div>\n\n            {/* Players Carousel Section */}\n            <div className=\"players-carousel-section\">\n              <div className={`carousel-header ${\n                (timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? 'analyzing' : \n                showWinnerVisually ? 'winner' : ''\n              }`}>\n                <h3>\n                  {(timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? \n                    \"🔍 Analyzing Bets...\" : \n                    showWinnerVisually && contractWinner ? \n                    `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` :\n                    `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                  }\n                </h3>\n              </div>\n              <div className=\"players-carousel\">\n                {/* TARGET ARROW - Cards must land here! */}\n                <div className=\"carousel-target-arrow\">⬇️</div>\n                \n                <div \n                  ref={carouselRef}\n                  className={`carousel-track ${\n                    (timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? 'analyzing' : \n                    showWinnerVisually ? 'winner-revealed' : \n                    slotSpinning ? 'sliding' : ''\n                  }`}\n                  style={{\n                    transition: ((timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually)) || showWinnerVisually ? 'none' : ''\n                  }}\n                >\n                  {(() => {\n                    // For a fresh round, prefer empty display over old data\n                    // Only use previousRoundBettors if we're in winner display mode\n                    const bettorsToShow = gameBettors.length > 0 ? gameBettors : \n                                         (showWinnerVisually || waitingForWinner) ? previousRoundBettors : [];\n                    \n                    console.log('🎠 Using bettors:', bettorsToShow.length, 'total bettors');\n                    console.log('🎠 ContractWinner from backend:', contractWinner);\n                    \n                    // Check if we're showing waiting cards due to empty data\n                    if (bettorsToShow.length === 0) {\n                      console.log('⚠️ SHOWING WAITING CARDS - No bettor data available');\n                    }\n                    \n                    // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                    const allItems = [\n                      ...bettorsToShow,\n                      ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n                    ];\n                    \n                    // Create triple set for smooth infinite scroll: [original] [duplicate1] [duplicate2]\n                    const infiniteItems = [...allItems, ...allItems, ...allItems];\n                    \n                    return infiniteItems.map((bettor, index) => {\n                      // Winner highlighting - only show AFTER animation completes (showWinnerVisually)\n                      const isWinner = showWinnerVisually && contractWinner && bettor && (\n                        bettor.address === contractWinner.winner ||\n                        bettor.address === contractWinner.fullAddress ||\n                        bettor.username === contractWinner.username\n                      );\n                        \n                        return (\n                          <div key={`${index}-${bettor?.address || 'waiting'}`} className={`carousel-card ${\n                            isWinner ? 'winner' : \n                            bettor ? 'active' : 'waiting'\n                          }`} data-debug={`winner: ${isWinner}, address: ${bettor?.address}`}>\n                            <div className=\"mobile-player-avatar\">\n                              {bettor ? (\n                                <div className=\"generated-avatar\">\n                                  {bettor.username ? bettor.username[0].toUpperCase() : '?'}\n                                </div>\n                              ) : (\n                                <div className=\"waiting-icon\">❓</div>\n                              )}\n                            </div>\n                            <div className=\"mobile-player-info\">\n                              <div className=\"mobile-player-name\">\n                                {bettor ? (bettor.username || bettor.displayName || 'Player') : 'Waiting'}\n                              </div>\n                              <div className=\"mobile-player-bet\">\n                                {bettor ? `${(bettor.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                              </div>\n                            </div>\n                            {isWinner && (\n                              <div className=\"winner-crown\">👑</div>\n                            )}\n                          </div>\n                        );\n                      });\n                  })()}\n                </div>\n              </div>\n        </div>\n      </div>\n\n      {/* Mobile Footer */}\n      <div className=\"mobile-footer\">\n            <div className=\"footer-stats\">\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🏠</div>\n                <div className=\"footer-stat-value\">Home</div>\n              </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">⚡</div>\n                <div className=\"footer-stat-value\">Fast</div>\n            </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🕐</div>\n                <div className=\"footer-stat-value\">History</div>\n            </div>\n              <div className=\"footer-stat\">\n                <div className=\"footer-stat-icon\">🔍</div>\n                <div className=\"footer-stat-value\">Search</div>\n              </div>\n          </div>\n            <button className=\"games-button\">\n              <DollarSign size={14} />\n            Games\n          </button>\n        </div>\n      </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && !contractWinner && !showWinnerAnnouncement && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\">🔄</div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}