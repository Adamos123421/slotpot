{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { backendApi } from '../services/backendApi';\nimport useTonConnect from './useTonConnect';\nimport useTelegramWebApp from './useTelegramWebApp';\nconst useReferralAutoRegistration = () => {\n  _s();\n  const {\n    address,\n    isConnected\n  } = useTonConnect();\n  const {\n    user\n  } = useTelegramWebApp();\n  const [referralCode, setReferralCode] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [hasRegistered, setHasRegistered] = useState(false);\n\n  // Check for referral code when user data loads\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.referralCode && !referralCode) {\n      console.log('üéØ Global referral detection: Found referral code:', user.referralCode.slice(0, 8) + '...');\n      setReferralCode(user.referralCode);\n    }\n  }, [user, referralCode]);\n\n  // Auto-register referral when all conditions are met\n  useEffect(() => {\n    if (referralCode && address && isConnected && !hasRegistered && !isRegistering) {\n      console.log('üéØ Global auto-registration: All conditions met');\n      console.log('  - referralCode:', referralCode.slice(0, 8) + '...');\n      console.log('  - address:', address.slice(0, 8) + '...');\n      console.log('  - user:', (user === null || user === void 0 ? void 0 : user.id) || 'no telegram data');\n      console.log('  - isConnected:', isConnected);\n\n      // Check if it's a self-referral\n      if (referralCode === address) {\n        console.log('‚ùå Self-referral detected, skipping registration');\n        setHasRegistered(true);\n        return;\n      }\n      handleAutoRegistration();\n    }\n  }, [referralCode, address, user, isConnected, hasRegistered, isRegistering]);\n  const handleAutoRegistration = async () => {\n    if (!address || !referralCode) return;\n    console.log('üéØ Global auto-registration: Starting registration...');\n    setIsRegistering(true);\n    try {\n      const response = await backendApi.fetchJson('/api/referral/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          address,\n          referrer: referralCode,\n          telegramId: (user === null || user === void 0 ? void 0 : user.id) || null,\n          username: (user === null || user === void 0 ? void 0 : user.username) || (user === null || user === void 0 ? void 0 : user.first_name) || `Player_${address.slice(-4)}`\n        })\n      });\n      if (response.success) {\n        console.log('‚úÖ Global auto-registration: Success!');\n        alert(`üéØ Referral registered successfully! You: ${address.slice(0, 8)}... Referrer: ${referralCode.slice(0, 8)}...`);\n        setHasRegistered(true);\n      } else {\n        console.log('‚ùå Global auto-registration: Failed -', response.error);\n        alert(`‚ùå Referral registration failed: ${response.error}`);\n        setHasRegistered(true); // Mark as attempted to prevent retries\n      }\n    } catch (error) {\n      console.error('‚ùå Global auto-registration: Error -', error);\n      alert('‚ùå Referral registration error. Please try again.');\n      setHasRegistered(true); // Mark as attempted to prevent retries\n    } finally {\n      setIsRegistering(false);\n    }\n  };\n  return {\n    referralCode,\n    isRegistering,\n    hasRegistered,\n    handleAutoRegistration\n  };\n};\n_s(useReferralAutoRegistration, \"cEJXqaeW7axcfa1Qo7wzB14Zu4c=\", false, function () {\n  return [useTonConnect, useTelegramWebApp];\n});\nexport default useReferralAutoRegistration;","map":{"version":3,"names":["useEffect","useState","backendApi","useTonConnect","useTelegramWebApp","useReferralAutoRegistration","_s","address","isConnected","user","referralCode","setReferralCode","isRegistering","setIsRegistering","hasRegistered","setHasRegistered","console","log","slice","id","handleAutoRegistration","response","fetchJson","method","body","JSON","stringify","referrer","telegramId","username","first_name","success","alert","error"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useReferralAutoRegistration.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { backendApi } from '../services/backendApi';\r\nimport useTonConnect from './useTonConnect';\r\nimport useTelegramWebApp from './useTelegramWebApp';\r\n\r\nconst useReferralAutoRegistration = () => {\r\n  const { address, isConnected } = useTonConnect();\r\n  const { user } = useTelegramWebApp();\r\n  const [referralCode, setReferralCode] = useState('');\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n  const [hasRegistered, setHasRegistered] = useState(false);\r\n\r\n  // Check for referral code when user data loads\r\n  useEffect(() => {\r\n    if (user?.referralCode && !referralCode) {\r\n      console.log('üéØ Global referral detection: Found referral code:', user.referralCode.slice(0, 8) + '...');\r\n      setReferralCode(user.referralCode);\r\n    }\r\n  }, [user, referralCode]);\r\n\r\n  // Auto-register referral when all conditions are met\r\n  useEffect(() => {\r\n    if (referralCode && address && isConnected && !hasRegistered && !isRegistering) {\r\n      console.log('üéØ Global auto-registration: All conditions met');\r\n      console.log('  - referralCode:', referralCode.slice(0, 8) + '...');\r\n      console.log('  - address:', address.slice(0, 8) + '...');\r\n      console.log('  - user:', user?.id || 'no telegram data');\r\n      console.log('  - isConnected:', isConnected);\r\n      \r\n      // Check if it's a self-referral\r\n      if (referralCode === address) {\r\n        console.log('‚ùå Self-referral detected, skipping registration');\r\n        setHasRegistered(true);\r\n        return;\r\n      }\r\n\r\n      handleAutoRegistration();\r\n    }\r\n  }, [referralCode, address, user, isConnected, hasRegistered, isRegistering]);\r\n\r\n  const handleAutoRegistration = async () => {\r\n    if (!address || !referralCode) return;\r\n\r\n    console.log('üéØ Global auto-registration: Starting registration...');\r\n    setIsRegistering(true);\r\n\r\n    try {\r\n      const response = await backendApi.fetchJson('/api/referral/register', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          address,\r\n          referrer: referralCode,\r\n          telegramId: user?.id || null,\r\n          username: user?.username || user?.first_name || `Player_${address.slice(-4)}`\r\n        })\r\n      });\r\n\r\n      if (response.success) {\r\n        console.log('‚úÖ Global auto-registration: Success!');\r\n        alert(`üéØ Referral registered successfully! You: ${address.slice(0, 8)}... Referrer: ${referralCode.slice(0, 8)}...`);\r\n        setHasRegistered(true);\r\n      } else {\r\n        console.log('‚ùå Global auto-registration: Failed -', response.error);\r\n        alert(`‚ùå Referral registration failed: ${response.error}`);\r\n        setHasRegistered(true); // Mark as attempted to prevent retries\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Global auto-registration: Error -', error);\r\n      alert('‚ùå Referral registration error. Please try again.');\r\n      setHasRegistered(true); // Mark as attempted to prevent retries\r\n    } finally {\r\n      setIsRegistering(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    referralCode,\r\n    isRegistering,\r\n    hasRegistered,\r\n    handleAutoRegistration\r\n  };\r\n};\r\n\r\nexport default useReferralAutoRegistration;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,wBAAwB;AACnD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,iBAAiB,MAAM,qBAAqB;AAEnD,MAAMC,2BAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAM;IAAEC,OAAO;IAAEC;EAAY,CAAC,GAAGL,aAAa,CAAC,CAAC;EAChD,MAAM;IAAEM;EAAK,CAAC,GAAGL,iBAAiB,CAAC,CAAC;EACpC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACAD,SAAS,CAAC,MAAM;IACd,IAAIS,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEC,YAAY,IAAI,CAACA,YAAY,EAAE;MACvCM,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAER,IAAI,CAACC,YAAY,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;MACxGP,eAAe,CAACF,IAAI,CAACC,YAAY,CAAC;IACpC;EACF,CAAC,EAAE,CAACD,IAAI,EAAEC,YAAY,CAAC,CAAC;;EAExB;EACAV,SAAS,CAAC,MAAM;IACd,IAAIU,YAAY,IAAIH,OAAO,IAAIC,WAAW,IAAI,CAACM,aAAa,IAAI,CAACF,aAAa,EAAE;MAC9EI,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAC9DD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEP,YAAY,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;MAClEF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEV,OAAO,CAACW,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;MACxDF,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,CAAAR,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,EAAE,KAAI,kBAAkB,CAAC;MACxDH,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAET,WAAW,CAAC;;MAE5C;MACA,IAAIE,YAAY,KAAKH,OAAO,EAAE;QAC5BS,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;QAC9DF,gBAAgB,CAAC,IAAI,CAAC;QACtB;MACF;MAEAK,sBAAsB,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACV,YAAY,EAAEH,OAAO,EAAEE,IAAI,EAAED,WAAW,EAAEM,aAAa,EAAEF,aAAa,CAAC,CAAC;EAE5E,MAAMQ,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI,CAACb,OAAO,IAAI,CAACG,YAAY,EAAE;IAE/BM,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;IACpEJ,gBAAgB,CAAC,IAAI,CAAC;IAEtB,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,SAAS,CAAC,wBAAwB,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBnB,OAAO;UACPoB,QAAQ,EAAEjB,YAAY;UACtBkB,UAAU,EAAE,CAAAnB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,EAAE,KAAI,IAAI;UAC5BU,QAAQ,EAAE,CAAApB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEoB,QAAQ,MAAIpB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqB,UAAU,KAAI,UAAUvB,OAAO,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7E,CAAC;MACH,CAAC,CAAC;MAEF,IAAIG,QAAQ,CAACU,OAAO,EAAE;QACpBf,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QACnDe,KAAK,CAAC,6CAA6CzB,OAAO,CAACW,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,iBAAiBR,YAAY,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;QACrHH,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAC,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEI,QAAQ,CAACY,KAAK,CAAC;QACnED,KAAK,CAAC,mCAAmCX,QAAQ,CAACY,KAAK,EAAE,CAAC;QAC1DlB,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdjB,OAAO,CAACiB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3DD,KAAK,CAAC,kDAAkD,CAAC;MACzDjB,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B,CAAC,SAAS;MACRF,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC;EAED,OAAO;IACLH,YAAY;IACZE,aAAa;IACbE,aAAa;IACbM;EACF,CAAC;AACH,CAAC;AAACd,EAAA,CA5EID,2BAA2B;EAAA,QACEF,aAAa,EAC7BC,iBAAiB;AAAA;AA4EpC,eAAeC,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}