{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeMessageForwardFees = exports.computeExternalMessageFees = exports.computeGasPrices = exports.computeFwdFees = exports.computeStorageFees = void 0;\nconst core_1 = require(\"@ton/core\");\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L425\n//\nfunction computeStorageFees(data) {\n  const {\n    lastPaid,\n    now,\n    storagePrices,\n    storageStat,\n    special,\n    masterchain\n  } = data;\n  if (now <= lastPaid || storagePrices.length === 0 || now < storagePrices[0].utime_since || special) {\n    return BigInt(0);\n  }\n  let upto = Math.max(lastPaid, storagePrices[0].utime_since);\n  let total = BigInt(0);\n  for (let i = 0; i < storagePrices.length && upto < now; i++) {\n    let valid_until = i < storagePrices.length - 1 ? Math.min(now, storagePrices[i + 1].utime_since) : now;\n    let payment = BigInt(0);\n    if (upto < valid_until) {\n      let delta = valid_until - upto;\n      payment += BigInt(storageStat.cells) * (masterchain ? storagePrices[i].mc_cell_price_ps : storagePrices[i].cell_price_ps);\n      payment += BigInt(storageStat.bits) * (masterchain ? storagePrices[i].mc_bit_price_ps : storagePrices[i].bit_price_ps);\n      payment = payment * BigInt(delta);\n    }\n    upto = valid_until;\n    total += payment;\n  }\n  return shr16ceil(total);\n}\nexports.computeStorageFees = computeStorageFees;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L1218\n//\nfunction computeFwdFees(msgPrices, cells, bits) {\n  return msgPrices.lumpPrice + shr16ceil(msgPrices.bitPrice * bits + msgPrices.cellPrice * cells);\n}\nexports.computeFwdFees = computeFwdFees;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L761\n//\nfunction computeGasPrices(gasUsed, prices) {\n  if (gasUsed <= prices.flatLimit) {\n    return prices.flatPrice;\n  } else {\n    //  td::rshift(gas_price256 * (gas_used - cfg.flat_gas_limit), 16, 1) + cfg.flat_gas_price\n    return prices.flatPrice + (prices.price * (gasUsed - prices.flatLimit) >> 16n);\n  }\n}\nexports.computeGasPrices = computeGasPrices;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L530\n//\nfunction computeExternalMessageFees(msgPrices, cell) {\n  // Collect stats\n  let storageStats = collectCellStats(cell);\n  storageStats.bits -= cell.bits.length;\n  storageStats.cells -= 1;\n  return computeFwdFees(msgPrices, BigInt(storageStats.cells), BigInt(storageStats.bits));\n}\nexports.computeExternalMessageFees = computeExternalMessageFees;\nfunction computeMessageForwardFees(msgPrices, cell) {\n  let msg = (0, core_1.loadMessageRelaxed)(cell.beginParse());\n  let storageStats = {\n    bits: 0,\n    cells: 0\n  };\n  // Init\n  if (msg.init) {\n    const rawBuilder = new core_1.Cell().asBuilder();\n    (0, core_1.storeStateInit)(msg.init)(rawBuilder);\n    const raw = rawBuilder.endCell();\n    let c = collectCellStats(raw);\n    c.bits -= raw.bits.length;\n    c.cells -= 1;\n    storageStats.bits += c.bits;\n    storageStats.cells += c.cells;\n  }\n  // Body\n  let bc = collectCellStats(msg.body);\n  bc.bits -= msg.body.bits.length;\n  bc.cells -= 1;\n  storageStats.bits += bc.bits;\n  storageStats.cells += bc.cells;\n  // NOTE: Extra currencies are ignored for now\n  let fees = computeFwdFees(msgPrices, BigInt(storageStats.cells), BigInt(storageStats.bits));\n  let res = fees * BigInt(msgPrices.firstFrac) >> 16n;\n  let remaining = fees - res;\n  return {\n    fees: res,\n    remaining\n  };\n}\nexports.computeMessageForwardFees = computeMessageForwardFees;\nfunction collectCellStats(cell) {\n  let bits = cell.bits.length;\n  let cells = 1;\n  for (let ref of cell.refs) {\n    let r = collectCellStats(ref);\n    cells += r.cells;\n    bits += r.bits;\n  }\n  return {\n    bits,\n    cells\n  };\n}\nfunction shr16ceil(src) {\n  let rem = src % 65536n;\n  let res = src >> 16n;\n  if (rem !== 0n) {\n    res += 1n;\n  }\n  return res;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","computeMessageForwardFees","computeExternalMessageFees","computeGasPrices","computeFwdFees","computeStorageFees","core_1","require","data","lastPaid","now","storagePrices","storageStat","special","masterchain","length","utime_since","BigInt","upto","Math","max","total","i","valid_until","min","payment","delta","cells","mc_cell_price_ps","cell_price_ps","bits","mc_bit_price_ps","bit_price_ps","shr16ceil","msgPrices","lumpPrice","bitPrice","cellPrice","gasUsed","prices","flatLimit","flatPrice","price","cell","storageStats","collectCellStats","msg","loadMessageRelaxed","beginParse","init","rawBuilder","Cell","asBuilder","storeStateInit","raw","endCell","c","bc","body","fees","res","firstFrac","remaining","ref","refs","r","src","rem"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/ton/dist/utils/fees.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeMessageForwardFees = exports.computeExternalMessageFees = exports.computeGasPrices = exports.computeFwdFees = exports.computeStorageFees = void 0;\nconst core_1 = require(\"@ton/core\");\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L425\n//\nfunction computeStorageFees(data) {\n    const { lastPaid, now, storagePrices, storageStat, special, masterchain } = data;\n    if (now <= lastPaid || storagePrices.length === 0 || now < storagePrices[0].utime_since || special) {\n        return BigInt(0);\n    }\n    let upto = Math.max(lastPaid, storagePrices[0].utime_since);\n    let total = BigInt(0);\n    for (let i = 0; i < storagePrices.length && upto < now; i++) {\n        let valid_until = (i < storagePrices.length - 1 ? Math.min(now, storagePrices[i + 1].utime_since) : now);\n        let payment = BigInt(0);\n        if (upto < valid_until) {\n            let delta = valid_until - upto;\n            payment += (BigInt(storageStat.cells) * (masterchain ? storagePrices[i].mc_cell_price_ps : storagePrices[i].cell_price_ps));\n            payment += (BigInt(storageStat.bits) * (masterchain ? storagePrices[i].mc_bit_price_ps : storagePrices[i].bit_price_ps));\n            payment = payment * BigInt(delta);\n        }\n        upto = valid_until;\n        total += payment;\n    }\n    return shr16ceil(total);\n}\nexports.computeStorageFees = computeStorageFees;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L1218\n//\nfunction computeFwdFees(msgPrices, cells, bits) {\n    return msgPrices.lumpPrice + (shr16ceil(msgPrices.bitPrice * bits + (msgPrices.cellPrice * cells)));\n}\nexports.computeFwdFees = computeFwdFees;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L761\n//\nfunction computeGasPrices(gasUsed, prices) {\n    if (gasUsed <= prices.flatLimit) {\n        return prices.flatPrice;\n    }\n    else {\n        //  td::rshift(gas_price256 * (gas_used - cfg.flat_gas_limit), 16, 1) + cfg.flat_gas_price\n        return prices.flatPrice + ((prices.price * (gasUsed - prices.flatLimit)) >> 16n);\n    }\n}\nexports.computeGasPrices = computeGasPrices;\n//\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/transaction.cpp#L530\n//\nfunction computeExternalMessageFees(msgPrices, cell) {\n    // Collect stats\n    let storageStats = collectCellStats(cell);\n    storageStats.bits -= cell.bits.length;\n    storageStats.cells -= 1;\n    return computeFwdFees(msgPrices, BigInt(storageStats.cells), BigInt(storageStats.bits));\n}\nexports.computeExternalMessageFees = computeExternalMessageFees;\nfunction computeMessageForwardFees(msgPrices, cell) {\n    let msg = (0, core_1.loadMessageRelaxed)(cell.beginParse());\n    let storageStats = { bits: 0, cells: 0 };\n    // Init\n    if (msg.init) {\n        const rawBuilder = new core_1.Cell().asBuilder();\n        (0, core_1.storeStateInit)(msg.init)(rawBuilder);\n        const raw = rawBuilder.endCell();\n        let c = collectCellStats(raw);\n        c.bits -= raw.bits.length;\n        c.cells -= 1;\n        storageStats.bits += c.bits;\n        storageStats.cells += c.cells;\n    }\n    // Body\n    let bc = collectCellStats(msg.body);\n    bc.bits -= msg.body.bits.length;\n    bc.cells -= 1;\n    storageStats.bits += bc.bits;\n    storageStats.cells += bc.cells;\n    // NOTE: Extra currencies are ignored for now\n    let fees = computeFwdFees(msgPrices, BigInt(storageStats.cells), BigInt(storageStats.bits));\n    let res = (fees * BigInt(msgPrices.firstFrac)) >> 16n;\n    let remaining = fees - res;\n    return { fees: res, remaining };\n}\nexports.computeMessageForwardFees = computeMessageForwardFees;\nfunction collectCellStats(cell) {\n    let bits = cell.bits.length;\n    let cells = 1;\n    for (let ref of cell.refs) {\n        let r = collectCellStats(ref);\n        cells += r.cells;\n        bits += r.bits;\n    }\n    return { bits, cells };\n}\nfunction shr16ceil(src) {\n    let rem = src % 65536n;\n    let res = src >> 16n;\n    if (rem !== 0n) {\n        res += 1n;\n    }\n    return res;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}