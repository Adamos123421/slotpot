{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storeMessageRelaxed = exports.loadMessageRelaxed = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst CommonMessageInfoRelaxed_1 = require(\"./CommonMessageInfoRelaxed\");\nconst StateInit_1 = require(\"./StateInit\");\nfunction loadMessageRelaxed(slice) {\n  const info = (0, CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed)(slice);\n  let init = null;\n  if (slice.loadBit()) {\n    if (!slice.loadBit()) {\n      init = (0, StateInit_1.loadStateInit)(slice);\n    } else {\n      init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());\n    }\n  }\n  const body = slice.loadBit() ? slice.loadRef() : slice.asCell();\n  return {\n    info,\n    init,\n    body\n  };\n}\nexports.loadMessageRelaxed = loadMessageRelaxed;\nfunction storeMessageRelaxed(message, opts) {\n  return builder => {\n    // Store CommonMsgInfo\n    builder.store((0, CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed)(message.info));\n    // Store init\n    if (message.init) {\n      builder.storeBit(true);\n      let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));\n      // Check if ref is needed\n      let needRef = false;\n      if (opts && opts.forceRef) {\n        needRef = true;\n      } else {\n        if (builder.availableBits - 2 /* At least on byte for ref flag */ >= initCell.bits) {\n          needRef = false;\n        } else {\n          needRef = true;\n        }\n      }\n      // Store ref\n      if (needRef) {\n        builder.storeBit(true);\n        builder.storeRef(initCell);\n      } else {\n        builder.storeBit(false);\n        builder.storeBuilder(initCell);\n      }\n    } else {\n      builder.storeBit(false);\n    }\n    // Store body\n    let needRef = false;\n    if (opts && opts.forceRef) {\n      needRef = true;\n    } else {\n      /*\n       1. If at least one bit for ref flag\n       2. If enough space for refs\n       3. If not exotic\n      */\n      if (builder.availableBits - 1 >= message.body.bits.length && builder.refs + message.body.refs.length <= 4 && !message.body.isExotic) {\n        needRef = false;\n      } else {\n        needRef = true;\n      }\n    }\n    if (needRef) {\n      builder.storeBit(true);\n      builder.storeRef(message.body);\n    } else {\n      builder.storeBit(false);\n      builder.storeBuilder(message.body.asBuilder());\n    }\n  };\n}\nexports.storeMessageRelaxed = storeMessageRelaxed;","map":{"version":3,"names":["Object","defineProperty","exports","value","storeMessageRelaxed","loadMessageRelaxed","Builder_1","require","CommonMessageInfoRelaxed_1","StateInit_1","slice","info","loadCommonMessageInfoRelaxed","init","loadBit","loadStateInit","loadRef","beginParse","body","asCell","message","opts","builder","store","storeCommonMessageInfoRelaxed","storeBit","initCell","beginCell","storeStateInit","needRef","forceRef","availableBits","bits","storeRef","storeBuilder","length","refs","isExotic","asBuilder"],"sources":["C:/Users/adams/Downloads/GLL/slotpot/node_modules/@ton/core/dist/types/MessageRelaxed.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeMessageRelaxed = exports.loadMessageRelaxed = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst CommonMessageInfoRelaxed_1 = require(\"./CommonMessageInfoRelaxed\");\nconst StateInit_1 = require(\"./StateInit\");\nfunction loadMessageRelaxed(slice) {\n    const info = (0, CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed)(slice);\n    let init = null;\n    if (slice.loadBit()) {\n        if (!slice.loadBit()) {\n            init = (0, StateInit_1.loadStateInit)(slice);\n        }\n        else {\n            init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());\n        }\n    }\n    const body = slice.loadBit() ? slice.loadRef() : slice.asCell();\n    return {\n        info,\n        init,\n        body\n    };\n}\nexports.loadMessageRelaxed = loadMessageRelaxed;\nfunction storeMessageRelaxed(message, opts) {\n    return (builder) => {\n        // Store CommonMsgInfo\n        builder.store((0, CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed)(message.info));\n        // Store init\n        if (message.init) {\n            builder.storeBit(true);\n            let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));\n            // Check if ref is needed\n            let needRef = false;\n            if (opts && opts.forceRef) {\n                needRef = true;\n            }\n            else {\n                if (builder.availableBits - 2 /* At least on byte for ref flag */ >= initCell.bits) {\n                    needRef = false;\n                }\n                else {\n                    needRef = true;\n                }\n            }\n            // Store ref\n            if (needRef) {\n                builder.storeBit(true);\n                builder.storeRef(initCell);\n            }\n            else {\n                builder.storeBit(false);\n                builder.storeBuilder(initCell);\n            }\n        }\n        else {\n            builder.storeBit(false);\n        }\n        // Store body\n        let needRef = false;\n        if (opts && opts.forceRef) {\n            needRef = true;\n        }\n        else {\n            /*\n             1. If at least one bit for ref flag\n             2. If enough space for refs\n             3. If not exotic\n            */\n            if (builder.availableBits - 1 >= message.body.bits.length &&\n                builder.refs + message.body.refs.length <= 4 &&\n                !message.body.isExotic) {\n                needRef = false;\n            }\n            else {\n                needRef = true;\n            }\n        }\n        if (needRef) {\n            builder.storeBit(true);\n            builder.storeRef(message.body);\n        }\n        else {\n            builder.storeBit(false);\n            builder.storeBuilder(message.body.asBuilder());\n        }\n    };\n}\nexports.storeMessageRelaxed = storeMessageRelaxed;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}