{"ast":null,"code":"import _objectSpread from\"C:/Users/adams/OneDrive/Desktop/Work/slotpot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useRef}from'react';import{jackpotContract}from'../services/jackpotContract';import{backendApi}from'../services/backendApi';import useTonConnect from'./useTonConnect';import useTelegramWebApp from'./useTelegramWebApp';import socketService from'../services/socketService';// API polling removed - all data now comes via socket broadcasts\nconst useJackpotContract=()=>{var _contractState$timer2;// Debug: Log when hook initializes (only on real initialization)\nconst initRef=useRef(false);if(!initRef.current){console.log('🔧 useJackpotContract hook initializing...');initRef.current=true;}// Contract state\nconst[contractState,setContractState]=useState({totalJackpot:0,isActive:false,betCount:0,lastWinner:null,lastWinnerAddress:null,lastPrizeAmount:0,contractBalance:0,timestamp:0,error:null,// Winner detection\nroundJustEnded:false,hasWinner:false,winnerAnnouncement:null,// Timer information (now integrated)\ntimer:{isActive:false,timeRemaining:0,timeElapsed:0,roundNumber:0},roundDuration:300,bettors:[]});// Current round bettors\nconst[currentBettors,setCurrentBettors]=useState([]);// Admin info now comes via socket in contract state\n// User-specific state\nconst[userStats,setUserStats]=useState({betAmount:0,winningProbability:0,winChancePercentage:'0.00',loading:false,error:null});// Loading states\nconst[isPlacingBet,setIsPlacingBet]=useState(false);const[hasInitialLoad,setHasInitialLoad]=useState(false);// Essential refs for hook functionality\nconst prevIsActiveRef=useRef(contractState.isActive);const socketInitializedRef=useRef(false);// Get wallet connection status\nconst{isConnected,address,sendTransaction,isLoading:walletLoading,isRestoringConnection}=useTonConnect();// Get user info for bet notifications\nconst{user}=useTelegramWebApp();// REMOVED: All bettor and contract data now comes via socket broadcasts\n// REMOVED: All contract state now comes via socket broadcasts\n// REMOVED: All address tracking and API calls - now handled via socket broadcasts\n// User stats refresh - handled in consolidated polling system\n// Removed separate useEffect to prevent duplicate API calls\n// This fixes the issue where APIs were being called 4 times simultaneously\n// Track round changes with ref to prevent re-renders\nuseEffect(()=>{var _contractState$timer;const prevIsActive=prevIsActiveRef.current;const currentIsActive=contractState.isActive;// Detect new round start (inactive -> active)\n// But only clear bettors if timer > 0 (actual new round, not waiting for winner)\nif(!prevIsActive&&currentIsActive&&((_contractState$timer=contractState.timer)===null||_contractState$timer===void 0?void 0:_contractState$timer.timeRemaining)>0){console.log('🔄 New round detected, clearing bettors list');setCurrentBettors([]);// Clear bettors list for new round\n}// Update ref for next comparison\nprevIsActiveRef.current=currentIsActive;},[contractState.isActive,(_contractState$timer2=contractState.timer)===null||_contractState$timer2===void 0?void 0:_contractState$timer2.timeRemaining]);// REMOVED: All API polling - now handled entirely via socket broadcasts\n// Socket handling for contract state updates (prevent re-initialization)\nuseEffect(()=>{// Prevent duplicate initialization\nif(socketInitializedRef.current){console.log('🔧 Hook: Socket already initialized, skipping');return;}socketInitializedRef.current=true;console.log('🔧 Hook: Setting up socket listeners (ONCE ONLY)');// Listen for full game updates to sync contract state\nconst handleFullGameUpdate=gameData=>{console.log('🔧 Hook: Received full game update:',gameData);setContractState(prevState=>{var _gameData$timer$isAct,_gameData$timer,_gameData$timer$timeR,_gameData$timer2,_gameData$timer$round,_gameData$timer3,_gameData$currentRoun;return _objectSpread(_objectSpread(_objectSpread({},prevState),gameData),{},{// Ensure timer data is preserved/updated\ntimer:_objectSpread(_objectSpread(_objectSpread({},prevState.timer),gameData.timer),{},{// Fallback to direct properties if timer object doesn't exist\nisActive:(_gameData$timer$isAct=(_gameData$timer=gameData.timer)===null||_gameData$timer===void 0?void 0:_gameData$timer.isActive)!==null&&_gameData$timer$isAct!==void 0?_gameData$timer$isAct:gameData.isActive,timeRemaining:(_gameData$timer$timeR=(_gameData$timer2=gameData.timer)===null||_gameData$timer2===void 0?void 0:_gameData$timer2.timeRemaining)!==null&&_gameData$timer$timeR!==void 0?_gameData$timer$timeR:gameData.timeRemaining,roundNumber:(_gameData$timer$round=(_gameData$timer3=gameData.timer)===null||_gameData$timer3===void 0?void 0:_gameData$timer3.roundNumber)!==null&&_gameData$timer$round!==void 0?_gameData$timer$round:(_gameData$currentRoun=gameData.currentRound)===null||_gameData$currentRoun===void 0?void 0:_gameData$currentRoun.roundNumber})});});// Update bettors if included in game data\nif(gameData.bettors&&Array.isArray(gameData.bettors)){console.log('🔧 Hook: Updating bettors from game data:',gameData.bettors.length,'bettors');setCurrentBettors(gameData.bettors);}};const handleContractUpdate=contractData=>{console.log('🔧 Hook: Received contract update:',contractData);setContractState(prevState=>_objectSpread(_objectSpread({},prevState),contractData));};const handleBettorsUpdate=bettorsData=>{console.log('🔧 Hook: Received bettors update:',bettorsData);if(bettorsData.bettors){setCurrentBettors(bettorsData.bettors);}};// Set up listeners (removed gameState to avoid duplicates with App.js)\nsocketService.on('fullGameUpdate',handleFullGameUpdate);socketService.on('contractStateUpdate',handleContractUpdate);socketService.on('bettorsUpdate',handleBettorsUpdate);return()=>{console.log('🔧 Hook: Cleaning up socket listeners');socketService.off('fullGameUpdate',handleFullGameUpdate);socketService.off('contractStateUpdate',handleContractUpdate);socketService.off('bettorsUpdate',handleBettorsUpdate);socketInitializedRef.current=false;};},[]);// Empty dependency array - only run once\n// Place a bet (sends real transaction and notifies backend)\nconst placeBet=async betAmount=>{console.log(\"\\uD83C\\uDFB0 placeBet() called with amount: \".concat(betAmount,\" TON\"));if(!isConnected||!address){throw new Error('Wallet not connected');}if(!contractState.isActive){throw new Error('Jackpot is not active');}if(betAmount<0.1){throw new Error('Minimum bet is 0.1 TON');}if(betAmount>10){throw new Error('Maximum bet is 10 TON');}try{setIsPlacingBet(true);console.log(\"\\uD83C\\uDFB0 Placing bet: \".concat(betAmount,\" TON from \").concat(address));console.log(\"\\uD83D\\uDCCB Contract state: active=\".concat(contractState.isActive,\", jackpot=\").concat(contractState.totalJackpot));// Build transaction for the smart contract using the contract service\nconsole.log(\"\\uD83D\\uDD27 Building transaction with opcode 0x03...\");const transaction=jackpotContract.buildBetTransaction(betAmount,\"EQDhuMbM_cT3dXuJulXmlkA12YF8k5VdpPc1UxkuEqLpCo9K\");console.log(\"\\uD83D\\uDCE4 Sending transaction to contract:\",{contractAddress:transaction.messages[0].address,amount:transaction.messages[0].amount,payloadLength:transaction.messages[0].payload.length});// Send transaction via TON Connect\nconst result=await sendTransaction(transaction);console.log('✅ Bet transaction sent to contract:',result);// Show transaction notification\nif(typeof window!=='undefined'&&window.showTransactionNotification){window.showTransactionNotification(\"\\uD83D\\uDCB0 Transaction sent! Your \".concat(betAmount,\" TON bet will take effect shortly.\"),'success');}// Notify backend about the bet with username\ntry{const username=(user===null||user===void 0?void 0:user.displayName)||(user===null||user===void 0?void 0:user.shortName)||(user===null||user===void 0?void 0:user.username);await backendApi.notifyBetPlacement({amount:betAmount,address:address,username:username});console.log('✅ Backend notified about bet placement with username:',username);}catch(notifyError){console.warn('⚠️ Failed to notify backend about bet:',notifyError);// Don't fail the whole transaction for notification errors\n}// Also send chat notification via socket\ntry{// Emit socket event for chat notification\nsocketService.emit('game:bet',{amount:betAmount,address:address,username:(user===null||user===void 0?void 0:user.displayName)||(user===null||user===void 0?void 0:user.shortName)||(user===null||user===void 0?void 0:user.username)});console.log('✅ Chat bet notification sent via socket');}catch(socketError){console.warn('⚠️ Failed to send chat bet notification:',socketError);}// Backend will automatically detect the bet through contract polling\nconsole.log('✅ Bet sent to contract - backend will automatically detect via polling');// Simple success response - no bet verification polling\nconsole.log('✅ Bet placed successfully - relying on normal polling for updates');return{success:true,txHash:result.boc||'unknown',amount:betAmount,address:address};}catch(error){console.error('❌ Bet placement failed:',error);// Show error notification\nif(typeof window!=='undefined'&&window.showTransactionNotification){window.showTransactionNotification(\"\\u274C Bet failed: \".concat(error.message),'error');}throw error;}finally{setIsPlacingBet(false);}};// Helper function to format address\nconst formatAddress=addr=>{if(!addr)return null;return\"\".concat(addr.slice(0,6),\"...\").concat(addr.slice(-6));};// Helper function to format TON amounts\nconst formatTonAmount=amount=>{if(!amount)return'0.000';return parseFloat(amount).toFixed(3);};return{// Contract state\ncontractState:_objectSpread(_objectSpread({},contractState),{},{formattedJackpot:formatTonAmount(contractState.totalJackpot),formattedLastPrize:formatTonAmount(contractState.lastPrizeAmount)}),// Admin info (now included in contract state)\n// User state\nuserStats:_objectSpread(_objectSpread({},userStats),{},{formattedBetAmount:formatTonAmount(userStats.betAmount)}),// Loading states\nisPlacingBet,isRestoringConnection,walletLoading,// Actions\nplaceBet,// Utility\nisConnected,address:address?formatAddress(address):null,fullAddress:address,// Backend admin controls (for emergency use only)\nemergencyControls:{forceStartRound:adminKey=>backendApi.forceStartRound(adminKey),forceEndRound:adminKey=>backendApi.forceEndRound(adminKey),updateSettings:settings=>backendApi.updateAdminSettings(settings)},// Current bettors\ncurrentBettors};};export default useJackpotContract;","map":{"version":3,"names":["useState","useEffect","useRef","jackpotContract","backendApi","useTonConnect","useTelegramWebApp","socketService","useJackpotContract","_contractState$timer2","initRef","current","console","log","contractState","setContractState","totalJackpot","isActive","betCount","lastWinner","lastWinnerAddress","lastPrizeAmount","contractBalance","timestamp","error","roundJustEnded","hasWinner","winnerAnnouncement","timer","timeRemaining","timeElapsed","roundNumber","roundDuration","bettors","currentBettors","setCurrentBettors","userStats","setUserStats","betAmount","winningProbability","winChancePercentage","loading","isPlacingBet","setIsPlacingBet","hasInitialLoad","setHasInitialLoad","prevIsActiveRef","socketInitializedRef","isConnected","address","sendTransaction","isLoading","walletLoading","isRestoringConnection","user","_contractState$timer","prevIsActive","currentIsActive","handleFullGameUpdate","gameData","prevState","_gameData$timer$isAct","_gameData$timer","_gameData$timer$timeR","_gameData$timer2","_gameData$timer$round","_gameData$timer3","_gameData$currentRoun","_objectSpread","currentRound","Array","isArray","length","handleContractUpdate","contractData","handleBettorsUpdate","bettorsData","on","off","placeBet","concat","Error","transaction","buildBetTransaction","contractAddress","messages","amount","payloadLength","payload","result","window","showTransactionNotification","username","displayName","shortName","notifyBetPlacement","notifyError","warn","emit","socketError","success","txHash","boc","message","formatAddress","addr","slice","formatTonAmount","parseFloat","toFixed","formattedJackpot","formattedLastPrize","formattedBetAmount","fullAddress","emergencyControls","forceStartRound","adminKey","forceEndRound","updateSettings","settings","updateAdminSettings"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/hooks/useJackpotContract.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { jackpotContract } from '../services/jackpotContract';\nimport { backendApi } from '../services/backendApi';\nimport useTonConnect from './useTonConnect';\nimport useTelegramWebApp from './useTelegramWebApp';\nimport socketService from '../services/socketService';\n\n// API polling removed - all data now comes via socket broadcasts\n\nconst useJackpotContract = () => {\n  // Debug: Log when hook initializes (only on real initialization)\n  const initRef = useRef(false);\n  if (!initRef.current) {\n    console.log('🔧 useJackpotContract hook initializing...');\n    initRef.current = true;\n  }\n  \n  // Contract state\n  const [contractState, setContractState] = useState({\n    totalJackpot: 0,\n    isActive: false,\n    betCount: 0,\n    lastWinner: null,\n    lastWinnerAddress: null,\n    lastPrizeAmount: 0,\n    contractBalance: 0,\n    timestamp: 0,\n    error: null,\n    // Winner detection\n    roundJustEnded: false,\n    hasWinner: false,\n    winnerAnnouncement: null,\n    // Timer information (now integrated)\n    timer: {\n      isActive: false,\n      timeRemaining: 0,\n      timeElapsed: 0,\n      roundNumber: 0\n    },\n    roundDuration: 300,\n    bettors: []\n  });\n\n  // Current round bettors\n  const [currentBettors, setCurrentBettors] = useState([]);\n\n  // Admin info now comes via socket in contract state\n\n  // User-specific state\n  const [userStats, setUserStats] = useState({\n    betAmount: 0,\n    winningProbability: 0,\n    winChancePercentage: '0.00',\n    loading: false,\n    error: null\n  });\n\n  // Loading states\n  const [isPlacingBet, setIsPlacingBet] = useState(false);\n  const [hasInitialLoad, setHasInitialLoad] = useState(false);\n\n  // Essential refs for hook functionality\n  const prevIsActiveRef = useRef(contractState.isActive);\n  const socketInitializedRef = useRef(false);\n\n  // Get wallet connection status\n  const { \n    isConnected, \n    address, \n    sendTransaction, \n    isLoading: walletLoading,\n    isRestoringConnection \n  } = useTonConnect();\n\n  // Get user info for bet notifications\n  const { user } = useTelegramWebApp();\n\n  // REMOVED: All bettor and contract data now comes via socket broadcasts\n\n  // REMOVED: All contract state now comes via socket broadcasts\n\n  // REMOVED: All address tracking and API calls - now handled via socket broadcasts\n\n  // User stats refresh - handled in consolidated polling system\n  // Removed separate useEffect to prevent duplicate API calls\n  // This fixes the issue where APIs were being called 4 times simultaneously\n\n  // Track round changes with ref to prevent re-renders\n  useEffect(() => {\n    const prevIsActive = prevIsActiveRef.current;\n    const currentIsActive = contractState.isActive;\n    \n    // Detect new round start (inactive -> active)\n    // But only clear bettors if timer > 0 (actual new round, not waiting for winner)\n    if (!prevIsActive && currentIsActive && contractState.timer?.timeRemaining > 0) {\n      console.log('🔄 New round detected, clearing bettors list');\n      setCurrentBettors([]); // Clear bettors list for new round\n    }\n    \n    // Update ref for next comparison\n    prevIsActiveRef.current = currentIsActive;\n  }, [contractState.isActive, contractState.timer?.timeRemaining]);\n\n  // REMOVED: All API polling - now handled entirely via socket broadcasts\n\n  // Socket handling for contract state updates (prevent re-initialization)\n  useEffect(() => {\n    // Prevent duplicate initialization\n    if (socketInitializedRef.current) {\n      console.log('🔧 Hook: Socket already initialized, skipping');\n      return;\n    }\n    \n    socketInitializedRef.current = true;\n    console.log('🔧 Hook: Setting up socket listeners (ONCE ONLY)');\n    \n    // Listen for full game updates to sync contract state\n    const handleFullGameUpdate = (gameData) => {\n      console.log('🔧 Hook: Received full game update:', gameData);\n      setContractState(prevState => ({\n        ...prevState,\n        ...gameData,\n        // Ensure timer data is preserved/updated\n        timer: {\n          ...prevState.timer,\n          ...gameData.timer,\n          // Fallback to direct properties if timer object doesn't exist\n          isActive: gameData.timer?.isActive ?? gameData.isActive,\n          timeRemaining: gameData.timer?.timeRemaining ?? gameData.timeRemaining,\n          roundNumber: gameData.timer?.roundNumber ?? gameData.currentRound?.roundNumber\n        }\n      }));\n      \n      // Update bettors if included in game data\n      if (gameData.bettors && Array.isArray(gameData.bettors)) {\n        console.log('🔧 Hook: Updating bettors from game data:', gameData.bettors.length, 'bettors');\n        setCurrentBettors(gameData.bettors);\n      }\n    };\n\n    const handleContractUpdate = (contractData) => {\n      console.log('🔧 Hook: Received contract update:', contractData);\n      setContractState(prevState => ({\n        ...prevState,\n        ...contractData\n      }));\n    };\n\n    const handleBettorsUpdate = (bettorsData) => {\n      console.log('🔧 Hook: Received bettors update:', bettorsData);\n      if (bettorsData.bettors) {\n        setCurrentBettors(bettorsData.bettors);\n      }\n    };\n\n    // Set up listeners (removed gameState to avoid duplicates with App.js)\n    socketService.on('fullGameUpdate', handleFullGameUpdate);\n    socketService.on('contractStateUpdate', handleContractUpdate);\n    socketService.on('bettorsUpdate', handleBettorsUpdate);\n\n    return () => {\n      console.log('🔧 Hook: Cleaning up socket listeners');\n      socketService.off('fullGameUpdate', handleFullGameUpdate);\n      socketService.off('contractStateUpdate', handleContractUpdate);\n      socketService.off('bettorsUpdate', handleBettorsUpdate);\n      socketInitializedRef.current = false;\n    };\n  }, []); // Empty dependency array - only run once\n\n  // Place a bet (sends real transaction and notifies backend)\n  const placeBet = async (betAmount) => {\n    console.log(`🎰 placeBet() called with amount: ${betAmount} TON`);\n    \n    if (!isConnected || !address) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (!contractState.isActive) {\n      throw new Error('Jackpot is not active');\n    }\n\n    if (betAmount < 0.1) {\n      throw new Error('Minimum bet is 0.1 TON');\n    }\n\n    if (betAmount > 10) {\n      throw new Error('Maximum bet is 10 TON');\n    }\n\n    try {\n      setIsPlacingBet(true);\n      console.log(`🎰 Placing bet: ${betAmount} TON from ${address}`);\n      console.log(`📋 Contract state: active=${contractState.isActive}, jackpot=${contractState.totalJackpot}`);\n\n      // Build transaction for the smart contract using the contract service\n      console.log(`🔧 Building transaction with opcode 0x03...`);\n      const transaction = jackpotContract.buildBetTransaction(betAmount, \"EQDhuMbM_cT3dXuJulXmlkA12YF8k5VdpPc1UxkuEqLpCo9K\");\n      \n      console.log(`📤 Sending transaction to contract:`, {\n        contractAddress: transaction.messages[0].address,\n        amount: transaction.messages[0].amount,\n        payloadLength: transaction.messages[0].payload.length\n      });\n      \n      // Send transaction via TON Connect\n      const result = await sendTransaction(transaction);\n      \n      console.log('✅ Bet transaction sent to contract:', result);\n\n      // Show transaction notification\n      if (typeof window !== 'undefined' && window.showTransactionNotification) {\n        window.showTransactionNotification(`💰 Transaction sent! Your ${betAmount} TON bet will take effect shortly.`, 'success');\n      }\n\n      // Notify backend about the bet with username\n      try {\n        const username = user?.displayName || user?.shortName || user?.username;\n        await backendApi.notifyBetPlacement({\n          amount: betAmount,\n          address: address,\n          username: username\n        });\n        console.log('✅ Backend notified about bet placement with username:', username);\n      } catch (notifyError) {\n        console.warn('⚠️ Failed to notify backend about bet:', notifyError);\n        // Don't fail the whole transaction for notification errors\n      }\n\n      // Also send chat notification via socket\n      try {\n        // Emit socket event for chat notification\n        socketService.emit('game:bet', { \n          amount: betAmount,\n          address: address,\n          username: user?.displayName || user?.shortName || user?.username\n        });\n        console.log('✅ Chat bet notification sent via socket');\n      } catch (socketError) {\n        console.warn('⚠️ Failed to send chat bet notification:', socketError);\n      }\n\n      // Backend will automatically detect the bet through contract polling\n      console.log('✅ Bet sent to contract - backend will automatically detect via polling');\n\n      // Simple success response - no bet verification polling\n      console.log('✅ Bet placed successfully - relying on normal polling for updates');\n\n      return {\n        success: true,\n        txHash: result.boc || 'unknown',\n        amount: betAmount,\n        address: address\n      };\n    } catch (error) {\n      console.error('❌ Bet placement failed:', error);\n      \n      // Show error notification\n      if (typeof window !== 'undefined' && window.showTransactionNotification) {\n        window.showTransactionNotification(`❌ Bet failed: ${error.message}`, 'error');\n      }\n      \n      throw error;\n    } finally {\n      setIsPlacingBet(false);\n    }\n  };\n\n  // Helper function to format address\n  const formatAddress = (addr) => {\n    if (!addr) return null;\n    return `${addr.slice(0, 6)}...${addr.slice(-6)}`;\n  };\n\n  // Helper function to format TON amounts\n  const formatTonAmount = (amount) => {\n    if (!amount) return '0.000';\n    return parseFloat(amount).toFixed(3);\n  };\n\n  return {\n    // Contract state\n    contractState: {\n      ...contractState,\n      formattedJackpot: formatTonAmount(contractState.totalJackpot),\n      formattedLastPrize: formatTonAmount(contractState.lastPrizeAmount)\n    },\n    \n    // Admin info (now included in contract state)\n    \n    // User state\n    userStats: {\n      ...userStats,\n      formattedBetAmount: formatTonAmount(userStats.betAmount)\n    },\n    \n    // Loading states\n    isPlacingBet,\n    isRestoringConnection,\n    walletLoading,\n    \n    // Actions\n    placeBet,\n    \n    // Utility\n    isConnected,\n    address: address ? formatAddress(address) : null,\n    fullAddress: address,\n    \n    // Backend admin controls (for emergency use only)\n    emergencyControls: {\n      forceStartRound: (adminKey) => backendApi.forceStartRound(adminKey),\n      forceEndRound: (adminKey) => backendApi.forceEndRound(adminKey),\n      updateSettings: (settings) => backendApi.updateAdminSettings(settings)\n    },\n    \n    // Current bettors\n    currentBettors\n  };\n};\n\nexport default useJackpotContract;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}