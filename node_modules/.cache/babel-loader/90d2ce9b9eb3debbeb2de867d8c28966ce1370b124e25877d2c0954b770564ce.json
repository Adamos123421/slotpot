{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\components\\\\SimpleCarousel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCarousel = ({\n  players,\n  winner,\n  isSpinning,\n  onWinnerLand\n}) => {\n  _s();\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const [showWinnerStyling, setShowWinnerStyling] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = swiper => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', {\n        hasSwiper: !!swiperRef.current,\n        hasWinner: !!winner,\n        isActive: winnerAnimationActive\n      });\n      return;\n    }\n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    setWinnerAnimationActive(true);\n\n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n\n    // STEP 1: Find winner slide index by checking CSS classes (most reliable)\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    console.log('🔍 Searching through', slides.length, 'slides for winner...');\n\n    // Primary method: Find slide with winner CSS class\n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const winnerCard = slide.querySelector('.player-card.winner');\n      if (winnerCard) {\n        winnerSlideIndex = i;\n        console.log('✅ Found winner slide at index:', i);\n        break;\n      }\n    }\n\n    // Backup method: Find by player name\n    if (winnerSlideIndex === -1) {\n      const winnerName = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName) || 'Player';\n      console.log('🔍 Searching by name:', winnerName);\n      for (let i = 0; i < slides.length; i++) {\n        var _nameEl$textContent;\n        const slide = slides[i];\n        const nameEl = slide.querySelector('.player-name');\n        const playerName = nameEl === null || nameEl === void 0 ? void 0 : (_nameEl$textContent = nameEl.textContent) === null || _nameEl$textContent === void 0 ? void 0 : _nameEl$textContent.trim();\n        if (playerName && (playerName === winnerName || playerName.includes(winnerName))) {\n          winnerSlideIndex = i;\n          console.log('✅ Found winner by name at index:', i);\n          break;\n        }\n      }\n    }\n    if (winnerSlideIndex === -1) {\n      console.error('❌ Could not find winner slide at all!');\n      setWinnerAnimationActive(false);\n      // Don't set locked here, let it try again\n      return;\n    }\n    console.log('🎯 Target winner slide index:', winnerSlideIndex);\n\n    // Calculate the target position first\n    const totalSlides = slides.length;\n    const slidesPerSet = players.length;\n\n    // Convert absolute slide index to real index within one set\n    let realIndex = winnerSlideIndex % slidesPerSet;\n\n    // Find the winner in the players array to get the true position\n    let winnerPositionInPlayers = -1;\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n      if (!player) continue; // Skip waiting cards\n\n      const isMatch = player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName || winnerUsername && player.username === winnerUsername || winnerUsername && player.displayName === winnerUsername;\n      if (isMatch) {\n        winnerPositionInPlayers = i;\n        console.log('🎯 Found winner in players array at position:', i, 'Player:', player.username || player.displayName);\n        break;\n      }\n    }\n    if (winnerPositionInPlayers !== -1) {\n      realIndex = winnerPositionInPlayers;\n      console.log('✅ Using winner position from players array:', realIndex);\n    } else {\n      console.log('⚠️ Could not find winner in players array, using calculated index:', realIndex);\n    }\n    console.log('🎯 Target real index for animation:', realIndex);\n\n    // STEP 2: Smooth gradual approach with progressive slowdown\n    console.log('🎰 Starting smooth slot machine animation...');\n    const smoothApproach = () => {\n      if (!swiperRef.current) return;\n      const currentRealIndex = swiperRef.current.realIndex;\n      let distanceToWinner = realIndex - currentRealIndex;\n\n      // Handle loop wrapping\n      if (distanceToWinner < 0) {\n        distanceToWinner += slidesPerSet;\n      }\n      console.log(`📍 Current: ${currentRealIndex}, Target: ${realIndex}, Distance: ${distanceToWinner}`);\n\n      // If we're at the winner, stop and land\n      if (distanceToWinner === 0 || currentRealIndex === realIndex) {\n        console.log('🏆 Perfect! Already at winner position!');\n\n        // Lock immediately since we're already there\n        setTimeout(() => {\n          console.log('🔒 Winner locked in perfect position!');\n          if (swiperRef.current) {\n            swiperRef.current.autoplay.stop();\n            swiperRef.current.allowSlideNext = false;\n            swiperRef.current.allowSlidePrev = false;\n            swiperRef.current.allowTouchMove = false;\n            const wrapper = swiperRef.current.wrapperEl;\n            if (wrapper) {\n              wrapper.style.transition = 'none';\n            }\n          }\n          setWinnerLocked(true);\n          setWinnerAnimationActive(false);\n          onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n          console.log('✅ Animation complete!');\n        }, 500);\n        return;\n      }\n\n      // Calculate speed based on distance - progressive slowdown\n      let speed;\n      let nextDelay;\n      if (distanceToWinner > 8) {\n        speed = 150; // Medium speed when far\n        nextDelay = 200;\n        console.log(`🎰 Far from winner - medium speed (${speed}ms)`);\n      } else if (distanceToWinner > 5) {\n        speed = 250; // Getting slower\n        nextDelay = 300;\n        console.log(`🎯 Getting closer - slowing down (${speed}ms)`);\n      } else if (distanceToWinner > 3) {\n        speed = 400; // Slower\n        nextDelay = 450;\n        console.log(`🎯 Close to winner - slow speed (${speed}ms)`);\n      } else if (distanceToWinner > 1) {\n        speed = 600; // Very slow\n        nextDelay = 650;\n        console.log(`🎯 Very close - very slow (${speed}ms)`);\n      } else {\n        // Final approach - FORWARD ONLY step-by-step to winner\n        console.log('🏆 Final approach - stepping forward to winner!');\n        const finalSteps = () => {\n          if (!swiperRef.current) return;\n          const currentRealIndex = swiperRef.current.realIndex;\n          console.log(`🎯 Final step: current=${currentRealIndex}, target=${realIndex}`);\n          if (currentRealIndex === realIndex) {\n            // Perfect! We're at the winner\n            console.log('🔒 Winner locked in perfect position!');\n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              swiperRef.current.allowTouchMove = false;\n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                wrapper.style.transition = 'none';\n              }\n            }\n            setWinnerLocked(true);\n            setWinnerAnimationActive(false);\n            setShowWinnerStyling(true);\n            onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n            console.log('✅ Forward-only animation complete!');\n            return;\n          }\n\n          // Take one more forward step\n          swiperRef.current.slideNext(600);\n\n          // Check again after step\n          setTimeout(() => {\n            finalSteps();\n          }, 700);\n        };\n        finalSteps();\n        return;\n      }\n\n      // Move one step closer\n      swiperRef.current.slideNext(speed);\n\n      // Continue approaching with increasing delay (progressive slowdown)\n      setTimeout(() => {\n        smoothApproach();\n      }, nextDelay);\n    };\n\n    // Start the smooth approach immediately (no fast rolling phase)\n    console.log('🎯 Starting gradual approach to winner...');\n    setTimeout(() => {\n      smoothApproach();\n    }, 300);\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    console.log('🔒 Locking on winner...');\n\n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n\n    // Get winner info for matching\n    const winnerUsername = (winner === null || winner === void 0 ? void 0 : winner.username) || (winner === null || winner === void 0 ? void 0 : winner.displayName);\n    const winnerAddress = (winner === null || winner === void 0 ? void 0 : winner.address) || (winner === null || winner === void 0 ? void 0 : winner.winner) || (winner === null || winner === void 0 ? void 0 : winner.fullAddress);\n    console.log('🔍 Looking for winner:', {\n      winnerUsername,\n      winnerAddress\n    });\n\n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    for (let i = 0; i < slides.length; i++) {\n      var _playerNameEl$textCon;\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl === null || playerNameEl === void 0 ? void 0 : (_playerNameEl$textCon = playerNameEl.textContent) === null || _playerNameEl$textCon === void 0 ? void 0 : _playerNameEl$textCon.trim();\n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n\n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n\n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner === null || winner === void 0 ? void 0 : winner.displayName);\n        }\n      }\n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || winnerAddress.includes(playerName);\n      }\n\n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || (winner === null || winner === void 0 ? void 0 : winner.displayName) === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n\n      // FORWARD ONLY - Calculate steps needed and move forward only\n      const currentSlide = swiperRef.current.activeIndex;\n      const totalSlides = slides.length;\n      let stepsForward = 0;\n      if (winnerSlideIndex >= currentSlide) {\n        stepsForward = winnerSlideIndex - currentSlide;\n      } else {\n        // Wrap around - go forward to end then to target\n        stepsForward = totalSlides - currentSlide + winnerSlideIndex;\n      }\n      console.log(`🎯 Moving ${stepsForward} steps FORWARD ONLY to reach winner`);\n\n      // Move forward step by step\n      const stepToWinner = stepsLeft => {\n        if (stepsLeft <= 0 || !swiperRef.current) {\n          console.log('🏆 Reached winner position!');\n\n          // Lock after reaching winner\n          setTimeout(() => {\n            console.log('🏆 Winner locked in position!');\n\n            // Completely stop all movement\n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n\n              // Force stop transitions\n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                setTimeout(() => {\n                  wrapper.style.transition = 'none';\n                  const transform = getComputedStyle(wrapper).transform;\n                  wrapper.style.transform = transform;\n                }, 100);\n              }\n            }\n            setWinnerLocked(true);\n            onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n            // Show winner for 7 seconds\n            winnerTimeoutRef.current = setTimeout(() => {\n              resetToIdle();\n            }, 7000);\n          }, 1100);\n          return;\n        }\n\n        // Take one forward step\n        console.log(`🎯 Step ${stepsForward - stepsLeft + 1}/${stepsForward} - moving forward`);\n        swiperRef.current.slideNext(800);\n\n        // Continue with next step\n        setTimeout(() => {\n          stepToWinner(stepsLeft - 1);\n        }, 900);\n      };\n\n      // Start stepping to winner\n      stepToWinner(stepsForward);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n\n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n\n        // FORWARD ONLY for fallback too\n        const currentSlide = swiperRef.current.activeIndex;\n        const totalSlides = slides.length;\n        let fallbackStepsForward = 0;\n        if (fallbackIndex >= currentSlide) {\n          fallbackStepsForward = fallbackIndex - currentSlide;\n        } else {\n          fallbackStepsForward = totalSlides - currentSlide + fallbackIndex;\n        }\n        console.log(`🎯 Fallback: Moving ${fallbackStepsForward} steps FORWARD ONLY`);\n        const fallbackStep = stepsLeft => {\n          if (stepsLeft <= 0) {\n            setTimeout(() => {\n              setWinnerLocked(true);\n              onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n              winnerTimeoutRef.current = setTimeout(() => {\n                resetToIdle();\n              }, 7000);\n            }, 1100);\n            return;\n          }\n          swiperRef.current.slideNext(800);\n          setTimeout(() => {\n            fallbackStep(stepsLeft - 1);\n          }, 900);\n        };\n        fallbackStep(fallbackStepsForward);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n\n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n\n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    setShowWinnerStyling(false);\n\n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('🚫 No winner, skipping animation');\n      return;\n    }\n    if (winnerAnimationActive) {\n      console.log('🚫 Animation already active, skipping');\n      return;\n    }\n    if (winnerLocked) {\n      console.log('🚫 Winner already locked, skipping');\n      return;\n    }\n\n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n\n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('🆕 New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n\n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('🎯 Forcing winner display without animation');\n\n      // Just show the winner without animation\n      setWinnerLocked(true);\n      onWinnerLand === null || onWinnerLand === void 0 ? void 0 : onWinnerLand();\n\n      // NO AUTO-RESET - let game logic handle it\n      console.log('🎯 Winner locked without animation - waiting for new round');\n      return;\n    }\n    console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    animationAttemptsRef.current++;\n\n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-carousel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `carousel-arrow ${winnerAnimationActive && !winnerLocked ? 'winner-approaching' : winnerLocked ? 'winner-landed' : ''}`,\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Swiper, {\n      ref: swiperRef,\n      modules: [Autoplay],\n      spaceBetween: 10,\n      slidesPerView: \"auto\",\n      centeredSlides: true,\n      loop: true,\n      loopedSlides: Math.max(players.length, 6),\n      autoplay: {\n        delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n        disableOnInteraction: false,\n        pauseOnMouseEnter: false\n      },\n      speed: 300,\n      className: `player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`,\n      allowTouchMove: false,\n      onSwiper: handleSwiperInit,\n      children: [...Array(2)].map((_, setIndex) => players.map((player, index) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        className: \"player-slide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `player-card ${showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) ? 'winner' : player ? 'active' : 'waiting'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-avatar\",\n            children: player ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-avatar-content\",\n              children: player.username ? player.username[0].toUpperCase() : '?'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"waiting-icon\",\n              children: \"\\u2753\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-name\",\n              children: player ? player.username || player.displayName || 'Player' : 'Waiting'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-bet\",\n              children: player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 19\n            }, this), showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"winner-prize\",\n              children: [\"Won \", parseFloat(winner.prize || 0).toFixed(3), \" TON\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 17\n          }, this), showWinnerStyling && winner && player && (player.address === winner.address || player.username === winner.username || player.address === winner.winner || player.address === winner.fullAddress || player.username === winner.displayName) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner-crown\",\n            children: \"\\uD83D\\uDC51\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 15\n        }, this)\n      }, `${setIndex}-${(player === null || player === void 0 ? void 0 : player.address) || `waiting-${index}`}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 601,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCarousel, \"nnZifd35lS0KVAw5e4vmaMqUjLs=\");\n_c = SimpleCarousel;\nexport default SimpleCarousel;\nvar _c;\n$RefreshReg$(_c, \"SimpleCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","Swiper","SwiperSlide","Autoplay","jsxDEV","_jsxDEV","SimpleCarousel","players","winner","isSpinning","onWinnerLand","_s","swiperRef","winnerAnimationActive","setWinnerAnimationActive","winnerLocked","setWinnerLocked","showWinnerStyling","setShowWinnerStyling","winnerTimeoutRef","animationAttemptsRef","lastWinnerRef","handleSwiperInit","swiper","current","animateToWinner","console","log","hasSwiper","hasWinner","isActive","autoplay","stop","slides","winnerSlideIndex","length","i","slide","winnerCard","querySelector","winnerName","username","displayName","_nameEl$textContent","nameEl","playerName","textContent","trim","includes","error","totalSlides","slidesPerSet","realIndex","winnerPositionInPlayers","winnerUsername","winnerAddress","address","fullAddress","player","isMatch","smoothApproach","currentRealIndex","distanceToWinner","setTimeout","allowSlideNext","allowSlidePrev","allowTouchMove","wrapper","wrapperEl","style","transition","speed","nextDelay","finalSteps","slideNext","lockOnWinner","closestToCenter","Infinity","containerCenter","el","clientWidth","_playerNameEl$textCon","playerNameEl","isWinner","slice","slideRect","getBoundingClientRect","containerRect","slideCenter","left","width","distanceFromCenter","Math","abs","currentSlide","activeIndex","stepsForward","stepToWinner","stepsLeft","transform","getComputedStyle","resetToIdle","warn","fallbackIndex","fallbackStepsForward","fallbackStep","start","clearTimeout","currentWinnerKey","lastWinnerKey","params","delay","disableOnInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","modules","spaceBetween","slidesPerView","centeredSlides","loop","loopedSlides","max","pauseOnMouseEnter","onSwiper","Array","map","_","setIndex","index","toUpperCase","amount","toFixed","parseFloat","prize","_c","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/components/SimpleCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay } from 'swiper/modules';\nimport 'swiper/css';\nimport './SimpleCarousel.css';\n\nconst SimpleCarousel = ({ \n  players, \n  winner, \n  isSpinning, \n  onWinnerLand \n}) => {\n  const swiperRef = useRef(null);\n  const [winnerAnimationActive, setWinnerAnimationActive] = useState(false);\n  const [winnerLocked, setWinnerLocked] = useState(false);\n  const [showWinnerStyling, setShowWinnerStyling] = useState(false);\n  const winnerTimeoutRef = useRef(null);\n  const animationAttemptsRef = useRef(0);\n  const lastWinnerRef = useRef(null);\n\n  // Handle swiper initialization\n  const handleSwiperInit = (swiper) => {\n    swiperRef.current = swiper;\n  };\n\n  // Simple winner animation - much more reliable\n  const animateToWinner = useCallback(() => {\n    if (!swiperRef.current || !winner || winnerAnimationActive) {\n      console.log('🚫 Animation blocked:', { \n        hasSwiper: !!swiperRef.current, \n        hasWinner: !!winner, \n        isActive: winnerAnimationActive \n      });\n      return;\n    }\n    \n    console.log('🎰 Starting SIMPLE winner animation');\n    console.log('🔍 Winner data:', winner);\n    \n    setWinnerAnimationActive(true);\n    \n    // Stop current autoplay immediately\n    if (swiperRef.current.autoplay) {\n      swiperRef.current.autoplay.stop();\n    }\n    \n    // STEP 1: Find winner slide index by checking CSS classes (most reliable)\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    console.log('🔍 Searching through', slides.length, 'slides for winner...');\n    \n    // Primary method: Find slide with winner CSS class\n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const winnerCard = slide.querySelector('.player-card.winner');\n      if (winnerCard) {\n        winnerSlideIndex = i;\n        console.log('✅ Found winner slide at index:', i);\n        break;\n      }\n    }\n    \n    // Backup method: Find by player name\n    if (winnerSlideIndex === -1) {\n      const winnerName = winner?.username || winner?.displayName || 'Player';\n      console.log('🔍 Searching by name:', winnerName);\n      \n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        const nameEl = slide.querySelector('.player-name');\n        const playerName = nameEl?.textContent?.trim();\n        \n        if (playerName && (playerName === winnerName || playerName.includes(winnerName))) {\n          winnerSlideIndex = i;\n          console.log('✅ Found winner by name at index:', i);\n          break;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex === -1) {\n      console.error('❌ Could not find winner slide at all!');\n      setWinnerAnimationActive(false);\n      // Don't set locked here, let it try again\n      return;\n    }\n    \n    console.log('🎯 Target winner slide index:', winnerSlideIndex);\n    \n    // Calculate the target position first\n    const totalSlides = slides.length;\n    const slidesPerSet = players.length;\n    \n    // Convert absolute slide index to real index within one set\n    let realIndex = winnerSlideIndex % slidesPerSet;\n    \n    // Find the winner in the players array to get the true position\n    let winnerPositionInPlayers = -1;\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n      if (!player) continue; // Skip waiting cards\n      \n      const isMatch = (player.address === winner.address) ||\n                     (player.username === winner.username) ||\n                     (player.address === winner.winner) ||\n                     (player.address === winner.fullAddress) ||\n                     (player.username === winner.displayName) ||\n                     (winnerUsername && player.username === winnerUsername) ||\n                     (winnerUsername && player.displayName === winnerUsername);\n      \n      if (isMatch) {\n        winnerPositionInPlayers = i;\n        console.log('🎯 Found winner in players array at position:', i, 'Player:', player.username || player.displayName);\n        break;\n      }\n    }\n    \n    if (winnerPositionInPlayers !== -1) {\n      realIndex = winnerPositionInPlayers;\n      console.log('✅ Using winner position from players array:', realIndex);\n    } else {\n      console.log('⚠️ Could not find winner in players array, using calculated index:', realIndex);\n    }\n    \n    console.log('🎯 Target real index for animation:', realIndex);\n    \n    // STEP 2: Smooth gradual approach with progressive slowdown\n    console.log('🎰 Starting smooth slot machine animation...');\n    \n    const smoothApproach = () => {\n      if (!swiperRef.current) return;\n      \n      const currentRealIndex = swiperRef.current.realIndex;\n      let distanceToWinner = realIndex - currentRealIndex;\n      \n      // Handle loop wrapping\n      if (distanceToWinner < 0) {\n        distanceToWinner += slidesPerSet;\n      }\n      \n      console.log(`📍 Current: ${currentRealIndex}, Target: ${realIndex}, Distance: ${distanceToWinner}`);\n      \n      // If we're at the winner, stop and land\n      if (distanceToWinner === 0 || currentRealIndex === realIndex) {\n        console.log('🏆 Perfect! Already at winner position!');\n        \n        // Lock immediately since we're already there\n        setTimeout(() => {\n          console.log('🔒 Winner locked in perfect position!');\n          \n          if (swiperRef.current) {\n            swiperRef.current.autoplay.stop();\n            swiperRef.current.allowSlideNext = false;\n            swiperRef.current.allowSlidePrev = false;\n            swiperRef.current.allowTouchMove = false;\n            \n            const wrapper = swiperRef.current.wrapperEl;\n            if (wrapper) {\n              wrapper.style.transition = 'none';\n            }\n          }\n          \n          setWinnerLocked(true);\n          setWinnerAnimationActive(false);\n          onWinnerLand?.();\n          \n          console.log('✅ Animation complete!');\n          \n        }, 500);\n        \n        return;\n      }\n      \n      // Calculate speed based on distance - progressive slowdown\n      let speed;\n      let nextDelay;\n      \n      if (distanceToWinner > 8) {\n        speed = 150; // Medium speed when far\n        nextDelay = 200;\n        console.log(`🎰 Far from winner - medium speed (${speed}ms)`);\n      } else if (distanceToWinner > 5) {\n        speed = 250; // Getting slower\n        nextDelay = 300;\n        console.log(`🎯 Getting closer - slowing down (${speed}ms)`);\n      } else if (distanceToWinner > 3) {\n        speed = 400; // Slower\n        nextDelay = 450;\n        console.log(`🎯 Close to winner - slow speed (${speed}ms)`);\n      } else if (distanceToWinner > 1) {\n        speed = 600; // Very slow\n        nextDelay = 650;\n        console.log(`🎯 Very close - very slow (${speed}ms)`);\n      } else {\n        // Final approach - FORWARD ONLY step-by-step to winner\n        console.log('🏆 Final approach - stepping forward to winner!');\n        \n        const finalSteps = () => {\n          if (!swiperRef.current) return;\n          \n          const currentRealIndex = swiperRef.current.realIndex;\n          console.log(`🎯 Final step: current=${currentRealIndex}, target=${realIndex}`);\n          \n          if (currentRealIndex === realIndex) {\n            // Perfect! We're at the winner\n            console.log('🔒 Winner locked in perfect position!');\n            \n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              swiperRef.current.allowTouchMove = false;\n              \n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                wrapper.style.transition = 'none';\n              }\n            }\n            \n            setWinnerLocked(true);\n            setWinnerAnimationActive(false);\n            setShowWinnerStyling(true);\n            onWinnerLand?.();\n            \n            console.log('✅ Forward-only animation complete!');\n            return;\n          }\n          \n          // Take one more forward step\n          swiperRef.current.slideNext(600);\n          \n          // Check again after step\n          setTimeout(() => {\n            finalSteps();\n          }, 700);\n        };\n        \n        finalSteps();\n        return;\n      }\n      \n      // Move one step closer\n      swiperRef.current.slideNext(speed);\n      \n      // Continue approaching with increasing delay (progressive slowdown)\n      setTimeout(() => {\n        smoothApproach();\n      }, nextDelay);\n    };\n    \n    // Start the smooth approach immediately (no fast rolling phase)\n    console.log('🎯 Starting gradual approach to winner...');\n    setTimeout(() => {\n      smoothApproach();\n    }, 300);\n  }, [winner, winnerAnimationActive, onWinnerLand]);\n\n  // Lock carousel on winner card\n  const lockOnWinner = useCallback(() => {\n    if (!swiperRef.current || !winner) return;\n    \n    console.log('🔒 Locking on winner...');\n    \n    // Find winner slide by looking at visible slides\n    const slides = swiperRef.current.slides;\n    let winnerSlideIndex = -1;\n    \n    // Get winner info for matching\n    const winnerUsername = winner?.username || winner?.displayName;\n    const winnerAddress = winner?.address || winner?.winner || winner?.fullAddress;\n    \n    console.log('🔍 Looking for winner:', { winnerUsername, winnerAddress });\n    \n    // Find the slide with winner content that's closest to center\n    let closestToCenter = Infinity;\n    const containerCenter = swiperRef.current.el.clientWidth / 2;\n    \n    for (let i = 0; i < slides.length; i++) {\n      const slide = slides[i];\n      const playerNameEl = slide.querySelector('.player-name');\n      const playerName = playerNameEl?.textContent?.trim();\n      \n      console.log(`🔍 Checking slide ${i}: \"${playerName}\"`);\n      \n      // Check if this is the winner - improved matching logic\n      let isWinner = false;\n      \n      if (winnerUsername && playerName) {\n        // Direct username match\n        isWinner = playerName === winnerUsername;\n        \n        // Fallback: check if displayName matches\n        if (!isWinner) {\n          isWinner = playerName === (winner?.displayName);\n        }\n      }\n      \n      if (!isWinner && winnerAddress && playerName) {\n        // Address-based matching (for cases where username is an address)\n        isWinner = playerName.includes(winnerAddress.slice(0, 6)) || \n                   winnerAddress.includes(playerName);\n      }\n      \n      // Special case: if winner.displayName is 'Player' and we have a player named 'Player'\n      if (!isWinner && (winnerUsername === 'Player' || winner?.displayName === 'Player')) {\n        isWinner = playerName === 'Player';\n      }\n      \n      console.log(`🔍 Slide ${i} \"${playerName}\" isWinner: ${isWinner}`);\n      \n      if (isWinner) {\n        // Calculate distance from center\n        const slideRect = slide.getBoundingClientRect();\n        const containerRect = swiperRef.current.el.getBoundingClientRect();\n        const slideCenter = slideRect.left - containerRect.left + slideRect.width / 2;\n        const distanceFromCenter = Math.abs(slideCenter - containerCenter);\n        \n        console.log(`✅ Found winner candidate at slide ${i}, distance from center: ${distanceFromCenter}`);\n        \n        if (distanceFromCenter < closestToCenter) {\n          closestToCenter = distanceFromCenter;\n          winnerSlideIndex = i;\n        }\n      }\n    }\n    \n    if (winnerSlideIndex !== -1) {\n      console.log('✅ Found winner slide at index:', winnerSlideIndex);\n      \n      // FORWARD ONLY - Calculate steps needed and move forward only\n      const currentSlide = swiperRef.current.activeIndex;\n      const totalSlides = slides.length;\n      \n      let stepsForward = 0;\n      if (winnerSlideIndex >= currentSlide) {\n        stepsForward = winnerSlideIndex - currentSlide;\n      } else {\n        // Wrap around - go forward to end then to target\n        stepsForward = (totalSlides - currentSlide) + winnerSlideIndex;\n      }\n      \n      console.log(`🎯 Moving ${stepsForward} steps FORWARD ONLY to reach winner`);\n      \n      // Move forward step by step\n      const stepToWinner = (stepsLeft) => {\n        if (stepsLeft <= 0 || !swiperRef.current) {\n          console.log('🏆 Reached winner position!');\n          \n          // Lock after reaching winner\n          setTimeout(() => {\n            console.log('🏆 Winner locked in position!');\n            \n            // Completely stop all movement\n            if (swiperRef.current) {\n              swiperRef.current.autoplay.stop();\n              swiperRef.current.allowSlideNext = false;\n              swiperRef.current.allowSlidePrev = false;\n              \n              // Force stop transitions\n              const wrapper = swiperRef.current.wrapperEl;\n              if (wrapper) {\n                setTimeout(() => {\n                  wrapper.style.transition = 'none';\n                  const transform = getComputedStyle(wrapper).transform;\n                  wrapper.style.transform = transform;\n                }, 100);\n              }\n            }\n            \n            setWinnerLocked(true);\n            onWinnerLand?.();\n            \n            // Show winner for 7 seconds\n            winnerTimeoutRef.current = setTimeout(() => {\n              resetToIdle();\n            }, 7000);\n            \n          }, 1100);\n          return;\n        }\n        \n        // Take one forward step\n        console.log(`🎯 Step ${stepsForward - stepsLeft + 1}/${stepsForward} - moving forward`);\n        swiperRef.current.slideNext(800);\n        \n        // Continue with next step\n        setTimeout(() => {\n          stepToWinner(stepsLeft - 1);\n        }, 900);\n      };\n      \n      // Start stepping to winner\n      stepToWinner(stepsForward);\n    } else {\n      console.warn('❌ Could not find winner slide');\n      console.log('🔍 Available slides:', slides.length);\n      console.log('🔍 Winner data:', winner);\n      \n      // Improved fallback - try to find any slide with winner class\n      let fallbackIndex = -1;\n      for (let i = 0; i < slides.length; i++) {\n        const slide = slides[i];\n        if (slide.querySelector('.player-card.winner')) {\n          fallbackIndex = i;\n          console.log(`🎯 Found fallback winner slide at index ${i}`);\n          break;\n        }\n      }\n      \n      if (fallbackIndex !== -1) {\n        console.log('🎯 Using fallback winner slide at index:', fallbackIndex);\n        \n        // FORWARD ONLY for fallback too\n        const currentSlide = swiperRef.current.activeIndex;\n        const totalSlides = slides.length;\n        let fallbackStepsForward = 0;\n        \n        if (fallbackIndex >= currentSlide) {\n          fallbackStepsForward = fallbackIndex - currentSlide;\n        } else {\n          fallbackStepsForward = (totalSlides - currentSlide) + fallbackIndex;\n        }\n        \n        console.log(`🎯 Fallback: Moving ${fallbackStepsForward} steps FORWARD ONLY`);\n        \n        const fallbackStep = (stepsLeft) => {\n          if (stepsLeft <= 0) {\n            setTimeout(() => {\n              setWinnerLocked(true);\n              onWinnerLand?.();\n              \n              winnerTimeoutRef.current = setTimeout(() => {\n                resetToIdle();\n              }, 7000);\n            }, 1100);\n            return;\n          }\n          \n          swiperRef.current.slideNext(800);\n          setTimeout(() => {\n            fallbackStep(stepsLeft - 1);\n          }, 900);\n        };\n        \n        fallbackStep(fallbackStepsForward);\n      } else {\n        // Last resort - just stop and show winner display\n        console.log('🚨 Fallback: Just stopping and showing winner');\n        setWinnerLocked(true);\n        onWinnerLand?.();\n        \n        winnerTimeoutRef.current = setTimeout(() => {\n          resetToIdle();\n        }, 7000);\n      }\n    }\n  }, [winner, onWinnerLand]);\n\n  // Reset to normal idle state\n  const resetToIdle = useCallback(() => {\n    console.log('🔄 Resetting to idle state');\n    \n    if (swiperRef.current) {\n      // Re-enable all swiper functionality\n      swiperRef.current.allowSlideNext = true;\n      swiperRef.current.allowSlidePrev = true;\n      swiperRef.current.allowTouchMove = false; // Keep disabled for this app\n      \n      // Reset wrapper transitions\n      const wrapper = swiperRef.current.wrapperEl;\n      if (wrapper) {\n        wrapper.style.transition = '';\n        wrapper.style.transform = '';\n      }\n      \n      // Start normal autoplay if no active states\n      if (!isSpinning && !winner) {\n        setTimeout(() => {\n          if (swiperRef.current && swiperRef.current.autoplay) {\n            swiperRef.current.autoplay.start();\n          }\n        }, 500);\n      }\n    }\n    \n    setWinnerAnimationActive(false);\n    setWinnerLocked(false);\n    setShowWinnerStyling(false);\n    \n    // Reset animation attempts when winner is cleared\n    if (!winner) {\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = null;\n    }\n    \n    if (winnerTimeoutRef.current) {\n      clearTimeout(winnerTimeoutRef.current);\n      winnerTimeoutRef.current = null;\n    }\n  }, [isSpinning, winner]);\n\n  // Start winner animation when winner is announced\n  useEffect(() => {\n    // Strong guards to prevent multiple animations\n    if (!winner) {\n      console.log('🚫 No winner, skipping animation');\n      return;\n    }\n    \n    if (winnerAnimationActive) {\n      console.log('🚫 Animation already active, skipping');\n      return;\n    }\n    \n    if (winnerLocked) {\n      console.log('🚫 Winner already locked, skipping');\n      return;\n    }\n    \n    // Check if this is the same winner we already tried\n    const currentWinnerKey = `${winner.username || winner.displayName || 'Player'}-${winner.address || winner.winner || ''}`;\n    const lastWinnerKey = lastWinnerRef.current;\n    \n    // Reset attempts if this is a new winner\n    if (currentWinnerKey !== lastWinnerKey) {\n      console.log('🆕 New winner detected, resetting attempts');\n      animationAttemptsRef.current = 0;\n      lastWinnerRef.current = currentWinnerKey;\n    }\n    \n    // Prevent infinite loops - max 1 attempt (was 3)\n    if (animationAttemptsRef.current >= 1) {\n      console.warn('🚫 Max animation attempts reached for winner:', winner.username || winner.displayName || 'Player');\n      console.log('🎯 Forcing winner display without animation');\n      \n      // Just show the winner without animation\n      setWinnerLocked(true);\n      onWinnerLand?.();\n      \n      // NO AUTO-RESET - let game logic handle it\n      console.log('🎯 Winner locked without animation - waiting for new round');\n      \n      return;\n    }\n    \n    console.log('🏆 Winner announced:', winner.username || winner.displayName || 'Player');\n    console.log(`🔄 Animation attempt ${animationAttemptsRef.current + 1}/1`);\n    \n    animationAttemptsRef.current++;\n    \n    // Small delay to ensure DOM is ready\n    setTimeout(() => {\n      animateToWinner();\n    }, 100);\n    \n  }, [winner, winnerAnimationActive, winnerLocked, animateToWinner, onWinnerLand]);\n\n  // Handle normal spinning (analyzing bets)\n  useEffect(() => {\n    if (!swiperRef.current) return;\n    \n    if (isSpinning && !winner && !winnerAnimationActive) {\n      // Fast autoplay during analysis\n      swiperRef.current.params.autoplay = {\n        delay: 20,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    } else if (!isSpinning && !winner && !winnerAnimationActive && !winnerLocked) {\n      // Normal idle autoplay\n      swiperRef.current.params.autoplay = {\n        delay: 400,\n        disableOnInteraction: false,\n      };\n      swiperRef.current.autoplay.start();\n    }\n  }, [isSpinning, winner, winnerAnimationActive, winnerLocked]);\n\n  // Reset when winner is cleared (new round)\n  useEffect(() => {\n    if (!winner && (winnerAnimationActive || winnerLocked)) {\n      console.log('🔄 Winner cleared - resetting');\n      resetToIdle();\n    }\n  }, [winner, winnerAnimationActive, winnerLocked, resetToIdle]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (winnerTimeoutRef.current) {\n        clearTimeout(winnerTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"simple-carousel-container\">\n      {/* Target Arrow */}\n      <div className={`carousel-arrow ${\n        winnerAnimationActive && !winnerLocked ? 'winner-approaching' : \n        winnerLocked ? 'winner-landed' : ''\n      }`}>⬇️</div>\n      \n      <Swiper\n        ref={swiperRef}\n        modules={[Autoplay]}\n        spaceBetween={10}\n        slidesPerView=\"auto\"\n        centeredSlides={true}\n        loop={true}\n        loopedSlides={Math.max(players.length, 6)}\n        autoplay={{\n          delay: isSpinning && !winnerAnimationActive ? 20 : 400,\n          disableOnInteraction: false,\n          pauseOnMouseEnter: false,\n        }}\n        speed={300}\n        className={`player-swiper ${isSpinning || winnerAnimationActive ? 'spinning' : ''}`}\n        allowTouchMove={false}\n        onSwiper={handleSwiperInit}\n      >\n        {/* Only 2 sets to reduce complexity */}\n        {[...Array(2)].map((_, setIndex) => \n          players.map((player, index) => (\n            <SwiperSlide key={`${setIndex}-${player?.address || `waiting-${index}`}`} className=\"player-slide\">\n              <div className={`player-card ${\n                showWinnerStyling && winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) ? 'winner' : player ? 'active' : 'waiting'\n              }`}>\n                <div className=\"player-avatar\">\n                  {player ? (\n                    <div className=\"player-avatar-content\">\n                      {player.username ? player.username[0].toUpperCase() : '?'}\n                    </div>\n                  ) : (\n                    <div className=\"waiting-icon\">❓</div>\n                  )}\n                </div>\n                <div className=\"player-info\">\n                  <div className=\"player-name\">\n                    {player ? (player.username || player.displayName || 'Player') : 'Waiting'}\n                  </div>\n                  <div className=\"player-bet\">\n                    {player ? `${(player.amount || 0).toFixed(2)} TON` : '0.00 TON'}\n                  </div>\n                  {showWinnerStyling && winner && player && (\n                    player.address === winner.address || \n                    player.username === winner.username ||\n                    player.address === winner.winner ||\n                    player.address === winner.fullAddress ||\n                    player.username === winner.displayName\n                  ) && (\n                    <div className=\"winner-prize\">\n                      Won {parseFloat(winner.prize || 0).toFixed(3)} TON\n                    </div>\n                  )}\n                </div>\n                {showWinnerStyling && winner && player && (\n                  player.address === winner.address || \n                  player.username === winner.username ||\n                  player.address === winner.winner ||\n                  player.address === winner.fullAddress ||\n                  player.username === winner.displayName\n                ) && (\n                  <div className=\"winner-crown\">👑</div>\n                )}\n              </div>\n            </SwiperSlide>\n          ))\n        )}\n      </Swiper>\n    </div>\n  );\n};\n\nexport default SimpleCarousel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}