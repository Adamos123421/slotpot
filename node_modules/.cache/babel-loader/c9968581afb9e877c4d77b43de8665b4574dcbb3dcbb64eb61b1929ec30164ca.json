{"ast":null,"code":"class SoundService {\n  constructor() {\n    this.sounds = {};\n    this.isEnabled = true;\n    this.volume = 0.7;\n    this.isLoaded = false;\n    this.audioContext = null;\n    this.audioUnlocked = false;\n    this.userInteractionReceived = false;\n\n    // Sound definitions with their corresponding files\n    this.soundFiles = {\n      bet: '/bet.wav',\n      countdown: '/decompte-temps.wav',\n      analyze: '/annalyse-bet.wav',\n      spin: '/tic-roue.wav',\n      launch: '/lancement-tirage-v3.wav',\n      launchV2: '/lancement-tirage-v2.wav',\n      launchV1: '/lancement-tirage.wav',\n      winner: '/gagnant.wav'\n    };\n    this.init();\n    this.setupUserInteractionHandlers();\n  }\n  setupUserInteractionHandlers() {\n    var _window$Telegram;\n    const unlockAudio = async () => {\n      if (this.audioUnlocked) return;\n\n      //console.log('ðŸ”“ Attempting to unlock audio after user interaction');\n\n      try {\n        // Create audio context if it doesn't exist\n        if (!this.audioContext) {\n          this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        }\n\n        // Resume audio context if suspended\n        if (this.audioContext.state === 'suspended') {\n          await this.audioContext.resume();\n          //console.log('ðŸŽµ Audio context resumed');\n        }\n\n        // Test audio playback\n        await this.testAudioPlayback();\n        this.audioUnlocked = true;\n        this.userInteractionReceived = true;\n        //console.log('ðŸ”Š Audio successfully unlocked');\n\n        // Remove event listeners after successful unlock\n        this.removeUserInteractionHandlers();\n      } catch (error) {\n        console.warn('ðŸ”‡ Failed to unlock audio:', error);\n      }\n    };\n\n    // List of events that can unlock audio\n    const events = ['touchstart', 'touchend', 'mousedown', 'mouseup', 'click', 'keydown'];\n    this.unlockAudio = unlockAudio;\n    this.unlockEvents = events;\n\n    // Add event listeners\n    events.forEach(event => {\n      document.addEventListener(event, unlockAudio, {\n        once: false,\n        passive: true\n      });\n    });\n\n    // Special handling for Telegram Mini App\n    if ((_window$Telegram = window.Telegram) !== null && _window$Telegram !== void 0 && _window$Telegram.WebApp) {\n      // Try to unlock on Telegram WebApp ready\n      window.Telegram.WebApp.ready(() => {\n        setTimeout(unlockAudio, 100);\n      });\n\n      // Try to unlock when app becomes visible\n      document.addEventListener('visibilitychange', () => {\n        if (!document.hidden && !this.audioUnlocked) {\n          setTimeout(unlockAudio, 100);\n        }\n      });\n    }\n  }\n  removeUserInteractionHandlers() {\n    if (this.unlockEvents && this.unlockAudio) {\n      this.unlockEvents.forEach(event => {\n        document.removeEventListener(event, this.unlockAudio);\n      });\n    }\n  }\n  async testAudioPlayback() {\n    return new Promise((resolve, reject) => {\n      // Try to play a very short, silent audio to test if audio is unlocked\n      const testAudio = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQQAAAAAAPA/');\n      testAudio.volume = 0;\n      const playPromise = testAudio.play();\n      if (playPromise !== undefined) {\n        playPromise.then(() => {\n          //console.log('ðŸŽµ Test audio playback successful');\n          resolve();\n        }).catch(error => {\n          console.warn('ðŸ”‡ Test audio playback failed:', error);\n          reject(error);\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n  async init() {\n    try {\n      await this.loadSounds();\n      this.isLoaded = true;\n      //console.log('ðŸ”Š Sound service initialized successfully');\n    } catch (error) {\n      console.warn('ðŸ”‡ Sound service failed to initialize:', error);\n    }\n  }\n  async loadSounds() {\n    const loadPromises = Object.entries(this.soundFiles).map(async ([key, path]) => {\n      try {\n        const audio = new Audio(path);\n        audio.preload = 'auto';\n        audio.volume = this.volume;\n        return new Promise((resolve, reject) => {\n          audio.addEventListener('canplaythrough', () => {\n            this.sounds[key] = audio;\n            resolve();\n          });\n          audio.addEventListener('error', e => {\n            console.warn(`Failed to load sound: ${key} (${path})`, e);\n            reject(e);\n          });\n\n          // Start loading\n          audio.load();\n        });\n      } catch (error) {\n        console.warn(`Error loading sound ${key}:`, error);\n      }\n    });\n\n    // Wait for all sounds to load (or fail)\n    await Promise.allSettled(loadPromises);\n  }\n  async ensureAudioContext() {\n    if (!this.audioContext) {\n      try {\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      } catch (error) {\n        console.warn('Failed to create audio context:', error);\n        return false;\n      }\n    }\n    if (this.audioContext.state === 'suspended') {\n      try {\n        await this.audioContext.resume();\n        //console.log('ðŸŽµ Audio context resumed before playback');\n      } catch (error) {\n        console.warn('Failed to resume audio context:', error);\n        return false;\n      }\n    }\n    return true;\n  }\n  async play(soundName, options = {}) {\n    if (!this.isEnabled || !this.isLoaded) {\n      return;\n    }\n\n    // Ensure audio context is ready\n    await this.ensureAudioContext();\n    const sound = this.sounds[soundName];\n    if (!sound) {\n      console.warn(`Sound not found: ${soundName}`);\n      return;\n    }\n    try {\n      // Clone the audio to allow multiple simultaneous plays\n      const audioClone = sound.cloneNode();\n      audioClone.volume = options.volume !== undefined ? options.volume : this.volume;\n\n      // Play the sound\n      const playPromise = audioClone.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          if (error.name === 'NotAllowedError') {\n            console.warn(`ðŸ”‡ Audio play blocked by browser policy for ${soundName}. User interaction required.`);\n            // Try to unlock audio on next user interaction\n            if (!this.audioUnlocked) {\n              this.setupUserInteractionHandlers();\n            }\n          } else {\n            console.warn(`Error playing sound ${soundName}:`, error);\n          }\n        });\n      }\n\n      // Clean up after playing\n      audioClone.addEventListener('ended', () => {\n        audioClone.remove();\n      });\n      return audioClone;\n    } catch (error) {\n      console.warn(`Error playing sound ${soundName}:`, error);\n    }\n  }\n\n  // Specific game sound methods\n  playBet() {\n    this.play('bet', {\n      volume: 0.5\n    });\n  }\n  playCountdown() {\n    this.play('countdown', {\n      volume: 0.6\n    });\n  }\n  playAnalyze() {\n    this.play('analyze', {\n      volume: 0.7\n    });\n  }\n  playSpin() {\n    this.play('spin', {\n      volume: 0.3\n    });\n  }\n\n  // Play spin with variable volume for dramatic effect\n  playSpinWithVolume(volume = 0.3) {\n    this.play('spin', {\n      volume\n    });\n  }\n  playLaunch() {\n    // Use the latest version by default\n    this.play('launch', {\n      volume: 0.8\n    });\n  }\n  playWinner() {\n    this.play('winner', {\n      volume: 0.9\n    });\n  }\n\n  // Volume and settings control\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume));\n    Object.values(this.sounds).forEach(sound => {\n      sound.volume = this.volume;\n    });\n  }\n  toggle() {\n    this.isEnabled = !this.isEnabled;\n\n    // If enabling and not unlocked, try to unlock audio\n    if (this.isEnabled && !this.audioUnlocked) {\n      this.setupUserInteractionHandlers();\n    }\n    return this.isEnabled;\n  }\n  enable() {\n    this.isEnabled = true;\n\n    // Try to unlock audio when enabling\n    if (!this.audioUnlocked) {\n      this.setupUserInteractionHandlers();\n    }\n  }\n  disable() {\n    this.isEnabled = false;\n  }\n\n  // Stop all sounds\n  stopAll() {\n    Object.values(this.sounds).forEach(sound => {\n      sound.pause();\n      sound.currentTime = 0;\n    });\n  }\n\n  // Check if sounds are loaded\n  isReady() {\n    return this.isLoaded;\n  }\n\n  // Check if audio is unlocked and ready to play\n  isUnlocked() {\n    return this.audioUnlocked;\n  }\n\n  // Get audio context state\n  getAudioContextState() {\n    return this.audioContext ? this.audioContext.state : 'unavailable';\n  }\n\n  // Get available sounds\n  getAvailableSounds() {\n    return Object.keys(this.soundFiles);\n  }\n\n  // Force audio unlock (call this from user interaction handlers)\n  async forceUnlock() {\n    if (this.unlockAudio) {\n      await this.unlockAudio();\n    }\n  }\n}\n\n// Create and export singleton instance\nconst soundService = new SoundService();\nexport default soundService;","map":{"version":3,"names":["SoundService","constructor","sounds","isEnabled","volume","isLoaded","audioContext","audioUnlocked","userInteractionReceived","soundFiles","bet","countdown","analyze","spin","launch","launchV2","launchV1","winner","init","setupUserInteractionHandlers","_window$Telegram","unlockAudio","window","AudioContext","webkitAudioContext","state","resume","testAudioPlayback","removeUserInteractionHandlers","error","console","warn","events","unlockEvents","forEach","event","document","addEventListener","once","passive","Telegram","WebApp","ready","setTimeout","hidden","removeEventListener","Promise","resolve","reject","testAudio","Audio","playPromise","play","undefined","then","catch","loadSounds","loadPromises","Object","entries","map","key","path","audio","preload","e","load","allSettled","ensureAudioContext","soundName","options","sound","audioClone","cloneNode","name","remove","playBet","playCountdown","playAnalyze","playSpin","playSpinWithVolume","playLaunch","playWinner","setVolume","Math","max","min","values","toggle","enable","disable","stopAll","pause","currentTime","isReady","isUnlocked","getAudioContextState","getAvailableSounds","keys","forceUnlock","soundService"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/services/soundService.js"],"sourcesContent":["class SoundService {\r\n  constructor() {\r\n    this.sounds = {};\r\n    this.isEnabled = true;\r\n    this.volume = 0.7;\r\n    this.isLoaded = false;\r\n    this.audioContext = null;\r\n    this.audioUnlocked = false;\r\n    this.userInteractionReceived = false;\r\n    \r\n    // Sound definitions with their corresponding files\r\n    this.soundFiles = {\r\n      bet: '/bet.wav',\r\n      countdown: '/decompte-temps.wav',\r\n      analyze: '/annalyse-bet.wav',\r\n      spin: '/tic-roue.wav',\r\n      launch: '/lancement-tirage-v3.wav',\r\n      launchV2: '/lancement-tirage-v2.wav',\r\n      launchV1: '/lancement-tirage.wav',\r\n      winner: '/gagnant.wav'\r\n    };\r\n    \r\n    this.init();\r\n    this.setupUserInteractionHandlers();\r\n  }\r\n  \r\n  setupUserInteractionHandlers() {\r\n    const unlockAudio = async () => {\r\n      if (this.audioUnlocked) return;\r\n      \r\n      //console.log('ðŸ”“ Attempting to unlock audio after user interaction');\r\n      \r\n      try {\r\n        // Create audio context if it doesn't exist\r\n        if (!this.audioContext) {\r\n          this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        }\r\n        \r\n        // Resume audio context if suspended\r\n        if (this.audioContext.state === 'suspended') {\r\n          await this.audioContext.resume();\r\n          //console.log('ðŸŽµ Audio context resumed');\r\n        }\r\n        \r\n        // Test audio playback\r\n        await this.testAudioPlayback();\r\n        \r\n        this.audioUnlocked = true;\r\n        this.userInteractionReceived = true;\r\n        //console.log('ðŸ”Š Audio successfully unlocked');\r\n        \r\n        // Remove event listeners after successful unlock\r\n        this.removeUserInteractionHandlers();\r\n        \r\n      } catch (error) {\r\n        console.warn('ðŸ”‡ Failed to unlock audio:', error);\r\n      }\r\n    };\r\n    \r\n    // List of events that can unlock audio\r\n    const events = ['touchstart', 'touchend', 'mousedown', 'mouseup', 'click', 'keydown'];\r\n    \r\n    this.unlockAudio = unlockAudio;\r\n    this.unlockEvents = events;\r\n    \r\n    // Add event listeners\r\n    events.forEach(event => {\r\n      document.addEventListener(event, unlockAudio, { once: false, passive: true });\r\n    });\r\n    \r\n    // Special handling for Telegram Mini App\r\n    if (window.Telegram?.WebApp) {\r\n      // Try to unlock on Telegram WebApp ready\r\n      window.Telegram.WebApp.ready(() => {\r\n        setTimeout(unlockAudio, 100);\r\n      });\r\n      \r\n      // Try to unlock when app becomes visible\r\n      document.addEventListener('visibilitychange', () => {\r\n        if (!document.hidden && !this.audioUnlocked) {\r\n          setTimeout(unlockAudio, 100);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  removeUserInteractionHandlers() {\r\n    if (this.unlockEvents && this.unlockAudio) {\r\n      this.unlockEvents.forEach(event => {\r\n        document.removeEventListener(event, this.unlockAudio);\r\n      });\r\n    }\r\n  }\r\n  \r\n  async testAudioPlayback() {\r\n    return new Promise((resolve, reject) => {\r\n      // Try to play a very short, silent audio to test if audio is unlocked\r\n      const testAudio = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQQAAAAAAPA/');\r\n      testAudio.volume = 0;\r\n      \r\n      const playPromise = testAudio.play();\r\n      \r\n      if (playPromise !== undefined) {\r\n        playPromise\r\n          .then(() => {\r\n            //console.log('ðŸŽµ Test audio playback successful');\r\n            resolve();\r\n          })\r\n          .catch((error) => {\r\n            console.warn('ðŸ”‡ Test audio playback failed:', error);\r\n            reject(error);\r\n          });\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n  \r\n  async init() {\r\n    try {\r\n      await this.loadSounds();\r\n      this.isLoaded = true;\r\n      //console.log('ðŸ”Š Sound service initialized successfully');\r\n    } catch (error) {\r\n      console.warn('ðŸ”‡ Sound service failed to initialize:', error);\r\n    }\r\n  }\r\n  \r\n  async loadSounds() {\r\n    const loadPromises = Object.entries(this.soundFiles).map(async ([key, path]) => {\r\n      try {\r\n        const audio = new Audio(path);\r\n        audio.preload = 'auto';\r\n        audio.volume = this.volume;\r\n        \r\n        return new Promise((resolve, reject) => {\r\n          audio.addEventListener('canplaythrough', () => {\r\n            this.sounds[key] = audio;\r\n            resolve();\r\n          });\r\n          \r\n          audio.addEventListener('error', (e) => {\r\n            console.warn(`Failed to load sound: ${key} (${path})`, e);\r\n            reject(e);\r\n          });\r\n          \r\n          // Start loading\r\n          audio.load();\r\n        });\r\n      } catch (error) {\r\n        console.warn(`Error loading sound ${key}:`, error);\r\n      }\r\n    });\r\n    \r\n    // Wait for all sounds to load (or fail)\r\n    await Promise.allSettled(loadPromises);\r\n  }\r\n  \r\n  async ensureAudioContext() {\r\n    if (!this.audioContext) {\r\n      try {\r\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      } catch (error) {\r\n        console.warn('Failed to create audio context:', error);\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    if (this.audioContext.state === 'suspended') {\r\n      try {\r\n        await this.audioContext.resume();\r\n        //console.log('ðŸŽµ Audio context resumed before playback');\r\n      } catch (error) {\r\n        console.warn('Failed to resume audio context:', error);\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  async play(soundName, options = {}) {\r\n    if (!this.isEnabled || !this.isLoaded) {\r\n      return;\r\n    }\r\n    \r\n    // Ensure audio context is ready\r\n    await this.ensureAudioContext();\r\n    \r\n    const sound = this.sounds[soundName];\r\n    if (!sound) {\r\n      console.warn(`Sound not found: ${soundName}`);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Clone the audio to allow multiple simultaneous plays\r\n      const audioClone = sound.cloneNode();\r\n      audioClone.volume = options.volume !== undefined ? options.volume : this.volume;\r\n      \r\n      // Play the sound\r\n      const playPromise = audioClone.play();\r\n      \r\n      if (playPromise !== undefined) {\r\n        playPromise.catch(error => {\r\n          if (error.name === 'NotAllowedError') {\r\n            console.warn(`ðŸ”‡ Audio play blocked by browser policy for ${soundName}. User interaction required.`);\r\n            // Try to unlock audio on next user interaction\r\n            if (!this.audioUnlocked) {\r\n              this.setupUserInteractionHandlers();\r\n            }\r\n          } else {\r\n            console.warn(`Error playing sound ${soundName}:`, error);\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Clean up after playing\r\n      audioClone.addEventListener('ended', () => {\r\n        audioClone.remove();\r\n      });\r\n      \r\n      return audioClone;\r\n    } catch (error) {\r\n      console.warn(`Error playing sound ${soundName}:`, error);\r\n    }\r\n  }\r\n  \r\n  // Specific game sound methods\r\n  playBet() {\r\n    this.play('bet', { volume: 0.5 });\r\n  }\r\n  \r\n  playCountdown() {\r\n    this.play('countdown', { volume: 0.6 });\r\n  }\r\n  \r\n  playAnalyze() {\r\n    this.play('analyze', { volume: 0.7 });\r\n  }\r\n  \r\n  playSpin() {\r\n    this.play('spin', { volume: 0.3 });\r\n  }\r\n  \r\n  // Play spin with variable volume for dramatic effect\r\n  playSpinWithVolume(volume = 0.3) {\r\n    this.play('spin', { volume });\r\n  }\r\n  \r\n  playLaunch() {\r\n    // Use the latest version by default\r\n    this.play('launch', { volume: 0.8 });\r\n  }\r\n  \r\n  playWinner() {\r\n    this.play('winner', { volume: 0.9 });\r\n  }\r\n  \r\n  // Volume and settings control\r\n  setVolume(volume) {\r\n    this.volume = Math.max(0, Math.min(1, volume));\r\n    Object.values(this.sounds).forEach(sound => {\r\n      sound.volume = this.volume;\r\n    });\r\n  }\r\n  \r\n  toggle() {\r\n    this.isEnabled = !this.isEnabled;\r\n    \r\n    // If enabling and not unlocked, try to unlock audio\r\n    if (this.isEnabled && !this.audioUnlocked) {\r\n      this.setupUserInteractionHandlers();\r\n    }\r\n    \r\n    return this.isEnabled;\r\n  }\r\n  \r\n  enable() {\r\n    this.isEnabled = true;\r\n    \r\n    // Try to unlock audio when enabling\r\n    if (!this.audioUnlocked) {\r\n      this.setupUserInteractionHandlers();\r\n    }\r\n  }\r\n  \r\n  disable() {\r\n    this.isEnabled = false;\r\n  }\r\n  \r\n  // Stop all sounds\r\n  stopAll() {\r\n    Object.values(this.sounds).forEach(sound => {\r\n      sound.pause();\r\n      sound.currentTime = 0;\r\n    });\r\n  }\r\n  \r\n  // Check if sounds are loaded\r\n  isReady() {\r\n    return this.isLoaded;\r\n  }\r\n  \r\n  // Check if audio is unlocked and ready to play\r\n  isUnlocked() {\r\n    return this.audioUnlocked;\r\n  }\r\n  \r\n  // Get audio context state\r\n  getAudioContextState() {\r\n    return this.audioContext ? this.audioContext.state : 'unavailable';\r\n  }\r\n  \r\n  // Get available sounds\r\n  getAvailableSounds() {\r\n    return Object.keys(this.soundFiles);\r\n  }\r\n  \r\n  // Force audio unlock (call this from user interaction handlers)\r\n  async forceUnlock() {\r\n    if (this.unlockAudio) {\r\n      await this.unlockAudio();\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst soundService = new SoundService();\r\n\r\nexport default soundService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}