{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adams\\\\OneDrive\\\\Desktop\\\\Work\\\\slotpot\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo, memo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport GameArea from './components/GameArea';\nimport WalletConnection from './components/WalletConnection';\nimport PlayerProfile from './components/PlayerProfile';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport Header from './components/Header';\nimport RecentWinners from './components/RecentWinners';\nimport SimpleCarousel from './components/SimpleCarousel';\nimport ReferralSystem from './components/ReferralSystem';\nimport UsernameInput from './components/UsernameInput';\nimport { TonIcon } from './components/IconComponents';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport useReferralAutoRegistration from './hooks/useReferralAutoRegistration';\nimport { DollarSign, User, Loader2, Trophy, Share2, Users, Target, Coins } from 'lucide-react';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\nimport { uiOptions } from './config/tonconnect';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\nfunction AppContent() {\n  _s();\n  var _contractState$timer2;\n  // Global referral auto-registration\n  useReferralAutoRegistration();\n\n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.1);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n\n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  const [isInWinnerState, setIsInWinnerState] = useState(false); // Blocks new winner broadcasts\n\n  // Username management\n  const [showUsernameInput, setShowUsernameInput] = useState(false);\n  const [currentUsername, setCurrentUsername] = useState('');\n\n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  // Note: carouselRef removed - now using Swiper component\n\n  // Bet loading state - tracks when user's bet is being processed\n  const [betLoadingState, setBetLoadingState] = useState({\n    isLoading: false,\n    betAmount: 0,\n    startTime: null\n  });\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n\n  // Check for stored username on app load\n  useEffect(() => {\n    const storedUsername = localStorage.getItem('slotpot_username');\n    if (storedUsername && storedUsername.trim().length >= 2) {\n      setCurrentUsername(storedUsername.trim());\n    }\n  }, []);\n\n  // Keep refs in sync with state\n  useEffect(() => {\n    gameBettorsRef.current = gameBettors;\n  }, [gameBettors]);\n  useEffect(() => {\n    contractWinnerRef.current = contractWinner;\n  }, [contractWinner]);\n  useEffect(() => {\n    showWinnerAnnouncementRef.current = showWinnerAnnouncement;\n  }, [showWinnerAnnouncement]);\n  useEffect(() => {\n    waitingForWinnerRef.current = waitingForWinner;\n  }, [waitingForWinner]);\n  useEffect(() => {\n    previousRoundBettorsRef.current = previousRoundBettors;\n  }, [previousRoundBettors]);\n  useEffect(() => {\n    timeRemainingRef.current = timeRemaining;\n  }, [timeRemaining]);\n  useEffect(() => {\n    showWinnerVisuallyRef.current = showWinnerVisually;\n  }, [showWinnerVisually]);\n  useEffect(() => {\n    isInWinnerStateRef.current = isInWinnerState;\n  }, [isInWinnerState]);\n\n  // Monitor when user's bet appears in gameBettors to stop loading state\n  useEffect(() => {\n    if (betLoadingState.isLoading && isConnected && address) {\n      // Check if user's bet appears in the current bettors\n      const userBet = gameBettors.find(bettor => (bettor.address === address || bettor.walletAddress === address) && Math.abs(bettor.amount - betLoadingState.betAmount) < 0.001 // Allow small floating point differences\n      );\n      if (userBet) {\n        console.log('✅ User bet detected in gameBettors, stopping loading state');\n        setBetLoadingState({\n          isLoading: false,\n          betAmount: 0,\n          startTime: null\n        });\n      }\n\n      // Also stop loading after 30 seconds as a safety timeout\n      const timeSinceStart = Date.now() - betLoadingState.startTime;\n      if (timeSinceStart > 30000) {\n        console.log('⏰ Bet loading timeout after 30 seconds');\n        setBetLoadingState({\n          isLoading: false,\n          betAmount: 0,\n          startTime: null\n        });\n      }\n    }\n  }, [gameBettors, betLoadingState, isConnected, address]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n\n    // Block winner broadcasts if already in winner state\n    if (isInWinnerStateRef.current) {\n      if (process.env.NODE_ENV === 'development') {\n        // console.log(`🚫 BLOCKED - Already in winner state, ignoring ${source}`);\n      }\n      return false;\n    }\n\n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      return false;\n    }\n\n    // Winner sound removed for performance\n\n    // Enter winner state to block future broadcasts\n    setIsInWinnerState(true);\n\n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n\n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n\n    // Start animation - winner visual will appear after animation lands on winner\n    setTimeout(() => {\n      setShowWinnerVisually(true);\n    }, 3000); // Give animation time to land properly\n\n    return true;\n  }, []);\n\n  // Telegram integration\n  const {\n    user,\n    hapticFeedback,\n    showAlert,\n    hasRealUserData\n  } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    var _rawAdminInfo$current;\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n\n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' ? ((_rawAdminInfo$current = rawAdminInfo.currentRound) === null || _rawAdminInfo$current === void 0 ? void 0 : _rawAdminInfo$current.roundNumber) || 0 : Number(rawAdminInfo.currentRound) || 0\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    var _contractState$curren;\n    if (!contractState) return contractState;\n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' ? ((_contractState$curren = contractState.currentRound) === null || _contractState$curren === void 0 ? void 0 : _contractState$curren.roundNumber) || 0 : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n\n  // Calculate user stats from gameBettors data - optimized with shallow comparison\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    return gameBettors.filter(bettor => bettor.address === address || bettor.walletAddress === address).reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors.length, address, isConnected]); // Optimized dependencies\n\n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n\n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n\n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    if (!liveJackpotValue) return 0;\n    return userBetTotal / liveJackpotValue * 100;\n  }, [userBetTotal, jackpotValue, gameBettors.length, isConnected, address]); // Optimized dependencies\n\n  // Use automation timer or fallback to UI timer - only sync if significant difference\n  useEffect(() => {\n    var _contractState$timer;\n    if (((_contractState$timer = contractState.timer) === null || _contractState$timer === void 0 ? void 0 : _contractState$timer.timeRemaining) !== undefined) {\n      setTimeRemaining(prev => {\n        const backendTime = contractState.timer.timeRemaining;\n        const timeDiff = Math.abs(prev - backendTime);\n\n        // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n        if (waitingForWinner || isInWinnerState) {\n          return prev;\n        }\n\n        // Only sync if difference is 5+ seconds or backend is significantly ahead\n        if (timeDiff >= 5 || backendTime > prev + 2) {\n          return backendTime;\n        }\n\n        // Keep local countdown running for smooth performance\n        return prev;\n      });\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [(_contractState$timer2 = contractState.timer) === null || _contractState$timer2 === void 0 ? void 0 : _contractState$timer2.timeRemaining, waitingForWinner, isInWinnerState]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n\n          // Play countdown sound for final 5 seconds (more dramatic)\n          if (newTime <= 5 && newTime > 0) {\n            // Countdown sound removed for performance\n          }\n\n          // When we reach 0, trigger \"analyzing bets\" state locally\n          if (newTime === 0) {\n            // Analyze sound removed for performance\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n          }\n          return newTime;\n        }\n\n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n    return () => {\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Note: Old animation useEffect removed - now using Swiper component for all carousel animations\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    // Socket connection established\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', timerData => {\n      // Timer update received\n\n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n\n      // Only update timeRemaining if it's significantly different (>5 seconds) or new round\n      setTimeRemaining(prev => {\n        const timeDiff = Math.abs(prev - newTimeRemaining);\n        const isNewRound = newRoundNumber !== currentRound;\n\n        // Only clear winner state when new round detected AND timer is significantly higher (real new round)\n        if (isNewRound && contractWinner && newTimeRemaining > 200) {\n          // New round detected - clearing winner state\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          setPreviousRoundBettors([]);\n        }\n\n        // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n        if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n          // Timer sync blocked - in analyzing/winner state\n          return prev;\n        }\n\n        // Sync if: new round, big difference (>5s), or timer reset (server > client)\n        if (isNewRound || timeDiff >= 5 || newTimeRemaining > prev + 2) {\n          // Timer synced\n          return newTimeRemaining;\n        }\n\n        // Otherwise keep local countdown running smoothly\n        return prev;\n      });\n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', roundData => {\n      // console.log('🎰 App: New round detected via socket:', roundData);\n      // console.log('🔓 Exiting winner state - new round started');\n\n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsInWinnerState(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n\n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n\n      // Note: Animation reset handled by Swiper component\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', gameState => {\n      var _gameState$timer;\n      // console.log('🎮 App: Game state update:', gameState);\n\n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = (_gameState$timer = gameState.timer) === null || _gameState$timer === void 0 ? void 0 : _gameState$timer.timeRemaining;\n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n\n          // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n          if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n            // console.log('⏰ GameState timer sync blocked - in analyzing/winner state');\n            return prev;\n          }\n\n          // Only sync if there's a significant difference (>=5s) or if backend is ahead\n          if (timeDiff >= 5 || backendTimeRemaining > prev + 2) {\n            // console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff >= 5 ? '(>=5s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n\n          // Keep local countdown running if difference is small\n          // console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        var _gameState$timer2, _gameState$timer3;\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n\n        // Check if this is a new round with active timer - this means new round started\n        const isNewRound = roundNumber !== currentRound;\n        const hasActiveTimer = ((_gameState$timer2 = gameState.timer) === null || _gameState$timer2 === void 0 ? void 0 : _gameState$timer2.isActive) || ((_gameState$timer3 = gameState.timer) === null || _gameState$timer3 === void 0 ? void 0 : _gameState$timer3.timeRemaining) > 60;\n        if (isNewRound && hasActiveTimer && isInWinnerStateRef.current) {\n          // console.log('🔄 GameState detected NEW ROUND with active timer - clearing winner state');\n          // console.log('🔓 Exiting winner state - new round started via gameState');\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          // Don't clear previousRoundBettors immediately - let carousel finish its animation\n          setTimeout(() => {\n            // console.log('🔄 Delayed clearing of previous round bettors');\n            setPreviousRoundBettors([]);\n          }, 2000); // Give carousel time to finish\n          winnerCoordinator.reset();\n        }\n        setCurrentRound(roundNumber);\n      }\n\n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          // console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n\n          // Enhance bettors with proper usernames before storing\n          const enhancedBettors = gameBettorsRef.current.map(bettor => {\n            var _bettor$address, _bettor$address2;\n            return {\n              ...bettor,\n              username: bettor.username || bettor.displayName || `Player_${(_bettor$address = bettor.address) === null || _bettor$address === void 0 ? void 0 : _bettor$address.slice(-4)}`,\n              displayName: bettor.displayName || bettor.username || `Player_${(_bettor$address2 = bettor.address) === null || _bettor$address2 === void 0 ? void 0 : _bettor$address2.slice(-4)}`\n            };\n          });\n          setPreviousRoundBettors(enhancedBettors);\n        }\n        setWaitingForWinner(gameState.isWaitingForWinner);\n\n        // If waitingForWinner becomes false AND we have a new round with active timer, reset winner state\n        if (!gameState.isWaitingForWinner && isInWinnerStateRef.current) {\n          var _gameState$timer4, _gameState$timer5;\n          const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber ? gameState.currentRound.roundNumber : gameState.currentRound;\n          const isNewRound = roundNumber && roundNumber !== currentRound;\n          const hasActiveTimer = ((_gameState$timer4 = gameState.timer) === null || _gameState$timer4 === void 0 ? void 0 : _gameState$timer4.isActive) || ((_gameState$timer5 = gameState.timer) === null || _gameState$timer5 === void 0 ? void 0 : _gameState$timer5.timeRemaining) > 60;\n          if (isNewRound && hasActiveTimer) {\n            // console.log('🔄 waitingForWinner false + new round + active timer = new round started - clearing winner state');\n            // console.log('🔓 Exiting winner state - new round confirmed');\n            setIsInWinnerState(false);\n            setContractWinner(null);\n            setShowWinnerAnnouncement(false);\n            setShowWinnerVisually(false);\n            setPostWinnerLoading(false);\n            setIsAnyWinnerDisplayActive(false);\n            // Don't clear previousRoundBettors immediately - let carousel finish its animation\n            setTimeout(() => {\n              // console.log('🔄 Delayed clearing of previous round bettors (waitingForWinner)');\n              setPreviousRoundBettors([]);\n            }, 2000); // Give carousel time to finish\n            winnerCoordinator.reset();\n          } else {\n            // console.log('⏳ waitingForWinner became false, but keeping winner state (no new round detected)');\n          }\n        }\n      }\n\n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          // console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n\n          // Play bet sound when new bettor joins (if count increased)\n          if (gameState.bettors.length > gameBettorsRef.current.length) {\n            // Bet sound removed for performance\n          }\n\n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n\n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n\n          // Enhance bettors with proper usernames before storing\n          const enhancedBettors = gameState.bettors.map(bettor => {\n            var _bettor$address3, _bettor$address4;\n            return {\n              ...bettor,\n              username: bettor.username || bettor.displayName || `Player_${(_bettor$address3 = bettor.address) === null || _bettor$address3 === void 0 ? void 0 : _bettor$address3.slice(-4)}`,\n              displayName: bettor.displayName || bettor.username || `Player_${(_bettor$address4 = bettor.address) === null || _bettor$address4 === void 0 ? void 0 : _bettor$address4.slice(-4)}`\n            };\n          });\n          setPreviousRoundBettors(enhancedBettors);\n        }\n        setGameBettors(gameState.bettors);\n      }\n\n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', gameData => {\n      //console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', data => {\n      // Bet sound removed for performance\n\n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', data => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n\n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n\n      // Don't reset winner state just because waitingForWinner changed\n      // Only reset when we get explicit newRound/roundReset events\n      setWaitingForWinner(isWaiting);\n\n      // Log but don't auto-reset winner state\n      if (!isWaiting && isInWinnerStateRef.current) {\n        console.log('⏳ waitingForWinner event became false, but keeping winner state until explicit new round');\n      }\n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', winnerData => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', winnerData => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n\n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', resetData => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      console.log('🔓 Exiting winner state - round reset');\n\n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n\n      // Clear ALL winner states since this is a fresh timer\n      setIsInWinnerState(false);\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n\n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      // Don't clear previousRoundBettors immediately on reset - let any ongoing animation finish\n      setTimeout(() => {\n        console.log('🔄 Delayed clearing of previous round bettors (round reset)');\n        setPreviousRoundBettors([]);\n      }, 1000);\n\n      // Note: Animation reset handled by Swiper component\n    });\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = e => {\n    const inputValue = e.target.value;\n\n    // Allow empty input or numbers with decimal points (both . and ,)\n    if (inputValue === '' || inputValue === '.' || inputValue === ',' || /^\\d*[.,]?\\d*$/.test(inputValue)) {\n      // Convert comma to period for consistency\n      const normalizedValue = inputValue.replace(',', '.');\n\n      // For empty or just \".\" input, keep the raw value but show comma if user typed comma\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(inputValue); // Keep original input (might be comma)\n        return;\n      }\n\n      // For valid numbers, check limits but preserve decimal typing\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(normalizedValue); // Use normalized value to ensure consistency\n      }\n    }\n  };\n  const handleTabChange = tab => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    // Convert comma to period before parsing for validation\n    const normalizedBetAmount = betAmount.toString().replace(',', '.');\n    const numericBetAmount = parseFloat(normalizedBetAmount);\n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n    try {\n      hapticFeedback('medium');\n\n      // Start bet loading state\n      setBetLoadingState({\n        isLoading: true,\n        betAmount: numericBetAmount,\n        startTime: Date.now()\n      });\n      await placeBet(numericBetAmount);\n\n      // Bet sound removed for performance\n      console.log('✅ Bet placed successfully');\n\n      // Reset bet amount after successful bet\n      setBetAmount(0.1);\n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n\n      // Stop loading state on error\n      setBetLoadingState({\n        isLoading: false,\n        betAmount: 0,\n        startTime: null\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: activeTab === 'profile' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile-container\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            currentUsername: currentUsername,\n            onShowUsernameInput: () => setShowUsernameInput(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(PlayerProfile, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 15\n        }, this) : activeTab === 'referrals' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"referrals-container\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            currentUsername: currentUsername,\n            onShowUsernameInput: () => setShowUsernameInput(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ReferralSystem, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jackpot-container\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            currentUsername: currentUsername,\n            onShowUsernameInput: () => setShowUsernameInput(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"betting-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bet-input-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"bet-amount-input\",\n                  value: betAmount,\n                  onChange: handleBetChange,\n                  placeholder: \"0.000\",\n                  inputMode: \"decimal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 765,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"bet-increment-btn\",\n                  onClick: () => setBetAmount(prev => {\n                    const currentValue = parseFloat(prev) || 0;\n                    return Math.min(currentValue + 0.1, 10).toFixed(1);\n                  }),\n                  children: \"+0.1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 773,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 764,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"balance-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"balance-label\",\n                  children: \"Balance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 783,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"balance-amount\",\n                  children: [isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000', /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"balance-symbol\",\n                    children: \"TON\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 786,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 784,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 782,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"bet-button\",\n                onClick: handlePlaceBet,\n                disabled: isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement,\n                children: contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' : isPlacingBet ? 'Betting...' : 'Bet'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stats-grid four-cards\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-card jackpot-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-value\",\n                  children: [/*#__PURE__*/_jsxDEV(TonIcon, {\n                    size: 14,\n                    className: \"wager-ton-icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 804,\n                    columnNumber: 19\n                  }, this), jackpotValue.toFixed(3)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Jackpot Value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 807,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-value\",\n                  children: [/*#__PURE__*/_jsxDEV(TonIcon, {\n                    size: 14,\n                    className: \"wager-ton-icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 811,\n                    columnNumber: 19\n                  }, this), userBetTotal.toFixed(3)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 810,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Your Wager\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 814,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 809,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-card chance-stat\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-value\",\n                  children: [userWinChance.toFixed(2), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 817,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Your Chance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 818,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 816,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-value\",\n                  children: [Math.floor((timeRemaining || 0) / 60), \":\", ((timeRemaining || 0) % 60).toString().padStart(2, '0')]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 821,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Time Remaining\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 824,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 820,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 801,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"players-carousel-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: `carousel-header ${timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? 'analyzing' : showWinnerVisually ? 'winner' : ''}`,\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually ? \"🔍 Analyzing Bets...\" : showWinnerVisually && contractWinner ? `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` : `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 834,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(SimpleCarousel, {\n                players: (() => {\n                  // Same data logic as before\n                  const bettorsToShow = contractWinner || waitingForWinner ? previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors : gameBettors.length > 0 ? gameBettors : [];\n\n                  // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                  return [...bettorsToShow, ...Array.from({\n                    length: Math.max(0, 6 - bettorsToShow.length)\n                  }, () => null)];\n                })(),\n                contractWinner: contractWinner,\n                isSpinning: timeRemaining === 0 && waitingForWinner || contractWinner && !showWinnerVisually,\n                onSpinComplete: () => {\n                  console.log('🎯 Winner animation completed in SimpleCarousel!');\n                  console.log('🔄 Carousel finished - now safe to clear winner state in future');\n                  // Winner is already set via showWinnerVisually\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 845,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bets-deflate-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bets-deflate-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Current Round Bets\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 871,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"round-info\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"#\", currentRound]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 873,\n                    columnNumber: 15\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 872,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 870,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bets-deflate-list\",\n                children: [(() => {\n                  const bettorsToShow = contractWinner || waitingForWinner ? previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors : gameBettors.length > 0 ? gameBettors : [];\n                  return bettorsToShow.map((bettor, index) => {\n                    const betAmount = parseFloat(bettor.amount || 0);\n                    const currentJackpot = parseFloat(jackpotValue || 0);\n                    const chance = currentJackpot > 0 ? (betAmount / currentJackpot * 100).toFixed(2) : '0.00';\n                    const usdValue = (betAmount * 2.5).toFixed(1); // Approximate USD value\n\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"bet-deflate-card\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"bet-deflate-avatar\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"avatar-icon\",\n                          children: /*#__PURE__*/_jsxDEV(Users, {\n                            size: 20\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 893,\n                            columnNumber: 25\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 892,\n                          columnNumber: 23\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"avatar-count\",\n                          children: \"1\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 895,\n                          columnNumber: 23\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 891,\n                        columnNumber: 21\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"bet-deflate-info\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"bet-deflate-username\",\n                          children: bettor.username || bettor.displayName || bettor.winner || `Player_${bettor.address.slice(-4)}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 899,\n                          columnNumber: 23\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"bet-deflate-amount\",\n                          children: [/*#__PURE__*/_jsxDEV(TonIcon, {\n                            size: 16,\n                            className: \"bet-deflate-ton-icon\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 903,\n                            columnNumber: 25\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: betAmount.toFixed(3)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 904,\n                            columnNumber: 25\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"bet-deflate-usd\",\n                            children: [\"~$\", usdValue]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 905,\n                            columnNumber: 25\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 902,\n                          columnNumber: 23\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 898,\n                        columnNumber: 21\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"bet-deflate-chance\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"chance-label\",\n                          children: [/*#__PURE__*/_jsxDEV(Target, {\n                            size: 12\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 911,\n                            columnNumber: 25\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: \"Chance\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 912,\n                            columnNumber: 25\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 910,\n                          columnNumber: 23\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"chance-value\",\n                          children: [chance, \"%\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 914,\n                          columnNumber: 23\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 909,\n                        columnNumber: 21\n                      }, this)]\n                    }, `${bettor.address}-${index}`, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 890,\n                      columnNumber: 19\n                    }, this);\n                  });\n                })(), (() => {\n                  const bettorsToShow = contractWinner || waitingForWinner ? previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors : gameBettors.length > 0 ? gameBettors : [];\n                  if (bettorsToShow.length === 0) {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"bet-deflate-empty\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"empty-icon\",\n                        children: /*#__PURE__*/_jsxDEV(Coins, {\n                          size: 32\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 930,\n                          columnNumber: 23\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 929,\n                        columnNumber: 21\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"empty-text\",\n                        children: \"No bets yet\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 932,\n                        columnNumber: 21\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"empty-subtext\",\n                        children: \"Be the first to place a bet!\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 933,\n                        columnNumber: 21\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 928,\n                      columnNumber: 19\n                    }, this);\n                  }\n                  return null;\n                })()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 877,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 869,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(RecentWinners, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 943,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mobile-navbar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"navbar-items\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `navbar-item ${activeTab === 'jackpot' ? 'active' : ''}`,\n            onClick: () => setActiveTab('jackpot'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-icon\",\n              children: /*#__PURE__*/_jsxDEV(DollarSign, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 957,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-label\",\n              children: \"Jackpot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 958,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `navbar-item ${activeTab === 'profile' ? 'active' : ''}`,\n            onClick: () => setActiveTab('profile'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-icon\",\n              children: /*#__PURE__*/_jsxDEV(User, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 965,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 965,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-label\",\n              children: \"Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 966,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 961,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `navbar-item ${activeTab === 'referrals' ? 'active' : ''}`,\n            onClick: () => setActiveTab('referrals'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-icon\",\n              children: /*#__PURE__*/_jsxDEV(Share2, {\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 973,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 973,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar-label\",\n              children: \"Referrals\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 974,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 952,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 9\n    }, this), isLoadingContract && !contractWinner && !showWinnerAnnouncement && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: /*#__PURE__*/_jsxDEV(Loader2, {\n          size: 24,\n          className: \"animate-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 44\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 983,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading contract data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 982,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinnerBroadcast, {\n      socketService: socketService\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UsernameInput, {\n      isVisible: showUsernameInput,\n      currentUsername: currentUsername,\n      onUsernameSet: username => {\n        setCurrentUsername(username);\n        setShowUsernameInput(false);\n        // Trigger a page reload to update the username everywhere\n        window.location.reload();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 992,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 735,\n    columnNumber: 5\n  }, this);\n}\n\n// Main App component with TON Connect Provider\n_s(AppContent, \"gfaeLhTv9erllVH9MIqHpNoPGYU=\", false, function () {\n  return [useReferralAutoRegistration, useTelegramWebApp, useJackpotContract];\n});\n_c = AppContent;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(TonConnectUIProvider, {\n    manifestUrl: manifestUrl,\n    uiPreferences: uiOptions.uiPreferences,\n    language: uiOptions.language,\n    restoreConnection: uiOptions.restoreConnection,\n    actionsConfiguration: uiOptions.actionsConfiguration,\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1016,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1009,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","memo","TonConnectUIProvider","GameArea","WalletConnection","PlayerProfile","WinnerBroadcast","Header","RecentWinners","SimpleCarousel","ReferralSystem","UsernameInput","TonIcon","useTelegramWebApp","useJackpotContract","useReferralAutoRegistration","DollarSign","User","Loader2","Trophy","Share2","Users","Target","Coins","socketService","winnerCoordinator","uiOptions","jsxDEV","_jsxDEV","Fragment","_Fragment","manifestUrl","AppContent","_s","_contractState$timer2","currentRound","setCurrentRound","timeRemaining","setTimeRemaining","activeTab","setActiveTab","betAmount","setBetAmount","showWinnerAnnouncement","setShowWinnerAnnouncement","waitingForWinner","setWaitingForWinner","contractWinner","setContractWinner","postWinnerLoading","setPostWinnerLoading","setIsAnyWinnerDisplayActive","showWinnerVisually","setShowWinnerVisually","isInWinnerState","setIsInWinnerState","showUsernameInput","setShowUsernameInput","currentUsername","setCurrentUsername","gameBettors","setGameBettors","previousRoundBettors","setPreviousRoundBettors","slotSpinning","setSlotSpinning","betLoadingState","setBetLoadingState","isLoading","startTime","gameBettorsRef","contractWinnerRef","showWinnerAnnouncementRef","lastWinnerTimestampRef","waitingForWinnerRef","previousRoundBettorsRef","timeRemainingRef","showWinnerVisuallyRef","isInWinnerStateRef","storedUsername","localStorage","getItem","trim","length","current","isConnected","address","userBet","find","bettor","walletAddress","Math","abs","amount","console","log","timeSinceStart","Date","now","showWinnerAnnouncements","winnerData","source","winnerTimestamp","timestamp","process","env","NODE_ENV","shouldBlock","setActive","setTimeout","user","hapticFeedback","showAlert","hasRealUserData","contractState","userStats","adminInfo","rawAdminInfo","isLoadingContract","isPlacingBet","placeBet","_rawAdminInfo$current","isAutoManaged","roundDuration","minBetsToEnd","timerActive","Boolean","Number","roundNumber","safeContractState","_contractState$curren","timer","isActive","timeElapsed","timerExpired","undefined","jackpotValue","totalJackpot","isLive","userBetTotal","filter","reduce","total","userWinChance","currentRoundTotal","liveJackpotValue","_contractState$timer","prev","backendTime","timeDiff","countdown","setInterval","newTime","clearInterval","connect","on","timerData","warn","newTimeRemaining","newRoundNumber","isNewRound","roundData","reset","gameState","_gameState$timer","backendTimeRemaining","_gameState$timer2","_gameState$timer3","hasActiveTimer","isWaitingForWinner","enhancedBettors","map","_bettor$address","_bettor$address2","username","displayName","slice","_gameState$timer4","_gameState$timer5","bettors","Array","isArray","_bettor$address3","_bettor$address4","winnerAnnouncement","gameData","data","isWaiting","message","resetData","off","disconnect","handleBetChange","e","inputValue","target","value","test","normalizedValue","replace","numericValue","parseFloat","isNaN","handleTabChange","tab","handlePlaceBet","normalizedBetAmount","toString","numericBetAmount","toFixed","error","className","children","onShowUsernameInput","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","inputMode","onClick","currentValue","min","userBalance","disabled","size","floor","padStart","winner","players","bettorsToShow","from","max","isSpinning","onSpinComplete","index","currentJackpot","chance","usdValue","isVisible","onUsernameSet","window","location","reload","_c","App","uiPreferences","language","restoreConnection","actionsConfiguration","_c2","$RefreshReg$"],"sources":["C:/Users/adams/OneDrive/Desktop/Work/slotpot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo, memo } from 'react';\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport GameArea from './components/GameArea';\nimport WalletConnection from './components/WalletConnection';\nimport PlayerProfile from './components/PlayerProfile';\nimport WinnerBroadcast from './components/WinnerBroadcast';\nimport Header from './components/Header';\nimport RecentWinners from './components/RecentWinners';\nimport SimpleCarousel from './components/SimpleCarousel';\nimport ReferralSystem from './components/ReferralSystem';\nimport UsernameInput from './components/UsernameInput';\n\nimport { TonIcon } from './components/IconComponents';\nimport useTelegramWebApp from './hooks/useTelegramWebApp';\nimport useJackpotContract from './hooks/useJackpotContract';\nimport useReferralAutoRegistration from './hooks/useReferralAutoRegistration';\nimport { DollarSign, User, Loader2, Trophy, Share2, Users, Target, Coins } from 'lucide-react';\nimport socketService from './services/socketService';\nimport winnerCoordinator from './services/winnerCoordinator';\n\nimport { uiOptions } from './config/tonconnect';\nimport './App.css';\nimport './components/Header.css';\n\n// TON Connect manifest URL - use remote manifest to avoid 500 errors\nconst manifestUrl = \"https://raw.githubusercontent.com/Vodka2134156/kzsks/main/manifest.json\";\n\nfunction AppContent() {\n  // Global referral auto-registration\n  useReferralAutoRegistration();\n  \n  // Local UI state\n  const [currentRound, setCurrentRound] = useState(53408);\n  const [timeRemaining, setTimeRemaining] = useState(30);\n  const [activeTab, setActiveTab] = useState('jackpot');\n  const [betAmount, setBetAmount] = useState(0.1);\n  const [showWinnerAnnouncement, setShowWinnerAnnouncement] = useState(false);\n  \n  // Winner state management (moved from GameArea.js)\n  const [waitingForWinner, setWaitingForWinner] = useState(false);\n  const [contractWinner, setContractWinner] = useState(null);\n  const [postWinnerLoading, setPostWinnerLoading] = useState(false);\n  const [, setIsAnyWinnerDisplayActive] = useState(false);\n  const [showWinnerVisually, setShowWinnerVisually] = useState(false); // Controls when winner card appears\n  const [isInWinnerState, setIsInWinnerState] = useState(false); // Blocks new winner broadcasts\n  \n  // Username management\n  const [showUsernameInput, setShowUsernameInput] = useState(false);\n  const [currentUsername, setCurrentUsername] = useState('');\n  \n  // Bettors state (managed centrally to avoid duplicates)\n  const [gameBettors, setGameBettors] = useState([]);\n  const [previousRoundBettors, setPreviousRoundBettors] = useState([]); // Store bettors for winner matching\n  const [slotSpinning, setSlotSpinning] = useState(false);\n  // Note: carouselRef removed - now using Swiper component\n  \n  // Bet loading state - tracks when user's bet is being processed\n  const [betLoadingState, setBetLoadingState] = useState({\n    isLoading: false,\n    betAmount: 0,\n    startTime: null\n  });\n\n  // Refs to avoid stale closures in socket handlers\n  const gameBettorsRef = useRef([]);\n  const contractWinnerRef = useRef(null);\n  const showWinnerAnnouncementRef = useRef(false);\n  const lastWinnerTimestampRef = useRef(null);\n  const waitingForWinnerRef = useRef(false);\n  const previousRoundBettorsRef = useRef([]);\n  const timeRemainingRef = useRef(30);\n  const showWinnerVisuallyRef = useRef(false);\n  const isInWinnerStateRef = useRef(false);\n  \n  // Check for stored username on app load\n  useEffect(() => {\n    const storedUsername = localStorage.getItem('slotpot_username');\n    if (storedUsername && storedUsername.trim().length >= 2) {\n      setCurrentUsername(storedUsername.trim());\n    }\n  }, []);\n\n  // Keep refs in sync with state\n  useEffect(() => { gameBettorsRef.current = gameBettors; }, [gameBettors]);\n  useEffect(() => { \n    contractWinnerRef.current = contractWinner; \n  }, [contractWinner]);\n  useEffect(() => { showWinnerAnnouncementRef.current = showWinnerAnnouncement; }, [showWinnerAnnouncement]);\n  useEffect(() => { waitingForWinnerRef.current = waitingForWinner; }, [waitingForWinner]);\n  useEffect(() => { previousRoundBettorsRef.current = previousRoundBettors; }, [previousRoundBettors]);\n  useEffect(() => { timeRemainingRef.current = timeRemaining; }, [timeRemaining]);\n  useEffect(() => { showWinnerVisuallyRef.current = showWinnerVisually; }, [showWinnerVisually]);\n  useEffect(() => { isInWinnerStateRef.current = isInWinnerState; }, [isInWinnerState]);\n\n  // Monitor when user's bet appears in gameBettors to stop loading state\n  useEffect(() => {\n    if (betLoadingState.isLoading && isConnected && address) {\n      // Check if user's bet appears in the current bettors\n      const userBet = gameBettors.find(bettor => \n        (bettor.address === address || bettor.walletAddress === address) &&\n        Math.abs(bettor.amount - betLoadingState.betAmount) < 0.001 // Allow small floating point differences\n      );\n      \n      if (userBet) {\n        console.log('✅ User bet detected in gameBettors, stopping loading state');\n        setBetLoadingState({\n          isLoading: false,\n          betAmount: 0,\n          startTime: null\n        });\n      }\n      \n      // Also stop loading after 30 seconds as a safety timeout\n      const timeSinceStart = Date.now() - betLoadingState.startTime;\n      if (timeSinceStart > 30000) {\n        console.log('⏰ Bet loading timeout after 30 seconds');\n        setBetLoadingState({\n          isLoading: false,\n          betAmount: 0,\n          startTime: null\n        });\n      }\n    }\n  }, [gameBettors, betLoadingState, isConnected, address]);\n\n  // Centralized winner announcement manager\n  const showWinnerAnnouncements = useCallback((winnerData, source = 'unknown') => {\n    const winnerTimestamp = winnerData.timestamp;\n    \n    // Block winner broadcasts if already in winner state\n    if (isInWinnerStateRef.current) {\n      if (process.env.NODE_ENV === 'development') {\n        // console.log(`🚫 BLOCKED - Already in winner state, ignoring ${source}`);\n      }\n      return false;\n    }\n    \n    // Use coordinator to check if should block (pass full winner data for better duplicate detection)\n    if (winnerCoordinator.shouldBlock(winnerTimestamp, winnerData)) {\n      return false;\n    }\n    \n    // Winner sound removed for performance\n    \n    // Enter winner state to block future broadcasts\n    setIsInWinnerState(true);\n    \n    // Set coordination flag via coordinator (pass full winner data)\n    winnerCoordinator.setActive(true, winnerTimestamp, winnerData);\n    setIsAnyWinnerDisplayActive(true);\n    lastWinnerTimestampRef.current = winnerTimestamp;\n    \n    // Show App.js winner notification\n    setContractWinner(winnerData);\n    setShowWinnerAnnouncement(true);\n    setWaitingForWinner(false);\n    \n    // Start animation - winner visual will appear after animation lands on winner\n    setTimeout(() => {\n      setShowWinnerVisually(true);\n    }, 3000); // Give animation time to land properly\n    \n    return true;\n  }, []);\n\n  // Telegram integration\n  const { user, hapticFeedback, showAlert, hasRealUserData } = useTelegramWebApp();\n\n  // Smart contract integration\n  const {\n    contractState,\n    userStats,\n    adminInfo: rawAdminInfo,\n    isLoadingContract,\n    isPlacingBet,\n    placeBet,\n    isConnected,\n    address,\n  } = useJackpotContract();\n\n  // SAFETY: Ensure adminInfo is always properly structured and never an object that could be rendered\n  const adminInfo = useMemo(() => {\n    if (!rawAdminInfo || typeof rawAdminInfo !== 'object') {\n      return {\n        isAutoManaged: false,\n        roundDuration: 300,\n        minBetsToEnd: 1,\n        timerActive: false,\n        timeRemaining: 0\n      };\n    }\n    \n    // Extract only primitive values to prevent accidental object rendering\n    return {\n      isAutoManaged: Boolean(rawAdminInfo.isAutoManaged),\n      roundDuration: Number(rawAdminInfo.roundDuration) || 300,\n      minBetsToEnd: Number(rawAdminInfo.minBetsToEnd) || 1,\n      timerActive: Boolean(rawAdminInfo.timerActive),\n      timeRemaining: Number(rawAdminInfo.timeRemaining) || 0,\n      // Ensure currentRound is always a number, never an object\n      currentRound: typeof rawAdminInfo.currentRound === 'object' \n        ? (rawAdminInfo.currentRound?.roundNumber || 0)\n        : (Number(rawAdminInfo.currentRound) || 0)\n    };\n  }, [rawAdminInfo]);\n\n  // SAFETY: Ensure contractState timer properties are never objects that could be accidentally rendered\n  const safeContractState = useMemo(() => {\n    if (!contractState) return contractState;\n    \n    return {\n      ...contractState,\n      // Ensure timer object properties are always primitives\n      timer: contractState.timer ? {\n        isActive: Boolean(contractState.timer.isActive),\n        timeRemaining: Number(contractState.timer.timeRemaining) || 0,\n        timeElapsed: Number(contractState.timer.timeElapsed) || 0,\n        roundNumber: Number(contractState.timer.roundNumber) || 0,\n        timerExpired: Boolean(contractState.timer.timerExpired)\n      } : undefined,\n      // Ensure currentRound is always a number if it exists\n      currentRound: typeof contractState.currentRound === 'object' \n        ? (contractState.currentRound?.roundNumber || 0)\n        : contractState.currentRound\n    };\n  }, [contractState]);\n\n  // Use real contract data or fallback to simulated data\n  const jackpotValue = contractState.totalJackpot;\n  const isLive = contractState.isActive;\n  \n  // Calculate user stats from gameBettors data - optimized with shallow comparison\n  const userBetTotal = useMemo(() => {\n    if (!isConnected || !address || !gameBettors.length) return 0;\n    \n    return gameBettors\n      .filter(bettor => \n        bettor.address === address || \n        bettor.walletAddress === address\n      )\n      .reduce((total, bettor) => total + (bettor.amount || 0), 0);\n  }, [gameBettors.length, address, isConnected]); // Optimized dependencies\n  \n  const userWinChance = useMemo(() => {\n    if (!isConnected || !address || userBetTotal === 0) return 0;\n    \n    // Calculate current round total from gameBettors for immediate updates\n    const currentRoundTotal = gameBettors.reduce((total, bettor) => total + (bettor.amount || 0), 0);\n    \n    // Use the live total from current bettors, fallback to contract jackpot value\n    const liveJackpotValue = currentRoundTotal > 0 ? currentRoundTotal : jackpotValue;\n    \n    if (!liveJackpotValue) return 0;\n    \n    return (userBetTotal / liveJackpotValue) * 100;\n  }, [userBetTotal, jackpotValue, gameBettors.length, isConnected, address]); // Optimized dependencies\n\n  // Use automation timer or fallback to UI timer - only sync if significant difference\n  useEffect(() => {\n    if (contractState.timer?.timeRemaining !== undefined) {\n      setTimeRemaining(prev => {\n        const backendTime = contractState.timer.timeRemaining;\n        const timeDiff = Math.abs(prev - backendTime);\n        \n        // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n        if (waitingForWinner || isInWinnerState) {\n          return prev;\n        }\n        \n        // Only sync if difference is 5+ seconds or backend is significantly ahead\n        if (timeDiff >= 5 || backendTime > prev + 2) {\n          return backendTime;\n        }\n        \n        // Keep local countdown running for smooth performance\n        return prev;\n      });\n    } else {\n      setTimeRemaining(30);\n    }\n  }, [contractState.timer?.timeRemaining, waitingForWinner, isInWinnerState]);\n\n  // Local countdown timer (runs between backend updates)\n  useEffect(() => {\n    // Only run countdown when game is live\n    if (!isLive) return;\n\n    const countdown = setInterval(() => {\n      setTimeRemaining(prev => {\n        // Continue countdown even at 0 but don't go negative\n        if (prev > 0) {\n          const newTime = prev - 1;\n          \n          // Play countdown sound for final 5 seconds (more dramatic)\n          if (newTime <= 5 && newTime > 0) {\n            // Countdown sound removed for performance\n          }\n        \n          // When we reach 0, trigger \"analyzing bets\" state locally\n        if (newTime === 0) {\n            // Analyze sound removed for performance\n            setWaitingForWinner(true); // This will show \"Analyzing Bets...\"\n        }\n        \n        return newTime;\n        }\n        \n        // Stay at 0 once we reach it (don't go negative)\n        return 0;\n      });\n    }, 1000);\n\n    return () => {\n      clearInterval(countdown);\n    };\n  }, [isLive]); // Restart when isLive changes\n\n  // Note: Old animation useEffect removed - now using Swiper component for all carousel animations\n\n  // Socket integration for immediate synchronization - SINGLE CONNECTION POINT\n  useEffect(() => {\n    // Socket connection established\n    socketService.connect();\n\n    // Listen for timer updates from socket\n    socketService.on('timer', (timerData) => {\n      // Timer update received\n      \n      // SAFETY: Ensure timerData exists and has required properties\n      if (!timerData || typeof timerData !== 'object') {\n        console.warn('⚠️ Invalid timer data received in App:', timerData);\n        return;\n      }\n      \n      const newTimeRemaining = typeof timerData.timeRemaining === 'number' ? timerData.timeRemaining : timeRemaining;\n      const newRoundNumber = typeof timerData.roundNumber === 'number' ? timerData.roundNumber : currentRound;\n      \n              // Only update timeRemaining if it's significantly different (>5 seconds) or new round\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - newTimeRemaining);\n          const isNewRound = newRoundNumber !== currentRound;\n          \n          // Only clear winner state when new round detected AND timer is significantly higher (real new round)\n          if (isNewRound && contractWinner && newTimeRemaining > 200) {\n                    // New round detected - clearing winner state\n            setIsInWinnerState(false);\n            setContractWinner(null);\n            setShowWinnerAnnouncement(false);\n            setShowWinnerVisually(false);\n            setPostWinnerLoading(false);\n            setIsAnyWinnerDisplayActive(false);\n            setPreviousRoundBettors([]);\n          }\n          \n          // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n          if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n            // Timer sync blocked - in analyzing/winner state\n            return prev;\n          }\n          \n          // Sync if: new round, big difference (>5s), or timer reset (server > client)\n          if (isNewRound || timeDiff >= 5 || newTimeRemaining > prev + 2) {\n            // Timer synced\n            return newTimeRemaining;\n          }\n          \n          // Otherwise keep local countdown running smoothly\n          return prev;\n        });\n      \n      if (newRoundNumber && newRoundNumber !== currentRound) {\n        setCurrentRound(newRoundNumber);\n      }\n      // Note: Contract state timer will be updated via fullGameUpdate/contractStateUpdate events\n    });\n\n    // Listen for new round events\n    socketService.on('newRound', (roundData) => {\n      // console.log('🎰 App: New round detected via socket:', roundData);\n      // console.log('🔓 Exiting winner state - new round started');\n      \n      setTimeRemaining(roundData.timeRemaining);\n      setCurrentRound(roundData.roundNumber);\n      setIsInWinnerState(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      lastWinnerTimestampRef.current = null; // Clear duplicate protection for new round\n      \n      // Clear ALL winner highlighting for new round\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPreviousRoundBettors([]);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(false);\n      \n      // Note: Animation reset handled by Swiper component\n    });\n\n    // Listen for game state updates\n    socketService.on('gameState', (gameState) => {\n      // console.log('🎮 App: Game state update:', gameState);\n      \n      // Priority: Use timer.timeRemaining ONLY (as user specified)\n      const backendTimeRemaining = gameState.timer?.timeRemaining;\n      \n      if (backendTimeRemaining !== undefined) {\n        setTimeRemaining(prev => {\n          const timeDiff = Math.abs(prev - backendTimeRemaining);\n          \n          // Don't sync timer if we're analyzing bets or waiting for winner to avoid bugs\n          if (waitingForWinnerRef.current || isInWinnerStateRef.current) {\n            // console.log('⏰ GameState timer sync blocked - in analyzing/winner state');\n            return prev;\n          }\n          \n          // Only sync if there's a significant difference (>=5s) or if backend is ahead\n          if (timeDiff >= 5 || backendTimeRemaining > prev + 2) {\n            // console.log('⏰ GameState syncing timer:', prev, '→', backendTimeRemaining, timeDiff >= 5 ? '(>=5s difference)' : '(backend ahead)');\n            return backendTimeRemaining;\n          }\n          \n          // Keep local countdown running if difference is small\n          // console.log('⏰ GameState keeping local timer:', prev, 'vs backend:', backendTimeRemaining);\n          return prev;\n        });\n      }\n      if (gameState.currentRound) {\n        // Extract roundNumber if currentRound is an object, otherwise use the value directly\n        const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n          ? gameState.currentRound.roundNumber \n          : gameState.currentRound;\n        \n        // Check if this is a new round with active timer - this means new round started\n        const isNewRound = roundNumber !== currentRound;\n        const hasActiveTimer = gameState.timer?.isActive || gameState.timer?.timeRemaining > 60;\n        \n        if (isNewRound && hasActiveTimer && isInWinnerStateRef.current) {\n                  // console.log('🔄 GameState detected NEW ROUND with active timer - clearing winner state');\n        // console.log('🔓 Exiting winner state - new round started via gameState');\n          setIsInWinnerState(false);\n          setContractWinner(null);\n          setShowWinnerAnnouncement(false);\n          setShowWinnerVisually(false);\n          setPostWinnerLoading(false);\n          setIsAnyWinnerDisplayActive(false);\n          // Don't clear previousRoundBettors immediately - let carousel finish its animation\n          setTimeout(() => {\n            // console.log('🔄 Delayed clearing of previous round bettors');\n            setPreviousRoundBettors([]);\n          }, 2000); // Give carousel time to finish\n          winnerCoordinator.reset();\n        }\n        \n        setCurrentRound(roundNumber);\n      }\n      \n      // Handle winner-related states\n      if (gameState.isWaitingForWinner !== undefined) {\n        // If transitioning TO waiting for winner, store current bettors\n        if (gameState.isWaitingForWinner && !waitingForWinnerRef.current && gameBettorsRef.current.length > 0) {\n          // console.log('🎮 App: Transitioning to waiting for winner, storing bettors:', gameBettorsRef.current);\n          \n          // Enhance bettors with proper usernames before storing\n          const enhancedBettors = gameBettorsRef.current.map(bettor => ({\n            ...bettor,\n            username: bettor.username || bettor.displayName || `Player_${bettor.address?.slice(-4)}`,\n            displayName: bettor.displayName || bettor.username || `Player_${bettor.address?.slice(-4)}`\n          }));\n          \n          setPreviousRoundBettors(enhancedBettors);\n        }\n        \n        setWaitingForWinner(gameState.isWaitingForWinner);\n        \n        // If waitingForWinner becomes false AND we have a new round with active timer, reset winner state\n        if (!gameState.isWaitingForWinner && isInWinnerStateRef.current) {\n          const roundNumber = typeof gameState.currentRound === 'object' && gameState.currentRound.roundNumber \n            ? gameState.currentRound.roundNumber \n            : gameState.currentRound;\n          const isNewRound = roundNumber && roundNumber !== currentRound;\n          const hasActiveTimer = gameState.timer?.isActive || gameState.timer?.timeRemaining > 60;\n          \n          if (isNewRound && hasActiveTimer) {\n                    // console.log('🔄 waitingForWinner false + new round + active timer = new round started - clearing winner state');\n        // console.log('🔓 Exiting winner state - new round confirmed');\n            setIsInWinnerState(false);\n            setContractWinner(null);\n            setShowWinnerAnnouncement(false);\n            setShowWinnerVisually(false);\n            setPostWinnerLoading(false);\n            setIsAnyWinnerDisplayActive(false);\n            // Don't clear previousRoundBettors immediately - let carousel finish its animation\n            setTimeout(() => {\n              // console.log('🔄 Delayed clearing of previous round bettors (waitingForWinner)');\n              setPreviousRoundBettors([]);\n            }, 2000); // Give carousel time to finish\n            winnerCoordinator.reset();\n          } else {\n            // console.log('⏳ waitingForWinner became false, but keeping winner state (no new round detected)');\n          }\n        }\n      }\n      \n      // Update bettors data centrally (avoids duplicate processing)\n      if (gameState.bettors && Array.isArray(gameState.bettors)) {\n        // Only log if bettors count changed to reduce spam\n        if (gameState.bettors.length !== gameBettorsRef.current.length) {\n          // console.log('🎮 App: Updating bettors from gameState:', gameState.bettors.length, 'bettors');\n          \n          // Play bet sound when new bettor joins (if count increased)\n          if (gameState.bettors.length > gameBettorsRef.current.length) {\n            // Bet sound removed for performance\n          }\n          \n          // Trigger slot machine animation when new bettor joins\n          setSlotSpinning(true);\n          setTimeout(() => setSlotSpinning(false), 3000);\n        }\n        \n        // Store current bettors as previous round bettors when waiting for winner\n        if (gameState.isWaitingForWinner && gameState.bettors.length > 0) {\n          console.log('🎮 App: Storing bettors for winner matching:', gameState.bettors);\n          \n          // Enhance bettors with proper usernames before storing\n          const enhancedBettors = gameState.bettors.map(bettor => ({\n            ...bettor,\n            username: bettor.username || bettor.displayName || `Player_${bettor.address?.slice(-4)}`,\n            displayName: bettor.displayName || bettor.username || `Player_${bettor.address?.slice(-4)}`\n          }));\n          \n          setPreviousRoundBettors(enhancedBettors);\n        }\n        \n        setGameBettors(gameState.bettors);\n      }\n      \n      // Check for winner announcement in game state (prevent duplicates with stronger protection)\n      if (gameState.winnerAnnouncement) {\n        showWinnerAnnouncements(gameState.winnerAnnouncement, 'gameState');\n      }\n    });\n\n    // Listen for comprehensive game data updates\n    socketService.on('fullGameUpdate', (gameData) => {\n      //console.log('🎮 App: Full game update:', gameData);\n      // These updates will trigger re-renders via useJackpotContract hook\n      // The hook will detect the changes and update accordingly\n    });\n\n    // Listen for bettors updates\n    socketService.on('bettorsUpdate', (data) => {\n      // Bet sound removed for performance\n      \n      // Trigger slot machine animation on bettor updates\n      setSlotSpinning(true);\n      setTimeout(() => setSlotSpinning(false), 3000);\n      // Force a refresh of contract state to sync with socket data\n      // This ensures jackpot value and user stats stay in sync\n    });\n\n    // Listen for waiting for winner events\n    socketService.on('waitingForWinner', (data) => {\n      console.log('🎯 App: Waiting for winner state changed:', data);\n      \n      // Handle both old boolean format and new object format\n      const isWaiting = typeof data === 'boolean' ? data : data.isWaiting;\n      const message = typeof data === 'object' ? data.message : null;\n      \n      // Don't reset winner state just because waitingForWinner changed\n      // Only reset when we get explicit newRound/roundReset events\n      setWaitingForWinner(isWaiting);\n      \n      // Log but don't auto-reset winner state\n      if (!isWaiting && isInWinnerStateRef.current) {\n        console.log('⏳ waitingForWinner event became false, but keeping winner state until explicit new round');\n      }\n      \n      if (message) {\n        console.log('🎯 App: Winner selection message:', message);\n      }\n    });\n\n    // Listen for winner announcements (primary)\n    socketService.on('winner', (winnerData) => {\n      console.log('🏆 App: Winner announced:', winnerData);\n      console.log('🏆 App: Current gameBettors for comparison:', gameBettors);\n      console.log('🏆 App: Previous round bettors for comparison:', previousRoundBettors);\n      setWaitingForWinner(false);\n      setPostWinnerLoading(true);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'winner event');\n    });\n\n    // Listen for direct winner announcements (fallback/reliable delivery)\n    socketService.on('winnerAnnouncement', (winnerData) => {\n      console.log('🎯 App: Direct winner announcement:', winnerData);\n      setWaitingForWinner(false);\n      \n      // Use centralized manager\n      showWinnerAnnouncements(winnerData, 'direct announcement');\n    });\n\n    // Listen for round reset events (when timer is reset due to no bettors)\n    socketService.on('roundReset', (resetData) => {\n      console.log('🔄 App: Round reset detected:', resetData);\n      console.log('🔓 Exiting winner state - round reset');\n      \n      // Reset timer to the new duration\n      setTimeRemaining(resetData.timeRemaining);\n      setCurrentRound(resetData.roundNumber);\n      \n      // Clear ALL winner states since this is a fresh timer\n      setIsInWinnerState(false);\n      setWaitingForWinner(false);\n      setContractWinner(null);\n      setShowWinnerAnnouncement(false);\n      setShowWinnerVisually(false);\n      setPostWinnerLoading(false);\n      setIsAnyWinnerDisplayActive(false);\n      winnerCoordinator.reset();\n      \n      // Clear bettors list since round was reset\n      setGameBettors([]);\n      // Don't clear previousRoundBettors immediately on reset - let any ongoing animation finish\n      setTimeout(() => {\n        console.log('🔄 Delayed clearing of previous round bettors (round reset)');\n        setPreviousRoundBettors([]);\n      }, 1000);\n      \n      // Note: Animation reset handled by Swiper component\n    });\n\n    return () => {\n      console.log('🔌 App.js: Cleaning up socket listeners...');\n      socketService.off('timer');\n      socketService.off('newRound');\n      socketService.off('roundReset');\n      socketService.off('gameState');\n      socketService.off('fullGameUpdate');\n      socketService.off('bettorsUpdate');\n      socketService.off('waitingForWinner');\n      socketService.off('winner');\n      socketService.off('winnerAnnouncement');\n      // Disconnect when app unmounts to prevent memory leaks\n      socketService.disconnect();\n    };\n  }, [currentRound, showWinnerAnnouncements]); // Added missing dependencies\n\n  const handleBetChange = (e) => {\n    const inputValue = e.target.value;\n    \n    // Allow empty input or numbers with decimal points (both . and ,)\n    if (inputValue === '' || inputValue === '.' || inputValue === ',' || /^\\d*[.,]?\\d*$/.test(inputValue)) {\n      // Convert comma to period for consistency\n      const normalizedValue = inputValue.replace(',', '.');\n      \n      // For empty or just \".\" input, keep the raw value but show comma if user typed comma\n      if (normalizedValue === '' || normalizedValue === '.') {\n        setBetAmount(inputValue); // Keep original input (might be comma)\n        return;\n      }\n      \n      // For valid numbers, check limits but preserve decimal typing\n      const numericValue = parseFloat(normalizedValue);\n      if (!isNaN(numericValue) && numericValue <= 10) {\n        setBetAmount(normalizedValue); // Use normalized value to ensure consistency\n      }\n    }\n  };\n\n  const handleTabChange = (tab) => {\n    hapticFeedback('light');\n    setActiveTab(tab);\n  };\n\n  // Enhanced bet placement with real smart contract\n  const handlePlaceBet = async () => {\n    // Prevent betting during winner display period\n    if (contractWinner || showWinnerAnnouncement) {\n      showAlert('⏳ Please wait for the new round to start before placing a bet!');\n      return;\n    }\n\n    if (!isConnected) {\n      showAlert('Please connect your wallet first!');\n      return;\n    }\n\n    // Convert comma to period before parsing for validation\n    const normalizedBetAmount = betAmount.toString().replace(',', '.');\n    const numericBetAmount = parseFloat(normalizedBetAmount);\n    \n    if (isNaN(numericBetAmount) || numericBetAmount <= 0) {\n      showAlert('Please enter a valid bet amount!');\n      return;\n    }\n\n    try {\n      hapticFeedback('medium');\n      \n      // Start bet loading state\n      setBetLoadingState({\n        isLoading: true,\n        betAmount: numericBetAmount,\n        startTime: Date.now()\n      });\n      \n      await placeBet(numericBetAmount);\n      \n      // Bet sound removed for performance\n      console.log('✅ Bet placed successfully');\n      \n      // Reset bet amount after successful bet\n      setBetAmount(0.1);\n      \n      hapticFeedback('success');\n      showAlert(`✅ Bet of ${numericBetAmount.toFixed(3)} TON placed successfully!`);\n    } catch (error) {\n      console.error('Failed to place bet:', error);\n      hapticFeedback('error');\n      showAlert(`❌ Failed to place bet: ${error.message}`);\n      \n      // Stop loading state on error\n      setBetLoadingState({\n        isLoading: false,\n        betAmount: 0,\n        startTime: null\n      });\n    }\n  };\n\n  return (\n    <div className=\"app\">\n        <div className=\"app-container\">\n          {/* Main Content */}\n          <div className=\"main-content\">\n            {activeTab === 'profile' ? (\n              <div className=\"profile-container\">\n                <Header \n                  currentUsername={currentUsername}\n                  onShowUsernameInput={() => setShowUsernameInput(true)}\n                />\n                <PlayerProfile />\n              </div>\n            ) : activeTab === 'referrals' ? (\n              <div className=\"referrals-container\">\n                <Header \n                  currentUsername={currentUsername}\n                  onShowUsernameInput={() => setShowUsernameInput(true)}\n                />\n                <ReferralSystem />\n              </div>\n            ) : (\n              <div className=\"jackpot-container\">\n                <Header \n                  currentUsername={currentUsername}\n                  onShowUsernameInput={() => setShowUsernameInput(true)}\n                />\n            <>\n            {/* Betting Section */}\n            <div className=\"betting-section\">\n              <div className=\"bet-input-section\">\n                <input \n                  type=\"text\" \n                  className=\"bet-amount-input\" \n                  value={betAmount}\n                  onChange={handleBetChange}\n                  placeholder=\"0.000\"\n                  inputMode=\"decimal\"\n                />\n                <button className=\"bet-increment-btn\" onClick={() => setBetAmount(prev => {\n                  const currentValue = parseFloat(prev) || 0;\n                  return Math.min(currentValue + 0.1, 10).toFixed(1);\n                })}>\n                  +0.1\n          </button>\n              </div>\n              \n              {/* Balance Section */}\n              <div className=\"balance-section\">\n                <div className=\"balance-label\">Balance</div>\n                <div className=\"balance-amount\">\n                  {isConnected ? `${(contractState.userBalance || 0).toFixed(6)}` : '0.000000'}\n                  <span className=\"balance-symbol\">TON</span>\n                </div>\n              </div>\n              \n          <button \n                className=\"bet-button\" \n                onClick={handlePlaceBet}\n                disabled={isPlacingBet || !isConnected || contractWinner || showWinnerAnnouncement}\n          >\n                {contractWinner || showWinnerAnnouncement ? 'Winner Display - Wait for New Round' :\n                 isPlacingBet ? 'Betting...' : 'Bet'}\n          </button>\n        </div>\n\n            {/* Four Card Stats Grid */}\n            <div className=\"stats-grid four-cards\">\n              <div className=\"stat-card jackpot-card\">\n                <div className=\"stat-value\">\n                  <TonIcon size={14} className=\"wager-ton-icon\" />\n                  {jackpotValue.toFixed(3)}\n                </div>\n                <div className=\"stat-label\">Jackpot Value</div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">\n                  <TonIcon size={14} className=\"wager-ton-icon\" />\n                  {userBetTotal.toFixed(3)}\n                </div>\n                <div className=\"stat-label\">Your Wager</div>\n              </div>\n              <div className=\"stat-card chance-stat\">\n                <div className=\"stat-value\">{userWinChance.toFixed(2)}%</div>\n                <div className=\"stat-label\">Your Chance</div>\n              </div>\n              <div className=\"stat-card\">\n                <div className=\"stat-value\">\n                  {Math.floor((timeRemaining || 0) / 60)}:{((timeRemaining || 0) % 60).toString().padStart(2, '0')}\n                </div>\n                <div className=\"stat-label\">Time Remaining</div>\n              </div>\n            </div>\n\n            {/* Players Carousel Section */}\n            <div className=\"players-carousel-section\">\n              <div className={`carousel-header ${\n                (timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? 'analyzing' : \n                showWinnerVisually ? 'winner' : ''\n              }`}>\n                <h3>\n                  {(timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually) ? \n                    \"🔍 Analyzing Bets...\" : \n                    showWinnerVisually && contractWinner ? \n                    `🏆 Winner: ${contractWinner.username || contractWinner.displayName || contractWinner.winner || 'Player'}` :\n                    `Players (${gameBettors.length > 0 ? gameBettors.length : previousRoundBettors.length})`\n                  }\n                </h3>\n              </div>\n              \n              {/* NEW: Simple Swiper Carousel */}\n              <SimpleCarousel \n                players={(() => {\n                  // Same data logic as before\n                  const bettorsToShow = (contractWinner || waitingForWinner) ? \n                                       previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors :\n                                       gameBettors.length > 0 ? gameBettors : [];\n                  \n                  // Ensure we have at least 6 items to show (fill with waiting slots if needed)\n                  return [\n                    ...bettorsToShow,\n                    ...Array.from({ length: Math.max(0, 6 - bettorsToShow.length) }, () => null)\n                  ];\n                })()}\n                contractWinner={contractWinner}\n                isSpinning={(timeRemaining === 0 && waitingForWinner) || (contractWinner && !showWinnerVisually)}\n                onSpinComplete={() => {\n                  console.log('🎯 Winner animation completed in SimpleCarousel!');\n                  console.log('🔄 Carousel finished - now safe to clear winner state in future');\n                  // Winner is already set via showWinnerVisually\n                }}\n              />\n        </div>\n        \n        {/* Bets Deflate Section */}\n        <div className=\"bets-deflate-section\">\n          <div className=\"bets-deflate-header\">\n            <h3>Current Round Bets</h3>\n            <div className=\"round-info\">\n              <span>#{currentRound}</span>\n            </div>\n          </div>\n          \n          <div className=\"bets-deflate-list\">\n            {(() => {\n              const bettorsToShow = (contractWinner || waitingForWinner) ? \n                                   previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors :\n                                   gameBettors.length > 0 ? gameBettors : [];\n              \n                             return bettorsToShow.map((bettor, index) => {\n                 const betAmount = parseFloat(bettor.amount || 0);\n                 const currentJackpot = parseFloat(jackpotValue || 0);\n                 const chance = currentJackpot > 0 ? ((betAmount / currentJackpot) * 100).toFixed(2) : '0.00';\n                 const usdValue = (betAmount * 2.5).toFixed(1); // Approximate USD value\n                \n                return (\n                  <div key={`${bettor.address}-${index}`} className=\"bet-deflate-card\">\n                    <div className=\"bet-deflate-avatar\">\n                      <div className=\"avatar-icon\">\n                        <Users size={20} />\n                      </div>\n                      <div className=\"avatar-count\">1</div>\n                    </div>\n                    \n                    <div className=\"bet-deflate-info\">\n                      <div className=\"bet-deflate-username\">\n                        {bettor.username || bettor.displayName || bettor.winner || `Player_${bettor.address.slice(-4)}`}\n                      </div>\n                      <div className=\"bet-deflate-amount\">\n                        <TonIcon size={16} className=\"bet-deflate-ton-icon\" />\n                        <span>{betAmount.toFixed(3)}</span>\n                        <div className=\"bet-deflate-usd\">~${usdValue}</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bet-deflate-chance\">\n                      <div className=\"chance-label\">\n                        <Target size={12} />\n                        <span>Chance</span>\n                      </div>\n                      <div className=\"chance-value\">{chance}%</div>\n                    </div>\n                  </div>\n                );\n              });\n            })()}\n            \n            {(() => {\n              const bettorsToShow = (contractWinner || waitingForWinner) ? \n                                   previousRoundBettors.length > 0 ? previousRoundBettors : gameBettors :\n                                   gameBettors.length > 0 ? gameBettors : [];\n              \n              if (bettorsToShow.length === 0) {\n                return (\n                  <div className=\"bet-deflate-empty\">\n                    <div className=\"empty-icon\">\n                      <Coins size={32} />\n                    </div>\n                    <div className=\"empty-text\">No bets yet</div>\n                    <div className=\"empty-subtext\">Be the first to place a bet!</div>\n                  </div>\n                );\n              }\n              return null;\n            })()}\n          </div>\n        </div>\n        \n        {/* Recent Winners Section */}\n        <RecentWinners />\n        \n            </>\n              </div>\n            )}\n      </div>\n\n      {/* Mobile Navigation Bar */}\n      <div className=\"mobile-navbar\">\n        <div className=\"navbar-items\">\n          <button \n            className={`navbar-item ${activeTab === 'jackpot' ? 'active' : ''}`}\n            onClick={() => setActiveTab('jackpot')}\n          >\n            <div className=\"navbar-icon\"><DollarSign size={20} /></div>\n            <div className=\"navbar-label\">Jackpot</div>\n          </button>\n          \n          <button \n            className={`navbar-item ${activeTab === 'profile' ? 'active' : ''}`}\n            onClick={() => setActiveTab('profile')}\n          >\n            <div className=\"navbar-icon\"><User size={20} /></div>\n            <div className=\"navbar-label\">Profile</div>\n          </button>\n          \n          <button \n            className={`navbar-item ${activeTab === 'referrals' ? 'active' : ''}`}\n            onClick={() => setActiveTab('referrals')}\n          >\n            <div className=\"navbar-icon\"><Share2 size={20} /></div>\n            <div className=\"navbar-label\">Referrals</div>\n          </button>\n        </div>\n      </div>\n      </div>\n\n      {/* Contract Status Indicator */}\n      {isLoadingContract && !contractWinner && !showWinnerAnnouncement && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\"><Loader2 size={24} className=\"animate-spin\" /></div>\n          <span>Loading contract data...</span>\n        </div>\n      )}\n\n      {/* Winner Broadcast Component */}\n      <WinnerBroadcast socketService={socketService} />\n      \n      {/* Username Input Modal */}\n      <UsernameInput \n        isVisible={showUsernameInput}\n        currentUsername={currentUsername}\n        onUsernameSet={(username) => {\n          setCurrentUsername(username);\n          setShowUsernameInput(false);\n          // Trigger a page reload to update the username everywhere\n          window.location.reload();\n        }}\n      />\n    </div>\n  );\n}\n\n// Main App component with TON Connect Provider\nfunction App() {\n  return (\n    <TonConnectUIProvider \n      manifestUrl={manifestUrl}\n      uiPreferences={uiOptions.uiPreferences}\n      language={uiOptions.language}\n      restoreConnection={uiOptions.restoreConnection}\n      actionsConfiguration={uiOptions.actionsConfiguration}\n    >\n      <AppContent />\n    </TonConnectUIProvider>\n  );\n}\n\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAEC,IAAI,QAAQ,OAAO;AACtF,SAASC,oBAAoB,QAAQ,sBAAsB;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,aAAa,MAAM,4BAA4B;AAEtD,SAASC,OAAO,QAAQ,6BAA6B;AACrD,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,kBAAkB,MAAM,4BAA4B;AAC3D,OAAOC,2BAA2B,MAAM,qCAAqC;AAC7E,SAASC,UAAU,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,QAAQ,cAAc;AAC9F,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,iBAAiB,MAAM,8BAA8B;AAE5D,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,OAAO,WAAW;AAClB,OAAO,yBAAyB;;AAEhC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,WAAW,GAAG,yEAAyE;AAE7F,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,qBAAA;EACpB;EACAnB,2BAA2B,CAAC,CAAC;;EAE7B;EACA,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGxC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACyC,aAAa,EAAEC,gBAAgB,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC2C,SAAS,EAAEC,YAAY,CAAC,GAAG5C,QAAQ,CAAC,SAAS,CAAC;EACrD,MAAM,CAAC6C,SAAS,EAAEC,YAAY,CAAC,GAAG9C,QAAQ,CAAC,GAAG,CAAC;EAC/C,MAAM,CAAC+C,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGhD,QAAQ,CAAC,KAAK,CAAC;;EAE3E;EACA,MAAM,CAACiD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlD,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACmD,cAAc,EAAEC,iBAAiB,CAAC,GAAGpD,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACqD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGtD,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,GAAGuD,2BAA2B,CAAC,GAAGvD,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACwD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGzD,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrE,MAAM,CAAC0D,eAAe,EAAEC,kBAAkB,CAAC,GAAG3D,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/D;EACA,MAAM,CAAC4D,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC8D,eAAe,EAAEC,kBAAkB,CAAC,GAAG/D,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAM,CAACgE,WAAW,EAAEC,cAAc,CAAC,GAAGjE,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACkE,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGnE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtE,MAAM,CAACoE,YAAY,EAAEC,eAAe,CAAC,GAAGrE,QAAQ,CAAC,KAAK,CAAC;EACvD;;EAEA;EACA,MAAM,CAACsE,eAAe,EAAEC,kBAAkB,CAAC,GAAGvE,QAAQ,CAAC;IACrDwE,SAAS,EAAE,KAAK;IAChB3B,SAAS,EAAE,CAAC;IACZ4B,SAAS,EAAE;EACb,CAAC,CAAC;;EAEF;EACA,MAAMC,cAAc,GAAGxE,MAAM,CAAC,EAAE,CAAC;EACjC,MAAMyE,iBAAiB,GAAGzE,MAAM,CAAC,IAAI,CAAC;EACtC,MAAM0E,yBAAyB,GAAG1E,MAAM,CAAC,KAAK,CAAC;EAC/C,MAAM2E,sBAAsB,GAAG3E,MAAM,CAAC,IAAI,CAAC;EAC3C,MAAM4E,mBAAmB,GAAG5E,MAAM,CAAC,KAAK,CAAC;EACzC,MAAM6E,uBAAuB,GAAG7E,MAAM,CAAC,EAAE,CAAC;EAC1C,MAAM8E,gBAAgB,GAAG9E,MAAM,CAAC,EAAE,CAAC;EACnC,MAAM+E,qBAAqB,GAAG/E,MAAM,CAAC,KAAK,CAAC;EAC3C,MAAMgF,kBAAkB,GAAGhF,MAAM,CAAC,KAAK,CAAC;;EAExC;EACAD,SAAS,CAAC,MAAM;IACd,MAAMkF,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAC/D,IAAIF,cAAc,IAAIA,cAAc,CAACG,IAAI,CAAC,CAAC,CAACC,MAAM,IAAI,CAAC,EAAE;MACvDxB,kBAAkB,CAACoB,cAAc,CAACG,IAAI,CAAC,CAAC,CAAC;IAC3C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACArF,SAAS,CAAC,MAAM;IAAEyE,cAAc,CAACc,OAAO,GAAGxB,WAAW;EAAE,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EACzE/D,SAAS,CAAC,MAAM;IACd0E,iBAAiB,CAACa,OAAO,GAAGrC,cAAc;EAC5C,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EACpBlD,SAAS,CAAC,MAAM;IAAE2E,yBAAyB,CAACY,OAAO,GAAGzC,sBAAsB;EAAE,CAAC,EAAE,CAACA,sBAAsB,CAAC,CAAC;EAC1G9C,SAAS,CAAC,MAAM;IAAE6E,mBAAmB,CAACU,OAAO,GAAGvC,gBAAgB;EAAE,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EACxFhD,SAAS,CAAC,MAAM;IAAE8E,uBAAuB,CAACS,OAAO,GAAGtB,oBAAoB;EAAE,CAAC,EAAE,CAACA,oBAAoB,CAAC,CAAC;EACpGjE,SAAS,CAAC,MAAM;IAAE+E,gBAAgB,CAACQ,OAAO,GAAG/C,aAAa;EAAE,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAC/ExC,SAAS,CAAC,MAAM;IAAEgF,qBAAqB,CAACO,OAAO,GAAGhC,kBAAkB;EAAE,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAC9FvD,SAAS,CAAC,MAAM;IAAEiF,kBAAkB,CAACM,OAAO,GAAG9B,eAAe;EAAE,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;;EAErF;EACAzD,SAAS,CAAC,MAAM;IACd,IAAIqE,eAAe,CAACE,SAAS,IAAIiB,WAAW,IAAIC,OAAO,EAAE;MACvD;MACA,MAAMC,OAAO,GAAG3B,WAAW,CAAC4B,IAAI,CAACC,MAAM,IACrC,CAACA,MAAM,CAACH,OAAO,KAAKA,OAAO,IAAIG,MAAM,CAACC,aAAa,KAAKJ,OAAO,KAC/DK,IAAI,CAACC,GAAG,CAACH,MAAM,CAACI,MAAM,GAAG3B,eAAe,CAACzB,SAAS,CAAC,GAAG,KAAK,CAAC;MAC9D,CAAC;MAED,IAAI8C,OAAO,EAAE;QACXO,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;QACzE5B,kBAAkB,CAAC;UACjBC,SAAS,EAAE,KAAK;UAChB3B,SAAS,EAAE,CAAC;UACZ4B,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;;MAEA;MACA,MAAM2B,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGhC,eAAe,CAACG,SAAS;MAC7D,IAAI2B,cAAc,GAAG,KAAK,EAAE;QAC1BF,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrD5B,kBAAkB,CAAC;UACjBC,SAAS,EAAE,KAAK;UAChB3B,SAAS,EAAE,CAAC;UACZ4B,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE,CAACT,WAAW,EAAEM,eAAe,EAAEmB,WAAW,EAAEC,OAAO,CAAC,CAAC;;EAExD;EACA,MAAMa,uBAAuB,GAAGpG,WAAW,CAAC,CAACqG,UAAU,EAAEC,MAAM,GAAG,SAAS,KAAK;IAC9E,MAAMC,eAAe,GAAGF,UAAU,CAACG,SAAS;;IAE5C;IACA,IAAIzB,kBAAkB,CAACM,OAAO,EAAE;MAC9B,IAAIoB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1C;MAAA;MAEF,OAAO,KAAK;IACd;;IAEA;IACA,IAAIjF,iBAAiB,CAACkF,WAAW,CAACL,eAAe,EAAEF,UAAU,CAAC,EAAE;MAC9D,OAAO,KAAK;IACd;;IAEA;;IAEA;IACA7C,kBAAkB,CAAC,IAAI,CAAC;;IAExB;IACA9B,iBAAiB,CAACmF,SAAS,CAAC,IAAI,EAAEN,eAAe,EAAEF,UAAU,CAAC;IAC9DjD,2BAA2B,CAAC,IAAI,CAAC;IACjCsB,sBAAsB,CAACW,OAAO,GAAGkB,eAAe;;IAEhD;IACAtD,iBAAiB,CAACoD,UAAU,CAAC;IAC7BxD,yBAAyB,CAAC,IAAI,CAAC;IAC/BE,mBAAmB,CAAC,KAAK,CAAC;;IAE1B;IACA+D,UAAU,CAAC,MAAM;MACfxD,qBAAqB,CAAC,IAAI,CAAC;IAC7B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,IAAI;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM;IAAEyD,IAAI;IAAEC,cAAc;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGpG,iBAAiB,CAAC,CAAC;;EAEhF;EACA,MAAM;IACJqG,aAAa;IACbC,SAAS;IACTC,SAAS,EAAEC,YAAY;IACvBC,iBAAiB;IACjBC,YAAY;IACZC,QAAQ;IACRnC,WAAW;IACXC;EACF,CAAC,GAAGxE,kBAAkB,CAAC,CAAC;;EAExB;EACA,MAAMsG,SAAS,GAAGpH,OAAO,CAAC,MAAM;IAAA,IAAAyH,qBAAA;IAC9B,IAAI,CAACJ,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;MACrD,OAAO;QACLK,aAAa,EAAE,KAAK;QACpBC,aAAa,EAAE,GAAG;QAClBC,YAAY,EAAE,CAAC;QACfC,WAAW,EAAE,KAAK;QAClBxF,aAAa,EAAE;MACjB,CAAC;IACH;;IAEA;IACA,OAAO;MACLqF,aAAa,EAAEI,OAAO,CAACT,YAAY,CAACK,aAAa,CAAC;MAClDC,aAAa,EAAEI,MAAM,CAACV,YAAY,CAACM,aAAa,CAAC,IAAI,GAAG;MACxDC,YAAY,EAAEG,MAAM,CAACV,YAAY,CAACO,YAAY,CAAC,IAAI,CAAC;MACpDC,WAAW,EAAEC,OAAO,CAACT,YAAY,CAACQ,WAAW,CAAC;MAC9CxF,aAAa,EAAE0F,MAAM,CAACV,YAAY,CAAChF,aAAa,CAAC,IAAI,CAAC;MACtD;MACAF,YAAY,EAAE,OAAOkF,YAAY,CAAClF,YAAY,KAAK,QAAQ,GACtD,EAAAsF,qBAAA,GAAAJ,YAAY,CAAClF,YAAY,cAAAsF,qBAAA,uBAAzBA,qBAAA,CAA2BO,WAAW,KAAI,CAAC,GAC3CD,MAAM,CAACV,YAAY,CAAClF,YAAY,CAAC,IAAI;IAC5C,CAAC;EACH,CAAC,EAAE,CAACkF,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMY,iBAAiB,GAAGjI,OAAO,CAAC,MAAM;IAAA,IAAAkI,qBAAA;IACtC,IAAI,CAAChB,aAAa,EAAE,OAAOA,aAAa;IAExC,OAAO;MACL,GAAGA,aAAa;MAChB;MACAiB,KAAK,EAAEjB,aAAa,CAACiB,KAAK,GAAG;QAC3BC,QAAQ,EAAEN,OAAO,CAACZ,aAAa,CAACiB,KAAK,CAACC,QAAQ,CAAC;QAC/C/F,aAAa,EAAE0F,MAAM,CAACb,aAAa,CAACiB,KAAK,CAAC9F,aAAa,CAAC,IAAI,CAAC;QAC7DgG,WAAW,EAAEN,MAAM,CAACb,aAAa,CAACiB,KAAK,CAACE,WAAW,CAAC,IAAI,CAAC;QACzDL,WAAW,EAAED,MAAM,CAACb,aAAa,CAACiB,KAAK,CAACH,WAAW,CAAC,IAAI,CAAC;QACzDM,YAAY,EAAER,OAAO,CAACZ,aAAa,CAACiB,KAAK,CAACG,YAAY;MACxD,CAAC,GAAGC,SAAS;MACb;MACApG,YAAY,EAAE,OAAO+E,aAAa,CAAC/E,YAAY,KAAK,QAAQ,GACvD,EAAA+F,qBAAA,GAAAhB,aAAa,CAAC/E,YAAY,cAAA+F,qBAAA,uBAA1BA,qBAAA,CAA4BF,WAAW,KAAI,CAAC,GAC7Cd,aAAa,CAAC/E;IACpB,CAAC;EACH,CAAC,EAAE,CAAC+E,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAMsB,YAAY,GAAGtB,aAAa,CAACuB,YAAY;EAC/C,MAAMC,MAAM,GAAGxB,aAAa,CAACkB,QAAQ;;EAErC;EACA,MAAMO,YAAY,GAAG3I,OAAO,CAAC,MAAM;IACjC,IAAI,CAACqF,WAAW,IAAI,CAACC,OAAO,IAAI,CAAC1B,WAAW,CAACuB,MAAM,EAAE,OAAO,CAAC;IAE7D,OAAOvB,WAAW,CACfgF,MAAM,CAACnD,MAAM,IACZA,MAAM,CAACH,OAAO,KAAKA,OAAO,IAC1BG,MAAM,CAACC,aAAa,KAAKJ,OAC3B,CAAC,CACAuD,MAAM,CAAC,CAACC,KAAK,EAAErD,MAAM,KAAKqD,KAAK,IAAIrD,MAAM,CAACI,MAAM,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/D,CAAC,EAAE,CAACjC,WAAW,CAACuB,MAAM,EAAEG,OAAO,EAAED,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhD,MAAM0D,aAAa,GAAG/I,OAAO,CAAC,MAAM;IAClC,IAAI,CAACqF,WAAW,IAAI,CAACC,OAAO,IAAIqD,YAAY,KAAK,CAAC,EAAE,OAAO,CAAC;;IAE5D;IACA,MAAMK,iBAAiB,GAAGpF,WAAW,CAACiF,MAAM,CAAC,CAACC,KAAK,EAAErD,MAAM,KAAKqD,KAAK,IAAIrD,MAAM,CAACI,MAAM,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEhG;IACA,MAAMoD,gBAAgB,GAAGD,iBAAiB,GAAG,CAAC,GAAGA,iBAAiB,GAAGR,YAAY;IAEjF,IAAI,CAACS,gBAAgB,EAAE,OAAO,CAAC;IAE/B,OAAQN,YAAY,GAAGM,gBAAgB,GAAI,GAAG;EAChD,CAAC,EAAE,CAACN,YAAY,EAAEH,YAAY,EAAE5E,WAAW,CAACuB,MAAM,EAAEE,WAAW,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE5E;EACAzF,SAAS,CAAC,MAAM;IAAA,IAAAqJ,oBAAA;IACd,IAAI,EAAAA,oBAAA,GAAAhC,aAAa,CAACiB,KAAK,cAAAe,oBAAA,uBAAnBA,oBAAA,CAAqB7G,aAAa,MAAKkG,SAAS,EAAE;MACpDjG,gBAAgB,CAAC6G,IAAI,IAAI;QACvB,MAAMC,WAAW,GAAGlC,aAAa,CAACiB,KAAK,CAAC9F,aAAa;QACrD,MAAMgH,QAAQ,GAAG1D,IAAI,CAACC,GAAG,CAACuD,IAAI,GAAGC,WAAW,CAAC;;QAE7C;QACA,IAAIvG,gBAAgB,IAAIS,eAAe,EAAE;UACvC,OAAO6F,IAAI;QACb;;QAEA;QACA,IAAIE,QAAQ,IAAI,CAAC,IAAID,WAAW,GAAGD,IAAI,GAAG,CAAC,EAAE;UAC3C,OAAOC,WAAW;QACpB;;QAEA;QACA,OAAOD,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,MAAM;MACL7G,gBAAgB,CAAC,EAAE,CAAC;IACtB;EACF,CAAC,EAAE,EAAAJ,qBAAA,GAACgF,aAAa,CAACiB,KAAK,cAAAjG,qBAAA,uBAAnBA,qBAAA,CAAqBG,aAAa,EAAEQ,gBAAgB,EAAES,eAAe,CAAC,CAAC;;EAE3E;EACAzD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAAC6I,MAAM,EAAE;IAEb,MAAMY,SAAS,GAAGC,WAAW,CAAC,MAAM;MAClCjH,gBAAgB,CAAC6G,IAAI,IAAI;QACvB;QACA,IAAIA,IAAI,GAAG,CAAC,EAAE;UACZ,MAAMK,OAAO,GAAGL,IAAI,GAAG,CAAC;;UAExB;UACA,IAAIK,OAAO,IAAI,CAAC,IAAIA,OAAO,GAAG,CAAC,EAAE;YAC/B;UAAA;;UAGF;UACF,IAAIA,OAAO,KAAK,CAAC,EAAE;YACf;YACA1G,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;UAC/B;UAEA,OAAO0G,OAAO;QACd;;QAEA;QACA,OAAO,CAAC;MACV,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXC,aAAa,CAACH,SAAS,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd;;EAEA;EACA7I,SAAS,CAAC,MAAM;IACd;IACA2B,aAAa,CAACkI,OAAO,CAAC,CAAC;;IAEvB;IACAlI,aAAa,CAACmI,EAAE,CAAC,OAAO,EAAGC,SAAS,IAAK;MACvC;;MAEA;MACA,IAAI,CAACA,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;QAC/C9D,OAAO,CAAC+D,IAAI,CAAC,wCAAwC,EAAED,SAAS,CAAC;QACjE;MACF;MAEA,MAAME,gBAAgB,GAAG,OAAOF,SAAS,CAACvH,aAAa,KAAK,QAAQ,GAAGuH,SAAS,CAACvH,aAAa,GAAGA,aAAa;MAC9G,MAAM0H,cAAc,GAAG,OAAOH,SAAS,CAAC5B,WAAW,KAAK,QAAQ,GAAG4B,SAAS,CAAC5B,WAAW,GAAG7F,YAAY;;MAE/F;MACNG,gBAAgB,CAAC6G,IAAI,IAAI;QACvB,MAAME,QAAQ,GAAG1D,IAAI,CAACC,GAAG,CAACuD,IAAI,GAAGW,gBAAgB,CAAC;QAClD,MAAME,UAAU,GAAGD,cAAc,KAAK5H,YAAY;;QAElD;QACA,IAAI6H,UAAU,IAAIjH,cAAc,IAAI+G,gBAAgB,GAAG,GAAG,EAAE;UAClD;UACRvG,kBAAkB,CAAC,KAAK,CAAC;UACzBP,iBAAiB,CAAC,IAAI,CAAC;UACvBJ,yBAAyB,CAAC,KAAK,CAAC;UAChCS,qBAAqB,CAAC,KAAK,CAAC;UAC5BH,oBAAoB,CAAC,KAAK,CAAC;UAC3BC,2BAA2B,CAAC,KAAK,CAAC;UAClCY,uBAAuB,CAAC,EAAE,CAAC;QAC7B;;QAEA;QACA,IAAIW,mBAAmB,CAACU,OAAO,IAAIN,kBAAkB,CAACM,OAAO,EAAE;UAC7D;UACA,OAAO+D,IAAI;QACb;;QAEA;QACA,IAAIa,UAAU,IAAIX,QAAQ,IAAI,CAAC,IAAIS,gBAAgB,GAAGX,IAAI,GAAG,CAAC,EAAE;UAC9D;UACA,OAAOW,gBAAgB;QACzB;;QAEA;QACA,OAAOX,IAAI;MACb,CAAC,CAAC;MAEJ,IAAIY,cAAc,IAAIA,cAAc,KAAK5H,YAAY,EAAE;QACrDC,eAAe,CAAC2H,cAAc,CAAC;MACjC;MACA;IACF,CAAC,CAAC;;IAEF;IACAvI,aAAa,CAACmI,EAAE,CAAC,UAAU,EAAGM,SAAS,IAAK;MAC1C;MACA;;MAEA3H,gBAAgB,CAAC2H,SAAS,CAAC5H,aAAa,CAAC;MACzCD,eAAe,CAAC6H,SAAS,CAACjC,WAAW,CAAC;MACtCzE,kBAAkB,CAAC,KAAK,CAAC;MACzBJ,2BAA2B,CAAC,KAAK,CAAC;MAClC1B,iBAAiB,CAACyI,KAAK,CAAC,CAAC;MACzBzF,sBAAsB,CAACW,OAAO,GAAG,IAAI,CAAC,CAAC;;MAEvC;MACApC,iBAAiB,CAAC,IAAI,CAAC;MACvBJ,yBAAyB,CAAC,KAAK,CAAC;MAChCS,qBAAqB,CAAC,KAAK,CAAC;MAC5BU,uBAAuB,CAAC,EAAE,CAAC;MAC3BjB,mBAAmB,CAAC,KAAK,CAAC;MAC1BI,oBAAoB,CAAC,KAAK,CAAC;;MAE3B;IACF,CAAC,CAAC;;IAEF;IACA1B,aAAa,CAACmI,EAAE,CAAC,WAAW,EAAGQ,SAAS,IAAK;MAAA,IAAAC,gBAAA;MAC3C;;MAEA;MACA,MAAMC,oBAAoB,IAAAD,gBAAA,GAAGD,SAAS,CAAChC,KAAK,cAAAiC,gBAAA,uBAAfA,gBAAA,CAAiB/H,aAAa;MAE3D,IAAIgI,oBAAoB,KAAK9B,SAAS,EAAE;QACtCjG,gBAAgB,CAAC6G,IAAI,IAAI;UACvB,MAAME,QAAQ,GAAG1D,IAAI,CAACC,GAAG,CAACuD,IAAI,GAAGkB,oBAAoB,CAAC;;UAEtD;UACA,IAAI3F,mBAAmB,CAACU,OAAO,IAAIN,kBAAkB,CAACM,OAAO,EAAE;YAC7D;YACA,OAAO+D,IAAI;UACb;;UAEA;UACA,IAAIE,QAAQ,IAAI,CAAC,IAAIgB,oBAAoB,GAAGlB,IAAI,GAAG,CAAC,EAAE;YACpD;YACA,OAAOkB,oBAAoB;UAC7B;;UAEA;UACA;UACA,OAAOlB,IAAI;QACb,CAAC,CAAC;MACJ;MACA,IAAIgB,SAAS,CAAChI,YAAY,EAAE;QAAA,IAAAmI,iBAAA,EAAAC,iBAAA;QAC1B;QACA,MAAMvC,WAAW,GAAG,OAAOmC,SAAS,CAAChI,YAAY,KAAK,QAAQ,IAAIgI,SAAS,CAAChI,YAAY,CAAC6F,WAAW,GAChGmC,SAAS,CAAChI,YAAY,CAAC6F,WAAW,GAClCmC,SAAS,CAAChI,YAAY;;QAE1B;QACA,MAAM6H,UAAU,GAAGhC,WAAW,KAAK7F,YAAY;QAC/C,MAAMqI,cAAc,GAAG,EAAAF,iBAAA,GAAAH,SAAS,CAAChC,KAAK,cAAAmC,iBAAA,uBAAfA,iBAAA,CAAiBlC,QAAQ,KAAI,EAAAmC,iBAAA,GAAAJ,SAAS,CAAChC,KAAK,cAAAoC,iBAAA,uBAAfA,iBAAA,CAAiBlI,aAAa,IAAG,EAAE;QAEvF,IAAI2H,UAAU,IAAIQ,cAAc,IAAI1F,kBAAkB,CAACM,OAAO,EAAE;UACtD;UACV;UACE7B,kBAAkB,CAAC,KAAK,CAAC;UACzBP,iBAAiB,CAAC,IAAI,CAAC;UACvBJ,yBAAyB,CAAC,KAAK,CAAC;UAChCS,qBAAqB,CAAC,KAAK,CAAC;UAC5BH,oBAAoB,CAAC,KAAK,CAAC;UAC3BC,2BAA2B,CAAC,KAAK,CAAC;UAClC;UACA0D,UAAU,CAAC,MAAM;YACf;YACA9C,uBAAuB,CAAC,EAAE,CAAC;UAC7B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;UACVtC,iBAAiB,CAACyI,KAAK,CAAC,CAAC;QAC3B;QAEA9H,eAAe,CAAC4F,WAAW,CAAC;MAC9B;;MAEA;MACA,IAAImC,SAAS,CAACM,kBAAkB,KAAKlC,SAAS,EAAE;QAC9C;QACA,IAAI4B,SAAS,CAACM,kBAAkB,IAAI,CAAC/F,mBAAmB,CAACU,OAAO,IAAId,cAAc,CAACc,OAAO,CAACD,MAAM,GAAG,CAAC,EAAE;UACrG;;UAEA;UACA,MAAMuF,eAAe,GAAGpG,cAAc,CAACc,OAAO,CAACuF,GAAG,CAAClF,MAAM;YAAA,IAAAmF,eAAA,EAAAC,gBAAA;YAAA,OAAK;cAC5D,GAAGpF,MAAM;cACTqF,QAAQ,EAAErF,MAAM,CAACqF,QAAQ,IAAIrF,MAAM,CAACsF,WAAW,IAAI,WAAAH,eAAA,GAAUnF,MAAM,CAACH,OAAO,cAAAsF,eAAA,uBAAdA,eAAA,CAAgBI,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;cACxFD,WAAW,EAAEtF,MAAM,CAACsF,WAAW,IAAItF,MAAM,CAACqF,QAAQ,IAAI,WAAAD,gBAAA,GAAUpF,MAAM,CAACH,OAAO,cAAAuF,gBAAA,uBAAdA,gBAAA,CAAgBG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3F,CAAC;UAAA,CAAC,CAAC;UAEHjH,uBAAuB,CAAC2G,eAAe,CAAC;QAC1C;QAEA5H,mBAAmB,CAACqH,SAAS,CAACM,kBAAkB,CAAC;;QAEjD;QACA,IAAI,CAACN,SAAS,CAACM,kBAAkB,IAAI3F,kBAAkB,CAACM,OAAO,EAAE;UAAA,IAAA6F,iBAAA,EAAAC,iBAAA;UAC/D,MAAMlD,WAAW,GAAG,OAAOmC,SAAS,CAAChI,YAAY,KAAK,QAAQ,IAAIgI,SAAS,CAAChI,YAAY,CAAC6F,WAAW,GAChGmC,SAAS,CAAChI,YAAY,CAAC6F,WAAW,GAClCmC,SAAS,CAAChI,YAAY;UAC1B,MAAM6H,UAAU,GAAGhC,WAAW,IAAIA,WAAW,KAAK7F,YAAY;UAC9D,MAAMqI,cAAc,GAAG,EAAAS,iBAAA,GAAAd,SAAS,CAAChC,KAAK,cAAA8C,iBAAA,uBAAfA,iBAAA,CAAiB7C,QAAQ,KAAI,EAAA8C,iBAAA,GAAAf,SAAS,CAAChC,KAAK,cAAA+C,iBAAA,uBAAfA,iBAAA,CAAiB7I,aAAa,IAAG,EAAE;UAEvF,IAAI2H,UAAU,IAAIQ,cAAc,EAAE;YACxB;YACZ;YACIjH,kBAAkB,CAAC,KAAK,CAAC;YACzBP,iBAAiB,CAAC,IAAI,CAAC;YACvBJ,yBAAyB,CAAC,KAAK,CAAC;YAChCS,qBAAqB,CAAC,KAAK,CAAC;YAC5BH,oBAAoB,CAAC,KAAK,CAAC;YAC3BC,2BAA2B,CAAC,KAAK,CAAC;YAClC;YACA0D,UAAU,CAAC,MAAM;cACf;cACA9C,uBAAuB,CAAC,EAAE,CAAC;YAC7B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;YACVtC,iBAAiB,CAACyI,KAAK,CAAC,CAAC;UAC3B,CAAC,MAAM;YACL;UAAA;QAEJ;MACF;;MAEA;MACA,IAAIC,SAAS,CAACgB,OAAO,IAAIC,KAAK,CAACC,OAAO,CAAClB,SAAS,CAACgB,OAAO,CAAC,EAAE;QACzD;QACA,IAAIhB,SAAS,CAACgB,OAAO,CAAChG,MAAM,KAAKb,cAAc,CAACc,OAAO,CAACD,MAAM,EAAE;UAC9D;;UAEA;UACA,IAAIgF,SAAS,CAACgB,OAAO,CAAChG,MAAM,GAAGb,cAAc,CAACc,OAAO,CAACD,MAAM,EAAE;YAC5D;UAAA;;UAGF;UACAlB,eAAe,CAAC,IAAI,CAAC;UACrB4C,UAAU,CAAC,MAAM5C,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;QAChD;;QAEA;QACA,IAAIkG,SAAS,CAACM,kBAAkB,IAAIN,SAAS,CAACgB,OAAO,CAAChG,MAAM,GAAG,CAAC,EAAE;UAChEW,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEoE,SAAS,CAACgB,OAAO,CAAC;;UAE9E;UACA,MAAMT,eAAe,GAAGP,SAAS,CAACgB,OAAO,CAACR,GAAG,CAAClF,MAAM;YAAA,IAAA6F,gBAAA,EAAAC,gBAAA;YAAA,OAAK;cACvD,GAAG9F,MAAM;cACTqF,QAAQ,EAAErF,MAAM,CAACqF,QAAQ,IAAIrF,MAAM,CAACsF,WAAW,IAAI,WAAAO,gBAAA,GAAU7F,MAAM,CAACH,OAAO,cAAAgG,gBAAA,uBAAdA,gBAAA,CAAgBN,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;cACxFD,WAAW,EAAEtF,MAAM,CAACsF,WAAW,IAAItF,MAAM,CAACqF,QAAQ,IAAI,WAAAS,gBAAA,GAAU9F,MAAM,CAACH,OAAO,cAAAiG,gBAAA,uBAAdA,gBAAA,CAAgBP,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3F,CAAC;UAAA,CAAC,CAAC;UAEHjH,uBAAuB,CAAC2G,eAAe,CAAC;QAC1C;QAEA7G,cAAc,CAACsG,SAAS,CAACgB,OAAO,CAAC;MACnC;;MAEA;MACA,IAAIhB,SAAS,CAACqB,kBAAkB,EAAE;QAChCrF,uBAAuB,CAACgE,SAAS,CAACqB,kBAAkB,EAAE,WAAW,CAAC;MACpE;IACF,CAAC,CAAC;;IAEF;IACAhK,aAAa,CAACmI,EAAE,CAAC,gBAAgB,EAAG8B,QAAQ,IAAK;MAC/C;MACA;MACA;IAAA,CACD,CAAC;;IAEF;IACAjK,aAAa,CAACmI,EAAE,CAAC,eAAe,EAAG+B,IAAI,IAAK;MAC1C;;MAEA;MACAzH,eAAe,CAAC,IAAI,CAAC;MACrB4C,UAAU,CAAC,MAAM5C,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MAC9C;MACA;IACF,CAAC,CAAC;;IAEF;IACAzC,aAAa,CAACmI,EAAE,CAAC,kBAAkB,EAAG+B,IAAI,IAAK;MAC7C5F,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE2F,IAAI,CAAC;;MAE9D;MACA,MAAMC,SAAS,GAAG,OAAOD,IAAI,KAAK,SAAS,GAAGA,IAAI,GAAGA,IAAI,CAACC,SAAS;MACnE,MAAMC,OAAO,GAAG,OAAOF,IAAI,KAAK,QAAQ,GAAGA,IAAI,CAACE,OAAO,GAAG,IAAI;;MAE9D;MACA;MACA9I,mBAAmB,CAAC6I,SAAS,CAAC;;MAE9B;MACA,IAAI,CAACA,SAAS,IAAI7G,kBAAkB,CAACM,OAAO,EAAE;QAC5CU,OAAO,CAACC,GAAG,CAAC,0FAA0F,CAAC;MACzG;MAEA,IAAI6F,OAAO,EAAE;QACX9F,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE6F,OAAO,CAAC;MAC3D;IACF,CAAC,CAAC;;IAEF;IACApK,aAAa,CAACmI,EAAE,CAAC,QAAQ,EAAGvD,UAAU,IAAK;MACzCN,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEK,UAAU,CAAC;MACpDN,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEnC,WAAW,CAAC;MACvEkC,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEjC,oBAAoB,CAAC;MACnFhB,mBAAmB,CAAC,KAAK,CAAC;MAC1BI,oBAAoB,CAAC,IAAI,CAAC;;MAE1B;MACAiD,uBAAuB,CAACC,UAAU,EAAE,cAAc,CAAC;IACrD,CAAC,CAAC;;IAEF;IACA5E,aAAa,CAACmI,EAAE,CAAC,oBAAoB,EAAGvD,UAAU,IAAK;MACrDN,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEK,UAAU,CAAC;MAC9DtD,mBAAmB,CAAC,KAAK,CAAC;;MAE1B;MACAqD,uBAAuB,CAACC,UAAU,EAAE,qBAAqB,CAAC;IAC5D,CAAC,CAAC;;IAEF;IACA5E,aAAa,CAACmI,EAAE,CAAC,YAAY,EAAGkC,SAAS,IAAK;MAC5C/F,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE8F,SAAS,CAAC;MACvD/F,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;;MAEpD;MACAzD,gBAAgB,CAACuJ,SAAS,CAACxJ,aAAa,CAAC;MACzCD,eAAe,CAACyJ,SAAS,CAAC7D,WAAW,CAAC;;MAEtC;MACAzE,kBAAkB,CAAC,KAAK,CAAC;MACzBT,mBAAmB,CAAC,KAAK,CAAC;MAC1BE,iBAAiB,CAAC,IAAI,CAAC;MACvBJ,yBAAyB,CAAC,KAAK,CAAC;MAChCS,qBAAqB,CAAC,KAAK,CAAC;MAC5BH,oBAAoB,CAAC,KAAK,CAAC;MAC3BC,2BAA2B,CAAC,KAAK,CAAC;MAClC1B,iBAAiB,CAACyI,KAAK,CAAC,CAAC;;MAEzB;MACArG,cAAc,CAAC,EAAE,CAAC;MAClB;MACAgD,UAAU,CAAC,MAAM;QACff,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;QAC1EhC,uBAAuB,CAAC,EAAE,CAAC;MAC7B,CAAC,EAAE,IAAI,CAAC;;MAER;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACX+B,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MACzDvE,aAAa,CAACsK,GAAG,CAAC,OAAO,CAAC;MAC1BtK,aAAa,CAACsK,GAAG,CAAC,UAAU,CAAC;MAC7BtK,aAAa,CAACsK,GAAG,CAAC,YAAY,CAAC;MAC/BtK,aAAa,CAACsK,GAAG,CAAC,WAAW,CAAC;MAC9BtK,aAAa,CAACsK,GAAG,CAAC,gBAAgB,CAAC;MACnCtK,aAAa,CAACsK,GAAG,CAAC,eAAe,CAAC;MAClCtK,aAAa,CAACsK,GAAG,CAAC,kBAAkB,CAAC;MACrCtK,aAAa,CAACsK,GAAG,CAAC,QAAQ,CAAC;MAC3BtK,aAAa,CAACsK,GAAG,CAAC,oBAAoB,CAAC;MACvC;MACAtK,aAAa,CAACuK,UAAU,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAAC5J,YAAY,EAAEgE,uBAAuB,CAAC,CAAC,CAAC,CAAC;;EAE7C,MAAM6F,eAAe,GAAIC,CAAC,IAAK;IAC7B,MAAMC,UAAU,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;;IAEjC;IACA,IAAIF,UAAU,KAAK,EAAE,IAAIA,UAAU,KAAK,GAAG,IAAIA,UAAU,KAAK,GAAG,IAAI,eAAe,CAACG,IAAI,CAACH,UAAU,CAAC,EAAE;MACrG;MACA,MAAMI,eAAe,GAAGJ,UAAU,CAACK,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;;MAEpD;MACA,IAAID,eAAe,KAAK,EAAE,IAAIA,eAAe,KAAK,GAAG,EAAE;QACrD5J,YAAY,CAACwJ,UAAU,CAAC,CAAC,CAAC;QAC1B;MACF;;MAEA;MACA,MAAMM,YAAY,GAAGC,UAAU,CAACH,eAAe,CAAC;MAChD,IAAI,CAACI,KAAK,CAACF,YAAY,CAAC,IAAIA,YAAY,IAAI,EAAE,EAAE;QAC9C9J,YAAY,CAAC4J,eAAe,CAAC,CAAC,CAAC;MACjC;IACF;EACF,CAAC;EAED,MAAMK,eAAe,GAAIC,GAAG,IAAK;IAC/B7F,cAAc,CAAC,OAAO,CAAC;IACvBvE,YAAY,CAACoK,GAAG,CAAC;EACnB,CAAC;;EAED;EACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA,IAAI9J,cAAc,IAAIJ,sBAAsB,EAAE;MAC5CqE,SAAS,CAAC,gEAAgE,CAAC;MAC3E;IACF;IAEA,IAAI,CAAC3B,WAAW,EAAE;MAChB2B,SAAS,CAAC,mCAAmC,CAAC;MAC9C;IACF;;IAEA;IACA,MAAM8F,mBAAmB,GAAGrK,SAAS,CAACsK,QAAQ,CAAC,CAAC,CAACR,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IAClE,MAAMS,gBAAgB,GAAGP,UAAU,CAACK,mBAAmB,CAAC;IAExD,IAAIJ,KAAK,CAACM,gBAAgB,CAAC,IAAIA,gBAAgB,IAAI,CAAC,EAAE;MACpDhG,SAAS,CAAC,kCAAkC,CAAC;MAC7C;IACF;IAEA,IAAI;MACFD,cAAc,CAAC,QAAQ,CAAC;;MAExB;MACA5C,kBAAkB,CAAC;QACjBC,SAAS,EAAE,IAAI;QACf3B,SAAS,EAAEuK,gBAAgB;QAC3B3I,SAAS,EAAE4B,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC,CAAC;MAEF,MAAMsB,QAAQ,CAACwF,gBAAgB,CAAC;;MAEhC;MACAlH,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;MAExC;MACArD,YAAY,CAAC,GAAG,CAAC;MAEjBqE,cAAc,CAAC,SAAS,CAAC;MACzBC,SAAS,CAAC,YAAYgG,gBAAgB,CAACC,OAAO,CAAC,CAAC,CAAC,2BAA2B,CAAC;IAC/E,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdpH,OAAO,CAACoH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CnG,cAAc,CAAC,OAAO,CAAC;MACvBC,SAAS,CAAC,0BAA0BkG,KAAK,CAACtB,OAAO,EAAE,CAAC;;MAEpD;MACAzH,kBAAkB,CAAC;QACjBC,SAAS,EAAE,KAAK;QAChB3B,SAAS,EAAE,CAAC;QACZ4B,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACEzC,OAAA;IAAKuL,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBxL,OAAA;MAAKuL,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAE5BxL,OAAA;QAAKuL,SAAS,EAAC,cAAc;QAAAC,QAAA,EAC1B7K,SAAS,KAAK,SAAS,gBACtBX,OAAA;UAAKuL,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChCxL,OAAA,CAACrB,MAAM;YACLmD,eAAe,EAAEA,eAAgB;YACjC2J,mBAAmB,EAAEA,CAAA,KAAM5J,oBAAoB,CAAC,IAAI;UAAE;YAAA6J,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvD,CAAC,eACF7L,OAAA,CAACvB,aAAa;YAAAiN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC,GACJlL,SAAS,KAAK,WAAW,gBAC3BX,OAAA;UAAKuL,SAAS,EAAC,qBAAqB;UAAAC,QAAA,gBAClCxL,OAAA,CAACrB,MAAM;YACLmD,eAAe,EAAEA,eAAgB;YACjC2J,mBAAmB,EAAEA,CAAA,KAAM5J,oBAAoB,CAAC,IAAI;UAAE;YAAA6J,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvD,CAAC,eACF7L,OAAA,CAAClB,cAAc;YAAA4M,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,gBAEN7L,OAAA;UAAKuL,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChCxL,OAAA,CAACrB,MAAM;YACLmD,eAAe,EAAEA,eAAgB;YACjC2J,mBAAmB,EAAEA,CAAA,KAAM5J,oBAAoB,CAAC,IAAI;UAAE;YAAA6J,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvD,CAAC,eACN7L,OAAA,CAAAE,SAAA;YAAAsL,QAAA,gBAEAxL,OAAA;cAAKuL,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9BxL,OAAA;gBAAKuL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,gBAChCxL,OAAA;kBACE8L,IAAI,EAAC,MAAM;kBACXP,SAAS,EAAC,kBAAkB;kBAC5Bf,KAAK,EAAE3J,SAAU;kBACjBkL,QAAQ,EAAE3B,eAAgB;kBAC1B4B,WAAW,EAAC,OAAO;kBACnBC,SAAS,EAAC;gBAAS;kBAAAP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACpB,CAAC,eACF7L,OAAA;kBAAQuL,SAAS,EAAC,mBAAmB;kBAACW,OAAO,EAAEA,CAAA,KAAMpL,YAAY,CAACyG,IAAI,IAAI;oBACxE,MAAM4E,YAAY,GAAGtB,UAAU,CAACtD,IAAI,CAAC,IAAI,CAAC;oBAC1C,OAAOxD,IAAI,CAACqI,GAAG,CAACD,YAAY,GAAG,GAAG,EAAE,EAAE,CAAC,CAACd,OAAO,CAAC,CAAC,CAAC;kBACpD,CAAC,CAAE;kBAAAG,QAAA,EAAC;gBAEV;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eAGN7L,OAAA;gBAAKuL,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,gBAC9BxL,OAAA;kBAAKuL,SAAS,EAAC,eAAe;kBAAAC,QAAA,EAAC;gBAAO;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC5C7L,OAAA;kBAAKuL,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAC5B/H,WAAW,GAAG,GAAG,CAAC6B,aAAa,CAAC+G,WAAW,IAAI,CAAC,EAAEhB,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,UAAU,eAC5ErL,OAAA;oBAAMuL,SAAS,EAAC,gBAAgB;oBAAAC,QAAA,EAAC;kBAAG;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACxC,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eAEV7L,OAAA;gBACMuL,SAAS,EAAC,YAAY;gBACtBW,OAAO,EAAEjB,cAAe;gBACxBqB,QAAQ,EAAE3G,YAAY,IAAI,CAAClC,WAAW,IAAItC,cAAc,IAAIJ,sBAAuB;gBAAAyK,QAAA,EAElFrK,cAAc,IAAIJ,sBAAsB,GAAG,qCAAqC,GAChF4E,YAAY,GAAG,YAAY,GAAG;cAAK;gBAAA+F,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC,eAGF7L,OAAA;cAAKuL,SAAS,EAAC,uBAAuB;cAAAC,QAAA,gBACpCxL,OAAA;gBAAKuL,SAAS,EAAC,wBAAwB;gBAAAC,QAAA,gBACrCxL,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,gBACzBxL,OAAA,CAAChB,OAAO;oBAACuN,IAAI,EAAE,EAAG;oBAAChB,SAAS,EAAC;kBAAgB;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAC,EAC/CjF,YAAY,CAACyE,OAAO,CAAC,CAAC,CAAC;gBAAA;kBAAAK,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrB,CAAC,eACN7L,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,EAAC;gBAAa;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5C,CAAC,eACN7L,OAAA;gBAAKuL,SAAS,EAAC,WAAW;gBAAAC,QAAA,gBACxBxL,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,gBACzBxL,OAAA,CAAChB,OAAO;oBAACuN,IAAI,EAAE,EAAG;oBAAChB,SAAS,EAAC;kBAAgB;oBAAAG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAC,EAC/C9E,YAAY,CAACsE,OAAO,CAAC,CAAC,CAAC;gBAAA;kBAAAK,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrB,CAAC,eACN7L,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,EAAC;gBAAU;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzC,CAAC,eACN7L,OAAA;gBAAKuL,SAAS,EAAC,uBAAuB;gBAAAC,QAAA,gBACpCxL,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,GAAErE,aAAa,CAACkE,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;gBAAA;kBAAAK,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC7D7L,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,EAAC;gBAAW;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1C,CAAC,eACN7L,OAAA;gBAAKuL,SAAS,EAAC,WAAW;gBAAAC,QAAA,gBACxBxL,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,GACxBzH,IAAI,CAACyI,KAAK,CAAC,CAAC/L,aAAa,IAAI,CAAC,IAAI,EAAE,CAAC,EAAC,GAAC,EAAC,CAAC,CAACA,aAAa,IAAI,CAAC,IAAI,EAAE,EAAE0K,QAAQ,CAAC,CAAC,CAACsB,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;gBAAA;kBAAAf,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7F,CAAC,eACN7L,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,EAAC;gBAAc;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7C,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eAGN7L,OAAA;cAAKuL,SAAS,EAAC,0BAA0B;cAAAC,QAAA,gBACvCxL,OAAA;gBAAKuL,SAAS,EAAE,mBACb9K,aAAa,KAAK,CAAC,IAAIQ,gBAAgB,IAAME,cAAc,IAAI,CAACK,kBAAmB,GAAG,WAAW,GAClGA,kBAAkB,GAAG,QAAQ,GAAG,EAAE,EACjC;gBAAAgK,QAAA,eACDxL,OAAA;kBAAAwL,QAAA,EACI/K,aAAa,KAAK,CAAC,IAAIQ,gBAAgB,IAAME,cAAc,IAAI,CAACK,kBAAmB,GACnF,sBAAsB,GACtBA,kBAAkB,IAAIL,cAAc,GACpC,cAAcA,cAAc,CAAC+H,QAAQ,IAAI/H,cAAc,CAACgI,WAAW,IAAIhI,cAAc,CAACuL,MAAM,IAAI,QAAQ,EAAE,GAC1G,YAAY1K,WAAW,CAACuB,MAAM,GAAG,CAAC,GAAGvB,WAAW,CAACuB,MAAM,GAAGrB,oBAAoB,CAACqB,MAAM;gBAAG;kBAAAmI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAExF;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACF,CAAC,eAGN7L,OAAA,CAACnB,cAAc;gBACb8N,OAAO,EAAE,CAAC,MAAM;kBACd;kBACA,MAAMC,aAAa,GAAIzL,cAAc,IAAIF,gBAAgB,GACpCiB,oBAAoB,CAACqB,MAAM,GAAG,CAAC,GAAGrB,oBAAoB,GAAGF,WAAW,GACpEA,WAAW,CAACuB,MAAM,GAAG,CAAC,GAAGvB,WAAW,GAAG,EAAE;;kBAE9D;kBACA,OAAO,CACL,GAAG4K,aAAa,EAChB,GAAGpD,KAAK,CAACqD,IAAI,CAAC;oBAAEtJ,MAAM,EAAEQ,IAAI,CAAC+I,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGF,aAAa,CAACrJ,MAAM;kBAAE,CAAC,EAAE,MAAM,IAAI,CAAC,CAC7E;gBACH,CAAC,EAAE,CAAE;gBACLpC,cAAc,EAAEA,cAAe;gBAC/B4L,UAAU,EAAGtM,aAAa,KAAK,CAAC,IAAIQ,gBAAgB,IAAME,cAAc,IAAI,CAACK,kBAAoB;gBACjGwL,cAAc,EAAEA,CAAA,KAAM;kBACpB9I,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;kBAC/DD,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;kBAC9E;gBACF;cAAE;gBAAAuH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eAGN7L,OAAA;cAAKuL,SAAS,EAAC,sBAAsB;cAAAC,QAAA,gBACnCxL,OAAA;gBAAKuL,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,gBAClCxL,OAAA;kBAAAwL,QAAA,EAAI;gBAAkB;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eAC3B7L,OAAA;kBAAKuL,SAAS,EAAC,YAAY;kBAAAC,QAAA,eACzBxL,OAAA;oBAAAwL,QAAA,GAAM,GAAC,EAACjL,YAAY;kBAAA;oBAAAmL,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzB,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eAEN7L,OAAA;gBAAKuL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAC/B,CAAC,MAAM;kBACN,MAAMoB,aAAa,GAAIzL,cAAc,IAAIF,gBAAgB,GACpCiB,oBAAoB,CAACqB,MAAM,GAAG,CAAC,GAAGrB,oBAAoB,GAAGF,WAAW,GACpEA,WAAW,CAACuB,MAAM,GAAG,CAAC,GAAGvB,WAAW,GAAG,EAAE;kBAE/C,OAAO4K,aAAa,CAAC7D,GAAG,CAAC,CAAClF,MAAM,EAAEoJ,KAAK,KAAK;oBACxD,MAAMpM,SAAS,GAAGgK,UAAU,CAAChH,MAAM,CAACI,MAAM,IAAI,CAAC,CAAC;oBAChD,MAAMiJ,cAAc,GAAGrC,UAAU,CAACjE,YAAY,IAAI,CAAC,CAAC;oBACpD,MAAMuG,MAAM,GAAGD,cAAc,GAAG,CAAC,GAAG,CAAErM,SAAS,GAAGqM,cAAc,GAAI,GAAG,EAAE7B,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM;oBAC5F,MAAM+B,QAAQ,GAAG,CAACvM,SAAS,GAAG,GAAG,EAAEwK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;;oBAEhD,oBACErL,OAAA;sBAAwCuL,SAAS,EAAC,kBAAkB;sBAAAC,QAAA,gBAClExL,OAAA;wBAAKuL,SAAS,EAAC,oBAAoB;wBAAAC,QAAA,gBACjCxL,OAAA;0BAAKuL,SAAS,EAAC,aAAa;0BAAAC,QAAA,eAC1BxL,OAAA,CAACP,KAAK;4BAAC8M,IAAI,EAAE;0BAAG;4BAAAb,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OAAE;wBAAC;0BAAAH,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAChB,CAAC,eACN7L,OAAA;0BAAKuL,SAAS,EAAC,cAAc;0BAAAC,QAAA,EAAC;wBAAC;0BAAAE,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAK,CAAC;sBAAA;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAClC,CAAC,eAEN7L,OAAA;wBAAKuL,SAAS,EAAC,kBAAkB;wBAAAC,QAAA,gBAC/BxL,OAAA;0BAAKuL,SAAS,EAAC,sBAAsB;0BAAAC,QAAA,EAClC3H,MAAM,CAACqF,QAAQ,IAAIrF,MAAM,CAACsF,WAAW,IAAItF,MAAM,CAAC6I,MAAM,IAAI,UAAU7I,MAAM,CAACH,OAAO,CAAC0F,KAAK,CAAC,CAAC,CAAC,CAAC;wBAAE;0BAAAsC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAC5F,CAAC,eACN7L,OAAA;0BAAKuL,SAAS,EAAC,oBAAoB;0BAAAC,QAAA,gBACjCxL,OAAA,CAAChB,OAAO;4BAACuN,IAAI,EAAE,EAAG;4BAAChB,SAAS,EAAC;0BAAsB;4BAAAG,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OAAE,CAAC,eACtD7L,OAAA;4BAAAwL,QAAA,EAAO3K,SAAS,CAACwK,OAAO,CAAC,CAAC;0BAAC;4BAAAK,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OAAO,CAAC,eACnC7L,OAAA;4BAAKuL,SAAS,EAAC,iBAAiB;4BAAAC,QAAA,GAAC,IAAE,EAAC4B,QAAQ;0BAAA;4BAAA1B,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OAAM,CAAC;wBAAA;0BAAAH,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAChD,CAAC;sBAAA;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OACH,CAAC,eAEN7L,OAAA;wBAAKuL,SAAS,EAAC,oBAAoB;wBAAAC,QAAA,gBACjCxL,OAAA;0BAAKuL,SAAS,EAAC,cAAc;0BAAAC,QAAA,gBAC3BxL,OAAA,CAACN,MAAM;4BAAC6M,IAAI,EAAE;0BAAG;4BAAAb,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OAAE,CAAC,eACpB7L,OAAA;4BAAAwL,QAAA,EAAM;0BAAM;4BAAAE,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OAAM,CAAC;wBAAA;0BAAAH,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAChB,CAAC,eACN7L,OAAA;0BAAKuL,SAAS,EAAC,cAAc;0BAAAC,QAAA,GAAE2B,MAAM,EAAC,GAAC;wBAAA;0BAAAzB,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAK,CAAC;sBAAA;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAC1C,CAAC;oBAAA,GAzBE,GAAGhI,MAAM,CAACH,OAAO,IAAIuJ,KAAK,EAAE;sBAAAvB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OA0BjC,CAAC;kBAEV,CAAC,CAAC;gBACJ,CAAC,EAAE,CAAC,EAEH,CAAC,MAAM;kBACN,MAAMe,aAAa,GAAIzL,cAAc,IAAIF,gBAAgB,GACpCiB,oBAAoB,CAACqB,MAAM,GAAG,CAAC,GAAGrB,oBAAoB,GAAGF,WAAW,GACpEA,WAAW,CAACuB,MAAM,GAAG,CAAC,GAAGvB,WAAW,GAAG,EAAE;kBAE9D,IAAI4K,aAAa,CAACrJ,MAAM,KAAK,CAAC,EAAE;oBAC9B,oBACEvD,OAAA;sBAAKuL,SAAS,EAAC,mBAAmB;sBAAAC,QAAA,gBAChCxL,OAAA;wBAAKuL,SAAS,EAAC,YAAY;wBAAAC,QAAA,eACzBxL,OAAA,CAACL,KAAK;0BAAC4M,IAAI,EAAE;wBAAG;0BAAAb,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAE;sBAAC;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAChB,CAAC,eACN7L,OAAA;wBAAKuL,SAAS,EAAC,YAAY;wBAAAC,QAAA,EAAC;sBAAW;wBAAAE,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK,CAAC,eAC7C7L,OAAA;wBAAKuL,SAAS,EAAC,eAAe;wBAAAC,QAAA,EAAC;sBAA4B;wBAAAE,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK,CAAC;oBAAA;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC9D,CAAC;kBAEV;kBACA,OAAO,IAAI;gBACb,CAAC,EAAE,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACD,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eAGN7L,OAAA,CAACpB,aAAa;cAAA8M,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA,eAEX,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAGN7L,OAAA;QAAKuL,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC5BxL,OAAA;UAAKuL,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3BxL,OAAA;YACEuL,SAAS,EAAE,eAAe5K,SAAS,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAG;YACpEuL,OAAO,EAAEA,CAAA,KAAMtL,YAAY,CAAC,SAAS,CAAE;YAAA4K,QAAA,gBAEvCxL,OAAA;cAAKuL,SAAS,EAAC,aAAa;cAAAC,QAAA,eAACxL,OAAA,CAACZ,UAAU;gBAACmN,IAAI,EAAE;cAAG;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC3D7L,OAAA;cAAKuL,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAC;YAAO;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC,eAET7L,OAAA;YACEuL,SAAS,EAAE,eAAe5K,SAAS,KAAK,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAG;YACpEuL,OAAO,EAAEA,CAAA,KAAMtL,YAAY,CAAC,SAAS,CAAE;YAAA4K,QAAA,gBAEvCxL,OAAA;cAAKuL,SAAS,EAAC,aAAa;cAAAC,QAAA,eAACxL,OAAA,CAACX,IAAI;gBAACkN,IAAI,EAAE;cAAG;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACrD7L,OAAA;cAAKuL,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAC;YAAO;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC,eAET7L,OAAA;YACEuL,SAAS,EAAE,eAAe5K,SAAS,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAE,EAAG;YACtEuL,OAAO,EAAEA,CAAA,KAAMtL,YAAY,CAAC,WAAW,CAAE;YAAA4K,QAAA,gBAEzCxL,OAAA;cAAKuL,SAAS,EAAC,aAAa;cAAAC,QAAA,eAACxL,OAAA,CAACR,MAAM;gBAAC+M,IAAI,EAAE;cAAG;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACvD7L,OAAA;cAAKuL,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAC;YAAS;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAGLnG,iBAAiB,IAAI,CAACvE,cAAc,IAAI,CAACJ,sBAAsB,iBAC9Df,OAAA;MAAKuL,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BxL,OAAA;QAAKuL,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAACxL,OAAA,CAACV,OAAO;UAACiN,IAAI,EAAE,EAAG;UAAChB,SAAS,EAAC;QAAc;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrF7L,OAAA;QAAAwL,QAAA,EAAM;MAAwB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACN,eAGD7L,OAAA,CAACtB,eAAe;MAACkB,aAAa,EAAEA;IAAc;MAAA8L,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGjD7L,OAAA,CAACjB,aAAa;MACZsO,SAAS,EAAEzL,iBAAkB;MAC7BE,eAAe,EAAEA,eAAgB;MACjCwL,aAAa,EAAGpE,QAAQ,IAAK;QAC3BnH,kBAAkB,CAACmH,QAAQ,CAAC;QAC5BrH,oBAAoB,CAAC,KAAK,CAAC;QAC3B;QACA0L,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;MAC1B;IAAE;MAAA/B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;;AAEA;AAAAxL,EAAA,CAl9BSD,UAAU;EAAA,QAEjBjB,2BAA2B,EAyIkCF,iBAAiB,EAY1EC,kBAAkB;AAAA;AAAAwO,EAAA,GAvJftN,UAAU;AAm9BnB,SAASuN,GAAGA,CAAA,EAAG;EACb,oBACE3N,OAAA,CAAC1B,oBAAoB;IACnB6B,WAAW,EAAEA,WAAY;IACzByN,aAAa,EAAE9N,SAAS,CAAC8N,aAAc;IACvCC,QAAQ,EAAE/N,SAAS,CAAC+N,QAAS;IAC7BC,iBAAiB,EAAEhO,SAAS,CAACgO,iBAAkB;IAC/CC,oBAAoB,EAAEjO,SAAS,CAACiO,oBAAqB;IAAAvC,QAAA,eAErDxL,OAAA,CAACI,UAAU;MAAAsL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAE3B;AAACmC,GAAA,GAZQL,GAAG;AAcZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}